[
  {
    "chunk_id": 1,
    "text": "To open the HTTP/2 Server agent configuration dialog from a workflow configuration, you can do either one of the following: double-click the agent icon select the agent icon and click the Edit button The Agent Configuration consists of the following tabs: 1 Server Tab 2 Overload Protection Tab 3 OpenAPI Tab 4 5G Tab 5 Authentication Tab Server Tab Open HTTP/2 Server Agent Configuration - Server tab The Server tab contains the following settings: Setting Description Setting Description Settings Use SSL Select this option to use the SSL. Security Profile Enable 2-way Authentication If you have selected to use SSL, you can select this option to enable 2-way Authentication. If this option is selected, the Security Profile used must be configured using Java Truststore. Additional Certificate Validation When enabled, the agent will perform certificate chain validation and revocation status check. You must configure the Certificate Revocation List (CRL)file path or the Certificate Revocation List Distribution Points (CRLDP) when this is enabled. To enable this option, 2-way Authentication must be enabled first. CRL File Path Path to the Certificate Revocation List (CRL) file that has been downloaded locally. Enable CRLDP will be disabled when configuring the file path. Enable CRLDP Enable Certificate Revocation List Distribution Points (CRLDP) extension support. CRL File Path will be greyed out when enabling CRLDP. Host Enter the IP address or hostname that you want the agent to bind to. Port Enter the port number you want the agent to bind to. Request Handling Default connection concurrent streams Fundamentally HTTP/2 is designed to make it easy for a client to send multiple parallel requests. Each request is entitled to a thread and if blocking APIs are used, then there are many ways a client can cause that thread to block. To handle the resource problem this can cause, the setting Default connection concurrent streams can be used. The setting specifies the maximum number of concurrently open streams allowed per single HTTP/2 connection. The default value uses in Jetty HTTP/2 server is 128. Larger values increase parallelism, but cost a memory commitment. Route Error to APL Select this option if you want to route HTTP errors to APL for custom handling. For more information on how to handle the error using APL, refer to Route Error to APL . Use Context Cache Select this option if you need to route HttpRequestCycle udrs to workflows running on different picos. There will be one entry per http request received by the http2 server agent. The cache can be configured with maximum size and maximum time an entry can exist in the cache. Max Cache Size Maximum number of http contexts that will be temporally saved on pico that the workflow is running on. A cache entry is removed when the server sends a http response or when a cache timeout has happened for this specific entry. Max Cache TTL(ms) Maximum time an entry can be saved in the cache. Important: if the time needed for processing a request is greater than Max Cache TTL - a response may not be sent back. Server Timeout (sec) The period in seconds before which the HTTP/2 Server has to reply to a request. That is, this is the period within which a server has to process a request and send a response to a client. If the time limit is reached, an error response with a status code of 500 will be sent. Responses Default Charset Select the character set you want to use as default character set. UTF-8 is preselected. This character set will be used if the character set requested by Accept-Charset is not found in system. GZIP Compression Level If gzip is requested, then the response will be be gzipped with the compression level you specify in this field, 1-9. Route Error to APL When enabling Route Error to APL, you will send the request over as part of the RequestCycle UDR where you will then be able to use the Analysis agent to customize your own response. The example shown below has an If statement to catch any requests with errors by checking for isError that are set to True . The APL code will then go on to populate the response and route it back to the HTTP/2 Server agent. import ultra.openapi.Test_5G.TS29510_Nnrf_NFDiscovery; consume { http.RequestCycle cycleUdr = (http.RequestCycle) input; debug(\"input from client n\" + cycleUdr); ProblemDetails problemDetails = udrCreate(ProblemDetails); http.Response response = udrCreate(http.Response); if (cycleUdr.isError) { // cycleUdr.isError will be true if any errors is encountered while processing the request list<string> headers = listCreate(string); listAdd(headers, \"application/problem+json\"); mapSet(response.headers, \"Content-Type\", headers); problemDetails.title = \"Request Error\"; problemDetails.cause = cycleUdr.errorMessages[0]; // cycleUdr.errorMessages is a list containing error messages set from the error encountered problemDetails.status = cycleUdr.errorStatusCode; // cycleUdr.errorStatusCode contains the status code of the error encountered response.openAPIUDR = problemDetails; response.statusCode = cycleUdr.errorStatusCode; } cycleUdr.response = response; debug(\"after apl logic n\" + cycleUdr); udrRoute(\"to_server\", cycleUdr); Overload Protection Tab Open HTTP/2 Server Agent Configuration - Overload Protection tab The Overload Protection tab controls overload protection and contains the following settings: Setting Description Setting Description Enable Overload Protection Select this option to enable overload protection. Number of Requests If you have selected enable overload protection, enter the maximum number of requests that are allowed to be sent during the time specified in Average Period (sec) . When this number of requests has been reached, further requests will be blocked until the time specified in Wait Duration (sec) has passed, then a retry will be attempted. Period (sec) Enter the time in seconds for which the number of requests should be counted. Wait Before Retry (sec) Enter the number of seconds to wait before attempting to retry a request. OpenAPI Tab Open HTTP/2 Server Agent Configuration - OpenAPI tab The OpenAPI tab contains the following settings: Setting Description Setting Description OpenAPI Use OpenAPI Profile Select this option if you want the agent to use the OpenAPI profile(s). OpenAPI Profile Browse and select the profiles to be used. This field is enabled when the Use OpenAPI Profile option is selected. Click Add to browse for the available OpenAPI profiles. Caution! There are no limits to the number of profiles users can select. However, by selecting a large number of OpenAPI profiles will have significant impact on the overall performance of the workflow. Enable Validation Select this option if you want to validate the OpenAPI profile. Warning! Turning this option ON will have a very significant performance impact on the overall performance of the flow. When validation is enabled, each payload will be validated against the Open API schema, an operation that can be very resource-intensive. We recommend enabling this setting only during development and testing, and disabling it in a stable production environment. Note! Strict validation is applied against the OpenAPI specification due to the upgrade of third party libraries. For Example, if the response contains the body but the schema doesn't expect the response to contain body then it will cause validation failure. Refer to this link for further information https://bitbucket.org/atlassian/swagger-request-validator/issues/246/validator-does-not-check-a-response-body Override Error Response Override Error Response on Server Shutdown Select this option to enable the customization of the HTTP response for when a request to the server is received upon the server being terminated. Override Error Response on Server Overload Select this option to enable the customization of the HTTP response for when a request to the server is received upon the server being overloaded. Note! Overload protection should be enabled to utilize this feature. Status Code The HTTP error code for the error response. The default error code set is 503 for server shutdown and 429 for server overload. Content Type Enter the media type to be used as part of the HTTP header for the response. The default media type is \"application/problem+json\". UDR Type Browse for the UDR that will be populated as part of the HTTP response message. UDR Field The fields in the selected UDR Type will be shown in this column. Type The data type for the each of the UDR fields will be shown here. supports the following data type: String BigInt Boolean Int Value Enter a value that conforms to the data type of the UDR field. The value will then be parsed into the HTTP response when the error is triggered. 5G Tab Open HTTP/2 Server Agent Configuration - 5G tab The 5G tab contains the following settings: Setting Description Setting Description 5G Use 5G Profile Select this option if you want the agent to use a 5G profile. 5G Profile Browse and select the profile to be used. This field is enabled when the Use 5G Profile option is selected. NRF Address Settings Primary NRF Enter one or more primary NRF (NF Repository Function) address in this list. Secondary NRF Enter one or more secondary NRF (NF Repository Function) address in this list. It is optional to have secondary NRF addresses in any primary NRF address. The secondary NRF addresses serve as alternative connections when the heartbeat with the primary NRF address is not established. This list displays the secondary NRF addresses based on the selected Primary NRF. Additional Settings Enable Fall Back (Reconnect to primary address when it is available) Select this option to have the agent reconnect to the primary NRF address from the secondary address. The agent will send a heartbeat repeatedly to the primary NRF address to determine its availability. Enable Registration Retry (Retry when NRF addresses failed to register) Select this option to have the agent retry to register a failed address before connecting to the next address. The agent will attempt to register the failed address based on the configured count and interval before attempting to register the next available address. Retry Count Enter the number of retries for failed address. The maximum retry count is 5. Retry Interval (secs) Enter the time interval in seconds, between retries. The maximum retry interval is 99 seconds. Examples The following are examples of how multiple NRF addresses could be configured. Example - Configuring Multiple Primary NRF Addresses Use the primary and secondary NRF addresses below as reference to the following examples. Primary NRF Address (P1) contains a Secondary NRF Address (S1) (P1) http://localhost:8000 contains (S1) http://localhost:8001 Primary Address (P2) (P2) http://localhost:9000 Example 1 - Successful connection to all primary addresses Address P1 S1 P2 Address P1 S1 P2 Availability Result Connected Connected Example 2 - Connect to secondary address when primary address is unavailable Address P1 S1 P2 Address P1 S1 P2 Availability Result Connected Connected Example 3 - Connect to all remaining primary addresses when any of the primary and secondary addresses are unavailable Address P1 S1 P2 Address P1 S1 P2 Availability Result Connected Note! When the primary (P1) and secondary (S1) addresses are unavailable, the system will not attempt to reconnect. Users are required to re-initiate the workflow to reconnect. Example 4 - All primary and secondary addresses are unavailable upon initiating the workflow Address P1 S1 P2 Address P1 S1 P2 Availability Result The workflow is aborted. Note! Configuring multiple primary and secondary NRF addresses in a workflow in the legacy desktop When multiple primary NRF addresses are used in a workflow, the workflow table in legacy desktop shows the primary and secondary NRF addresses in the following manner: Open Each primary NRF address and its secondary NRF addresses are displayed in corresponding to the respective row. In the example above, the first primary NRF address contains three secondary NRF addresses. These pairs are displayed in the first row of each table. While each primary NRF address is listed vertically in the table, secondary NRF addresses are listed within the same row, separated by commas. Proxy Support If a proxy server is needed to reach NRF servers please look at HTTP Proxy Support in order to configure the proxy. Authentication Tab The Authentication tab contains settings for the following Authentication types: Static Dynamic Below are the supported algorithm for OAuth 2.0: ES256 ES384 ES512 RS256 RS384 RS512 Static Open Selecting Static will provide the following settings: Setting Description Setting Description Use Token Authentication Select this option if you want to use token authentication. Access Token Required Select this option if you want the JSON Web Token (JWT) access token to be verified against the public key. Public Key Public key used for decoding JSON Web Token (JWT) access token. When setting the Authentication Level of the workflow table, the different levels represent different settings as shown below: Authorization Level Use Token Authentication Access Token Required Authorization Level Use Token Authentication Access Token Required None No No Optional Yes No Required Yes Yes Dynamic Open Selecting Dynamic will provide the following settings: Setting Description Setting Description Settings JWKS URI This is the JSON Web Key Set (JWKS) endpoint of an OpenID Connect (OIDC) server that returns JWKS as JSON objects and MUST use the https scheme. For example, https://<server_domain>/.well-known/jwks.json Note! Access token received in response MUST contain the following. If the access token does not have any of these, it will result in an error: Header: typ, alg, kid Payload: iss, sub, jti, iat, exp, client_id, scope Timeout Request Timeout (sec) Timeout period in seconds for the request to the OpenID Connect (OIDC) server to wait for a response before timing out. The default value is 10 seconds. Read Timeout (sec) Timeout period in seconds for reading from OpenID Connect (OIDC) server before timing out. The default value is 5 seconds. Cache Settings Info! Cached response (JSON Web Key or JWK) from JWKS URI endpoint are for performance reason. It is used to minimise the need to query JWKS URI endpoint. It is advisable to follow OpenID Connect (OIDC) server key rotation policy. Cache Duration (sec) Time in seconds for the duration of the cache. The default value is 86400 seconds. Cache Size Total number of JWKs to be cache that are returned from JWKS URI. The default value is 30.",
    "title": "HTTP/2 Server Agent Configuration - MediationZone Documentation 9.4 - InfoZone",
    "url": "https://infozone.atlassian.net/wiki/spaces/MD94/pages/352078512",
    "word_count": 2312,
    "char_count": 14696
  }
]