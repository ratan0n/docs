{
  "id": "wiki__spaces__MD94__pages__352112746__Functions_for_Python",
  "title": "Functions for Python - MediationZone Documentation 9.4 - InfoZone",
  "url": "https://infozone.atlassian.net/wiki/spaces/MD94/pages/352112746/Functions+for+Python",
  "categories": [
    "space:MD94"
  ],
  "text": "The following functions apply to Python agents in both real-time and batch workflows. This section includes the following: 1 UDR Related Functions 1.1 udrRoute 1.2 udrCreate 1.3 udrIsPresent 1.4 udrUnsetPresent 1.5 udrConsume 2 Debug Related Functions 2.1 debug 2.2 isDebugEnabled 3 MIM Related Functions 3.1 mimGet 3.2 mimSet 4 Misc Functions 4.1 abort 4.2 wfStop 4.3 isStopped 5 Dynamic Functions 5.1 dynamicFieldGet 6 Timeout Functions 6.1 setTimeout 6.2 removeTimeout 7 Log Related Functions 7.1 logInformation 7.2 logWarning 7.3 logError 7.4 logException 7.5 formatException 8 Functions for Python Agents in Batch Workflows Only 8.1 beginBatch 8.2 endbatch 8.3 cancelBatch 8.4 splitBatch 8.5 hintEndBatch 8.6 getTransactionId UDR Related Functions udrRoute This function routes a UDR or bytearray to all the output routes, or a named output route. def udrRoute(udr, route=None) Parameter Description Parameter Description udr The UDR to route route The route on which to send the UDR Returns Nothing Example - udrRoute def consume(input): if isinstance(input, InstallModel): udrRoute(input, 'install') else: udrRoute(input) udrCreate This function creates a new UDR of the specified type, and can take keyword arguments to set its fields. def udrCreate(typename, **kwargs) Parameter Description Parameter Description typename A defined UDR type **kwargs Keyword arguments to set the specified fields Returns A UDR of the type specified Example - udrCreate # # The following shows six different ways of creating UDRs # from ultra.MyFolder.MyUltra import MyUDR myudr1 = MyUDR(field1=33, field2=88) myudr2 = MyUDR() myudr2.field1 = 33 myudr2.field2 = 88 myudr3 = udrCreate(MyUDR, field1=33, field2=88) myudr4 = udrCreate(MyUDR) myudr4.field1 = 33 myudr4.field2 = 88 myudr5 = udrCreate(\"MyFolder.MyUltra.MyUDR\", field1=33, field2=88) myudr6 = udrCreate(\"MyFolder.MyUltra.MyUDR\") myudr6.field1 = 33 myudr6.field2 = 88 udrIsPresent This function returns True if the UDR field is present. def udrIsPresent(udr, attr) Parameter Description Parameter Description udr The UDR attr The attribute name Returns True if the UDR field is present. Example - udrIsPresent if udrIsPresent(myudr, 'field1'): debug(\"The optional field 'field1' is present\") udrUnsetPresent This function marks an optional attribute for a UDR as not present. def udrUnsetPresent(udr, attr) Parameter Description Parameter Description udr The UDR attr The attribute name Returns Nothing udrConsume Note! This function applies for the Python Connector agent only. This function consumes a UDR routed to the Python Connector agent. The timeout is in seconds. Note! UDRs that have not been consumed are overwritten. def udrConsume(timeout=None) Parameter Description Parameter Description timeout The timeout in seconds, which waits forever if no timeout is specified Returns The UDR or bytearray routed, or None if timed out while waiting Debug Related Functions debug This function prints the supplied object to the output target specified in the Execution tab of the Workflow Properties dialog. If Event is selected, the output is shown in the Workflow Monitor. def debug(obj) Parameter Description Parameter Description obj The object to write to debug output. The object can be of any type. Note that printing a UDR type will dump all the field values, which may be a large amount of data. Similarly, the debug output for a table, map, list or bytearray type may be very large. The output is the string representation of object. Returns Nothing isDebugEnabled This function states if debugging has been enabled for the workflow. A debug event is only sent if isDebugEnabled returns True . def isDebugEnabled() Parameter Description Parameter Description Returns True or False depending on if debug is enabled or not MIM Related Functions mimGet This function returns the value of a MIM resource available in the workflow. def mimGet(category, mimResourceName) Parameter Description Parameter Description category The name of the agent or workflow that owns the MIM resource mimResourceName The name of the MIM resource whose value is to be returned Returns The MIM value. Example - mimGet mimGet(\"Workflow\", \"Batch Count\") # Retrieving a MIM resource owned by the workflow. mimGet(\"Python_1\", \"Source File Count\") # Retrieving a MIM resource owned by the agent \"Python_1\". mimSet This function assigns a value to a user defined MIM resource. The function may be called at any time. Note that it is the responsibility of the user to make sure the MIM value is available in accordance with the specified assigned type. def mimSet(name, value) Parameter Description Parameter Description name The name of the MIM resource to assign a value value The value to assign, which must match the published MIM type Returns Nothing Example - mimSet mimSet(\"My MIM\", 88) Misc Functions abort Note! This function does not apply for the Python Connector agent. This function stops the workflow, and logs a user defined message to the System Log. def abort(message) Parameter Description Parameter Description message The message that is sent to the System Log when the workflow is aborted Returns Nothing Example - abort abort(\"The processing failed, aborting this workflow!\") wfStop This function stops a running workflow. wfStop produces a single stop signal and does not wait for the workflow to stop. If it succeeds in stopping the workflow, the stop is registered in the System Log. def wfStop(wfName, immediate=True) Parameter Description Parameter Description wfName You must provide the name of the workflow to be stopped. immediate For a real-time workflow, the immediate flag has no significance. For a batch workflow, when immediate=True , the function stops the currently handled batch; when immediate=False , the currently handled batch is run and then the workflow stops. Returns If the command is successful the value is None . Otherwise, a text message is returned. Example - wfStop wfStop(\"Default.MyWorkflow.workflow_1\") isStopped Note! This function does not apply for the Python Connector agent. This function states if the workflow has been stopped. def isStopped() Parameter Description Parameter Description Returns True or False depending on if workflow has been stopped or not Example - isStopped if not isStopped(): debug('Not stopped yet') Dynamic Functions dynamicFieldGet This function retrieves the stated dynamic field from the workflow instance table. The returned value can either be a boolean, an integer, or a string. def dynamicFieldGet(category, name) Parameter Description Parameter Description category The cateogry of the dynamic field name The name of the dynamic field Returns The value of the selected dynamic field Example - dynamicFieldGet dynamicFieldGet('Control', 'Filename') Timeout Functions Note! The timeout functions only apply for the Python collection and processing agents in real-time workflows. setTimeout A timeout can be set to trigger delayed actions, see the def timeout(obj) function block in Function Blocks for Agents in Real-Time Workflows . The timeout is in seconds. Setting a timeout on an object sets or updates the current timeout in seconds on that object. A timeout is triggered once on the object, and then it has to be set again to be repeated. def setTimeout(obj, timeout) Parameter Description Parameter Description obj The object can be of any type timeout The timeout in seconds Returns Nothing removeTimeout A timeout can be removed, see the def timeout(obj) function block in Function Blocks for Agents in Real-Time Workflows . The timeout is in seconds. def removeTimeout(obj) Parameter Description Parameter Description obj The same object as used in setTimeou Returns Nothing Log Related Functions logInformation This function logs a message string to the System Log of type information. def logInformation(message) Parameter Description Parameter Description message A message appearing in the log Returns Nothing logWarning This function logs a message string to the System Log of type warning. logWarning(message) Parameter Description Parameter Description message A message appearing in the log Returns Nothing logError This function logs a message string to the System Log of type error. def logError(message) Parameter Description Parameter Description message A message appaering in the log Returns Nothing logException This function logs the current exception to the System Log. def logException() Parameter Description Parameter Description Returns Nothing Example - logException try: some_function() except: # Log exception to the System Log instead of aborting the workflow. logException() formatException This function formats the current exception and returns the string. def formatException() Parameter Description Parameter Description Returns The current exception formatted as a string Functions for Python Agents in Batch Workflows Only The following functions only apply for the Python agents in batch workflows. beginBatch Note! This function only applies for Python collection agents in batch workflows. This function starts a new batch. def beginBatch() Parameter Description Parameter Description Returns Nothing Example - beginBatch def execute(): beginBatch() udrRoute(PulseUDR()) endBatch() endbatch Note! This function only applies for Python collection agents in batch workflows. This function ends the current batch. def endBatch() Parameter Description Parameter Description Returns Nothing cancelBatch This function emits a Cancel Batch that aborts the processing of the current batch and possibly continues with the next batch (depending on the workflow configuration). def cancelBatch(message, errorUDR=None) Parameter Description Parameter Description message A message, which is logged to the System Log when the batch is cancelled. errorUDR It is possible to send an error UDR containing any useful information. This parameter is optional. Returns Nothing Example - cancelBatch cancelBatch(\"Cancel this batch\") splitBatch Note! This function only applies for Python collection agents in batch workflows. When invoked, this function propagates to the other agents that the input batch will be split. def splitBatch() Parameter Description Parameter Description Returns Nothing hintEndBatch This function sends a Hint End Batch message to the collection agent in the workflow, possibly causing a split of the current batch being processed. def hintEndBatch() Parameter Description Parameter Description Returns Nothing getTransactionId This function returns the current transaction id, or None if there is currently no active transaction. def getTransactionId() Parameter Description Parameter Description Returns The current transaction id or None",
  "chunks": [
    {
      "chunk_id": 1,
      "text": "The following functions apply to Python agents in both real-time and batch workflows. This section includes the following: 1 UDR Related Functions 1.1 udrRoute 1.2 udrCreate 1.3 udrIsPresent 1.4 udrUnsetPresent 1.5 udrConsume 2 Debug Related Functions 2.1 debug 2.2 isDebugEnabled 3 MIM Related Functions 3.1 mimGet 3.2 mimSet 4 Misc Functions 4.1 abort 4.2 wfStop 4.3 isStopped 5 Dynamic Functions 5.1 dynamicFieldGet 6 Timeout Functions 6.1 setTimeout 6.2 removeTimeout 7 Log Related Functions 7.1 logInformation 7.2 logWarning 7.3 logError 7.4 logException 7.5 formatException 8 Functions for Python Agents in Batch Workflows Only 8.1 beginBatch 8.2 endbatch 8.3 cancelBatch 8.4 splitBatch 8.5 hintEndBatch 8.6 getTransactionId UDR Related Functions udrRoute This function routes a UDR or bytearray to all the output routes, or a named output route. def udrRoute(udr, route=None) Parameter Description Parameter Description udr The UDR to route route The route on which to send the UDR Returns Nothing Example - udrRoute def consume(input): if isinstance(input, InstallModel): udrRoute(input, 'install') else: udrRoute(input) udrCreate This function creates a new UDR of the specified type, and can take keyword arguments to set its fields. def udrCreate(typename, **kwargs) Parameter Description Parameter Description typename A defined UDR type **kwargs Keyword arguments to set the specified fields Returns A UDR of the type specified Example - udrCreate # # The following shows six different ways of creating UDRs # from ultra.MyFolder.MyUltra import MyUDR myudr1 = MyUDR(field1=33, field2=88) myudr2 = MyUDR() myudr2.field1 = 33 myudr2.field2 = 88 myudr3 = udrCreate(MyUDR, field1=33, field2=88) myudr4 = udrCreate(MyUDR) myudr4.field1 = 33 myudr4.field2 = 88 myudr5 = udrCreate(\"MyFolder.MyUltra.MyUDR\", field1=33, field2=88) myudr6 = udrCreate(\"MyFolder.MyUltra.MyUDR\") myudr6.field1 = 33 myudr6.field2 = 88 udrIsPresent This function returns True if the UDR field is present. def udrIsPresent(udr, attr) Parameter Description Parameter Description udr The UDR attr The attribute name Returns True if the UDR field is present. Example - udrIsPresent if udrIsPresent(myudr, 'field1'): debug(\"The optional field 'field1' is present\") udrUnsetPresent This function marks an optional attribute for a UDR as not present. def udrUnsetPresent(udr, attr) Parameter Description Parameter Description udr The UDR attr The attribute name Returns Nothing udrConsume Note! This function applies for the Python Connector agent only. This function consumes a UDR routed to the Python Connector agent. The timeout is in seconds. Note! UDRs that have not been consumed are overwritten. def udrConsume(timeout=None) Parameter Description Parameter Description timeout The timeout in seconds, which waits forever if no timeout is specified Returns The UDR or bytearray routed, or None if timed out while waiting Debug Related Functions debug This function prints the supplied object to the output target specified in the Execution tab of the Workflow Properties dialog. If Event is selected, the output is shown in the Workflow Monitor. def debug(obj) Parameter Description Parameter Description obj The object to write to debug output. The object can be of any type. Note that printing a UDR type will dump all the field values, which may be a large amount of data. Similarly, the debug output for a table, map, list or bytearray type may be very large. The output is the string representation of object. Returns Nothing isDebugEnabled This function states if debugging has been enabled for the workflow. A debug event is only sent if isDebugEnabled returns True . def isDebugEnabled() Parameter Description Parameter Description Returns True or False depending on if debug is enabled or not MIM Related Functions mimGet This function returns the value of a MIM resource available in the workflow. def mimGet(category, mimResourceName) Parameter Description Parameter Description category The name of the agent or workflow that owns the MIM resource mimResourceName The name of the MIM resource whose value is to be returned Returns The MIM value. Example - mimGet mimGet(\"Workflow\", \"Batch Count\") # Retrieving a MIM resource owned by the workflow. mimGet(\"Python_1\", \"Source File Count\") # Retrieving a MIM resource owned by the agent \"Python_1\". mimSet This function assigns a value to a user defined MIM resource. The function may be called at any time. Note that it is the responsibility of the user to make sure the MIM value is available in accordance with the specified assigned type. def mimSet(name, value) Parameter Description Parameter Description name The name of the MIM resource to assign a value value The value to assign, which must match the published MIM type Returns Nothing Example - mimSet mimSet(\"My MIM\", 88) Misc Functions abort Note! This function does not apply for the Python Connector agent. This function stops the workflow, and logs a user defined message to the System Log. def abort(message) Parameter Description Parameter Description message The message that is sent to the System Log when the workflow is aborted Returns Nothing Example - abort abort(\"The processing failed, aborting this workflow!\") wfStop This function stops a running workflow. wfStop produces a single stop signal and does not wait for the workflow to stop. If it succeeds in stopping the workflow, the stop is registered in the System Log. def wfStop(wfName, immediate=True) Parameter Description Parameter Description wfName You must provide the name of the workflow to be stopped. immediate For a real-time workflow, the immediate flag has no significance. For a batch workflow, when immediate=True , the function stops the currently handled batch; when immediate=False , the currently handled batch is run and then the workflow stops. Returns If the command is successful the value is None . Otherwise, a text message is returned. Example - wfStop wfStop(\"Default.MyWorkflow.workflow_1\") isStopped Note! This function does not apply for the Python Connector agent. This function states if the workflow has been stopped. def isStopped() Parameter Description Parameter Description Returns True or False depending on if workflow has been stopped or not Example - isStopped if not isStopped(): debug('Not stopped yet') Dynamic Functions dynamicFieldGet This function retrieves the stated dynamic field from the workflow instance table. The returned value can either be a boolean, an integer, or a string. def dynamicFieldGet(category, name) Parameter Description Parameter Description category The cateogry of the dynamic field name The name of the dynamic field Returns The value of the selected dynamic field Example - dynamicFieldGet dynamicFieldGet('Control', 'Filename') Timeout Functions Note! The timeout functions only apply for the Python collection and processing agents in real-time workflows. setTimeout A timeout can be set to trigger delayed actions, see the def timeout(obj) function block in Function Blocks for Agents in Real-Time Workflows . The timeout is in seconds. Setting a timeout on an object sets or updates the current timeout in seconds on that object. A timeout is triggered once on the object, and then it has to be set again to be repeated. def setTimeout(obj, timeout) Parameter Description Parameter Description obj The object can be of any type timeout The timeout in seconds Returns Nothing removeTimeout A timeout can be removed, see the def timeout(obj) function block in Function Blocks for Agents in Real-Time Workflows . The timeout is in seconds. def removeTimeout(obj) Parameter Description Parameter Description obj The same object as used in setTimeou Returns Nothing Log Related Functions logInformation This function logs a message string to the System Log of type information. def logInformation(message) Parameter Description Parameter Description message A message appearing in the log Returns Nothing logWarning This function logs a message string to the System Log of type warning. logWarning(message) Parameter Description Parameter Description message A message appearing in the log Returns Nothing logError This function logs a message string to the System Log of type error. def logError(message) Parameter Description Parameter Description message A message appaering in the log Returns Nothing logException This function logs the current exception to the System Log. def logException() Parameter Description Parameter Description Returns Nothing Example - logException try: some_function() except: # Log exception to the System Log instead of aborting the workflow. logException() formatException This function formats the current exception and returns the string. def formatException() Parameter Description Parameter Description Returns The current exception formatted as a string Functions for Python Agents in Batch Workflows Only The following functions only apply for the Python agents in batch workflows. beginBatch Note! This function only applies for Python collection agents in batch workflows. This function starts a new batch. def beginBatch() Parameter Description Parameter Description Returns Nothing Example - beginBatch def execute(): beginBatch() udrRoute(PulseUDR()) endBatch() endbatch Note! This function only applies for Python collection agents in batch workflows. This function ends the current batch. def endBatch() Parameter Description Parameter Description Returns Nothing cancelBatch This function emits a Cancel Batch that aborts the processing of the current batch and possibly continues with the next batch (depending on the workflow configuration). def cancelBatch(message, errorUDR=None) Parameter Description Parameter Description message A message, which is logged to the System Log when the batch is cancelled. errorUDR It is possible to send an error UDR containing any useful information. This parameter is optional. Returns Nothing Example - cancelBatch cancelBatch(\"Cancel this batch\") splitBatch Note! This function only applies for Python collection agents in batch workflows. When invoked, this function propagates to the other agents that the input batch will be split. def splitBatch() Parameter Description Parameter Description Returns Nothing hintEndBatch This function sends a Hint End Batch message to the collection agent in the workflow, possibly causing a split of the current batch being processed. def hintEndBatch() Parameter Description Parameter Description Returns Nothing getTransactionId This function returns the current transaction id, or None if there is currently no active transaction. def getTransactionId() Parameter Description Parameter Description Returns The current transaction id or None",
      "title": "Functions for Python - MediationZone Documentation 9.4 - InfoZone",
      "url": "https://infozone.atlassian.net/wiki/spaces/MD94/pages/352112746/Functions+for+Python",
      "word_count": 1563,
      "char_count": 10720
    }
  ],
  "metadata": {
    "scraped_at": "2025-06-24T04:47:23.406197",
    "word_count": 1563,
    "char_count": 10720,
    "chunk_count": 1
  }
}