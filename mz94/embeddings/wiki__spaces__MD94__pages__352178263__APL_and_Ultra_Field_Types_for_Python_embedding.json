{
  "id": "wiki__spaces__MD94__pages__352178263__APL_and_Ultra_Field_Types_for_Python",
  "title": "APL and Ultra Field Types for Python - MediationZone Documentation 9.4 - InfoZone",
  "url": "https://infozone.atlassian.net/wiki/spaces/MD94/pages/352178263/APL+and+Ultra+Field+Types+for+Python",
  "categories": [
    "space:MD94"
  ],
  "text": "The following APL and Ultra field types are supported. Field Type Python Type Description Field Type Python Type Description any drany Can be assigned any value of any supported type. An actual value can never be of type drany , an actual value is always of one of the supported types. An any field may also hold an unknown value, and the value will then be an instance of DRRemoteObject . See the examples below: udr.anyField = 4096 isinstance(udr.anyField, drint) # True udr.anyField = \"a string\" isinstance(udr.anyField, drstring) # True udr.anyField = drbyte(3) isinstance(udr.anyField, drbyte) # True isinstance(udr.anyField, drany) # Always False bytearray drbytearray Bytearray type. The type drbytearray is the same as the Python built in bytearray type. See the examples below: udr.baField = drbytearray([1,2,3]) udr.baField = bytearray([1,2,3]) boolean drboolean Boolean value ( True or False ). The type drboolean is the same as the Python built in bool type. See the example below: udr.booleanField = True byte drbyte Single byte integer value. See the example below: udr.byteField = 127 short drshort Short integer value. See the example below: udr.shortField = 31000 int drint Integer value. See the example below: udr.intField = 2147483640 long drlong Long integer value. See the example below: udr.longField = 92233720368547 bigint drbigint Storage for any integer value. See the examples below: udr.bigintField = 8823383228338388 udr.bigintField = drbigint(8823383228338388) bigdec drbigdec Storage for any integer value with a decimal point. The type drbigdec is the same as the Python built-in type decimal.Decimal , except that drbigdec only accepts finite values. See the example below: udr.bigdecField = '123.456' udr.bigdecField = drbigdec('123.456') float drfloat Single-precision floating point. Avoid using float , use double instead. See the example below: udr.floatField = 0.5 double drdouble Double-precision floating point. The type drdouble is the same as the Python built in float type. See the example below: udr.doubleField = 3.14 char drchar A single character value. See the example below: udr.charField = 'x' string drstring A string value. The type drstring is the same as the Python built in unicode type on Python 2 and str on Python 3. See the example below: udr.stringField = \"my string\" date drdate A date value. Dates are represented as UNIX timestamps and hold information on: timestamp - the timestamp as a float in seconds timezone - the timezone as a string as supported by APL hastime - true if the timestamp has time information hasdate - true if the timestamp has date information See the example below: udr.dateField = drdate(\"2001-10-22 22:11:01.128 UTC\", \"Europe/London\") ts = udr.dateField.timestamp # ts == 1003788661.128 tz = udr.dateField.timezone # tz == \"Europe/London\" hd = udr.dateField.hasdate # hd == True ht = udr.dateField.hastime # ht == True The string representation of date always presents the timestamp in UTC. See the drdate example below: d = drdate('2001-10-22 22:11:01.128 UTC', 'Europe/London') print(d) 2001-10-22 22:11:01.128 UTC print(repr(d)) drdate(timestamp='2001-10-22 22:11:01.128 UTC', timezone='Europe/London') To create a date representing now, use: current = drdate.now() To create a date with only the hastime or hasdate information use: onlytime = drdate('2001-10-22 22:11:01.128 UTC', 'Europe/London', hasdate=False) onlydate = drdate('2001-10-22 22:11:01.128 UTC', 'Europe/London', hastime=False) To create a date with a timestamp specified in seconds as a float (timezone is optional) use: dt = drdate(timestamp=1003788661.128, timezone='Europe/London') Note! The timestamp must be a float. To compare drdates use their timestamps. A date cannot be modified after construction. ipaddress dripaddress Holds IP address information. Both IPv4 and IPv6 are supported. Use the property ipaddress to get the IP address as a string. See the example below: udr.ipaddressField = dripaddress('127.0.0.1') ip = udr.ipaddressField.ipaddress # ip == '127.0.0.1' bitset drbitset Represents a bit string that grows as needed. The bits are indexed by non-negative integers. See the example below: udr.bitsetField = drbitset('101010100') b0 = udr.bitsetField[0] # b0 == 1 b1 = udr.bitsetField[1] # b1 == 0 udr.bitsetField[2] = 1 size = len(udr.bitsetField) # size == 9 table drtable A special type used to hold table data used by the APL table commands. The drtable does not hold the actual table data but is only a reference to the data. To access the actual rows and columns you must import and use APL functions to extract the information. See the example below: from apl.MyFolder.MyAPLModule import getTableRows rows = getTableRows(udr.tableField) list drlist List of objects of a specified type, implements the Python collections.abc.MutableSequence interface. See the example below: udr.intlistField = [1, 2, 3] udr.intlistField[0] = 7 i = udr.intlistField[1] # i == 2 size = len(udr.intlistField) # size == 3 map drmap Hash map of specified key/value types, implements the Python collections.abc.MutableMapping interface. See the example below: udr.stringintmapField = {'key1': 1, 'key2': 2} udr.stringintmapField['key3'] = 3 key1 = udr.stringintmapField['key1'] # key1 == 1 size = len(udr.stringintmapField) # size == 3 drudr drudr Holds a UDR object. The actual runtime type of the UDR can be checked with isinstance . See the example below: from ultra.MyFolder.MyUltra import MyUDR udr.drudrField = MyUDR() udr.drudrField.myField1 = 100 value = udr.drudrField.myField1 # value == 100 ismyudr = isinstance(udr.drudrField, MyUDR) # ismyudr == True The Python agents are aware of all UDR types and field types that exist. When assigning fields, automatic type conversion is always performed and includes converting numbers to booleans, strings to numbers, numbers to strings, and dictionaries to UDRs. In case types or values mismatch, assigning to a field may result in an exception.",
  "chunks": [
    {
      "chunk_id": 1,
      "text": "The following APL and Ultra field types are supported. Field Type Python Type Description Field Type Python Type Description any drany Can be assigned any value of any supported type. An actual value can never be of type drany , an actual value is always of one of the supported types. An any field may also hold an unknown value, and the value will then be an instance of DRRemoteObject . See the examples below: udr.anyField = 4096 isinstance(udr.anyField, drint) # True udr.anyField = \"a string\" isinstance(udr.anyField, drstring) # True udr.anyField = drbyte(3) isinstance(udr.anyField, drbyte) # True isinstance(udr.anyField, drany) # Always False bytearray drbytearray Bytearray type. The type drbytearray is the same as the Python built in bytearray type. See the examples below: udr.baField = drbytearray([1,2,3]) udr.baField = bytearray([1,2,3]) boolean drboolean Boolean value ( True or False ). The type drboolean is the same as the Python built in bool type. See the example below: udr.booleanField = True byte drbyte Single byte integer value. See the example below: udr.byteField = 127 short drshort Short integer value. See the example below: udr.shortField = 31000 int drint Integer value. See the example below: udr.intField = 2147483640 long drlong Long integer value. See the example below: udr.longField = 92233720368547 bigint drbigint Storage for any integer value. See the examples below: udr.bigintField = 8823383228338388 udr.bigintField = drbigint(8823383228338388) bigdec drbigdec Storage for any integer value with a decimal point. The type drbigdec is the same as the Python built-in type decimal.Decimal , except that drbigdec only accepts finite values. See the example below: udr.bigdecField = '123.456' udr.bigdecField = drbigdec('123.456') float drfloat Single-precision floating point. Avoid using float , use double instead. See the example below: udr.floatField = 0.5 double drdouble Double-precision floating point. The type drdouble is the same as the Python built in float type. See the example below: udr.doubleField = 3.14 char drchar A single character value. See the example below: udr.charField = 'x' string drstring A string value. The type drstring is the same as the Python built in unicode type on Python 2 and str on Python 3. See the example below: udr.stringField = \"my string\" date drdate A date value. Dates are represented as UNIX timestamps and hold information on: timestamp - the timestamp as a float in seconds timezone - the timezone as a string as supported by APL hastime - true if the timestamp has time information hasdate - true if the timestamp has date information See the example below: udr.dateField = drdate(\"2001-10-22 22:11:01.128 UTC\", \"Europe/London\") ts = udr.dateField.timestamp # ts == 1003788661.128 tz = udr.dateField.timezone # tz == \"Europe/London\" hd = udr.dateField.hasdate # hd == True ht = udr.dateField.hastime # ht == True The string representation of date always presents the timestamp in UTC. See the drdate example below: d = drdate('2001-10-22 22:11:01.128 UTC', 'Europe/London') print(d) 2001-10-22 22:11:01.128 UTC print(repr(d)) drdate(timestamp='2001-10-22 22:11:01.128 UTC', timezone='Europe/London') To create a date representing now, use: current = drdate.now() To create a date with only the hastime or hasdate information use: onlytime = drdate('2001-10-22 22:11:01.128 UTC', 'Europe/London', hasdate=False) onlydate = drdate('2001-10-22 22:11:01.128 UTC', 'Europe/London', hastime=False) To create a date with a timestamp specified in seconds as a float (timezone is optional) use: dt = drdate(timestamp=1003788661.128, timezone='Europe/London') Note! The timestamp must be a float. To compare drdates use their timestamps. A date cannot be modified after construction. ipaddress dripaddress Holds IP address information. Both IPv4 and IPv6 are supported. Use the property ipaddress to get the IP address as a string. See the example below: udr.ipaddressField = dripaddress('127.0.0.1') ip = udr.ipaddressField.ipaddress # ip == '127.0.0.1' bitset drbitset Represents a bit string that grows as needed. The bits are indexed by non-negative integers. See the example below: udr.bitsetField = drbitset('101010100') b0 = udr.bitsetField[0] # b0 == 1 b1 = udr.bitsetField[1] # b1 == 0 udr.bitsetField[2] = 1 size = len(udr.bitsetField) # size == 9 table drtable A special type used to hold table data used by the APL table commands. The drtable does not hold the actual table data but is only a reference to the data. To access the actual rows and columns you must import and use APL functions to extract the information. See the example below: from apl.MyFolder.MyAPLModule import getTableRows rows = getTableRows(udr.tableField) list drlist List of objects of a specified type, implements the Python collections.abc.MutableSequence interface. See the example below: udr.intlistField = [1, 2, 3] udr.intlistField[0] = 7 i = udr.intlistField[1] # i == 2 size = len(udr.intlistField) # size == 3 map drmap Hash map of specified key/value types, implements the Python collections.abc.MutableMapping interface. See the example below: udr.stringintmapField = {'key1': 1, 'key2': 2} udr.stringintmapField['key3'] = 3 key1 = udr.stringintmapField['key1'] # key1 == 1 size = len(udr.stringintmapField) # size == 3 drudr drudr Holds a UDR object. The actual runtime type of the UDR can be checked with isinstance . See the example below: from ultra.MyFolder.MyUltra import MyUDR udr.drudrField = MyUDR() udr.drudrField.myField1 = 100 value = udr.drudrField.myField1 # value == 100 ismyudr = isinstance(udr.drudrField, MyUDR) # ismyudr == True The Python agents are aware of all UDR types and field types that exist. When assigning fields, automatic type conversion is always performed and includes converting numbers to booleans, strings to numbers, numbers to strings, and dictionaries to UDRs. In case types or values mismatch, assigning to a field may result in an exception.",
      "title": "APL and Ultra Field Types for Python - MediationZone Documentation 9.4 - InfoZone",
      "url": "https://infozone.atlassian.net/wiki/spaces/MD94/pages/352178263/APL+and+Ultra+Field+Types+for+Python",
      "word_count": 884,
      "char_count": 5967
    }
  ],
  "metadata": {
    "scraped_at": "2025-06-24T04:47:21.680531",
    "word_count": 884,
    "char_count": 5967,
    "chunk_count": 1
  }
}