[
  {
    "chunk_id": 1,
    "text": "This section describes different ways of managing MediationZone related packages by using the Command Line tool and by using the Java Command Line tool. Removing Packages The following mzsh command can be used for deleting a specific package. The command assumes that you have started mzsh interactively. MZ>> premove <package name> The command should only be used by system administrators with authority to maintain the MediationZone software. Example - Removing a package If you want to remove the XFER_X25 package, enter: MZ>> premove XFER_X25 The following line will be displayed while the package is being removed: Removing XFER_X25, 8.0.0.0...done. After a package has been removed, the Platform and Execution Contexts may have to be stopped and restarted. If a removed package contained a bootstrap class, a cache error message will be displayed. The corresponding bootstrap class must be removed from the STR before the pico instance can be restarted. Package Management Tool All .mzp files provide a built in management tool. It is executed in a Unix shell by running the following command: java -jar <.mzp> <management argument> Management Arguments The added <management argument> controls the execution of the packages. Currently there are seven different arguments; Create, Extract, Help, Install, Patch , Provides and Query. Create Creates the database definitions needed for a package. If no database definitions are needed, the response will be: Nothing to create for this <PACKAGE>. The following is an example of a create command syntax. $ java -Dmz.home=$MZ_HOME -jar archiving_8.0.0.0.mzp create Unpacking database/oracle/packages/archiving/oracle_tables.sql...done Unpacking database/oracle/packages/archiving/oracle_grants.sql...done Unpacking database/oracle/packages/archiving/oracle_synonyms.sql...done Note! If the file install.xml file is not available in the current directory, the environment variable MZ_HOME must be set. Extract Adds any package parameters to install.xml in the current directory. If this file does not exist, it will be created. Help Displays help for the given argument or a help session about all arguments. $ help Install Performs an installation of the selected package. This command is only used when making a new installation. Note! Some packages, e g core, require that install.xml file is available in the current directory when you use the install command. The following is an example of an install command syntax. Example - Installing a package $ java -Dinstall.types=platform -Dmz.home=$MZ_HOME -jar  archiving_8.0.0.0.mzp install ... Inserting Archiving, 8.0.0.0...done. Patch The patch argument is used to perform a patch installation of packages, generally used for upgrading the system, and if necessary, perform patch only specific operations on the system. Note! The command should be executed in the directory where the new package is present. The following is an example of a command using the patch argument. $ java -jar <package name>.mzp patch  mzadmin/<password> In order for the changes to take effect after the command has been executed, some components including the upgraded item may have to be restarted. This could include the Desktop user interface, the Platform, the Execution Contexts and the workflows. Provides Describes the components that the stated package will install. Query This argument will make a query about the existence of a specific package in the installed system. If the queried package is already installed or if the last version is not present, a message stating this will be displayed. Example - Querying a package $ java -jar java -jar ftp_forwarding_8.0.0.0-SNAPSHOT.mzp query FTP Forwarding, 8.0.0.0 (8.0.0.0) The package ftp_forwarding_8.0.0.0-SNAPSHOT.mzp is identical to the committed one. Note! If the install.xml file is not available in the current directory, the environment variable MZ_HOME must be set. Adding or Updating Packages During upgrade or addition of new packages, the mz.license file must be available in the directory specified by the platform property mz.license.file . If this property is not set, the license file must be stored in the $MZ_HOME/etc directory. If new packages are added, the new license file must be copied to the \"license\" directory before the installation. The addition/upgrade process consists of three steps: Create all database definitions needed for a package using the create argument. Log in as database administrator and execute the corresponding sql files. Install the package using the install argument.",
    "title": "Package Management - MediationZone Documentation 9.3 - InfoZone",
    "url": "https://infozone.atlassian.net/wiki/spaces/MD93/pages/204744622/Package+Management",
    "word_count": 672,
    "char_count": 4558
  }
]