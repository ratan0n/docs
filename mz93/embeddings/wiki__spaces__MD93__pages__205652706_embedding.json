{
  "id": "wiki__spaces__MD93__pages__205652706",
  "title": "FTP DX200 Agent Preparations - MediationZone Documentation 9.3 - InfoZone",
  "url": "https://infozone.atlassian.net/wiki/spaces/MD93/pages/205652706",
  "categories": [
    "space:MD93"
  ],
  "text": "Prior to configuring a DX200 agent to use SFTP, consider the following preparation notes: Server Identification Attributes Authentication Server Keys Server Identification The DX200 agent uses a file with known host keys to validate the server identity during connection setup. The location and naming of this file is managed through the property: mz.ssh.known_hosts_file It is set in <pico name>.conf file of the relevant EC to manage where the file is saved. The default value is ${mz.home}/etc/ssh/known_hosts . The SSH implementation uses JCE (Java Cryptography Extension), which means that there may be limitations on key sizes for your Java distribution. This is usually not a problem. However, there may be some cases where the unlimited strength cryptography policy is needed. For instance, if the host RSA keys are larger than 2048 bits (depending on the SSH server configuration). This may require that you update the Java Platform that runs the EC. For unlimited strength cryptography on the Oracle JRE, download the JCE Unlimited Strength Juris- diction Policy Files from http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html . Replace the jar files in $JAVA_HOME/jre/lib/security with the files in this package. The OpenJDK JRE does not require special handling of the JCE policy files for unlimited strength cryptography. Attributes DX200 agent support the following SFTP algorithms: blowfish-cbc, cast128-cbc, twofish192-cbc, twofish256-cbc, twofish128-cbc, aes128-cbc, aes256-cbc, aes192-cbc, 3des-cbc. Authentication The DX200 agent support authentication through either username/password or private key. Private keys can optionally be protected by a Key password. Most commonly used private key files, can be imported into . Typical command line syntax (most systems): ssh-keygen -t <keyType> -f <directoryPath> Argument Description Argument Description keyType The type of key to be generated. Both RSA and DSA key types are supported. directoryPath The directory in which you want to save the generated keys. Example The private key may be created using the following command line: > ssh-keygen -t rsa -f /tmp/keystore Enter passphrase: xxxxxx Enter same passphrase again: xxxxxx Then the following is stated: Your identification key has been saved in /tmp/keystore Your public key has been saved in /tmp/keystore.pub When the keys are created the private key may be imported to the DX200 agent: Open Finally, on the SFTP server host, append /tmp/keystore.pub to $HOME/.ssh/authorized_keys . If the $HOME/.ssh/authorized_keys is not there it must be created. Server Keys The SSH protocol uses host verification as protection against attacks where an attacker manages to reroute the TCP connection from the correct server to another machine. Since the password is sent directly over the encrypted connection, it is critical for security that an incorrect public key is not accepted by the client. The agent uses a file with the known hosts and keys. It will accept the key supplied by the server if either of the following is fulfilled: The host is previously unknown. In this case the public key will be registered in the file. The host is known and the public key matches the old data. The host is known however has a new key and the user has been configured to accept the new key. For further information, see the section Advanced Tab in 9.31.3 FTP DX200 Agent Configuration . If the host key changes for some reason, the file will have to be removed (or edited) in order for the new key to be accepted.",
  "chunks": [
    {
      "chunk_id": 1,
      "text": "Prior to configuring a DX200 agent to use SFTP, consider the following preparation notes: Server Identification Attributes Authentication Server Keys Server Identification The DX200 agent uses a file with known host keys to validate the server identity during connection setup. The location and naming of this file is managed through the property: mz.ssh.known_hosts_file It is set in <pico name>.conf file of the relevant EC to manage where the file is saved. The default value is ${mz.home}/etc/ssh/known_hosts . The SSH implementation uses JCE (Java Cryptography Extension), which means that there may be limitations on key sizes for your Java distribution. This is usually not a problem. However, there may be some cases where the unlimited strength cryptography policy is needed. For instance, if the host RSA keys are larger than 2048 bits (depending on the SSH server configuration). This may require that you update the Java Platform that runs the EC. For unlimited strength cryptography on the Oracle JRE, download the JCE Unlimited Strength Juris- diction Policy Files from http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html . Replace the jar files in $JAVA_HOME/jre/lib/security with the files in this package. The OpenJDK JRE does not require special handling of the JCE policy files for unlimited strength cryptography. Attributes DX200 agent support the following SFTP algorithms: blowfish-cbc, cast128-cbc, twofish192-cbc, twofish256-cbc, twofish128-cbc, aes128-cbc, aes256-cbc, aes192-cbc, 3des-cbc. Authentication The DX200 agent support authentication through either username/password or private key. Private keys can optionally be protected by a Key password. Most commonly used private key files, can be imported into . Typical command line syntax (most systems): ssh-keygen -t <keyType> -f <directoryPath> Argument Description Argument Description keyType The type of key to be generated. Both RSA and DSA key types are supported. directoryPath The directory in which you want to save the generated keys. Example The private key may be created using the following command line: > ssh-keygen -t rsa -f /tmp/keystore Enter passphrase: xxxxxx Enter same passphrase again: xxxxxx Then the following is stated: Your identification key has been saved in /tmp/keystore Your public key has been saved in /tmp/keystore.pub When the keys are created the private key may be imported to the DX200 agent: Open Finally, on the SFTP server host, append /tmp/keystore.pub to $HOME/.ssh/authorized_keys . If the $HOME/.ssh/authorized_keys is not there it must be created. Server Keys The SSH protocol uses host verification as protection against attacks where an attacker manages to reroute the TCP connection from the correct server to another machine. Since the password is sent directly over the encrypted connection, it is critical for security that an incorrect public key is not accepted by the client. The agent uses a file with the known hosts and keys. It will accept the key supplied by the server if either of the following is fulfilled: The host is previously unknown. In this case the public key will be registered in the file. The host is known and the public key matches the old data. The host is known however has a new key and the user has been configured to accept the new key. For further information, see the section Advanced Tab in 9.31.3 FTP DX200 Agent Configuration . If the host key changes for some reason, the file will have to be removed (or edited) in order for the new key to be accepted.",
      "title": "FTP DX200 Agent Preparations - MediationZone Documentation 9.3 - InfoZone",
      "url": "https://infozone.atlassian.net/wiki/spaces/MD93/pages/205652706",
      "word_count": 547,
      "char_count": 3554
    }
  ],
  "metadata": {
    "scraped_at": "2025-06-24T04:28:26.546210",
    "word_count": 547,
    "char_count": 3554,
    "chunk_count": 1
  }
}