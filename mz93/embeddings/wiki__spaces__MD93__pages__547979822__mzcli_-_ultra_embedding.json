{
  "id": "wiki__spaces__MD93__pages__547979822__mzcli_-_ultra",
  "title": "mzcli - ultra - MediationZone Documentation 9.3 - InfoZone",
  "url": "https://infozone.atlassian.net/wiki/spaces/MD93/pages/547979822/mzcli+-+ultra",
  "categories": [
    "space:MD93"
  ],
  "text": "Usage ultra <command> [options] Commands: export <target-jar-file> Export ultra classes to given jar file import <source-jar-file> Import ultra classes from given jar file list List all ultra classes in the system Options: -v --verbose Output verbose -h --historic-only Filter out only historic ultra classes When you make changes to an ultra format, historic formats are stored on the system. However, these are not included when you perform a system export. You can use the ultra command to export both current and historic ultra formats from one system and import them as historic formats in another. This is useful when the target system must be able to handle, for example, persisted runtime data that is consistent with a previous version of an Ultra format. Commands Command Description Command Description export Use the export command to write Ultra formats on the system to disk. These will be stored in a JAR file that contains the Ultra class definitions. Example - Exporting Ultra formats ultra export /home/user/mz/ultra/ultraexport.jar Note! The export command cannot overwrite an existing export file. import Use the import command to import Ultra formats from disk. For each Ultra format (class) in the specified JAR file, the command will perform the import if the format is not already present in the Code Server. If a format in the JAR file is historic or not does not matter during import, since it will be considered historic in the target system. Example - Importing Ultra formats ultra import /home/user/mz/ultra/ultraexport.jar list Use the list command to list Ultra formats on the system. Example. Listing Ultra formats $ ultra list Note! If an empty list field disappears when the ascii encodes, you need to set a system property called mz.ultra.terminator.backcomp . If set to true, empty list fields do not disappear and backward compatibility is preserved if needed. To set this up, do the following: Set the config property mz.ultra.terminator.backcomp to true in platform.xml. R estart the platform. R egenerate Ultra formats - for more information see mzcli - regenerateconfigs . R e-run the workflow. Options Option Description Option Description [ -v --verbose ] Use this option for detailed output from the ultra command. [ -h --historic-only ] Use this option to only include historic formats in the export. Note! This option is not applicable for the import command. Return Codes Listed below are the different return codes for the ultra command: Code Description Code Description 0 Will be returned if the command was successful. 1 Will be returned if the command could not be interpreted, e g if a option that does not exist has been entered. 2 Will be returned if the input file is not found or if the output file already exists.",
  "chunks": [
    {
      "chunk_id": 1,
      "text": "Usage ultra <command> [options] Commands: export <target-jar-file> Export ultra classes to given jar file import <source-jar-file> Import ultra classes from given jar file list List all ultra classes in the system Options: -v --verbose Output verbose -h --historic-only Filter out only historic ultra classes When you make changes to an ultra format, historic formats are stored on the system. However, these are not included when you perform a system export. You can use the ultra command to export both current and historic ultra formats from one system and import them as historic formats in another. This is useful when the target system must be able to handle, for example, persisted runtime data that is consistent with a previous version of an Ultra format. Commands Command Description Command Description export Use the export command to write Ultra formats on the system to disk. These will be stored in a JAR file that contains the Ultra class definitions. Example - Exporting Ultra formats ultra export /home/user/mz/ultra/ultraexport.jar Note! The export command cannot overwrite an existing export file. import Use the import command to import Ultra formats from disk. For each Ultra format (class) in the specified JAR file, the command will perform the import if the format is not already present in the Code Server. If a format in the JAR file is historic or not does not matter during import, since it will be considered historic in the target system. Example - Importing Ultra formats ultra import /home/user/mz/ultra/ultraexport.jar list Use the list command to list Ultra formats on the system. Example. Listing Ultra formats $ ultra list Note! If an empty list field disappears when the ascii encodes, you need to set a system property called mz.ultra.terminator.backcomp . If set to true, empty list fields do not disappear and backward compatibility is preserved if needed. To set this up, do the following: Set the config property mz.ultra.terminator.backcomp to true in platform.xml. R estart the platform. R egenerate Ultra formats - for more information see mzcli - regenerateconfigs . R e-run the workflow. Options Option Description Option Description [ -v --verbose ] Use this option for detailed output from the ultra command. [ -h --historic-only ] Use this option to only include historic formats in the export. Note! This option is not applicable for the import command. Return Codes Listed below are the different return codes for the ultra command: Code Description Code Description 0 Will be returned if the command was successful. 1 Will be returned if the command could not be interpreted, e g if a option that does not exist has been entered. 2 Will be returned if the input file is not found or if the output file already exists.",
      "title": "mzcli - ultra - MediationZone Documentation 9.3 - InfoZone",
      "url": "https://infozone.atlassian.net/wiki/spaces/MD93/pages/547979822/mzcli+-+ultra",
      "word_count": 451,
      "char_count": 2771
    }
  ],
  "metadata": {
    "scraped_at": "2025-06-24T04:23:54.542329",
    "word_count": 451,
    "char_count": 2771,
    "chunk_count": 1
  }
}