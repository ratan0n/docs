{
  "id": "wiki__spaces__MD93__pages__204611353__KPI_Management_Quick-Start_Guide_-_Non-Distributed",
  "title": "KPI Management Quick-Start Guide - Non-Distributed - MediationZone Documentation 9.3 - InfoZone",
  "url": "https://infozone.atlassian.net/wiki/spaces/MD93/pages/204611353/KPI+Management+Quick-Start+Guide+-+Non-Distributed",
  "categories": [
    "space:MD93"
  ],
  "text": "The input data in this example use case consists of sales numbers in CSV format. This dataset is from here on, referred to as \"sales\". The data is collected in real-time from the regions \"APAC\", \"AMERICAS\", and \"EMEA\". We want to calculate the total-, average, and number of sales per minute. These numbers will be our KPIs, broken down per country and region. Example - Input Data timestamp region country amount timestamp region country amount 2017-03-08T13:53:52.123 EMEA Sweden 123.50 2017-03-08T13:53:56.123 APAC India 12.12 2017-03-08T13:53:59.123 AMERICAS US 425.23 Step-by-Step Instructions Getting started with KPI Management is done in three parts: 1 Configure the Service Model 2 Create the Workflow 3 Start the Workflow Configure the Service Model The service model describes your data, which KPIs to generate and how to calculate them. A JSON representation is used to describe the model, which includes the following top-level objects: dimension tree metric kpi threshold (optional) To configure the service model in a KPI profile: Click the New Configuration button in the Build view, and then select KPI Profile . Start with the dimension and tree objects. The dimensions describe the fields of your data that are used for grouping and the tree the relation between them. The identifying fields in the input data are region and country . A region has one or more countries. The data type is sales . In the dimension object we specify each of our identifying fields as separate objects, with the datatype and field. Open Configuring Dimensions and Tree Dimension JSON \"dimension\": { \"Region\": { \"sales\": \"region\" }, \"Country\": { \"sales\": \"country\" } }, \"tree\": { \"tree1\": { \"Region\": { \"Country\": { } } } } Define the metrics using the amount field in the input data: totalSales - For total sales, sum up the amount for each record by using the sum function on the expression expr , which contains the amount field. avgSales - For average sales use the avg function instead of sum . numSales - To count the number of records, use the conditional function isSet in the expression. This function evaluates to 1 if there is a value in amount or 0 if there is no value. Use the function sum to sum up the 1s and 0s. Open Configuring Metrics Metrics JSON \"metric\": { \"totalSales\" : { \"fun\": \"sum\", \"expr\": { \"sales\": \"amount\" } }, \"avgSales\" : { \"fun\": \"avg\", \"expr\": { \"sales\": \"amount\" } }, \"numSales\" : { \"fun\": \"sum\", \"expr\": { \"sales\": \"isSet(amount)\" } } } Define the KPIs. The expected output is the total sales, average sales, and number of sales per region and country in 60 second periods. Use the property node to describe where in the topology the KPI should be calculated and windowSize to set the period length. Use the names of the metrics defined above in the expr property. Open Configuring KPIs KPI JSON \"kpi\": { \"Region.TotalSales\": { \"node\": [ \"tree1\", \"Region\" ], \"windowSize\": 60, \"expr\": \"totalSales\" }, \"Region.AvgSales\": { \"node\": [ \"tree1\", \"Region\" ], \"windowSize\": 60, \"expr\": \"avgSales\" }, \"Region.NumberOfSales\": { \"node\": [ \"tree1\", \"Region\" ], \"windowSize\": 60, \"expr\": \"numSales\" }, \"Country.TotalSales\": { \"node\": [ \"tree1\", \"Region\", \"Country\" ], \"windowSize\": 60, \"expr\": \"totalSales\" }, \"Country.AvgSales\": { \"node\": [ \"tree1\", \"Region\", \"Country\" ], \"windowSize\": 60, \"expr\": \"avgSales\" }, \"Country.NumberOfSales\": { \"node\": [ \"tree1\", \"Region\", \"Country\" ], \"windowSize\": 60, \"expr\": \"numSales\" } } Select the Aggregated Output checkbox and set the Window Size to 60, and save the profile with the name \"SalesModel\" in the folder \"kpisales\". Full Service Model in JSON { \"dimension\": { \"Region\": { \"sales\": \"region\" }, \"Country\": { \"sales\": \"country\" } }, \"tree\": { \"tree1\": { \"Region\": { \"Country\": { } } } }, \"metric\": { \"totalSales\" : { \"fun\": \"sum\", \"expr\": { \"sales\": \"amount\" } }, \"avgSales\" : { \"fun\": \"avg\", \"expr\": { \"sales\": \"amount\" } }, \"numSales\" : { \"fun\": \"sum\", \"expr\": { \"sales\": \"isSet(amount)\" } } }, \"kpi\": { \"Region.TotalSales\": { \"node\": [ \"tree1\", \"Region\" ], \"windowSize\": 60, \"expr\": \"totalSales\" }, \"Region.AvgSales\": { \"node\": [ \"tree1\", \"Region\" ], \"windowSize\": 60, \"expr\": \"avgSales\" }, \"Region.NumberOfSales\": { \"node\": [ \"tree1\", \"Region\" ], \"windowSize\": 60, \"expr\": \"numSales\" }, \"Country.TotalSales\": { \"node\": [ \"tree1\", \"Region\", \"Country\" ], \"windowSize\": 60, \"expr\": \"totalSales\" }, \"Country.AvgSales\": { \"node\": [ \"tree1\", \"Region\", \"Country\" ], \"windowSize\": 60, \"expr\": \"avgSales\" }, \"Country.NumberOfSales\": { \"node\": [ \"tree1\", \"Region\", \"Country\" ], \"windowSize\": 60, \"expr\": \"numSales\" } } } Create the Workflow Create the real-time workflow. In this guide we use Pulse agents to simulate sales data coming from three different sources, EMEA, AMERICAS, and APAC. To create the workflow: Add three Pulse agents and an Analysis agent. Open Workflow - Pulse Agents Configure the Pulse agents as follows: AMERICAS will send 1000 TPS - Set Time Unit to MILLISECONDS and Interval to 100 EMEA will send 500 TPS - Set Time Unit to MILLISECONDS and Interval to 200 APAC will send 250 TPS - Set Time Unit to MILLISECONDS and Interval to 400 To be able to identify the data, set the data to the region name. Open Pulse agent configuration The Pulse agents only sends us a simple event containing the name of the region, the other data that will be used in the KPI calculations are generated in the connected Analysis agent. In the Analysis agent, click on the Set to Input button beneath UDR Types and paste the APL code below to create the input to KPI Management. list<string> americas = listCreate(string, \"US\", \"Canada\", \"Mexico\", \"Brazil\", \"Argentina\", \"Cuba\", \"Colombia\"); list<string> emea = listCreate(string, \"Sweden\", \"UK\", \"Portugal\", \"Italy\", \"France\", \"Germany\", \"Norway\", \"Spain\", \"Finland\", \"Denmark\"); list<string> apac = listCreate(string, \"India\", \"China\", \"Japan\", \"Thailand\", \"Australia\", \"Indonesia\", \"Malaysia\",\"South Korea\"); consume { // create KDR - the input for the KPI CLusterIn agent kpimanagement.KDR kdr = udrCreate(kpimanagement.KDR); // The KDR has a type field - we set this to the value we had for our data type in the model kdr.type = \"sales\"; // It also has a timestamp field - lets populate that from the current time but using seconds. kdr.timestamp = dateCreateNowMilliseconds() / 1000; string region = baToStr(input.Data); // the data in our use case (country, city, amount) we will put in the values field of the kdr. map<string, any> sales = mapCreate(string,any); mapSet(sales, \"region\", region); // lets create a random amount between 1 and 1000 int amount = randomInt(1000); // set amount and city depending on the region if (region == \"AMERICAS\") { mapSet(sales, \"amount\", amount * 1.25d); mapSet(sales, \"country\", randomCountry(americas)); } else if (region == \"EMEA\") { mapSet(sales, \"amount\", amount * 1.0d); mapSet(sales, \"country\", randomCountry(emea)); } else if (region == \"APAC\") { mapSet(sales, \"amount\", amount * 0.65d); mapSet(sales, \"country\", randomCountry(apac)); } else { mapSet(sales, \"amount\", 0.0d); mapSet(sales, \"country\", \"UNKNOWN\"); debug(\"Unknown region:\" + region); } kdr.values = sales; udrRoute(kdr); } // pick a random country from a list string randomCountry(list<string> countries) { int index = randomInt(listSize(countries)); return listGet(countries, index); } Add a KPI agent and configure it to use the KPI profile that you created in step 1. Set Delay to 0 . Open Workflow - KPI agent Open KPI agent configuration Add another Analysis agent for debugging of the KPIs. Open Final workflow configuration In the Analysis agent, click on the Set to Input button beneath UDR Types and paste the APL code below to the Analysis agent. string format = \"yyyy-MM-dd'T'HH:mm:ss:S\"; consume { // input is KPIAggregatedOutput which contains a list of // KPIOutput list<kpimanagement.KPIOutput> kpis = input.kpiOutputUDRs; // loop the KPIs and debug string dateStr = \"\"; for (int i = 0; i < listSize(kpis); i++) { kpimanagement.KPIOutput kpi = listGet(kpis, i); dateToString(dateStr, dateCreateFromMilliseconds(kpi.periodStart * 1000), format); debug(\"Period start: \" + dateStr + \", instance: \" + kpi.instancePath + \", KPI: \" + kpi.kpi + \", Value:\" + kpi.value + \", Samples: \" + kpi.sampleCount); } } Save the workflow. Start the Workflow To start the workflow: Open the workflow configuration in the Workflow Monitor. Enable debugging and select events for the KPI agent and the Analysis agent that produces the debug output. Ensure to have an ec running and click on the Start button. The calculated KPIs will be displayed in the debug output in the Workflow Monitor. Note! It will take a minute before the output is displayed due to the configuration of the windowSize property in the service model. Open Debug output",
  "chunks": [
    {
      "chunk_id": 1,
      "text": "The input data in this example use case consists of sales numbers in CSV format. This dataset is from here on, referred to as \"sales\". The data is collected in real-time from the regions \"APAC\", \"AMERICAS\", and \"EMEA\". We want to calculate the total-, average, and number of sales per minute. These numbers will be our KPIs, broken down per country and region. Example - Input Data timestamp region country amount timestamp region country amount 2017-03-08T13:53:52.123 EMEA Sweden 123.50 2017-03-08T13:53:56.123 APAC India 12.12 2017-03-08T13:53:59.123 AMERICAS US 425.23 Step-by-Step Instructions Getting started with KPI Management is done in three parts: 1 Configure the Service Model 2 Create the Workflow 3 Start the Workflow Configure the Service Model The service model describes your data, which KPIs to generate and how to calculate them. A JSON representation is used to describe the model, which includes the following top-level objects: dimension tree metric kpi threshold (optional) To configure the service model in a KPI profile: Click the New Configuration button in the Build view, and then select KPI Profile . Start with the dimension and tree objects. The dimensions describe the fields of your data that are used for grouping and the tree the relation between them. The identifying fields in the input data are region and country . A region has one or more countries. The data type is sales . In the dimension object we specify each of our identifying fields as separate objects, with the datatype and field. Open Configuring Dimensions and Tree Dimension JSON \"dimension\": { \"Region\": { \"sales\": \"region\" }, \"Country\": { \"sales\": \"country\" } }, \"tree\": { \"tree1\": { \"Region\": { \"Country\": { } } } } Define the metrics using the amount field in the input data: totalSales - For total sales, sum up the amount for each record by using the sum function on the expression expr , which contains the amount field. avgSales - For average sales use the avg function instead of sum . numSales - To count the number of records, use the conditional function isSet in the expression. This function evaluates to 1 if there is a value in amount or 0 if there is no value. Use the function sum to sum up the 1s and 0s. Open Configuring Metrics Metrics JSON \"metric\": { \"totalSales\" : { \"fun\": \"sum\", \"expr\": { \"sales\": \"amount\" } }, \"avgSales\" : { \"fun\": \"avg\", \"expr\": { \"sales\": \"amount\" } }, \"numSales\" : { \"fun\": \"sum\", \"expr\": { \"sales\": \"isSet(amount)\" } } } Define the KPIs. The expected output is the total sales, average sales, and number of sales per region and country in 60 second periods. Use the property node to describe where in the topology the KPI should be calculated and windowSize to set the period length. Use the names of the metrics defined above in the expr property. Open Configuring KPIs KPI JSON \"kpi\": { \"Region.TotalSales\": { \"node\": [ \"tree1\", \"Region\" ], \"windowSize\": 60, \"expr\": \"totalSales\" }, \"Region.AvgSales\": { \"node\": [ \"tree1\", \"Region\" ], \"windowSize\": 60, \"expr\": \"avgSales\" }, \"Region.NumberOfSales\": { \"node\": [ \"tree1\", \"Region\" ], \"windowSize\": 60, \"expr\": \"numSales\" }, \"Country.TotalSales\": { \"node\": [ \"tree1\", \"Region\", \"Country\" ], \"windowSize\": 60, \"expr\": \"totalSales\" }, \"Country.AvgSales\": { \"node\": [ \"tree1\", \"Region\", \"Country\" ], \"windowSize\": 60, \"expr\": \"avgSales\" }, \"Country.NumberOfSales\": { \"node\": [ \"tree1\", \"Region\", \"Country\" ], \"windowSize\": 60, \"expr\": \"numSales\" } } Select the Aggregated Output checkbox and set the Window Size to 60, and save the profile with the name \"SalesModel\" in the folder \"kpisales\". Full Service Model in JSON { \"dimension\": { \"Region\": { \"sales\": \"region\" }, \"Country\": { \"sales\": \"country\" } }, \"tree\": { \"tree1\": { \"Region\": { \"Country\": { } } } }, \"metric\": { \"totalSales\" : { \"fun\": \"sum\", \"expr\": { \"sales\": \"amount\" } }, \"avgSales\" : { \"fun\": \"avg\", \"expr\": { \"sales\": \"amount\" } }, \"numSales\" : { \"fun\": \"sum\", \"expr\": { \"sales\": \"isSet(amount)\" } } }, \"kpi\": { \"Region.TotalSales\": { \"node\": [ \"tree1\", \"Region\" ], \"windowSize\": 60, \"expr\": \"totalSales\" }, \"Region.AvgSales\": { \"node\": [ \"tree1\", \"Region\" ], \"windowSize\": 60, \"expr\": \"avgSales\" }, \"Region.NumberOfSales\": { \"node\": [ \"tree1\", \"Region\" ], \"windowSize\": 60, \"expr\": \"numSales\" }, \"Country.TotalSales\": { \"node\": [ \"tree1\", \"Region\", \"Country\" ], \"windowSize\": 60, \"expr\": \"totalSales\" }, \"Country.AvgSales\": { \"node\": [ \"tree1\", \"Region\", \"Country\" ], \"windowSize\": 60, \"expr\": \"avgSales\" }, \"Country.NumberOfSales\": { \"node\": [ \"tree1\", \"Region\", \"Country\" ], \"windowSize\": 60, \"expr\": \"numSales\" } } } Create the Workflow Create the real-time workflow. In this guide we use Pulse agents to simulate sales data coming from three different sources, EMEA, AMERICAS, and APAC. To create the workflow: Add three Pulse agents and an Analysis agent. Open Workflow - Pulse Agents Configure the Pulse agents as follows: AMERICAS will send 1000 TPS - Set Time Unit to MILLISECONDS and Interval to 100 EMEA will send 500 TPS - Set Time Unit to MILLISECONDS and Interval to 200 APAC will send 250 TPS - Set Time Unit to MILLISECONDS and Interval to 400 To be able to identify the data, set the data to the region name. Open Pulse agent configuration The Pulse agents only sends us a simple event containing the name of the region, the other data that will be used in the KPI calculations are generated in the connected Analysis agent. In the Analysis agent, click on the Set to Input button beneath UDR Types and paste the APL code below to create the input to KPI Management. list<string> americas = listCreate(string, \"US\", \"Canada\", \"Mexico\", \"Brazil\", \"Argentina\", \"Cuba\", \"Colombia\"); list<string> emea = listCreate(string, \"Sweden\", \"UK\", \"Portugal\", \"Italy\", \"France\", \"Germany\", \"Norway\", \"Spain\", \"Finland\", \"Denmark\"); list<string> apac = listCreate(string, \"India\", \"China\", \"Japan\", \"Thailand\", \"Australia\", \"Indonesia\", \"Malaysia\",\"South Korea\"); consume { // create KDR - the input for the KPI CLusterIn agent kpimanagement.KDR kdr = udrCreate(kpimanagement.KDR); // The KDR has a type field - we set this to the value we had for our data type in the model kdr.type = \"sales\"; // It also has a timestamp field - lets populate that from the current time but using seconds. kdr.timestamp = dateCreateNowMilliseconds() / 1000; string region = baToStr(input.Data); // the data in our use case (country, city, amount) we will put in the values field of the kdr. map<string, any> sales = mapCreate(string,any); mapSet(sales, \"region\", region); // lets create a random amount between 1 and 1000 int amount = randomInt(1000); // set amount and city depending on the region if (region == \"AMERICAS\") { mapSet(sales, \"amount\", amount * 1.25d); mapSet(sales, \"country\", randomCountry(americas)); } else if (region == \"EMEA\") { mapSet(sales, \"amount\", amount * 1.0d); mapSet(sales, \"country\", randomCountry(emea)); } else if (region == \"APAC\") { mapSet(sales, \"amount\", amount * 0.65d); mapSet(sales, \"country\", randomCountry(apac)); } else { mapSet(sales, \"amount\", 0.0d); mapSet(sales, \"country\", \"UNKNOWN\"); debug(\"Unknown region:\" + region); } kdr.values = sales; udrRoute(kdr); } // pick a random country from a list string randomCountry(list<string> countries) { int index = randomInt(listSize(countries)); return listGet(countries, index); } Add a KPI agent and configure it to use the KPI profile that you created in step 1. Set Delay to 0 . Open Workflow - KPI agent Open KPI agent configuration Add another Analysis agent for debugging of the KPIs. Open Final workflow configuration In the Analysis agent, click on the Set to Input button beneath UDR Types and paste the APL code below to the Analysis agent. string format = \"yyyy-MM-dd'T'HH:mm:ss:S\"; consume { // input is KPIAggregatedOutput which contains a list of // KPIOutput list<kpimanagement.KPIOutput> kpis = input.kpiOutputUDRs; // loop the KPIs and debug string dateStr = \"\"; for (int i = 0; i < listSize(kpis); i++) { kpimanagement.KPIOutput kpi = listGet(kpis, i); dateToString(dateStr, dateCreateFromMilliseconds(kpi.periodStart * 1000), format); debug(\"Period start: \" + dateStr + \", instance: \" + kpi.instancePath + \", KPI: \" + kpi.kpi + \", Value:\" + kpi.value + \", Samples: \" + kpi.sampleCount); } } Save the workflow. Start the Workflow To start the workflow: Open the workflow configuration in the Workflow Monitor. Enable debugging and select events for the KPI agent and the Analysis agent that produces the debug output. Ensure to have an ec running and click on the Start button. The calculated KPIs will be displayed in the debug output in the Workflow Monitor. Note! It will take a minute before the output is displayed due to the configuration of the windowSize property in the service model. Open Debug output",
      "title": "KPI Management Quick-Start Guide - Non-Distributed - MediationZone Documentation 9.3 - InfoZone",
      "url": "https://infozone.atlassian.net/wiki/spaces/MD93/pages/204611353/KPI+Management+Quick-Start+Guide+-+Non-Distributed",
      "word_count": 1379,
      "char_count": 8772
    }
  ],
  "metadata": {
    "scraped_at": "2025-06-24T03:46:34.167860",
    "word_count": 1379,
    "char_count": 8772,
    "chunk_count": 1
  }
}