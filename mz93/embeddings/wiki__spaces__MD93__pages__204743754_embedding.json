{
  "id": "wiki__spaces__MD93__pages__204743754",
  "title": "HTTP/2 Functions - MediationZone Documentation 9.3 - InfoZone",
  "url": "https://infozone.atlassian.net/wiki/spaces/MD93/pages/204743754",
  "categories": [
    "space:MD93"
  ],
  "text": "The HTTP/2 functions are used to exchange data over HTTP/2 as a client. However, the functions can also be used for HTTP/1. The client functions are used to exchange data with a HTTP server. There are specific functions for GET and POST as well as functions for general HTTP requests. Either plain text or encrypted communication can be used. Basic authentication is supported, as well as the use of a keystore, and if required a truststore, for the functions with an encrypted communication channel. Note! In all parameter descriptions below, \"HTTP\" may refer to both HTTP and HTTPS, and both HTTP/1 and HTTP/2. The following functions for HTTP/2 described here are: 1 httpGet 2 httpPost 3 httpReq 4 httpMultipartPost 5 TLS/SSL Encryption httpGet This function uses the GET method to retrieve content from an HTTP server, see Response(9.3) . Response httpGet ( string host, string path, string protocol, //Optional int port, //Optional boolean secure, //Optional int requestTimeout, //Optional int connectionTimeout, //Optional string username, //Optional string password, //Optional map<string, string> headers ) //Optional Parameter Description Parameter Description host The name or IP address of the HTTP server. path The path. Example - path /api/v2/doc protocol The protocol used: HTTP/1 or HTTP/2. The default value is HTTP/1. To use HTTP/2, you must set this value to \"h2\". port The port number to contact the HTTP server on. Port 80 is used for HTTP connection and 443 is used for HTTPS connection by default. secure Indicates whether the data should be sent in secure mode or not. requestTimeout The number of milliseconds to wait for a response. If the value is not specifically specified, the default timeout is used. The default value is 15000 milliseconds. connectionTimeout The number of milliseconds to wait for a connection to be established. If the value is not specifically specified, the default timeout is used. The default value is 3000 milliseconds. username A username for an account on the HTTP server. password Password associated with the username. headers Custom HTTP request headers. Returns A response from the HTTP server. It will be null if any part of the communication fails. httpPost This function uses the POST method to send content to an HTTP/2 server and receives the response. Response httpPost ( string host, string path, bytearray content, string contentType, string protocol, //Optional int port, //Optional boolean secure, //Optional int requestTimeout, //Optional int connectionTimeout, //Optional string username, //Optional string password, //Optional map<string, string> headers ) //Optional Parameter Description Parameter Description host The name or IP address of the HTTP server. path The path Example - path /api/v2/doc bytarray content The body of the request in bytearray format. contentType The MIME type of the content. Example - contentType application/json protocol The protocol used: HTTP/1 or HTTP/2. The default value is HTTP/1. To use HTTP/2, you must set this value to \"h2\". port The port number to contact the HTTP server on. Port 80 is used for HTTP connection and 443 is used for HTTPS connection by default. secure Indicates whether the data should be sent in secure mode or not. requestTimeout The number of milliseconds to wait for a response. If the value is not specifically specified, the default timeout is used. The default value is 15000 milliseconds. connectionTimeout The number of milliseconds to wait for a connection to be established. If the value is not specifically specified, the default timeout is used. The default value is 3000 milliseconds. username A username for an account on the HTTP server. password Password associated with the username. headers Custom HTTP request headers. Returns A response from the HTTP server. It will be null if any part of the communication fails. httpReq This function makes an HTTP request and uses the specified method, for example GET, POST, and PUT. Response httpReq ( string method, string host, string path, bytearray content, string contentType, string protocol, //Optional int port, //Optional boolean secure, //Optional int requestTimeout, //Optional int connectionTimeout, //Optional string username, //Optional string password, //Optional map<string,string> headers )//Optional Parameter Description Parameter Description method The HTTP method. host The name or IP address of the HTTP server. path The path Example - path /api/v2/doc content The body of the request in bytearray format. contentType The MIME type of the content. Example - contentType application/json protocol The protocol used: HTTP/1 or HTTP/2. The default value is HTTP/1. To use HTTP/2, you must set this value to \"h2\". port The port number to contact the HTTP server on. Port 80 is used for HTTP connection and 443 is used for HTTPS connection by default. secure Indicates whether the data should be sent in secure mode or not. requestTimeout The number of milliseconds to wait for a response. If the value is not specifically specified, the default timeout is used. The default value is 15000 milliseconds. connectionTimeout The number of milliseconds to wait for a connection to be established. If the value is not specifically specified, the default timeout is used. The default value is 3000 milliseconds. username A username for an account on the HTTP server. password Password associated with the username. headers Custom HTTP request headers. Returns A response from the HTTP server. It will be null if any part of the communication fails. httpMultipartPost This function uses the POST method to send multipart binary contents to an HTTP server and receives the response. Response httpMultipartPost ( string host, string path, list<MultipartSegmentUDR> content, string protocol, //Optional int port, //Optional boolean secure, //Optional int requestTimeout, //Optional int connectionTimeout, //Optional string username, //Optional string password, //Optional map<string, string> headers ) //Optional Parameter Description Parameter Description host The name or IP address of the HTTP server. path The path on the server to which we should do the POST. content The body of the the request. protocol The protocol used: HTTP/1 or HTTP/2. The default value is HTTP/1. To use HTTP/2, you must set this value to \"h2\". port The port to be used for the HTTP server. Port 80 is used for HTTP connection and 443 is used for HTTPS connection by default. secure Indicates whether the data should be sent in secure mode or not. requestTimeout The number of milliseconds to wait for a response. If the value is not specifically specified, the default timeout is used. The default value is 15000 milliseconds. connectionTimeout The number of milliseconds to wait for a connection to be established. If the value is not specifically specified, the default timeout is used. The default value is 3000 milliseconds. username Username for the account to be used on the HTTP server. password Password associated with the username. headers Custom HTTP request headers. Returns A response from the HTTP server. It will be null if any part of the communication fails. Note! For optional parameters, you need to state null in case you supply subsequent optional parameters. If there are no subsequent parameters, you do not have to state anything. TLS/SSL Encryption When selecting secure, a keystore is required. In this case, the use of a truststore is supported. Configure Java Keystore for Secure URL Functions Keystore is used to store HTTP Clients credential. This certificate is sent to a server for authentication if required. To specify a Keystore file that you want to use, set the properties https.apl.keystore_location and https.apl.keystore_passphrase in the relevant ECs. See the example below for how to set these properties using the mzsh topo command. Example - Setting Java keystore properties $ mzsh topo set topo://container:<container>/pico:<pico>/val:config.properties.https.apl.keystore_location <location of the Keystore file> $ mzsh topo set topo://container:<container>/pico:<pico>/val:config.properties.https.apl.keystore_passphrase <DR encrypted password> If the two properties above are not set in the relevant Execution Context <pico> .conf , MZ Default Keystore is used. The property https.apl.keystore_location represents the location of the keystore and the property https.apl.keystore_passphrase represents the passphrase for that keystore. The following command can be used to create a keystore with the Java keytool program. keytool -keystore /var/opt/mz/HttpdExec.keystore -genkey -keyalg RSA Note! The Keystore passphrase must be the same as the passphrase used by the certificate. See the JVM product documentation for more information about how to use the keytool. Configure Java Truststore for Secure URL Functions A truststore is a keystore that is used when deciding what to trust - truststore stores certificates from third parties. If you receive data from an entity that you already trust, and if you can verify that the entity is what it claims to be, you can assume that the data does in fact come from that entity. By Default, MediationZone uses its own truststore, which always trusts any server connection. If you want to use a specific truststore, use the mzsh topo command to add the property https.apl.userdefined.truststore to the required ECs and set the value to true: $ mzsh topo set topo://container:<container>/pico:<pico>/val:config.properties.https.apl.userdefined.truststore true The default value of this property is false . After setting the property https.apl.userdefined.truststore to true , if you want to use a specific truststore, use the mzsh topo command to set the following properties in the relevant ECs: https.apl.truststore_location https.apl.truststore_passphrase Example - Setting properties to use a specific truststore $ mzsh topo set topo://container:<container>/pico:<pico>/val:config.properties.https.apl.truststore_location <location of the truststore file> $ mzsh topo set topo://container:<container>/pico:<pico>/val:config.properties.https.apl.truststore_passphrase <DR encrypted password> If you do not set these two properties, the Java Default Truststore is used.",
  "chunks": [
    {
      "chunk_id": 1,
      "text": "The HTTP/2 functions are used to exchange data over HTTP/2 as a client. However, the functions can also be used for HTTP/1. The client functions are used to exchange data with a HTTP server. There are specific functions for GET and POST as well as functions for general HTTP requests. Either plain text or encrypted communication can be used. Basic authentication is supported, as well as the use of a keystore, and if required a truststore, for the functions with an encrypted communication channel. Note! In all parameter descriptions below, \"HTTP\" may refer to both HTTP and HTTPS, and both HTTP/1 and HTTP/2. The following functions for HTTP/2 described here are: 1 httpGet 2 httpPost 3 httpReq 4 httpMultipartPost 5 TLS/SSL Encryption httpGet This function uses the GET method to retrieve content from an HTTP server, see Response(9.3) . Response httpGet ( string host, string path, string protocol, //Optional int port, //Optional boolean secure, //Optional int requestTimeout, //Optional int connectionTimeout, //Optional string username, //Optional string password, //Optional map<string, string> headers ) //Optional Parameter Description Parameter Description host The name or IP address of the HTTP server. path The path. Example - path /api/v2/doc protocol The protocol used: HTTP/1 or HTTP/2. The default value is HTTP/1. To use HTTP/2, you must set this value to \"h2\". port The port number to contact the HTTP server on. Port 80 is used for HTTP connection and 443 is used for HTTPS connection by default. secure Indicates whether the data should be sent in secure mode or not. requestTimeout The number of milliseconds to wait for a response. If the value is not specifically specified, the default timeout is used. The default value is 15000 milliseconds. connectionTimeout The number of milliseconds to wait for a connection to be established. If the value is not specifically specified, the default timeout is used. The default value is 3000 milliseconds. username A username for an account on the HTTP server. password Password associated with the username. headers Custom HTTP request headers. Returns A response from the HTTP server. It will be null if any part of the communication fails. httpPost This function uses the POST method to send content to an HTTP/2 server and receives the response. Response httpPost ( string host, string path, bytearray content, string contentType, string protocol, //Optional int port, //Optional boolean secure, //Optional int requestTimeout, //Optional int connectionTimeout, //Optional string username, //Optional string password, //Optional map<string, string> headers ) //Optional Parameter Description Parameter Description host The name or IP address of the HTTP server. path The path Example - path /api/v2/doc bytarray content The body of the request in bytearray format. contentType The MIME type of the content. Example - contentType application/json protocol The protocol used: HTTP/1 or HTTP/2. The default value is HTTP/1. To use HTTP/2, you must set this value to \"h2\". port The port number to contact the HTTP server on. Port 80 is used for HTTP connection and 443 is used for HTTPS connection by default. secure Indicates whether the data should be sent in secure mode or not. requestTimeout The number of milliseconds to wait for a response. If the value is not specifically specified, the default timeout is used. The default value is 15000 milliseconds. connectionTimeout The number of milliseconds to wait for a connection to be established. If the value is not specifically specified, the default timeout is used. The default value is 3000 milliseconds. username A username for an account on the HTTP server. password Password associated with the username. headers Custom HTTP request headers. Returns A response from the HTTP server. It will be null if any part of the communication fails. httpReq This function makes an HTTP request and uses the specified method, for example GET, POST, and PUT. Response httpReq ( string method, string host, string path, bytearray content, string contentType, string protocol, //Optional int port, //Optional boolean secure, //Optional int requestTimeout, //Optional int connectionTimeout, //Optional string username, //Optional string password, //Optional map<string,string> headers )//Optional Parameter Description Parameter Description method The HTTP method. host The name or IP address of the HTTP server. path The path Example - path /api/v2/doc content The body of the request in bytearray format. contentType The MIME type of the content. Example - contentType application/json protocol The protocol used: HTTP/1 or HTTP/2. The default value is HTTP/1. To use HTTP/2, you must set this value to \"h2\". port The port number to contact the HTTP server on. Port 80 is used for HTTP connection and 443 is used for HTTPS connection by default. secure Indicates whether the data should be sent in secure mode or not. requestTimeout The number of milliseconds to wait for a response. If the value is not specifically specified, the default timeout is used. The default value is 15000 milliseconds. connectionTimeout The number of milliseconds to wait for a connection to be established. If the value is not specifically specified, the default timeout is used. The default value is 3000 milliseconds. username A username for an account on the HTTP server. password Password associated with the username. headers Custom HTTP request headers. Returns A response from the HTTP server. It will be null if any part of the communication fails. httpMultipartPost This function uses the POST method to send multipart binary contents to an HTTP server and receives the response. Response httpMultipartPost ( string host, string path, list<MultipartSegmentUDR> content, string protocol, //Optional int port, //Optional boolean secure, //Optional int requestTimeout, //Optional int connectionTimeout, //Optional string username, //Optional string password, //Optional map<string, string> headers ) //Optional Parameter Description Parameter Description host The name or IP address of the HTTP server. path The path on the server to which we should do the POST. content The body of the the request. protocol The protocol used: HTTP/1 or HTTP/2. The default value is HTTP/1. To use HTTP/2, you must set this value to \"h2\". port The port to be used for the HTTP server. Port 80 is used for HTTP connection and 443 is used for HTTPS connection by default. secure Indicates whether the data should be sent in secure mode or not. requestTimeout The number of milliseconds to wait for a response. If the value is not specifically specified, the default timeout is used. The default value is 15000 milliseconds. connectionTimeout The number of milliseconds to wait for a connection to be established. If the value is not specifically specified, the default timeout is used. The default value is 3000 milliseconds. username Username for the account to be used on the HTTP server. password Password associated with the username. headers Custom HTTP request headers. Returns A response from the HTTP server. It will be null if any part of the communication fails. Note! For optional parameters, you need to state null in case you supply subsequent optional parameters. If there are no subsequent parameters, you do not have to state anything. TLS/SSL Encryption When selecting secure, a keystore is required. In this case, the use of a truststore is supported. Configure Java Keystore for Secure URL Functions Keystore is used to store HTTP Clients credential. This certificate is sent to a server for authentication if required. To specify a Keystore file that you want to use, set the properties https.apl.keystore_location and https.apl.keystore_passphrase in the relevant ECs. See the example below for how to set these properties using the mzsh topo command. Example - Setting Java keystore properties $ mzsh topo set topo://container:<container>/pico:<pico>/val:config.properties.https.apl.keystore_location <location of the Keystore file> $ mzsh topo set topo://container:<container>/pico:<pico>/val:config.properties.https.apl.keystore_passphrase <DR encrypted password> If the two properties above are not set in the relevant Execution Context <pico> .conf , MZ Default Keystore is used. The property https.apl.keystore_location represents the location of the keystore and the property https.apl.keystore_passphrase represents the passphrase for that keystore. The following command can be used to create a keystore with the Java keytool program. keytool -keystore /var/opt/mz/HttpdExec.keystore -genkey -keyalg RSA Note! The Keystore passphrase must be the same as the passphrase used by the certificate. See the JVM product documentation for more information about how to use the keytool. Configure Java Truststore for Secure URL Functions A truststore is a keystore that is used when deciding what to trust - truststore stores certificates from third parties. If you receive data from an entity that you already trust, and if you can verify that the entity is what it claims to be, you can assume that the data does in fact come from that entity. By Default, MediationZone uses its own truststore, which always trusts any server connection. If you want to use a specific truststore, use the mzsh topo command to add the property https.apl.userdefined.truststore to the required ECs and set the value to true: $ mzsh topo set topo://container:<container>/pico:<pico>/val:config.properties.https.apl.userdefined.truststore true The default value of this property is false . After setting the property https.apl.userdefined.truststore to true , if you want to use a specific truststore, use the mzsh topo command to set the following properties in the relevant ECs: https.apl.truststore_location https.apl.truststore_passphrase Example - Setting properties to use a specific truststore $ mzsh topo set topo://container:<container>/pico:<pico>/val:config.properties.https.apl.truststore_location <location of the truststore file> $ mzsh topo set topo://container:<container>/pico:<pico>/val:config.properties.https.apl.truststore_passphrase <DR encrypted password> If you do not set these two properties, the Java Default Truststore is used.",
      "title": "HTTP/2 Functions - MediationZone Documentation 9.3 - InfoZone",
      "url": "https://infozone.atlassian.net/wiki/spaces/MD93/pages/204743754",
      "word_count": 1534,
      "char_count": 10241
    }
  ],
  "metadata": {
    "scraped_at": "2025-06-24T03:54:59.644467",
    "word_count": 1534,
    "char_count": 10241,
    "chunk_count": 1
  }
}