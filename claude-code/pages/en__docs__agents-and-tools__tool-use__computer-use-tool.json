{
  "url": "https://docs.anthropic.com/en/docs/agents-and-tools/tool-use/computer-use-tool",
  "title": "Computer use tool - Anthropic",
  "text": "Anthropic\nhome page\nEnglish\nSearch...\nSearch...\nNavigation\nTools\nComputer use tool\nWelcome\nDeveloper Guide\nAPI Guide\nClaude Code\nModel Context Protocol (MCP)\nResources\nRelease Notes\nDocumentation\nDeveloper Discord\nSupport\nFirst steps\nIntro to Claude\nGet started\nModels & pricing\nModels overview\nChoosing a model\nMigrating to Claude 4\nModel deprecations\nPricing\nLearn about Claude\nBuilding with Claude\nFeatures overview\nContext windows\nGlossary\nCapabilities\nPrompt caching\nExtended thinking\nStreaming Messages\nBatch processing\nCitations\nMultilingual support\nToken counting\nEmbeddings\nVision\nPDF support\nFiles API\nGoogle Sheets add-on\nTools\nOverview\nHow to implement tool use\nToken-efficient tool use\nFine-grained tool streaming\nBash tool\nCode execution tool\nComputer use tool\nText editor tool\nWeb search tool\nModel Context Protocol (MCP)\nMCP connector\nRemote MCP servers\nUse cases\nOverview\nTicket routing\nCustomer support agent\nContent moderation\nLegal summarization\nPrompt engineering\nOverview\nClaude 4 best practices\nPrompt generator\nUse prompt templates\nPrompt improver\nBe clear and direct\nUse examples (multishot prompting)\nLet Claude think (CoT)\nUse XML tags\nGive Claude a role (system prompts)\nPrefill Claude's response\nChain complex prompts\nLong context tips\nExtended thinking tips\nTest & evaluate\nDefine success criteria\nDevelop test cases\nUsing the Evaluation Tool\nReducing latency\nStrengthen guardrails\nReduce hallucinations\nIncrease output consistency\nMitigate jailbreaks\nStreaming refusals\nReduce prompt leak\nKeep Claude in character\nLegal center\nAnthropic Privacy Policy\nSecurity and compliance\nClaude can interact with computer environments through the computer use tool, which provides screenshot capabilities and mouse/keyboard control for autonomous desktop interaction.\nComputer use is currently in beta and requires a\nbeta header\n:\n\"computer-use-2025-01-24\"\n(Claude 4 and 3.7 models)\n\"computer-use-2024-10-22\"\n(Claude Sonnet 3.5)\n​\nOverview\nComputer use is a beta feature that enables Claude to interact with desktop environments. This tool provides:\nScreenshot capture\n: See what’s currently displayed on screen\nMouse control\n: Click, drag, and move the cursor\nKeyboard input\n: Type text and use keyboard shortcuts\nDesktop automation\n: Interact with any application or interface\nWhile computer use can be augmented with other tools like bash and text editor for more comprehensive automation workflows, computer use specifically refers to the computer use tool’s capability to see and control desktop environments.\n​\nModel compatibility\nComputer use is available for the following Claude models:\nModel\nTool Version\nBeta Flag\nClaude 4 Opus & Sonnet\ncomputer_20250124\ncomputer-use-2025-01-24\nClaude Sonnet 3.7\ncomputer_20250124\ncomputer-use-2025-01-24\nClaude Sonnet 3.5 (new)\ncomputer_20241022\ncomputer-use-2024-10-22\nClaude 4 models use updated tool versions optimized for the new architecture. Claude Sonnet 3.7 introduces additional capabilities including the thinking feature for more insight into the model’s reasoning process.\n​\nSecurity considerations\nComputer use is a beta feature with unique risks distinct from standard API features. These risks are heightened when interacting with the internet. To minimize risks, consider taking precautions such as:\nUse a dedicated virtual machine or container with minimal privileges to prevent direct system attacks or accidents.\nAvoid giving the model access to sensitive data, such as account login information, to prevent information theft.\nLimit internet access to an allowlist of domains to reduce exposure to malicious content.\nAsk a human to confirm decisions that may result in meaningful real-world consequences as well as any tasks requiring affirmative consent, such as accepting cookies, executing financial transactions, or agreeing to terms of service.\nIn some circumstances, Claude will follow commands found in content even if it conflicts with the user’s instructions. For example, Claude instructions on webpages or contained in images may override instructions or cause Claude to make mistakes. We suggest taking precautions to isolate Claude from sensitive data and actions to avoid risks related to prompt injection.\nWe’ve trained the model to resist these prompt injections and have added an extra layer of defense. If you use our computer use tools, we’ll automatically run classifiers on your prompts to flag potential instances of prompt injections. When these classifiers identify potential prompt injections in screenshots, they will automatically steer the model to ask for user confirmation before proceeding with the next action. We recognize that this extra protection won’t be ideal for every use case (for example, use cases without a human in the loop), so if you’d like to opt out and turn it off, please\ncontact us\n.\nWe still suggest taking precautions to isolate Claude from sensitive data and actions to avoid risks related to prompt injection.\nFinally, please inform end users of relevant risks and obtain their consent prior to enabling computer use in your own products.\nComputer use reference implementation\nGet started quickly with our computer use reference implementation that includes a web interface, Docker container, example tool implementations, and an agent loop.\nNote:\nThe implementation has been updated to include new tools for both Claude 4 and Claude Sonnet 3.7. Be sure to pull the latest version of the repo to access these new features.\nPlease use\nthis form\nto provide\nfeedback on the quality of the model responses, the API itself, or the quality\nof the documentation - we cannot wait to hear from you!\n​\nQuick start\nHere’s how to get started with computer use:\nPython\nShell\nimport\nanthropic\nclient\n=\nanthropic\n.\nAnthropic\n(\n)\nresponse\n=\nclient\n.\nbeta\n.\nmessages\n.\ncreate\n(\nmodel\n=\n\"claude-sonnet-4-20250514\"\n,\n# or another compatible model\nmax_tokens\n=\n1024\n,\ntools\n=\n[\n{\n\"type\"\n:\n\"computer_20250124\"\n,\n\"name\"\n:\n\"computer\"\n,\n\"display_width_px\"\n:\n1024\n,\n\"display_height_px\"\n:\n768\n,\n\"display_number\"\n:\n1\n,\n}\n,\n{\n\"type\"\n:\n\"text_editor_20250124\"\n,\n\"name\"\n:\n\"str_replace_editor\"\n}\n,\n{\n\"type\"\n:\n\"bash_20250124\"\n,\n\"name\"\n:\n\"bash\"\n}\n]\n,\nmessages\n=\n[\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n\"Save a picture of a cat to my desktop.\"\n}\n]\n,\nbetas\n=\n[\n\"computer-use-2025-01-24\"\n]\n)\nprint\n(\nresponse\n)\nBeta header requirements:\nClaude 4 and Sonnet 3.7\n: Beta header only required for the computer use tool\nClaude Sonnet 3.5\n: Beta header required for computer, bash, and text editor tools\nThe example above shows all three tools being used together, which requires the beta header for any Claude model since it includes the computer use tool.\n​\nHow computer use works\n1. Provide Claude with the computer use tool and a user prompt\nAdd the computer use tool (and optionally other tools) to your API request.\nInclude a user prompt that requires desktop interaction, e.g., “Save a picture of a cat to my desktop.”\n2. Claude decides to use the computer use tool\nClaude assesses if the computer use tool can help with the user’s query.\nIf yes, Claude constructs a properly formatted tool use request.\nThe API response has a\nstop_reason\nof\ntool_use\n, signaling Claude’s intent.\n3. Extract tool input, evaluate the tool on a computer, and return results\nOn your end, extract the tool name and input from Claude’s request.\nUse the tool on a container or Virtual Machine.\nContinue the conversation with a new\nuser\nmessage containing a\ntool_result\ncontent block.\n4. Claude continues calling computer use tools until it's completed the task\nClaude analyzes the tool results to determine if more tool use is needed or the task has been completed.\nIf Claude decides it needs another tool, it responds with another\ntool_use\nstop_reason\nand you should return to step 3.\nOtherwise, it crafts a text response to the user.\nWe refer to the repetition of steps 3 and 4 without user input as the “agent loop” - i.e., Claude responding with a tool use request and your application responding to Claude with the results of evaluating that request.\n​\nThe computing environment\nComputer use requires a sandboxed computing environment where Claude can safely interact with applications and the web. This environment includes:\nVirtual display\n: A virtual X11 display server (using Xvfb) that renders the desktop interface Claude will see through screenshots and control with mouse/keyboard actions.\nDesktop environment\n: A lightweight UI with window manager (Mutter) and panel (Tint2) running on Linux, which provides a consistent graphical interface for Claude to interact with.\nApplications\n: Pre-installed Linux applications like Firefox, LibreOffice, text editors, and file managers that Claude can use to complete tasks.\nTool implementations\n: Integration code that translates Claude’s abstract tool requests (like “move mouse” or “take screenshot”) into actual operations in the virtual environment.\nAgent loop\n: A program that handles communication between Claude and the environment, sending Claude’s actions to the environment and returning the results (screenshots, command outputs) back to Claude.\nWhen you use computer use, Claude doesn’t directly connect to this environment. Instead, your application:\nReceives Claude’s tool use requests\nTranslates them into actions in your computing environment\nCaptures the results (screenshots, command outputs, etc.)\nReturns these results to Claude\nFor security and isolation, the reference implementation runs all of this inside a Docker container with appropriate port mappings for viewing and interacting with the environment.\n​\nHow to implement computer use\n​\nStart with our reference implementation\nWe have built a\nreference implementation\nthat includes everything you need to get started quickly with computer use:\nA\ncontainerized environment\nsuitable for computer use with Claude\nImplementations of\nthe computer use tools\nAn\nagent loop\nthat interacts with the Anthropic API and executes the computer use tools\nA web interface to interact with the container, agent loop, and tools.\n​\nUnderstanding the multi-agent loop\nThe core of computer use is the “agent loop” - a cycle where Claude requests tool actions, your application executes them, and returns results to Claude. Here’s a simplified example:\nasync\ndef\nsampling_loop\n(\n*\n,\nmodel\n:\nstr\n,\nmessages\n:\nlist\n[\ndict\n]\n,\napi_key\n:\nstr\n,\nmax_tokens\n:\nint\n=\n4096\n,\ntool_version\n:\nstr\n,\nthinking_budget\n:\nint\n|\nNone\n=\nNone\n,\nmax_iterations\n:\nint\n=\n10\n,\n# Add iteration limit to prevent infinite loops\n)\n:\n\"\"\n\"\nA simple agent loop\nfor\nClaude computer use interactions\n.\nThis function handles the back\n-\nand\n-\nforth between\n:\n1.\nSending user messages to Claude\n2.\nClaude requesting to use tools\n3.\nYour app executing those tools\n4.\nSending tool results back to Claude\n\"\"\n\"\n# Set up tools and API parameters\nclient\n=\nAnthropic\n(\napi_key\n=\napi_key\n)\nbeta_flag\n=\n\"computer-use-2025-01-24\"\nif\n\"20250124\"\nin\ntool_version\nelse\n\"computer-use-2024-10-22\"\n# Configure tools - you should already have these initialized elsewhere\ntools\n=\n[\n{\n\"type\"\n:\nf\"computer_\n{\ntool_version\n}\n\"\n,\n\"name\"\n:\n\"computer\"\n,\n\"display_width_px\"\n:\n1024\n,\n\"display_height_px\"\n:\n768\n}\n,\n{\n\"type\"\n:\nf\"text_editor_\n{\ntool_version\n}\n\"\n,\n\"name\"\n:\n\"str_replace_editor\"\n}\n,\n{\n\"type\"\n:\nf\"bash_\n{\ntool_version\n}\n\"\n,\n\"name\"\n:\n\"bash\"\n}\n]\n# Main agent loop (with iteration limit to prevent runaway API costs)\niterations\n=\n0\nwhile\nTrue\nand\niterations\n<\nmax_iterations\n:\niterations\n+=\n1\n# Set up optional thinking parameter (for Claude Sonnet 3.7)\nthinking\n=\nNone\nif\nthinking_budget\n:\nthinking\n=\n{\n\"type\"\n:\n\"enabled\"\n,\n\"budget_tokens\"\n:\nthinking_budget\n}\n# Call the Claude API\nresponse\n=\nclient\n.\nbeta\n.\nmessages\n.\ncreate\n(\nmodel\n=\nmodel\n,\nmax_tokens\n=\nmax_tokens\n,\nmessages\n=\nmessages\n,\ntools\n=\ntools\n,\nbetas\n=\n[\nbeta_flag\n]\n,\nthinking\n=\nthinking\n)\n# Add Claude's response to the conversation history\nresponse_content\n=\nresponse\n.\ncontent\nmessages\n.\nappend\n(\n{\n\"role\"\n:\n\"assistant\"\n,\n\"content\"\n:\nresponse_content\n}\n)\n# Check if Claude used any tools\ntool_results\n=\n[\n]\nfor\nblock\nin\nresponse_content\n:\nif\nblock\n.\ntype\n==\n\"tool_use\"\n:\n# In a real app, you would execute the tool here\n# For example: result = run_tool(block.name, block.input)\nresult\n=\n{\n\"result\"\n:\n\"Tool executed successfully\"\n}\n# Format the result for Claude\ntool_results\n.\nappend\n(\n{\n\"type\"\n:\n\"tool_result\"\n,\n\"tool_use_id\"\n:\nblock\n.\nid\n,\n\"content\"\n:\nresult\n}\n)\n# If no tools were used, Claude is done - return the final messages\nif\nnot\ntool_results\n:\nreturn\nmessages\n# Add tool results to messages for the next iteration with Claude\nmessages\n.\nappend\n(\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\ntool_results\n}\n)\nThe loop continues until either Claude responds without requesting any tools (task completion) or the maximum iteration limit is reached. This safeguard prevents potential infinite loops that could result in unexpected API costs.\nWhen using the computer use tool, you must include the appropriate beta flag for your model version:\nClaude 4 models\nWhen using\ncomputer_20250124\n, include this beta flag:\n\"betas\": [\"computer-use-2025-01-24\"]\nClaude Sonnet 3.7\nWhen using\ncomputer_20250124\n, include this beta flag:\n\"betas\": [\"computer-use-2025-01-24\"]\nClaude Sonnet 3.5 (new)\nWhen using\ncomputer_20241022\n, include this beta flag:\n\"betas\": [\"computer-use-2024-10-22\"]\nNote: For Claude 4 and Sonnet 3.7, the beta flag is only required for the computer use tool. For Claude Sonnet 3.5, the beta flag is required for computer, bash, and text editor tools.\nWe recommend trying the reference implementation out before reading the rest of this documentation.\n​\nOptimize model performance with prompting\nHere are some tips on how to get the best quality outputs:\nSpecify simple, well-defined tasks and provide explicit instructions for each step.\nClaude sometimes assumes outcomes of its actions without explicitly checking their results. To prevent this you can prompt Claude with\nAfter each step, take a screenshot and carefully evaluate if you have achieved the right outcome. Explicitly show your thinking: \"I have evaluated step X...\" If not correct, try again. Only when you confirm a step was executed correctly should you move on to the next one.\nSome UI elements (like dropdowns and scrollbars) might be tricky for Claude to manipulate using mouse movements. If you experience this, try prompting the model to use keyboard shortcuts.\nFor repeatable tasks or UI interactions, include example screenshots and tool calls of successful outcomes in your prompt.\nIf you need the model to log in, provide it with the username and password in your prompt inside xml tags like\n<robot_credentials>\n. Using computer use within applications that require login increases the risk of bad outcomes as a result of prompt injection. Please review our\nguide on mitigating prompt injections\nbefore providing the model with login credentials.\nIf you repeatedly encounter a clear set of issues or know in advance the tasks\nClaude will need to complete, use the system prompt to provide Claude with\nexplicit tips or instructions on how to do the tasks successfully.\n​\nSystem prompts\nWhen one of the Anthropic-defined tools is requested via the Anthropic API, a computer use-specific system prompt is generated. It’s similar to the\ntool use system prompt\nbut starts with:\nYou have access to a set of functions you can use to answer the user’s question. This includes access to a sandboxed computing environment. You do NOT currently have the ability to inspect files or interact with external resources, except by invoking the below functions.\nAs with regular tool use, the user-provided\nsystem_prompt\nfield is still respected and used in the construction of the combined system prompt.\n​\nAvailable actions\nThe computer use tool supports these actions:\nBasic actions (all versions)\nscreenshot\n- Capture the current display\nleft_click\n- Click at coordinates\n[x, y]\ntype\n- Type text string\nkey\n- Press key or key combination (e.g., “ctrl+s”)\nmouse_move\n- Move cursor to coordinates\nEnhanced actions (\ncomputer_20250124\n)\nAvailable in Claude 4 and Claude Sonnet 3.7:\nscroll\n- Scroll in any direction with amount control\nleft_click_drag\n- Click and drag between coordinates\nright_click\n,\nmiddle_click\n- Additional mouse buttons\ndouble_click\n,\ntriple_click\n- Multiple clicks\nleft_mouse_down\n,\nleft_mouse_up\n- Fine-grained click control\nhold_key\n- Hold a key while performing other actions\nwait\n- Pause between actions\nExample actions\n// Take a screenshot\n{\n\"action\"\n:\n\"screenshot\"\n}\n// Click at position\n{\n\"action\"\n:\n\"left_click\"\n,\n\"coordinate\"\n:\n[\n500\n,\n300\n]\n}\n// Type text\n{\n\"action\"\n:\n\"type\"\n,\n\"text\"\n:\n\"Hello, world!\"\n}\n// Scroll down (Claude 4/3.7)\n{\n\"action\"\n:\n\"scroll\"\n,\n\"coordinate\"\n:\n[\n500\n,\n400\n]\n,\n\"scroll_direction\"\n:\n\"down\"\n,\n\"scroll_amount\"\n:\n3\n}\n​\nTool parameters\nParameter\nRequired\nDescription\ntype\nYes\nTool version (\ncomputer_20250124\nor\ncomputer_20241022\n)\nname\nYes\nMust be “computer”\ndisplay_width_px\nYes\nDisplay width in pixels\ndisplay_height_px\nYes\nDisplay height in pixels\ndisplay_number\nNo\nDisplay number for X11 environments\nKeep display resolution at or below 1280x800 (WXGA) for best performance. Higher resolutions may cause accuracy issues due to\nimage resizing\n.\nImportant\n: The computer use tool must be explicitly executed by your application - Claude cannot execute it directly. You are responsible for implementing the screenshot capture, mouse movements, keyboard inputs, and other actions based on Claude’s requests.\n​\nEnable thinking capability in Claude 4 and Claude Sonnet 3.7\nClaude Sonnet 3.7 introduced a new “thinking” capability that allows you to see the model’s reasoning process as it works through complex tasks. This feature helps you understand how Claude is approaching a problem and can be particularly valuable for debugging or educational purposes.\nTo enable thinking, add a\nthinking\nparameter to your API request:\n\"thinking\"\n:\n{\n\"type\"\n:\n\"enabled\"\n,\n\"budget_tokens\"\n:\n1024\n}\nThe\nbudget_tokens\nparameter specifies how many tokens Claude can use for thinking. This is subtracted from your overall\nmax_tokens\nbudget.\nWhen thinking is enabled, Claude will return its reasoning process as part of the response, which can help you:\nUnderstand the model’s decision-making process\nIdentify potential issues or misconceptions\nLearn from Claude’s approach to problem-solving\nGet more visibility into complex multi-step operations\nHere’s an example of what thinking output might look like:\n[Thinking]\nI need to save a picture of a cat to the desktop. Let me break this down into steps:\n1. First, I'll take a screenshot to see what's on the desktop\n2. Then I'll look for a web browser to search for cat images\n3. After finding a suitable image, I'll need to save it to the desktop\nLet me start by taking a screenshot to see what's available...\n​\nAugmenting computer use with other tools\nThe computer use tool can be combined with other tools to create more powerful automation workflows. This is particularly useful when you need to:\nExecute system commands (\nbash tool\n)\nEdit configuration files or scripts (\ntext editor tool\n)\nIntegrate with custom APIs or services (custom tools)\nShell\nPython\nTypeScript\nJava\ncurl\nhttps://api.anthropic.com/v1/messages\n\\\n-H\n\"content-type: application/json\"\n\\\n-H\n\"x-api-key:\n$ANTHROPIC_API_KEY\n\"\n\\\n-H\n\"anthropic-version: 2023-06-01\"\n\\\n-H\n\"anthropic-beta: computer-use-2025-01-24\"\n\\\n-d\n'\n{\n\"model\"\n:\n\"claude-opus-4-20250514\"\n,\n\"max_tokens\"\n:\n2000\n,\n\"tools\"\n:\n[\n{\n\"type\"\n:\n\"computer_20250124\"\n,\n\"name\"\n:\n\"computer\"\n,\n\"display_width_px\"\n:\n1024\n,\n\"display_height_px\"\n:\n768\n,\n\"display_number\"\n:\n1\n}\n,\n{\n\"type\"\n:\n\"text_editor_20250124\"\n,\n\"name\"\n:\n\"str_replace_editor\"\n}\n,\n{\n\"type\"\n:\n\"bash_20250124\"\n,\n\"name\"\n:\n\"bash\"\n}\n,\n{\n\"name\"\n:\n\"get_weather\"\n,\n\"description\"\n:\n\"Get the current weather in a given location\"\n,\n\"input_schema\"\n:\n{\n\"type\"\n:\n\"object\"\n,\n\"properties\"\n:\n{\n\"location\"\n:\n{\n\"type\"\n:\n\"string\"\n,\n\"description\"\n:\n\"The city and state, e.g. San Francisco, CA\"\n}\n,\n\"unit\"\n:\n{\n\"type\"\n:\n\"string\"\n,\n\"enum\"\n:\n[\n\"celsius\"\n,\n\"fahrenheit\"\n]\n,\n\"description\"\n:\n\"The unit of temperature, either 'celsius' or 'fahrenheit'\"\n}\n}\n,\n\"required\"\n:\n[\n\"location\"\n]\n}\n}\n]\n,\n\"messages\"\n:\n[\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n\"Find flights from San Francisco to a place with warmer weather.\"\n}\n]\n,\n\"thinking\"\n:\n{\n\"type\"\n:\n\"enabled\"\n,\n\"budget_tokens\"\n:\n1024\n}\n}\n'\n​\nBuild a custom computer use environment\nThe\nreference implementation\nis meant to help you get started with computer use. It includes all of the components needed have Claude use a computer. However, you can build your own environment for computer use to suit your needs. You’ll need:\nA virtualized or containerized environment suitable for computer use with Claude\nAn implementation of at least one of the Anthropic-defined computer use tools\nAn agent loop that interacts with the Anthropic API and executes the\ntool_use\nresults using your tool implementations\nAn API or UI that allows user input to start the agent loop\n​\nImplement the computer use tool\nThe computer use tool is implemented as a schema-less tool. When using this tool, you don’t need to provide an input schema as with other tools; the schema is built into Claude’s model and can’t be modified.\n1\nSet up your computing environment\nCreate a virtual display or connect to an existing display that Claude will interact with. This typically involves setting up Xvfb (X Virtual Framebuffer) or similar technology.\n2\nImplement action handlers\nCreate functions to handle each action type that Claude might request:\ndef\nhandle_computer_action\n(\naction_type\n,\nparams\n)\n:\nif\naction_type\n==\n\"screenshot\"\n:\nreturn\ncapture_screenshot\n(\n)\nelif\naction_type\n==\n\"left_click\"\n:\nx\n,\ny\n=\nparams\n[\n\"coordinate\"\n]\nreturn\nclick_at\n(\nx\n,\ny\n)\nelif\naction_type\n==\n\"type\"\n:\nreturn\ntype_text\n(\nparams\n[\n\"text\"\n]\n)\n# ... handle other actions\n3\nProcess Claude's tool calls\nExtract and execute tool calls from Claude’s responses:\nfor\ncontent\nin\nresponse\n.\ncontent\n:\nif\ncontent\n.\ntype\n==\n\"tool_use\"\n:\naction\n=\ncontent\n.\ninput\n[\n\"action\"\n]\nresult\n=\nhandle_computer_action\n(\naction\n,\ncontent\n.\ninput\n)\n# Return result to Claude\ntool_result\n=\n{\n\"type\"\n:\n\"tool_result\"\n,\n\"tool_use_id\"\n:\ncontent\n.\nid\n,\n\"content\"\n:\nresult\n}\n4\nImplement the agent loop\nCreate a loop that continues until Claude completes the task:\nwhile\nTrue\n:\nresponse\n=\nclient\n.\nbeta\n.\nmessages\n.\ncreate\n(\n.\n.\n.\n)\n# Check if Claude used any tools\ntool_results\n=\nprocess_tool_calls\n(\nresponse\n)\nif\nnot\ntool_results\n:\n# No more tool use, task complete\nbreak\n# Continue conversation with tool results\nmessages\n.\nappend\n(\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\ntool_results\n}\n)\n​\nHandle errors\nWhen implementing the computer use tool, various errors may occur. Here’s how to handle them:\nScreenshot capture failure\nIf screenshot capture fails, return an appropriate error message:\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"tool_result\"\n,\n\"tool_use_id\"\n:\n\"toolu_01A09q90qw90lq917835lq9\"\n,\n\"content\"\n:\n\"Error: Failed to capture screenshot. Display may be locked or unavailable.\"\n,\n\"is_error\"\n:\ntrue\n}\n]\n}\nInvalid coordinates\nIf Claude provides coordinates outside the display bounds:\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"tool_result\"\n,\n\"tool_use_id\"\n:\n\"toolu_01A09q90qw90lq917835lq9\"\n,\n\"content\"\n:\n\"Error: Coordinates (1200, 900) are outside display bounds (1024x768).\"\n,\n\"is_error\"\n:\ntrue\n}\n]\n}\nAction execution failure\nIf an action fails to execute:\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"tool_result\"\n,\n\"tool_use_id\"\n:\n\"toolu_01A09q90qw90lq917835lq9\"\n,\n\"content\"\n:\n\"Error: Failed to perform click action. The application may be unresponsive.\"\n,\n\"is_error\"\n:\ntrue\n}\n]\n}\n​\nFollow implementation best practices\nUse appropriate display resolution\nSet display dimensions that match your use case while staying within recommended limits:\nFor general desktop tasks: 1024x768 or 1280x720\nFor web applications: 1280x800 or 1366x768\nAvoid resolutions above 1920x1080 to prevent performance issues\nImplement proper screenshot handling\nWhen returning screenshots to Claude:\nEncode screenshots as base64 PNG or JPEG\nConsider compressing large screenshots to improve performance\nInclude relevant metadata like timestamp or display state\nAdd action delays\nSome applications need time to respond to actions:\ndef\nclick_and_wait\n(\nx\n,\ny\n,\nwait_time\n=\n0.5\n)\n:\nclick_at\n(\nx\n,\ny\n)\ntime\n.\nsleep\n(\nwait_time\n)\n# Allow UI to update\nValidate actions before execution\nCheck that requested actions are safe and valid:\ndef\nvalidate_action\n(\naction_type\n,\nparams\n)\n:\nif\naction_type\n==\n\"left_click\"\n:\nx\n,\ny\n=\nparams\n.\nget\n(\n\"coordinate\"\n,\n(\n0\n,\n0\n)\n)\nif\nnot\n(\n0\n<=\nx\n<\ndisplay_width\nand\n0\n<=\ny\n<\ndisplay_height\n)\n:\nreturn\nFalse\n,\n\"Coordinates out of bounds\"\nreturn\nTrue\n,\nNone\nLog actions for debugging\nKeep a log of all actions for troubleshooting:\nimport\nlogging\ndef\nlog_action\n(\naction_type\n,\nparams\n,\nresult\n)\n:\nlogging\n.\ninfo\n(\nf\"Action:\n{\naction_type\n}\n, Params:\n{\nparams\n}\n, Result:\n{\nresult\n}\n\"\n)\n​\nUnderstand computer use limitations\nThe computer use functionality is in beta. While Claude’s capabilities are cutting edge, developers should be aware of its limitations:\nLatency\n: the current computer use latency for human-AI interactions may be too slow compared to regular human-directed computer actions. We recommend focusing on use cases where speed isn’t critical (e.g., background information gathering, automated software testing) in trusted environments.\nComputer vision accuracy and reliability\n: Claude may make mistakes or hallucinate when outputting specific coordinates while generating actions. Claude Sonnet 3.7 introduces the thinking capability that can help you understand the model’s reasoning and identify potential issues.\nTool selection accuracy and reliability\n: Claude may make mistakes or hallucinate when selecting tools while generating actions or take unexpected actions to solve problems. Additionally, reliability may be lower when interacting with niche applications or multiple applications at once. We recommend that users prompt the model carefully when requesting complex tasks.\nScrolling reliability\n: While Claude Sonnet 3.5 (new) had limitations with scrolling, Claude Sonnet 3.7 introduces dedicated scroll actions with direction control that improves reliability. The model can now explicitly scroll in any direction (up/down/left/right) by a specified amount.\nSpreadsheet interaction\n: Mouse clicks for spreadsheet interaction have improved in Claude Sonnet 3.7 with the addition of more precise mouse control actions like\nleft_mouse_down\n,\nleft_mouse_up\n, and new modifier key support. Cell selection can be more reliable by using these fine-grained controls and combining modifier keys with clicks.\nAccount creation and content generation on social and communications platforms\n: While Claude will visit websites, we are limiting its ability to create accounts or generate and share content or otherwise engage in human impersonation across social media websites and platforms. We may update this capability in the future.\nVulnerabilities\n: Vulnerabilities like jailbreaking or prompt injection may persist across frontier AI systems, including the beta computer use API. In some circumstances, Claude will follow commands found in content, sometimes even in conflict with the user’s instructions. For example, Claude instructions on webpages or contained in images may override instructions or cause Claude to make mistakes. We recommend:\na. Limiting computer use to trusted environments such as virtual machines or containers with minimal privileges\nb. Avoiding giving computer use access to sensitive accounts or data without strict oversight\nc. Informing end users of relevant risks and obtaining their consent before enabling or requesting permissions necessary for computer use features in your applications\nInappropriate or illegal actions\n: Per Anthropic’s terms of service, you must not employ computer use to violate any laws or our Acceptable Use Policy.\nAlways carefully review and verify Claude’s computer use actions and logs. Do not use Claude for tasks requiring perfect precision or sensitive user information without human oversight.\n​\nPricing\nComputer use follows the standard\ntool use pricing\n. When using the computer use tool:\nSystem prompt overhead\n: The computer use beta adds 466-499 tokens to the system prompt\nComputer use tool token usage\n:\nModel\nInput tokens per tool definition\nClaude 4 / Sonnet 3.7\n735 tokens\nClaude Sonnet 3.5\n683 tokens\nAdditional token consumption\n:\nScreenshot images (see\nVision pricing\n)\nTool execution results returned to Claude\nIf you’re also using bash or text editor tools alongside computer use, those tools have their own token costs as documented in their respective pages.\n​\nNext steps\nReference implementation\nGet started quickly with our complete Docker-based implementation\nTool documentation\nLearn more about tool use and creating custom tools\nWas this page helpful?\nYes\nNo\nCode execution tool\nText editor tool\nOn this page\nOverview\nModel compatibility\nSecurity considerations\nQuick start\nHow computer use works\nThe computing environment\nHow to implement computer use\nStart with our reference implementation\nUnderstanding the multi-agent loop\nOptimize model performance with prompting\nSystem prompts\nAvailable actions\nTool parameters\nEnable thinking capability in Claude 4 and Claude Sonnet 3.7\nAugmenting computer use with other tools\nBuild a custom computer use environment\nImplement the computer use tool\nHandle errors\nFollow implementation best practices\nUnderstand computer use limitations\nPricing\nNext steps",
  "links": [
    {
      "url": "https://docs.anthropic.com/en/docs/about-claude/use-case-guides/overview",
      "text": "Overview"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/about-claude/use-case-guides/ticket-routing",
      "text": "Ticket routing"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/about-claude/use-case-guides/customer-support-chat",
      "text": "Customer support agent"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/about-claude/use-case-guides/content-moderation",
      "text": "Content moderation"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/about-claude/use-case-guides/legal-summarization",
      "text": "Legal summarization"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/overview",
      "text": "Overview"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/claude-4-best-practices",
      "text": "Claude 4 best practices"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prompt-generator",
      "text": "Prompt generator"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prompt-templates-and-variables",
      "text": "Use prompt templates"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prompt-improver",
      "text": "Prompt improver"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/be-clear-and-direct",
      "text": "Be clear and direct"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/multishot-prompting",
      "text": "Use examples (multishot prompting)"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/chain-of-thought",
      "text": "Let Claude think (CoT)"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/use-xml-tags",
      "text": "Use XML tags"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/system-prompts",
      "text": "Give Claude a role (system prompts)"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prefill-claudes-response",
      "text": "Prefill Claude's response"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/chain-prompts",
      "text": "Chain complex prompts"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/long-context-tips",
      "text": "Long context tips"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/extended-thinking-tips",
      "text": "Extended thinking tips"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/define-success",
      "text": "Define success criteria"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/develop-tests",
      "text": "Develop test cases"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/eval-tool",
      "text": "Using the Evaluation Tool"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-latency",
      "text": "Reducing latency"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-hallucinations",
      "text": "Reduce hallucinations"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/increase-consistency",
      "text": "Increase output consistency"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/mitigate-jailbreaks",
      "text": "Mitigate jailbreaks"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/handle-streaming-refusals",
      "text": "Streaming refusals"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-prompt-leak",
      "text": "Reduce prompt leak"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/keep-claude-in-character",
      "text": "Keep Claude in character"
    }
  ],
  "metadata": {
    "scraped_at": "2025-06-23T15:07:44.061864",
    "word_count": 4681,
    "link_count": 29,
    "content_length": 29501
  }
}