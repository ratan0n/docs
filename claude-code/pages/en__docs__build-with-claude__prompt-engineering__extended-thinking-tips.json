{
  "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/extended-thinking-tips",
  "title": "Extended thinking tips - Anthropic",
  "text": "Anthropic\nhome page\nEnglish\nSearch...\nSearch...\nNavigation\nPrompt engineering\nExtended thinking tips\nWelcome\nDeveloper Guide\nAPI Guide\nClaude Code\nModel Context Protocol (MCP)\nResources\nRelease Notes\nDocumentation\nDeveloper Discord\nSupport\nFirst steps\nIntro to Claude\nGet started\nModels & pricing\nModels overview\nChoosing a model\nMigrating to Claude 4\nModel deprecations\nPricing\nLearn about Claude\nBuilding with Claude\nFeatures overview\nContext windows\nGlossary\nCapabilities\nPrompt caching\nExtended thinking\nStreaming Messages\nBatch processing\nCitations\nMultilingual support\nToken counting\nEmbeddings\nVision\nPDF support\nFiles API\nGoogle Sheets add-on\nTools\nOverview\nHow to implement tool use\nToken-efficient tool use\nFine-grained tool streaming\nBash tool\nCode execution tool\nComputer use tool\nText editor tool\nWeb search tool\nModel Context Protocol (MCP)\nMCP connector\nRemote MCP servers\nUse cases\nOverview\nTicket routing\nCustomer support agent\nContent moderation\nLegal summarization\nPrompt engineering\nOverview\nClaude 4 best practices\nPrompt generator\nUse prompt templates\nPrompt improver\nBe clear and direct\nUse examples (multishot prompting)\nLet Claude think (CoT)\nUse XML tags\nGive Claude a role (system prompts)\nPrefill Claude's response\nChain complex prompts\nLong context tips\nExtended thinking tips\nTest & evaluate\nDefine success criteria\nDevelop test cases\nUsing the Evaluation Tool\nReducing latency\nStrengthen guardrails\nReduce hallucinations\nIncrease output consistency\nMitigate jailbreaks\nStreaming refusals\nReduce prompt leak\nKeep Claude in character\nLegal center\nAnthropic Privacy Policy\nSecurity and compliance\nThis guide provides advanced strategies and techniques for getting the most out of Claude’s extended thinking features. Extended thinking allows Claude to work through complex problems step-by-step, improving performance on difficult tasks.\nSee\nExtended thinking models\nfor guidance on deciding when to use extended thinking.\n​\nBefore diving in\nThis guide presumes that you have already decided to use extended thinking mode and have reviewed our basic steps on\nhow to get started with extended thinking\nas well as our\nextended thinking implementation guide\n.\n​\nTechnical considerations for extended thinking\nThinking tokens have a minimum budget of 1024 tokens. We recommend that you start with the minimum thinking budget and incrementally increase to adjust based on your needs and task complexity.\nFor workloads where the optimal thinking budget is above 32K, we recommend that you use\nbatch processing\nto avoid networking issues. Requests pushing the model to think above 32K tokens causes long running requests that might run up against system timeouts and open connection limits.\nExtended thinking performs best in English, though final outputs can be in\nany language Claude supports\n.\nIf you need thinking below the minimum budget, we recommend using standard mode, with thinking turned off, with traditional chain-of-thought prompting with XML tags (like\n<thinking>\n). See\nchain of thought prompting\n.\n​\nPrompting techniques for extended thinking\n​\nUse general instructions first, then troubleshoot with more step-by-step instructions\nClaude often performs better with high level instructions to just think deeply about a task rather than step-by-step prescriptive guidance. The model’s creativity in approaching problems may exceed a human’s ability to prescribe the optimal thinking process.\nFor example, instead of:\nUser\nThink through this math problem step by step:\n1. First, identify the variables\n2. Then, set up the equation\n3. Next, solve for x\n...\nConsider:\nUser\nTry in Console\nPlease think about this math problem thoroughly and in great detail.\nConsider multiple approaches and show your complete reasoning.\nTry different methods if your first approach doesn't work.\nThat said, Claude can still effectively follow complex structured execution steps when needed. The model can handle even longer lists with more complex instructions than previous versions. We recommend that you start with more generalized instructions, then read Claude’s thinking output and iterate to provide more specific instructions to steer its thinking from there.\n​\nMultishot prompting with extended thinking\nMultishot prompting\nworks well with extended thinking. When you provide Claude examples of how to think through problems, it will follow similar reasoning patterns within its extended thinking blocks.\nYou can include few-shot examples in your prompt in extended thinking scenarios by using XML tags like\n<thinking>\nor\n<scratchpad>\nto indicate canonical patterns of extended thinking in those examples.\nClaude will generalize the pattern to the formal extended thinking process. However, it’s possible you’ll get better results by giving Claude free rein to think in the way it deems best.\nExample:\nUser\nTry in Console\nI'm going to show you how to solve a math problem, then I want you to solve a similar one.\nProblem 1: What is 15% of 80?\n<thinking>\nTo find 15% of 80:\n1. Convert 15% to a decimal: 15% = 0.15\n2. Multiply: 0.15 × 80 = 12\n</thinking>\nThe answer is 12.\nNow solve this one:\nProblem 2: What is 35% of 240?\n​\nMaximizing instruction following with extended thinking\nClaude shows significantly improved instruction following when extended thinking is enabled. The model typically:\nReasons about instructions inside the extended thinking block\nExecutes those instructions in the response\nTo maximize instruction following:\nBe clear and specific about what you want\nFor complex instructions, consider breaking them into numbered steps that Claude should work through methodically\nAllow Claude enough budget to process the instructions fully in its extended thinking\n​\nUsing extended thinking to debug and steer Claude’s behavior\nYou can use Claude’s thinking output to debug Claude’s logic, although this method is not always perfectly reliable.\nTo make the best use of this methodology, we recommend the following tips:\nWe don’t recommend passing Claude’s extended thinking back in the user text block, as this doesn’t improve performance and may actually degrade results.\nPrefilling extended thinking is explicitly not allowed, and manually changing the model’s output text that follows its thinking block is likely going to degrade results due to model confusion.\nWhen extended thinking is turned off, standard\nassistant\nresponse text\nprefill\nis still allowed.\nSometimes Claude may repeat its extended thinking in the assistant output text. If you want a clean response, instruct Claude not to repeat its extended thinking and to only output the answer.\n​\nMaking the best of long outputs and longform thinking\nFor dataset generation use cases, try prompts such as “Please create an extremely detailed table of…” for generating comprehensive datasets.\nFor use cases such as detailed content generation where you may want to generate longer extended thinking blocks and more detailed responses, try these tips:\nIncrease both the maximum extended thinking length AND explicitly ask for longer outputs\nFor very long outputs (20,000+ words), request a detailed outline with word counts down to the paragraph level. Then ask Claude to index its paragraphs to the outline and maintain the specified word counts\nWe do not recommend that you push Claude to output more tokens for outputting tokens’ sake. Rather, we encourage you to start with a small thinking budget and increase as needed to find the optimal settings for your use case.\nHere are example use cases where Claude excels due to longer extended thinking:\nComplex STEM problems\nComplex STEM problems require Claude to build mental models, apply specialized knowledge, and work through sequential logical steps—processes that benefit from longer reasoning time.\nStandard prompt\nEnhanced prompt\nUser\nTry in Console\nWrite a python script for a bouncing yellow ball within a square,\nmake sure to handle collision detection properly.\nMake the square slowly rotate.\nThis simpler task typically results in only about a few seconds of thinking time.\nUser\nTry in Console\nWrite a python script for a bouncing yellow ball within a square,\nmake sure to handle collision detection properly.\nMake the square slowly rotate.\nThis simpler task typically results in only about a few seconds of thinking time.\nUser\nTry in Console\nWrite a Python script for a bouncing yellow ball within a tesseract,\nmaking sure to handle collision detection properly.\nMake the tesseract slowly rotate.\nMake sure the ball stays within the tesseract.\nThis complex 4D visualization challenge makes the best use of long extended thinking time as Claude works through the mathematical and programming complexity.\nConstraint optimization problems\nConstraint optimization challenges Claude to satisfy multiple competing requirements simultaneously, which is best accomplished when allowing for long extended thinking time so that the model can methodically address each constraint.\nStandard prompt\nEnhanced prompt\nUser\nTry in Console\nPlan a week-long vacation to Japan.\nThis open-ended request typically results in only about a few seconds of thinking time.\nUser\nTry in Console\nPlan a week-long vacation to Japan.\nThis open-ended request typically results in only about a few seconds of thinking time.\nUser\nTry in Console\nPlan a 7-day trip to Japan with the following constraints:\n- Budget of $2,500\n- Must include Tokyo and Kyoto\n- Need to accommodate a vegetarian diet\n- Preference for cultural experiences over shopping\n- Must include one day of hiking\n- No more than 2 hours of travel between locations per day\n- Need free time each afternoon for calls back home\n- Must avoid crowds where possible\nWith multiple constraints to balance, Claude will naturally perform best when given more space to think through how to satisfy all requirements optimally.\nThinking frameworks\nStructured thinking frameworks give Claude an explicit methodology to follow, which may work best when Claude is given long extended thinking space to follow each step.\nStandard prompt\nEnhanced prompt\nUser\nTry in Console\nDevelop a comprehensive strategy for Microsoft\nentering the personalized medicine market by 2027.\nThis broad strategic question typically results in only about a few seconds of thinking time.\nUser\nTry in Console\nDevelop a comprehensive strategy for Microsoft\nentering the personalized medicine market by 2027.\nThis broad strategic question typically results in only about a few seconds of thinking time.\nUser\nTry in Console\nDevelop a comprehensive strategy for Microsoft entering\nthe personalized medicine market by 2027.\nBegin with:\n1. A Blue Ocean Strategy canvas\n2. Apply Porter's Five Forces to identify competitive pressures\nNext, conduct a scenario planning exercise with four\ndistinct futures based on regulatory and technological variables.\nFor each scenario:\n- Develop strategic responses using the Ansoff Matrix\nFinally, apply the Three Horizons framework to:\n- Map the transition pathway\n- Identify potential disruptive innovations at each stage\nBy specifying multiple analytical frameworks that must be applied sequentially, thinking time naturally increases as Claude works through each framework methodically.\n​\nHave Claude reflect on and check its work for improved consistency and error handling\nYou can use simple natural language prompting to improve consistency and reduce errors:\nAsk Claude to verify its work with a simple test before declaring a task complete\nInstruct the model to analyze whether its previous step achieved the expected result\nFor coding tasks, ask Claude to run through test cases in its extended thinking\nExample:\nUser\nTry in Console\nWrite a function to calculate the factorial of a number.\nBefore you finish, please verify your solution with test cases for:\n- n=0\n- n=1\n- n=5\n- n=10\nAnd fix any issues you find.\n​\nNext steps\nExtended thinking cookbook\nExplore practical examples of extended thinking in our cookbook.\nExtended thinking guide\nSee complete technical documentation for implementing extended thinking.\nWas this page helpful?\nYes\nNo\nLong context tips\nDefine success criteria\nOn this page\nBefore diving in\nTechnical considerations for extended thinking\nPrompting techniques for extended thinking\nUse general instructions first, then troubleshoot with more step-by-step instructions\nMultishot prompting with extended thinking\nMaximizing instruction following with extended thinking\nUsing extended thinking to debug and steer Claude’s behavior\nMaking the best of long outputs and longform thinking\nHave Claude reflect on and check its work for improved consistency and error handling\nNext steps",
  "links": [
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/increase-consistency",
      "text": "Increase output consistency"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/mitigate-jailbreaks",
      "text": "Mitigate jailbreaks"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/handle-streaming-refusals",
      "text": "Streaming refusals"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-prompt-leak",
      "text": "Reduce prompt leak"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/keep-claude-in-character",
      "text": "Keep Claude in character"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/about-claude/models/extended-thinking-models",
      "text": "Extended thinking models"
    }
  ],
  "metadata": {
    "scraped_at": "2025-06-23T15:07:51.531268",
    "word_count": 1917,
    "link_count": 6,
    "content_length": 12593
  }
}