{
  "url": "https://docs.anthropic.com/en/docs/claude-code/common-workflows",
  "title": "Common workflows - Anthropic",
  "text": "Anthropic\nhome page\nEnglish\nSearch...\nSearch...\nNavigation\nGetting started\nCommon workflows\nWelcome\nDeveloper Guide\nAPI Guide\nClaude Code\nModel Context Protocol (MCP)\nResources\nRelease Notes\nDocumentation\nDeveloper Discord\nSupport\nGetting started\nOverview\nSet up\nQuickstart\nMemory management\nCommon workflows\nBuild with Claude\nAdd Claude Code to your IDE\nModel Context Protocol (MCP)\nGitHub Actions\nClaude Code SDK\nTroubleshooting\nDeployment\nOverview\nAmazon Bedrock\nGoogle Vertex AI\nCorporate proxy\nLLM gateway\nDevelopment containers\nAdministration\nIdentity and Access Management\nSecurity\nMonitoring\nCosts\nReference\nCLI reference\nInteractive mode\nSlash commands\nSettings\nResources\nData usage\nLegal and compliance\nEach task in this document includes clear instructions, example commands, and best practices to help you get the most from Claude Code.\n​\nUnderstand new codebases\n​\nGet a quick codebase overview\nSuppose you’ve just joined a new project and need to understand its structure quickly.\n1\nNavigate to the project root directory\ncd\n/path/to/project\n2\nStart Claude Code\nclaude\n3\nAsk for a high-level overview\n> give me an overview of this codebase\n4\nDive deeper into specific components\n> explain the main architecture patterns used here\n> what are the key data models?\n> how is authentication handled?\nTips:\nStart with broad questions, then narrow down to specific areas\nAsk about coding conventions and patterns used in the project\nRequest a glossary of project-specific terms\n​\nFind relevant code\nSuppose you need to locate code related to a specific feature or functionality.\n1\nAsk Claude to find relevant files\n> find the files that handle user authentication\n2\nGet context on how components interact\n> how do these authentication files work together?\n3\nUnderstand the execution flow\n> trace the login process from front-end to database\nTips:\nBe specific about what you’re looking for\nUse domain language from the project\n​\nFix bugs efficiently\nSuppose you’ve encountered an error message and need to find and fix its source.\n1\nShare the error with Claude\n> I'm seeing an error when I run npm test\n2\nAsk for fix recommendations\n> suggest a few ways to fix the @ts-ignore in user.ts\n3\nApply the fix\n> update user.ts to add the null check you suggested\nTips:\nTell Claude the command to reproduce the issue and get a stack trace\nMention any steps to reproduce the error\nLet Claude know if the error is intermittent or consistent\n​\nRefactor code\nSuppose you need to update old code to use modern patterns and practices.\n1\nIdentify legacy code for refactoring\n> find deprecated API usage in our codebase\n2\nGet refactoring recommendations\n> suggest how to refactor utils.js to use modern JavaScript features\n3\nApply the changes safely\n> refactor utils.js to use ES2024 features while maintaining the same behavior\n4\nVerify the refactoring\n> run tests for the refactored code\nTips:\nAsk Claude to explain the benefits of the modern approach\nRequest that changes maintain backward compatibility when needed\nDo refactoring in small, testable increments\n​\nWork with tests\nSuppose you need to add tests for uncovered code.\n1\nIdentify untested code\n> find functions in NotificationsService.swift that are not covered by tests\n2\nGenerate test scaffolding\n> add tests for the notification service\n3\nAdd meaningful test cases\n> add test cases for edge conditions in the notification service\n4\nRun and verify tests\n> run the new tests and fix any failures\nTips:\nAsk for tests that cover edge cases and error conditions\nRequest both unit and integration tests when appropriate\nHave Claude explain the testing strategy\n​\nCreate pull requests\nSuppose you need to create a well-documented pull request for your changes.\n1\nSummarize your changes\n> summarize the changes I've made to the authentication module\n2\nGenerate a PR with Claude\n> create a pr\n3\nReview and refine\n> enhance the PR description with more context about the security improvements\n4\nAdd testing details\n> add information about how these changes were tested\nTips:\nAsk Claude directly to make a PR for you\nReview Claude’s generated PR before submitting\nAsk Claude to highlight potential risks or considerations\n​\nHandle documentation\nSuppose you need to add or update documentation for your code.\n1\nIdentify undocumented code\n> find functions without proper JSDoc comments in the auth module\n2\nGenerate documentation\n> add JSDoc comments to the undocumented functions in auth.js\n3\nReview and enhance\n> improve the generated documentation with more context and examples\n4\nVerify documentation\n> check if the documentation follows our project standards\nTips:\nSpecify the documentation style you want (JSDoc, docstrings, etc.)\nAsk for examples in the documentation\nRequest documentation for public APIs, interfaces, and complex logic\n​\nWork with images\nSuppose you need to work with images in your codebase, and you want Claude’s help analyzing image content.\n1\nAdd an image to the conversation\nYou can use any of these methods:\nDrag and drop an image into the Claude Code window\nCopy an image and paste it into the CLI with ctrl+v (Do not use cmd+v)\nProvide an image path claude. E.g., “Analyze this image: /path/to/your/image.png”\n2\nAsk Claude to analyze the image\n> What does this image show?\n> Describe the UI elements in this screenshot\n> Are there any problematic elements in this diagram?\n3\nUse images for context\n> Here's a screenshot of the error. What's causing it?\n> This is our current database schema. How should we modify it for the new feature?\n4\nGet code suggestions from visual content\n> Generate CSS to match this design mockup\n> What HTML structure would recreate this component?\nTips:\nUse images when text descriptions would be unclear or cumbersome\nInclude screenshots of errors, UI designs, or diagrams for better context\nYou can work with multiple images in a conversation\nImage analysis works with diagrams, screenshots, mockups, and more\n​\nUse extended thinking\nSuppose you’re working on complex architectural decisions, challenging bugs, or planning multi-step implementations that require deep reasoning.\n1\nProvide context and ask Claude to think\n> I need to implement a new authentication system using OAuth2 for our API. Think deeply about the best approach for implementing this in our codebase.\nClaude will gather relevant information from your codebase and\nuse extended thinking, which will be visible in the interface.\n2\nRefine the thinking with follow-up prompts\n> think about potential security vulnerabilities in this approach\n> think harder about edge cases we should handle\nTips to get the most value out of extended thinking:\nExtended thinking is most valuable for complex tasks such as:\nPlanning complex architectural changes\nDebugging intricate issues\nCreating implementation plans for new features\nUnderstanding complex codebases\nEvaluating tradeoffs between different approaches\nThe way you prompt for thinking results in varying levels of thinking depth:\n“think” triggers basic extended thinking\nintensifying phrases such as “think more”, “think a lot”, “think harder”, or “think longer” triggers deeper thinking\nFor more extended thinking prompting tips, see\nExtended thinking tips\n.\nClaude will display its thinking process as italic gray text above the\nresponse.\n​\nResume previous conversations\nSuppose you’ve been working on a task with Claude Code and need to continue where you left off in a later session.\nClaude Code provides two options for resuming previous conversations:\n--continue\nto automatically continue the most recent conversation\n--resume\nto display a conversation picker\n1\nContinue the most recent conversation\nclaude\n--continue\nThis immediately resumes your most recent conversation without any prompts.\n2\nContinue in non-interactive mode\nclaude\n--continue\n--print\n\"Continue with my task\"\nUse\n--print\nwith\n--continue\nto resume the most recent conversation in non-interactive mode, perfect for scripts or automation.\n3\nShow conversation picker\nclaude\n--resume\nThis displays an interactive conversation selector showing:\nConversation start time\nInitial prompt or conversation summary\nMessage count\nUse arrow keys to navigate and press Enter to select a conversation.\nTips:\nConversation history is stored locally on your machine\nUse\n--continue\nfor quick access to your most recent conversation\nUse\n--resume\nwhen you need to select a specific past conversation\nWhen resuming, you’ll see the entire conversation history before continuing\nThe resumed conversation starts with the same model and configuration as the original\nHow it works:\nConversation Storage\n: All conversations are automatically saved locally with their full message history\nMessage Deserialization\n: When resuming, the entire message history is restored to maintain context\nTool State\n: Tool usage and results from the previous conversation are preserved\nContext Restoration\n: The conversation resumes with all previous context intact\nExamples:\n# Continue most recent conversation\nclaude\n--continue\n# Continue most recent conversation with a specific prompt\nclaude\n--continue\n--print\n\"Show me our progress\"\n# Show conversation picker\nclaude\n--resume\n# Continue most recent conversation in non-interactive mode\nclaude\n--continue\n--print\n\"Run the tests again\"\n​\nRun parallel Claude Code sessions with Git worktrees\nSuppose you need to work on multiple tasks simultaneously with complete code isolation between Claude Code instances.\n1\nUnderstand Git worktrees\nGit worktrees allow you to check out multiple branches from the same\nrepository into separate directories. Each worktree has its own working\ndirectory with isolated files, while sharing the same Git history. Learn\nmore in the\nofficial Git worktree\ndocumentation\n.\n2\nCreate a new worktree\n# Create a new worktree with a new branch\ngit\nworktree\nadd\n..\n/project-feature-a\n-b\nfeature-a\n# Or create a worktree with an existing branch\ngit\nworktree\nadd\n..\n/project-bugfix bugfix-123\nThis creates a new directory with a separate working copy of your repository.\n3\nRun Claude Code in each worktree\n# Navigate to your worktree\ncd\n..\n/project-feature-a\n# Run Claude Code in this isolated environment\nclaude\n4\nRun Claude in another worktree\ncd\n..\n/project-bugfix\nclaude\n5\nManage your worktrees\n# List all worktrees\ngit\nworktree list\n# Remove a worktree when done\ngit\nworktree remove\n..\n/project-feature-a\nTips:\nEach worktree has its own independent file state, making it perfect for parallel Claude Code sessions\nChanges made in one worktree won’t affect others, preventing Claude instances from interfering with each other\nAll worktrees share the same Git history and remote connections\nFor long-running tasks, you can have Claude working in one worktree while you continue development in another\nUse descriptive directory names to easily identify which task each worktree is for\nRemember to initialize your development environment in each new worktree according to your project’s setup. Depending on your stack, this might include:\nJavaScript projects: Running dependency installation (\nnpm install\n,\nyarn\n)\nPython projects: Setting up virtual environments or installing with package managers\nOther languages: Following your project’s standard setup process\n​\nUse Claude as a unix-style utility\n​\nAdd Claude to your verification process\nSuppose you want to use Claude Code as a linter or code reviewer.\nAdd Claude to your build script:\n// package.json\n{\n...\n\"scripts\"\n:\n{\n...\n\"lint:claude\"\n:\n\"claude -p 'you are a linter. please look at the changes vs. main and report any issues related to typos. report the filename and line number on one line, and a description of the issue on the second line. do not return any other text.'\"\n}\n}\nTips:\nUse Claude for automated code review in your CI/CD pipeline\nCustomize the prompt to check for specific issues relevant to your project\nConsider creating multiple scripts for different types of verification\n​\nPipe in, pipe out\nSuppose you want to pipe data into Claude, and get back data in a structured format.\nPipe data through Claude:\ncat\nbuild-error.txt\n|\nclaude\n-p\n'concisely explain the root cause of this build error'\n>\noutput.txt\nTips:\nUse pipes to integrate Claude into existing shell scripts\nCombine with other Unix tools for powerful workflows\nConsider using —output-format for structured output\n​\nControl output format\nSuppose you need Claude’s output in a specific format, especially when integrating Claude Code into scripts or other tools.\n1\nUse text format (default)\ncat\ndata.txt\n|\nclaude\n-p\n'summarize this data'\n--output-format text\n>\nsummary.txt\nThis outputs just Claude’s plain text response (default behavior).\n2\nUse JSON format\ncat\ncode.py\n|\nclaude\n-p\n'analyze this code for bugs'\n--output-format json\n>\nanalysis.json\nThis outputs a JSON array of messages with metadata including cost and duration.\n3\nUse streaming JSON format\ncat\nlog.txt\n|\nclaude\n-p\n'parse this log file for errors'\n--output-format stream-json\nThis outputs a series of JSON objects in real-time as Claude processes the request. Each message is a valid JSON object, but the entire output is not valid JSON if concatenated.\nTips:\nUse\n--output-format text\nfor simple integrations where you just need Claude’s response\nUse\n--output-format json\nwhen you need the full conversation log\nUse\n--output-format stream-json\nfor real-time output of each conversation turn\n​\nCreate custom slash commands\nClaude Code supports custom slash commands that you can create to quickly execute specific prompts or tasks.\nFor more details, see the\nSlash commands\nreference page.\n​\nCreate project-specific commands\nSuppose you want to create reusable slash commands for your project that all team members can use.\n1\nCreate a commands directory in your project\nmkdir\n-p\n.claude/commands\n2\nCreate a Markdown file for each command\necho\n\"Analyze the performance of this code and suggest three specific optimizations:\"\n>\n.claude/commands/optimize.md\n3\nUse your custom command in Claude Code\n> /project:optimize\nTips:\nCommand names are derived from the filename (e.g.,\noptimize.md\nbecomes\n/project:optimize\n)\nYou can organize commands in subdirectories (e.g.,\n.claude/commands/frontend/component.md\nbecomes\n/project:frontend:component\n)\nProject commands are available to everyone who clones the repository\nThe Markdown file content becomes the prompt sent to Claude when the command is invoked\n​\nAdd command arguments with $ARGUMENTS\nSuppose you want to create flexible slash commands that can accept additional input from users.\n1\nCreate a command file with the $ARGUMENTS placeholder\necho\n\"Find and fix issue\n#$ARGUMENTS. Follow these steps: 1.\nUnderstand the issue described\nin\nthe ticket\n2\n. Locate the relevant code\nin\nour codebase\n3\n. Implement a solution that addresses the root cause\n4\n. Add\nappropriate tests\n5\n. Prepare a concise PR description\"\n>\n.claude/commands/fix-issue.md\n2\nUse the command with an issue number\nIn your Claude session, use the command with arguments.\n> /project:fix-issue 123\nThis will replace $ARGUMENTS with “123” in the prompt.\nTips:\nThe $ARGUMENTS placeholder is replaced with any text that follows the command\nYou can position $ARGUMENTS anywhere in your command template\nOther useful applications: generating test cases for specific functions, creating documentation for components, reviewing code in particular files, or translating content to specified languages\n​\nCreate personal slash commands\nSuppose you want to create personal slash commands that work across all your projects.\n1\nCreate a commands directory in your home folder\nmkdir\n-p\n~/.claude/commands\n2\nCreate a Markdown file for each command\necho\n\"Review this code for security vulnerabilities, focusing on:\"\n>\n~/.claude/commands/security-review.md\n3\nUse your personal custom command\n> /user:security-review\nTips:\nPersonal commands are prefixed with\n/user:\ninstead of\n/project:\nPersonal commands are only available to you and not shared with your team\nPersonal commands work across all your projects\nYou can use these for consistent workflows across different codebases\n​\nNext steps\nClaude Code reference implementation\nClone our development container reference implementation.\nWas this page helpful?\nYes\nNo\nMemory management\nAdd Claude Code to your IDE\nOn this page\nUnderstand new codebases\nGet a quick codebase overview\nFind relevant code\nFix bugs efficiently\nRefactor code\nWork with tests\nCreate pull requests\nHandle documentation\nWork with images\nUse extended thinking\nResume previous conversations\nRun parallel Claude Code sessions with Git worktrees\nUse Claude as a unix-style utility\nAdd Claude to your verification process\nPipe in, pipe out\nControl output format\nCreate custom slash commands\nCreate project-specific commands\nAdd command arguments with $ARGUMENTS\nCreate personal slash commands\nNext steps",
  "links": [
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/github-actions",
      "text": "GitHub Actions"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/sdk",
      "text": "Claude Code SDK"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/troubleshooting",
      "text": "Troubleshooting"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/third-party-integrations",
      "text": "Overview"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/amazon-bedrock",
      "text": "Amazon Bedrock"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/google-vertex-ai",
      "text": "Google Vertex AI"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/corporate-proxy",
      "text": "Corporate proxy"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/llm-gateway",
      "text": "LLM gateway"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/devcontainer",
      "text": "Development containers"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/iam",
      "text": "Identity and Access Management"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/security",
      "text": "Security"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/monitoring-usage",
      "text": "Monitoring"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/costs",
      "text": "Costs"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/cli-reference",
      "text": "CLI reference"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/interactive-mode",
      "text": "Interactive mode"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/slash-commands",
      "text": "Slash commands"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/settings",
      "text": "Settings"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/data-usage",
      "text": "Data usage"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/legal-and-compliance",
      "text": "Legal and compliance"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/extended-thinking-tips",
      "text": "Extended thinking tips"
    }
  ],
  "metadata": {
    "scraped_at": "2025-06-23T15:07:27.155728",
    "word_count": 2602,
    "link_count": 20,
    "content_length": 16742
  }
}