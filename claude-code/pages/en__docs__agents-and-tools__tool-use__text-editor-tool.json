{
  "url": "https://docs.anthropic.com/en/docs/agents-and-tools/tool-use/text-editor-tool",
  "title": "Text editor tool - Anthropic",
  "text": "Anthropic\nhome page\nEnglish\nSearch...\nSearch...\nNavigation\nTools\nText editor tool\nWelcome\nDeveloper Guide\nAPI Guide\nClaude Code\nModel Context Protocol (MCP)\nResources\nRelease Notes\nDocumentation\nDeveloper Discord\nSupport\nFirst steps\nIntro to Claude\nGet started\nModels & pricing\nModels overview\nChoosing a model\nMigrating to Claude 4\nModel deprecations\nPricing\nLearn about Claude\nBuilding with Claude\nFeatures overview\nContext windows\nGlossary\nCapabilities\nPrompt caching\nExtended thinking\nStreaming Messages\nBatch processing\nCitations\nMultilingual support\nToken counting\nEmbeddings\nVision\nPDF support\nFiles API\nGoogle Sheets add-on\nTools\nOverview\nHow to implement tool use\nToken-efficient tool use\nFine-grained tool streaming\nBash tool\nCode execution tool\nComputer use tool\nText editor tool\nWeb search tool\nModel Context Protocol (MCP)\nMCP connector\nRemote MCP servers\nUse cases\nOverview\nTicket routing\nCustomer support agent\nContent moderation\nLegal summarization\nPrompt engineering\nOverview\nClaude 4 best practices\nPrompt generator\nUse prompt templates\nPrompt improver\nBe clear and direct\nUse examples (multishot prompting)\nLet Claude think (CoT)\nUse XML tags\nGive Claude a role (system prompts)\nPrefill Claude's response\nChain complex prompts\nLong context tips\nExtended thinking tips\nTest & evaluate\nDefine success criteria\nDevelop test cases\nUsing the Evaluation Tool\nReducing latency\nStrengthen guardrails\nReduce hallucinations\nIncrease output consistency\nMitigate jailbreaks\nStreaming refusals\nReduce prompt leak\nKeep Claude in character\nLegal center\nAnthropic Privacy Policy\nSecurity and compliance\nClaude can use an Anthropic-defined text editor tool to view and modify text files, helping you debug, fix, and improve your code or other text documents. This allows Claude to directly interact with your files, providing hands-on assistance rather than just suggesting changes.\n​\nBefore using the text editor tool\n​\nUse a compatible model\nAnthropic’s text editor tool is available for multiple Claude models:\nClaude 4 Opus & Sonnet\n:\ntext_editor_20250429\nClaude Sonnet 3.7\n:\ntext_editor_20250124\nClaude Sonnet 3.5\n:\ntext_editor_20241022\nClaude Sonnet 3.5 requires the\ncomputer-use-2024-10-22\nbeta header when using the text editor tool.\nThe text editor tool is generally available in Claude 4 and Sonnet 3.7.\nThe newer\ntext_editor_20250429\nfor Claude 4 models does not include the\nundo_edit\ncommand. If you require this functionality, you’ll need to use Claude 3.7 or Sonnet 3.5 with their respective tool versions.\n​\nAssess your use case fit\nSome examples of when to use the text editor tool are:\nCode debugging\n: Have Claude identify and fix bugs in your code, from syntax errors to logic issues.\nCode refactoring\n: Let Claude improve your code structure, readability, and performance through targeted edits.\nDocumentation generation\n: Ask Claude to add docstrings, comments, or README files to your codebase.\nTest creation\n: Have Claude create unit tests for your code based on its understanding of the implementation.\n​\nUse the text editor tool\nClaude 4\nClaude Sonnet 3.7\nClaude Sonnet 3.5\nProvide the text editor tool (named\nstr_replace_based_edit_tool\n) to Claude using the Messages API:\nShell\nPython\nTypeScript\nJava\ncurl\nhttps://api.anthropic.com/v1/messages\n\\\n-H\n\"content-type: application/json\"\n\\\n-H\n\"x-api-key:\n$ANTHROPIC_API_KEY\n\"\n\\\n-H\n\"anthropic-version: 2023-06-01\"\n\\\n-d\n'\n{\n\"model\"\n:\n\"claude-opus-4-20250514\"\n,\n\"max_tokens\"\n:\n1024\n,\n\"tools\"\n:\n[\n{\n\"type\"\n:\n\"text_editor_20250429\"\n,\n\"name\"\n:\n\"str_replace_based_edit_tool\"\n}\n]\n,\n\"messages\"\n:\n[\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n\"There'\\''s a syntax error in my primes.py file. Can you help me fix it?\"\n}\n]\n}\n'\nProvide the text editor tool (named\nstr_replace_based_edit_tool\n) to Claude using the Messages API:\nShell\nPython\nTypeScript\nJava\ncurl\nhttps://api.anthropic.com/v1/messages\n\\\n-H\n\"content-type: application/json\"\n\\\n-H\n\"x-api-key:\n$ANTHROPIC_API_KEY\n\"\n\\\n-H\n\"anthropic-version: 2023-06-01\"\n\\\n-d\n'\n{\n\"model\"\n:\n\"claude-opus-4-20250514\"\n,\n\"max_tokens\"\n:\n1024\n,\n\"tools\"\n:\n[\n{\n\"type\"\n:\n\"text_editor_20250429\"\n,\n\"name\"\n:\n\"str_replace_based_edit_tool\"\n}\n]\n,\n\"messages\"\n:\n[\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n\"There'\\''s a syntax error in my primes.py file. Can you help me fix it?\"\n}\n]\n}\n'\nProvide the text editor tool (named\nstr_replace_editor\n) to Claude using the Messages API:\nShell\nPython\nTypeScript\nJava\ncurl\nhttps://api.anthropic.com/v1/messages\n\\\n-H\n\"content-type: application/json\"\n\\\n-H\n\"x-api-key:\n$ANTHROPIC_API_KEY\n\"\n\\\n-H\n\"anthropic-version: 2023-06-01\"\n\\\n-d\n'\n{\n\"model\"\n:\n\"claude-3-7-sonnet-20250219\"\n,\n\"max_tokens\"\n:\n1024\n,\n\"tools\"\n:\n[\n{\n\"type\"\n:\n\"text_editor_20250124\"\n,\n\"name\"\n:\n\"str_replace_editor\"\n}\n]\n,\n\"messages\"\n:\n[\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n\"There'\\''s a syntax error in my primes.py file. Can you help me fix it?\"\n}\n]\n}\n'\nProvide the text editor tool (named\nstr_replace_editor\n) to Claude using the Messages API:\nShell\nPython\nTypeScript\nJava\ncurl\nhttps://api.anthropic.com/v1/messages\n\\\n-H\n\"content-type: application/json\"\n\\\n-H\n\"x-api-key:\n$ANTHROPIC_API_KEY\n\"\n\\\n-H\n\"anthropic-version: 2023-06-01\"\n\\\n-H\n\"anthropic-beta: computer-use-2024-10-22\"\n\\\n-d\n'\n{\n\"model\"\n:\n\"claude-3-5-sonnet-20241022\"\n,\n\"max_tokens\"\n:\n1024\n,\n\"tools\"\n:\n[\n{\n\"type\"\n:\n\"text_editor_20241022\"\n,\n\"name\"\n:\n\"str_replace_editor\"\n}\n]\n,\n\"messages\"\n:\n[\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n\"There'\\''s a syntax error in my primes.py file. Can you help me fix it?\"\n}\n]\n}\n'\nThe text editor tool can be used in the following way:\n1\nProvide Claude with the text editor tool and a user prompt\nInclude the text editor tool in your API request\nProvide a user prompt that may require examining or modifying files, such as “Can you fix the syntax error in my code?”\n2\nClaude uses the tool to examine files or directories\nClaude assesses what it needs to look at and uses the\nview\ncommand to examine file contents or list directory contents\nThe API response will contain a\ntool_use\ncontent block with the\nview\ncommand\n3\nExecute the view command and return results\nExtract the file or directory path from Claude’s tool use request\nRead the file’s contents or list the directory contents and return them to Claude\nReturn the results to Claude by continuing the conversation with a new\nuser\nmessage containing a\ntool_result\ncontent block\n4\nClaude uses the tool to modify files\nAfter examining the file or directory, Claude may use a command such as\nstr_replace\nto make changes or\ninsert\nto add text at a specific line number.\nIf Claude uses the\nstr_replace\ncommand, Claude constructs a properly formatted tool use request with the old text and new text to replace it with\n5\nExecute the edit and return results\nExtract the file path, old text, and new text from Claude’s tool use request\nPerform the text replacement in the file\nReturn the results to Claude\n6\nClaude provides its analysis and explanation\nAfter examining and possibly editing the files, Claude provides a complete explanation of what it found and what changes it made\n​\nText editor tool commands\nThe text editor tool supports several commands for viewing and modifying files:\n​\nview\nThe\nview\ncommand allows Claude to examine the contents of a file or list the contents of a directory. It can read the entire file or a specific range of lines.\nParameters:\ncommand\n: Must be “view”\npath\n: The path to the file or directory to view\nview_range\n(optional): An array of two integers specifying the start and end line numbers to view. Line numbers are 1-indexed, and -1 for the end line means read to the end of the file. This parameter only applies when viewing files, not directories.\nExample view commands\n// Example for viewing a file\n{\n\"type\"\n:\n\"tool_use\"\n,\n\"id\"\n:\n\"toolu_01A09q90qw90lq917835lq9\"\n,\n\"name\"\n:\n\"str_replace_editor\"\n,\n\"input\"\n:\n{\n\"command\"\n:\n\"view\"\n,\n\"path\"\n:\n\"primes.py\"\n}\n}\n// Example for viewing a directory\n{\n\"type\"\n:\n\"tool_use\"\n,\n\"id\"\n:\n\"toolu_02B19r91rw91mr917835mr9\"\n,\n\"name\"\n:\n\"str_replace_editor\"\n,\n\"input\"\n:\n{\n\"command\"\n:\n\"view\"\n,\n\"path\"\n:\n\"src/\"\n}\n}\n​\nstr_replace\nThe\nstr_replace\ncommand allows Claude to replace a specific string in a file with a new string. This is used for making precise edits.\nParameters:\ncommand\n: Must be “str_replace”\npath\n: The path to the file to modify\nold_str\n: The text to replace (must match exactly, including whitespace and indentation)\nnew_str\n: The new text to insert in place of the old text\nExample str_replace command\n{\n\"type\"\n:\n\"tool_use\"\n,\n\"id\"\n:\n\"toolu_01A09q90qw90lq917835lq9\"\n,\n\"name\"\n:\n\"str_replace_editor\"\n,\n\"input\"\n:\n{\n\"command\"\n:\n\"str_replace\"\n,\n\"path\"\n:\n\"primes.py\"\n,\n\"old_str\"\n:\n\"for num in range(2, limit + 1)\"\n,\n\"new_str\"\n:\n\"for num in range(2, limit + 1):\"\n}\n}\n​\ncreate\nThe\ncreate\ncommand allows Claude to create a new file with specified content.\nParameters:\ncommand\n: Must be “create”\npath\n: The path where the new file should be created\nfile_text\n: The content to write to the new file\nExample create command\n{\n\"type\"\n:\n\"tool_use\"\n,\n\"id\"\n:\n\"toolu_01A09q90qw90lq917835lq9\"\n,\n\"name\"\n:\n\"str_replace_editor\"\n,\n\"input\"\n:\n{\n\"command\"\n:\n\"create\"\n,\n\"path\"\n:\n\"test_primes.py\"\n,\n\"file_text\"\n:\n\"import unittest\\nimport primes\\n\\nclass TestPrimes(unittest.TestCase):\\n    def test_is_prime(self):\\n        self.assertTrue(primes.is_prime(2))\\n        self.assertTrue(primes.is_prime(3))\\n        self.assertFalse(primes.is_prime(4))\\n\\nif __name__ == '__main__':\\n    unittest.main()\"\n}\n}\n​\ninsert\nThe\ninsert\ncommand allows Claude to insert text at a specific location in a file.\nParameters:\ncommand\n: Must be “insert”\npath\n: The path to the file to modify\ninsert_line\n: The line number after which to insert the text (0 for beginning of file)\nnew_str\n: The text to insert\nExample insert command\n{\n\"type\"\n:\n\"tool_use\"\n,\n\"id\"\n:\n\"toolu_01A09q90qw90lq917835lq9\"\n,\n\"name\"\n:\n\"str_replace_editor\"\n,\n\"input\"\n:\n{\n\"command\"\n:\n\"insert\"\n,\n\"path\"\n:\n\"primes.py\"\n,\n\"insert_line\"\n:\n0\n,\n\"new_str\"\n:\n\"\\\"\\\"\\\"Module for working with prime numbers.\\n\\nThis module provides functions to check if a number is prime\\nand to generate a list of prime numbers up to a given limit.\\n\\\"\\\"\\\"\\n\"\n}\n}\n​\nundo_edit\nThe\nundo_edit\ncommand allows Claude to revert the last edit made to a file.\nThis command is only available in Claude Sonnet 3.7 and Claude Sonnet 3.5. It is not supported in Claude 4 models using the\ntext_editor_20250429\n.\nParameters:\ncommand\n: Must be “undo_edit”\npath\n: The path to the file whose last edit should be undone\nExample undo_edit command\n{\n\"type\"\n:\n\"tool_use\"\n,\n\"id\"\n:\n\"toolu_01A09q90qw90lq917835lq9\"\n,\n\"name\"\n:\n\"str_replace_editor\"\n,\n\"input\"\n:\n{\n\"command\"\n:\n\"undo_edit\"\n,\n\"path\"\n:\n\"primes.py\"\n}\n}\n​\nExample: Fixing a syntax error with the text editor tool\nClaude 4\nClaude Sonnet 3.7\nThis example demonstrates how Claude 4 uses the text editor tool to fix a syntax error in a Python file.\nFirst, your application provides Claude with the text editor tool and a prompt to fix a syntax error:\nShell\nPython\nTypeScript\nJava\ncurl\nhttps://api.anthropic.com/v1/messages\n\\\n-H\n\"content-type: application/json\"\n\\\n-H\n\"x-api-key:\n$ANTHROPIC_API_KEY\n\"\n\\\n-H\n\"anthropic-version: 2023-06-01\"\n\\\n-d\n'\n{\n\"model\"\n:\n\"claude-opus-4-20250514\"\n,\n\"max_tokens\"\n:\n1024\n,\n\"tools\"\n:\n[\n{\n\"type\"\n:\n\"text_editor_20250429\"\n,\n\"name\"\n:\n\"str_replace_based_edit_tool\"\n}\n]\n,\n\"messages\"\n:\n[\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n\"There'\\''s a syntax error in my primes.py file. Can you help me fix it?\"\n}\n]\n}\n'\nClaude will use the text editor tool first to view the file:\n{\n\"id\"\n:\n\"msg_01XAbCDeFgHiJkLmNoPQrStU\"\n,\n\"model\"\n:\n\"claude-opus-4-20250514\"\n,\n\"stop_reason\"\n:\n\"tool_use\"\n,\n\"role\"\n:\n\"assistant\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"text\"\n,\n\"text\"\n:\n\"I'll help you fix the syntax error in your primes.py file. First, let me take a look at the file to identify the issue.\"\n}\n,\n{\n\"type\"\n:\n\"tool_use\"\n,\n\"id\"\n:\n\"toolu_01AbCdEfGhIjKlMnOpQrStU\"\n,\n\"name\"\n:\n\"str_replace_based_edit_tool\"\n,\n\"input\"\n:\n{\n\"command\"\n:\n\"view\"\n,\n\"path\"\n:\n\"primes.py\"\n}\n}\n]\n}\nYour application should then read the file and return its contents to Claude:\nShell\nPython\nTypeScript\nJava\ncurl\nhttps://api.anthropic.com/v1/messages\n\\\n-H\n\"content-type: application/json\"\n\\\n-H\n\"x-api-key:\n$ANTHROPIC_API_KEY\n\"\n\\\n-H\n\"anthropic-version: 2023-06-01\"\n\\\n-d\n'\n{\n\"model\"\n:\n\"claude-opus-4-20250514\"\n,\n\"max_tokens\"\n:\n1024\n,\n\"tools\"\n:\n[\n{\n\"type\"\n:\n\"text_editor_20250429\"\n,\n\"name\"\n:\n\"str_replace_based_edit_tool\"\n}\n]\n,\n\"messages\"\n:\n[\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n\"There'\\''s a syntax error in my primes.py file. Can you help me fix it?\"\n}\n,\n{\n\"role\"\n:\n\"assistant\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"text\"\n,\n\"text\"\n:\n\"I'\\''ll help you fix the syntax error in your primes.py file. First, let me take a look at the file to identify the issue.\"\n}\n,\n{\n\"type\"\n:\n\"tool_use\"\n,\n\"id\"\n:\n\"toolu_01AbCdEfGhIjKlMnOpQrStU\"\n,\n\"name\"\n:\n\"str_replace_based_edit_tool\"\n,\n\"input\"\n:\n{\n\"command\"\n:\n\"view\"\n,\n\"path\"\n:\n\"primes.py\"\n}\n}\n]\n}\n,\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"tool_result\"\n,\n\"tool_use_id\"\n:\n\"toolu_01AbCdEfGhIjKlMnOpQrStU\"\n,\n\"content\"\n:\n\"1: def is_prime(n):\n\\n\n2:\n\\\"\n\\\"\n\\\"\nCheck if a number is prime.\n\\\"\n\\\"\n\\\"\n\\n\n3:     if n <= 1:\n\\n\n4:         return False\n\\n\n5:     if n <= 3:\n\\n\n6:         return True\n\\n\n7:     if n % 2 == 0 or n % 3 == 0:\n\\n\n8:         return False\n\\n\n9:     i = 5\n\\n\n10:     while i * i <= n:\n\\n\n11:         if n % i == 0 or n % (i + 2) == 0:\n\\n\n12:             return False\n\\n\n13:         i += 6\n\\n\n14:     return True\n\\n\n15:\n\\n\n16: def get_primes(limit):\n\\n\n17:\n\\\"\n\\\"\n\\\"\nGenerate a list of prime numbers up to the given limit.\n\\\"\n\\\"\n\\\"\n\\n\n18:     primes = []\n\\n\n19:     for num in range(2, limit + 1)\n\\n\n20:         if is_prime(num):\n\\n\n21:             primes.append(num)\n\\n\n22:     return primes\n\\n\n23:\n\\n\n24: def main():\n\\n\n25:\n\\\"\n\\\"\n\\\"\nMain function to demonstrate prime number generation.\n\\\"\n\\\"\n\\\"\n\\n\n26:     limit = 100\n\\n\n27:     prime_list = get_primes(limit)\n\\n\n28:     print(f\n\\\"\nPrime numbers up to {limit}:\n\\\"\n)\n\\n\n29:     print(prime_list)\n\\n\n30:     print(f\n\\\"\nFound {len(prime_list)} prime numbers.\n\\\"\n)\n\\n\n31:\n\\n\n32: if __name__ ==\n\\\"\n__main__\n\\\"\n:\n\\n\n33:     main()\"\n}\n]\n}\n]\n}\n'\nLine numbers\nIn the example above, the\nview\ntool result includes file contents with line numbers prepended to each line (e.g., “1: def is_prime(n):”). Line numbers are not required, but they are essential for successfully using the\nview_range\nparameter to examine specific sections of files and the\ninsert_line\nparameter to add content at precise locations.\nClaude will identify the syntax error and use the\nstr_replace\ncommand to fix it:\n{\n\"id\"\n:\n\"msg_01VwXyZAbCdEfGhIjKlMnO\"\n,\n\"model\"\n:\n\"claude-opus-4-20250514\"\n,\n\"stop_reason\"\n:\n\"tool_use\"\n,\n\"role\"\n:\n\"assistant\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"text\"\n,\n\"text\"\n:\n\"I found the syntax error in your primes.py file. In the `get_primes` function, there is a missing colon (:) at the end of the for loop line. Let me fix that for you.\"\n}\n,\n{\n\"type\"\n:\n\"tool_use\"\n,\n\"id\"\n:\n\"toolu_01PqRsTuVwXyZAbCdEfGh\"\n,\n\"name\"\n:\n\"str_replace_based_edit_tool\"\n,\n\"input\"\n:\n{\n\"command\"\n:\n\"str_replace\"\n,\n\"path\"\n:\n\"primes.py\"\n,\n\"old_str\"\n:\n\"    for num in range(2, limit + 1)\"\n,\n\"new_str\"\n:\n\"    for num in range(2, limit + 1):\"\n}\n}\n]\n}\nYour application should then make the edit and return the result:\nPython\nTypeScript\nJava\nresponse\n=\nclient\n.\nmessages\n.\ncreate\n(\nmodel\n=\n\"claude-opus-4-20250514\"\n,\nmax_tokens\n=\n1024\n,\ntools\n=\n[\n{\n\"type\"\n:\n\"text_editor_20250429\"\n,\n\"name\"\n:\n\"str_replace_based_edit_tool\"\n}\n]\n,\nmessages\n=\n[\n# Previous messages...\n{\n\"role\"\n:\n\"assistant\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"text\"\n,\n\"text\"\n:\n\"I found the syntax error in your primes.py file. In the `get_primes` function, there is a missing colon (:) at the end of the for loop line. Let me fix that for you.\"\n}\n,\n{\n\"type\"\n:\n\"tool_use\"\n,\n\"id\"\n:\n\"toolu_01PqRsTuVwXyZAbCdEfGh\"\n,\n\"name\"\n:\n\"str_replace_based_edit_tool\"\n,\n\"input\"\n:\n{\n\"command\"\n:\n\"str_replace\"\n,\n\"path\"\n:\n\"primes.py\"\n,\n\"old_str\"\n:\n\"    for num in range(2, limit + 1)\"\n,\n\"new_str\"\n:\n\"    for num in range(2, limit + 1):\"\n}\n}\n]\n}\n,\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"tool_result\"\n,\n\"tool_use_id\"\n:\n\"toolu_01PqRsTuVwXyZAbCdEfGh\"\n,\n\"content\"\n:\n\"Successfully replaced text at exactly one location.\"\n}\n]\n}\n]\n)\nFinally, Claude will provide a complete explanation of the fix:\n{\n\"id\"\n:\n\"msg_01IjKlMnOpQrStUvWxYzAb\"\n,\n\"model\"\n:\n\"claude-opus-4-20250514\"\n,\n\"stop_reason\"\n:\n\"end_turn\"\n,\n\"role\"\n:\n\"assistant\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"text\"\n,\n\"text\"\n:\n\"I've fixed the syntax error in your primes.py file. The issue was in the `get_primes` function at line 19. There was a missing colon (:) at the end of the for loop line.\\n\\nHere's what I changed:\\n\\nFrom:\\n```python\\nfor num in range(2, limit + 1)\\n```\\n\\nTo:\\n```python\\nfor num in range(2, limit + 1):\\n```\\n\\nIn Python, a colon is required at the end of statements that start a new code block, such as for loops, if statements, function definitions, etc. Without the colon, Python raises a syntax error because it doesn't know where the code block begins.\\n\\nYour code should now run correctly. The function will properly generate a list of prime numbers up to the specified limit.\"\n}\n]\n}\nThis example demonstrates how Claude 4 uses the text editor tool to fix a syntax error in a Python file.\nFirst, your application provides Claude with the text editor tool and a prompt to fix a syntax error:\nShell\nPython\nTypeScript\nJava\ncurl\nhttps://api.anthropic.com/v1/messages\n\\\n-H\n\"content-type: application/json\"\n\\\n-H\n\"x-api-key:\n$ANTHROPIC_API_KEY\n\"\n\\\n-H\n\"anthropic-version: 2023-06-01\"\n\\\n-d\n'\n{\n\"model\"\n:\n\"claude-opus-4-20250514\"\n,\n\"max_tokens\"\n:\n1024\n,\n\"tools\"\n:\n[\n{\n\"type\"\n:\n\"text_editor_20250429\"\n,\n\"name\"\n:\n\"str_replace_based_edit_tool\"\n}\n]\n,\n\"messages\"\n:\n[\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n\"There'\\''s a syntax error in my primes.py file. Can you help me fix it?\"\n}\n]\n}\n'\nClaude will use the text editor tool first to view the file:\n{\n\"id\"\n:\n\"msg_01XAbCDeFgHiJkLmNoPQrStU\"\n,\n\"model\"\n:\n\"claude-opus-4-20250514\"\n,\n\"stop_reason\"\n:\n\"tool_use\"\n,\n\"role\"\n:\n\"assistant\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"text\"\n,\n\"text\"\n:\n\"I'll help you fix the syntax error in your primes.py file. First, let me take a look at the file to identify the issue.\"\n}\n,\n{\n\"type\"\n:\n\"tool_use\"\n,\n\"id\"\n:\n\"toolu_01AbCdEfGhIjKlMnOpQrStU\"\n,\n\"name\"\n:\n\"str_replace_based_edit_tool\"\n,\n\"input\"\n:\n{\n\"command\"\n:\n\"view\"\n,\n\"path\"\n:\n\"primes.py\"\n}\n}\n]\n}\nYour application should then read the file and return its contents to Claude:\nShell\nPython\nTypeScript\nJava\ncurl\nhttps://api.anthropic.com/v1/messages\n\\\n-H\n\"content-type: application/json\"\n\\\n-H\n\"x-api-key:\n$ANTHROPIC_API_KEY\n\"\n\\\n-H\n\"anthropic-version: 2023-06-01\"\n\\\n-d\n'\n{\n\"model\"\n:\n\"claude-opus-4-20250514\"\n,\n\"max_tokens\"\n:\n1024\n,\n\"tools\"\n:\n[\n{\n\"type\"\n:\n\"text_editor_20250429\"\n,\n\"name\"\n:\n\"str_replace_based_edit_tool\"\n}\n]\n,\n\"messages\"\n:\n[\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n\"There'\\''s a syntax error in my primes.py file. Can you help me fix it?\"\n}\n,\n{\n\"role\"\n:\n\"assistant\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"text\"\n,\n\"text\"\n:\n\"I'\\''ll help you fix the syntax error in your primes.py file. First, let me take a look at the file to identify the issue.\"\n}\n,\n{\n\"type\"\n:\n\"tool_use\"\n,\n\"id\"\n:\n\"toolu_01AbCdEfGhIjKlMnOpQrStU\"\n,\n\"name\"\n:\n\"str_replace_based_edit_tool\"\n,\n\"input\"\n:\n{\n\"command\"\n:\n\"view\"\n,\n\"path\"\n:\n\"primes.py\"\n}\n}\n]\n}\n,\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"tool_result\"\n,\n\"tool_use_id\"\n:\n\"toolu_01AbCdEfGhIjKlMnOpQrStU\"\n,\n\"content\"\n:\n\"1: def is_prime(n):\n\\n\n2:\n\\\"\n\\\"\n\\\"\nCheck if a number is prime.\n\\\"\n\\\"\n\\\"\n\\n\n3:     if n <= 1:\n\\n\n4:         return False\n\\n\n5:     if n <= 3:\n\\n\n6:         return True\n\\n\n7:     if n % 2 == 0 or n % 3 == 0:\n\\n\n8:         return False\n\\n\n9:     i = 5\n\\n\n10:     while i * i <= n:\n\\n\n11:         if n % i == 0 or n % (i + 2) == 0:\n\\n\n12:             return False\n\\n\n13:         i += 6\n\\n\n14:     return True\n\\n\n15:\n\\n\n16: def get_primes(limit):\n\\n\n17:\n\\\"\n\\\"\n\\\"\nGenerate a list of prime numbers up to the given limit.\n\\\"\n\\\"\n\\\"\n\\n\n18:     primes = []\n\\n\n19:     for num in range(2, limit + 1)\n\\n\n20:         if is_prime(num):\n\\n\n21:             primes.append(num)\n\\n\n22:     return primes\n\\n\n23:\n\\n\n24: def main():\n\\n\n25:\n\\\"\n\\\"\n\\\"\nMain function to demonstrate prime number generation.\n\\\"\n\\\"\n\\\"\n\\n\n26:     limit = 100\n\\n\n27:     prime_list = get_primes(limit)\n\\n\n28:     print(f\n\\\"\nPrime numbers up to {limit}:\n\\\"\n)\n\\n\n29:     print(prime_list)\n\\n\n30:     print(f\n\\\"\nFound {len(prime_list)} prime numbers.\n\\\"\n)\n\\n\n31:\n\\n\n32: if __name__ ==\n\\\"\n__main__\n\\\"\n:\n\\n\n33:     main()\"\n}\n]\n}\n]\n}\n'\nLine numbers\nIn the example above, the\nview\ntool result includes file contents with line numbers prepended to each line (e.g., “1: def is_prime(n):”). Line numbers are not required, but they are essential for successfully using the\nview_range\nparameter to examine specific sections of files and the\ninsert_line\nparameter to add content at precise locations.\nClaude will identify the syntax error and use the\nstr_replace\ncommand to fix it:\n{\n\"id\"\n:\n\"msg_01VwXyZAbCdEfGhIjKlMnO\"\n,\n\"model\"\n:\n\"claude-opus-4-20250514\"\n,\n\"stop_reason\"\n:\n\"tool_use\"\n,\n\"role\"\n:\n\"assistant\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"text\"\n,\n\"text\"\n:\n\"I found the syntax error in your primes.py file. In the `get_primes` function, there is a missing colon (:) at the end of the for loop line. Let me fix that for you.\"\n}\n,\n{\n\"type\"\n:\n\"tool_use\"\n,\n\"id\"\n:\n\"toolu_01PqRsTuVwXyZAbCdEfGh\"\n,\n\"name\"\n:\n\"str_replace_based_edit_tool\"\n,\n\"input\"\n:\n{\n\"command\"\n:\n\"str_replace\"\n,\n\"path\"\n:\n\"primes.py\"\n,\n\"old_str\"\n:\n\"    for num in range(2, limit + 1)\"\n,\n\"new_str\"\n:\n\"    for num in range(2, limit + 1):\"\n}\n}\n]\n}\nYour application should then make the edit and return the result:\nPython\nTypeScript\nJava\nresponse\n=\nclient\n.\nmessages\n.\ncreate\n(\nmodel\n=\n\"claude-opus-4-20250514\"\n,\nmax_tokens\n=\n1024\n,\ntools\n=\n[\n{\n\"type\"\n:\n\"text_editor_20250429\"\n,\n\"name\"\n:\n\"str_replace_based_edit_tool\"\n}\n]\n,\nmessages\n=\n[\n# Previous messages...\n{\n\"role\"\n:\n\"assistant\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"text\"\n,\n\"text\"\n:\n\"I found the syntax error in your primes.py file. In the `get_primes` function, there is a missing colon (:) at the end of the for loop line. Let me fix that for you.\"\n}\n,\n{\n\"type\"\n:\n\"tool_use\"\n,\n\"id\"\n:\n\"toolu_01PqRsTuVwXyZAbCdEfGh\"\n,\n\"name\"\n:\n\"str_replace_based_edit_tool\"\n,\n\"input\"\n:\n{\n\"command\"\n:\n\"str_replace\"\n,\n\"path\"\n:\n\"primes.py\"\n,\n\"old_str\"\n:\n\"    for num in range(2, limit + 1)\"\n,\n\"new_str\"\n:\n\"    for num in range(2, limit + 1):\"\n}\n}\n]\n}\n,\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"tool_result\"\n,\n\"tool_use_id\"\n:\n\"toolu_01PqRsTuVwXyZAbCdEfGh\"\n,\n\"content\"\n:\n\"Successfully replaced text at exactly one location.\"\n}\n]\n}\n]\n)\nFinally, Claude will provide a complete explanation of the fix:\n{\n\"id\"\n:\n\"msg_01IjKlMnOpQrStUvWxYzAb\"\n,\n\"model\"\n:\n\"claude-opus-4-20250514\"\n,\n\"stop_reason\"\n:\n\"end_turn\"\n,\n\"role\"\n:\n\"assistant\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"text\"\n,\n\"text\"\n:\n\"I've fixed the syntax error in your primes.py file. The issue was in the `get_primes` function at line 19. There was a missing colon (:) at the end of the for loop line.\\n\\nHere's what I changed:\\n\\nFrom:\\n```python\\nfor num in range(2, limit + 1)\\n```\\n\\nTo:\\n```python\\nfor num in range(2, limit + 1):\\n```\\n\\nIn Python, a colon is required at the end of statements that start a new code block, such as for loops, if statements, function definitions, etc. Without the colon, Python raises a syntax error because it doesn't know where the code block begins.\\n\\nYour code should now run correctly. The function will properly generate a list of prime numbers up to the specified limit.\"\n}\n]\n}\nThis example demonstrates how Claude Sonnet 3.7 uses the text editor tool to fix a syntax error in a Python file.\nFirst, your application provides Claude with the text editor tool and a prompt to fix a syntax error:\nimport\nanthropic\nclient\n=\nanthropic\n.\nAnthropic\n(\n)\nresponse\n=\nclient\n.\nmessages\n.\ncreate\n(\nmodel\n=\n\"claude-3-7-sonnet-20250219\"\n,\nmax_tokens\n=\n1024\n,\ntools\n=\n[\n{\n\"type\"\n:\n\"text_editor_20250124\"\n,\n\"name\"\n:\n\"str_replace_editor\"\n}\n]\n,\nmessages\n=\n[\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n\"There's a syntax error in my primes.py file. Can you help me fix it?\"\n}\n]\n)\nprint\n(\nresponse\n)\nThe Claude Sonnet 3.7 examples follow the same format as the Claude 4 examples above, using the same tool calls and responses but with the\ntext_editor_20250124\ntool type and\nstr_replace_editor\nname.\n​\nImplement the text editor tool\nThe text editor tool is implemented as a schema-less tool. When using this tool, you don’t need to provide an input schema as with other tools; the schema is built into Claude’s model and can’t be modified.\nThe tool type depends on the model version:\nClaude 4\n:\ntype: \"text_editor_20250429\"\nClaude Sonnet 3.7\n:\ntype: \"text_editor_20250124\"\nClaude Sonnet 3.5\n:\ntype: \"text_editor_20241022\"\n1\nInitialize your editor implementation\nCreate helper functions to handle file operations like reading, writing, and modifying files. Consider implementing backup functionality to recover from mistakes.\n2\nHandle editor tool calls\nCreate a function that processes tool calls from Claude based on the command type:\ndef\nhandle_editor_tool\n(\ntool_call\n,\nmodel_version\n)\n:\ninput_params\n=\ntool_call\n.\ninput\ncommand\n=\ninput_params\n.\nget\n(\n'command'\n,\n''\n)\nfile_path\n=\ninput_params\n.\nget\n(\n'path'\n,\n''\n)\nif\ncommand\n==\n'view'\n:\n# Read and return file contents\npass\nelif\ncommand\n==\n'str_replace'\n:\n# Replace text in file\npass\nelif\ncommand\n==\n'create'\n:\n# Create new file\npass\nelif\ncommand\n==\n'insert'\n:\n# Insert text at location\npass\nelif\ncommand\n==\n'undo_edit'\n:\n# Check if it's a Claude 4 model\nif\n'str_replace_based_edit_tool'\nin\nmodel_version\n:\nreturn\n{\n\"error\"\n:\n\"undo_edit command is not supported in Claude 4\"\n}\n# Restore from backup for Claude 3.7/3.5\npass\n3\nImplement security measures\nAdd validation and security checks:\nValidate file paths to prevent directory traversal\nCreate backups before making changes\nHandle errors gracefully\nImplement permissions checks\n4\nProcess Claude's responses\nExtract and handle tool calls from Claude’s responses:\n# Process tool use in Claude's response\nfor\ncontent\nin\nresponse\n.\ncontent\n:\nif\ncontent\n.\ntype\n==\n\"tool_use\"\n:\n# Execute the tool based on command\nresult\n=\nhandle_editor_tool\n(\ncontent\n)\n# Return result to Claude\ntool_result\n=\n{\n\"type\"\n:\n\"tool_result\"\n,\n\"tool_use_id\"\n:\ncontent\n.\nid\n,\n\"content\"\n:\nresult\n}\nWhen implementing the text editor tool, keep in mind:\nSecurity\n: The tool has access to your local filesystem, so implement proper security measures.\nBackup\n: Always create backups before allowing edits to important files.\nValidation\n: Validate all inputs to prevent unintended changes.\nUnique matching\n: Make sure replacements match exactly one location to avoid unintended edits.\n​\nHandle errors\nWhen using the text editor tool, various errors may occur. Here is guidance on how to handle them:\nFile not found\nIf Claude tries to view or modify a file that doesn’t exist, return an appropriate error message in the\ntool_result\n:\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"tool_result\"\n,\n\"tool_use_id\"\n:\n\"toolu_01A09q90qw90lq917835lq9\"\n,\n\"content\"\n:\n\"Error: File not found\"\n,\n\"is_error\"\n:\ntrue\n}\n]\n}\nMultiple matches for replacement\nIf Claude’s\nstr_replace\ncommand matches multiple locations in the file, return an appropriate error message:\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"tool_result\"\n,\n\"tool_use_id\"\n:\n\"toolu_01A09q90qw90lq917835lq9\"\n,\n\"content\"\n:\n\"Error: Found 3 matches for replacement text. Please provide more context to make a unique match.\"\n,\n\"is_error\"\n:\ntrue\n}\n]\n}\nNo matches for replacement\nIf Claude’s\nstr_replace\ncommand doesn’t match any text in the file, return an appropriate error message:\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"tool_result\"\n,\n\"tool_use_id\"\n:\n\"toolu_01A09q90qw90lq917835lq9\"\n,\n\"content\"\n:\n\"Error: No match found for replacement. Please check your text and try again.\"\n,\n\"is_error\"\n:\ntrue\n}\n]\n}\nPermission errors\nIf there are permission issues with creating, reading, or modifying files, return an appropriate error message:\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"tool_result\"\n,\n\"tool_use_id\"\n:\n\"toolu_01A09q90qw90lq917835lq9\"\n,\n\"content\"\n:\n\"Error: Permission denied. Cannot write to file.\"\n,\n\"is_error\"\n:\ntrue\n}\n]\n}\n​\nFollow implementation best practices\nProvide clear context\nWhen asking Claude to fix or modify code, be specific about what files need to be examined or what issues need to be addressed. Clear context helps Claude identify the right files and make appropriate changes.\nLess helpful prompt\n: “Can you fix my code?”\nBetter prompt\n: “There’s a syntax error in my primes.py file that prevents it from running. Can you fix it?”\nBe explicit about file paths\nSpecify file paths clearly when needed, especially if you’re working with multiple files or files in different directories.\nLess helpful prompt\n: “Review my helper file”\nBetter prompt\n: “Can you check my utils/helpers.py file for any performance issues?”\nCreate backups before editing\nImplement a backup system in your application that creates copies of files before allowing Claude to edit them, especially for important or production code.\ndef\nbackup_file\n(\nfile_path\n)\n:\n\"\"\"Create a backup of a file before editing.\"\"\"\nbackup_path\n=\nf\"\n{\nfile_path\n}\n.backup\"\nif\nos\n.\npath\n.\nexists\n(\nfile_path\n)\n:\nwith\nopen\n(\nfile_path\n,\n'r'\n)\nas\nsrc\n,\nopen\n(\nbackup_path\n,\n'w'\n)\nas\ndst\n:\ndst\n.\nwrite\n(\nsrc\n.\nread\n(\n)\n)\nHandle unique text replacement carefully\nThe\nstr_replace\ncommand requires an exact match for the text to be replaced. Your application should ensure that there is exactly one match for the old text or provide appropriate error messages.\ndef\nsafe_replace\n(\nfile_path\n,\nold_text\n,\nnew_text\n)\n:\n\"\"\"Replace text only if there's exactly one match.\"\"\"\nwith\nopen\n(\nfile_path\n,\n'r'\n)\nas\nf\n:\ncontent\n=\nf\n.\nread\n(\n)\ncount\n=\ncontent\n.\ncount\n(\nold_text\n)\nif\ncount\n==\n0\n:\nreturn\n\"Error: No match found\"\nelif\ncount\n>\n1\n:\nreturn\nf\"Error: Found\n{\ncount\n}\nmatches\"\nelse\n:\nnew_content\n=\ncontent\n.\nreplace\n(\nold_text\n,\nnew_text\n)\nwith\nopen\n(\nfile_path\n,\n'w'\n)\nas\nf\n:\nf\n.\nwrite\n(\nnew_content\n)\nreturn\n\"Successfully replaced text\"\nVerify changes\nAfter Claude makes changes to a file, verify the changes by running tests or checking that the code still works as expected.\ndef\nverify_changes\n(\nfile_path\n)\n:\n\"\"\"Run tests or checks after making changes.\"\"\"\ntry\n:\n# For Python files, check for syntax errors\nif\nfile_path\n.\nendswith\n(\n'.py'\n)\n:\nimport\nast\nwith\nopen\n(\nfile_path\n,\n'r'\n)\nas\nf\n:\nast\n.\nparse\n(\nf\n.\nread\n(\n)\n)\nreturn\n\"Syntax check passed\"\nexcept\nException\nas\ne\n:\nreturn\nf\"Verification failed:\n{\nstr\n(\ne\n)\n}\n\"\n​\nPricing and token usage\nThe text editor tool uses the same pricing structure as other tools used with Claude. It follows the standard input and output token pricing based on the Claude model you’re using.\nIn addition to the base tokens, the following additional input tokens are needed for the text editor tool:\nTool\nAdditional input tokens\ntext_editor_20250429\n(Claude 4)\n700 tokens\ntext_editor_20250124\n(Claude Sonnet 3.7)\n700 tokens\ntext_editor_20241022\n(Claude Sonnet 3.5)\n700 tokens\nFor more detailed information about tool pricing, see\nTool use pricing\n.\n​\nIntegrate the text editor tool with other tools\nThe text editor tool can be used alongside other Claude tools. When combining tools, ensure you:\nMatch the tool version with the model you’re using\nAccount for the additional token usage for all tools included in your request\n​\nChange log\nDate\nVersion\nChanges\nApril 29, 2025\ntext_editor_20250429\nRelease of the text editor Tool for Claude 4. This version removes the\nundo_edit\ncommand but maintains all other capabilities. The tool name has been updated to reflect its str_replace-based architecture.\nMarch 13, 2025\ntext_editor_20250124\nIntroduction of standalone text editor Tool documentation. This version is optimized for Claude Sonnet 3.7 but has identical capabilities to the previous version.\nOctober 22, 2024\ntext_editor_20241022\nInitial release of the text editor Tool with Claude Sonnet 3.5. Provides capabilities for viewing, creating, and editing files through the\nview\n,\ncreate\n,\nstr_replace\n,\ninsert\n, and\nundo_edit\ncommands.\n​\nNext steps\nHere are some ideas for how to use the text editor tool in more convenient and powerful ways:\nIntegrate with your development workflow\n: Build the text editor tool into your development tools or IDE\nCreate a code review system\n: Have Claude review your code and make improvements\nBuild a debugging assistant\n: Create a system where Claude can help you diagnose and fix issues in your code\nImplement file format conversion\n: Let Claude help you convert files from one format to another\nAutomate documentation\n: Set up workflows for Claude to automatically document your code\nAs you build applications with the text editor tool, we’re excited to see how you leverage Claude’s capabilities to enhance your development workflow and productivity.\nTool use overview\nLearn how to implement tool workflows for use with Claude.\nToken-efficient tool use\nReduce latency and costs when using tools with Claude Sonnet 3.7.\nBash tool\nExecute shell commands with Claude.\nWas this page helpful?\nYes\nNo\nComputer use tool\nWeb search tool\nOn this page\nBefore using the text editor tool\nUse a compatible model\nAssess your use case fit\nUse the text editor tool\nText editor tool commands\nview\nstr_replace\ncreate\ninsert\nundo_edit\nExample: Fixing a syntax error with the text editor tool\nImplement the text editor tool\nHandle errors\nFollow implementation best practices\nPricing and token usage\nIntegrate the text editor tool with other tools\nChange log\nNext steps",
  "links": [
    {
      "url": "https://docs.anthropic.com/en/docs/about-claude/use-case-guides/overview",
      "text": "Overview"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/about-claude/use-case-guides/ticket-routing",
      "text": "Ticket routing"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/about-claude/use-case-guides/customer-support-chat",
      "text": "Customer support agent"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/about-claude/use-case-guides/content-moderation",
      "text": "Content moderation"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/about-claude/use-case-guides/legal-summarization",
      "text": "Legal summarization"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/overview",
      "text": "Overview"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/claude-4-best-practices",
      "text": "Claude 4 best practices"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prompt-generator",
      "text": "Prompt generator"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prompt-templates-and-variables",
      "text": "Use prompt templates"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prompt-improver",
      "text": "Prompt improver"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/be-clear-and-direct",
      "text": "Be clear and direct"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/multishot-prompting",
      "text": "Use examples (multishot prompting)"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/chain-of-thought",
      "text": "Let Claude think (CoT)"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/use-xml-tags",
      "text": "Use XML tags"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/system-prompts",
      "text": "Give Claude a role (system prompts)"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prefill-claudes-response",
      "text": "Prefill Claude's response"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/chain-prompts",
      "text": "Chain complex prompts"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/long-context-tips",
      "text": "Long context tips"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/extended-thinking-tips",
      "text": "Extended thinking tips"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/define-success",
      "text": "Define success criteria"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/develop-tests",
      "text": "Develop test cases"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/eval-tool",
      "text": "Using the Evaluation Tool"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-latency",
      "text": "Reducing latency"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-hallucinations",
      "text": "Reduce hallucinations"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/increase-consistency",
      "text": "Increase output consistency"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/mitigate-jailbreaks",
      "text": "Mitigate jailbreaks"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/handle-streaming-refusals",
      "text": "Streaming refusals"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-prompt-leak",
      "text": "Reduce prompt leak"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/keep-claude-in-character",
      "text": "Keep Claude in character"
    }
  ],
  "metadata": {
    "scraped_at": "2025-06-23T15:07:44.249288",
    "word_count": 5577,
    "link_count": 29,
    "content_length": 33320
  }
}