{
  "url": "https://docs.anthropic.com/en/docs/claude-code/quickstart",
  "title": "Quickstart - Anthropic",
  "text": "Anthropic\nhome page\nEnglish\nSearch...\nSearch...\nNavigation\nGetting started\nQuickstart\nWelcome\nDeveloper Guide\nAPI Guide\nClaude Code\nModel Context Protocol (MCP)\nResources\nRelease Notes\nDocumentation\nDeveloper Discord\nSupport\nGetting started\nOverview\nSet up\nQuickstart\nMemory management\nCommon workflows\nBuild with Claude\nAdd Claude Code to your IDE\nModel Context Protocol (MCP)\nGitHub Actions\nClaude Code SDK\nTroubleshooting\nDeployment\nOverview\nAmazon Bedrock\nGoogle Vertex AI\nCorporate proxy\nLLM gateway\nDevelopment containers\nAdministration\nIdentity and Access Management\nSecurity\nMonitoring\nCosts\nReference\nCLI reference\nInteractive mode\nSlash commands\nSettings\nResources\nData usage\nLegal and compliance\nThis quickstart guide will have you using AI-powered coding assistance in just a few minutes. By the end, you’ll understand how to use Claude Code for common development tasks.\n​\nBefore you begin\nMake sure you have:\nInstalled Claude Code\nA terminal or command prompt open\nA code project to work with (or use our\nsample project\n)\n​\nStep 1: Start your first session\nOpen your terminal in any project directory and start Claude Code:\ncd\n/path/to/your/project\nclaude\nYou’ll see the Claude Code prompt inside a new interactive session:\n✻ Welcome to Claude Code!\n...\n> Try \"create a util logging.py that...\"\n​\nStep 2: Ask your first question\nLet’s start with understanding your codebase. Try one of these commands:\n> what does this project do?\nClaude will analyze your files and provide a summary. You can also ask more specific questions:\n> what technologies does this project use?\n> where is the main entry point?\n> explain the folder structure\nClaude Code reads your files as needed - you don’t have to manually add context.\n​\nStep 3: Make your first code change\nNow let’s make Claude Code do some actual coding. Try a simple task:\n> add a hello world function to the main file\nClaude Code will:\nFind the appropriate file\nShow you the proposed changes\nAsk for your approval\nMake the edit\nClaude Code always asks for permission before modifying files. You can approve individual changes or enable “Accept all” mode for a session.\n​\nStep 4: Use Git with Claude Code\nClaude Code makes Git operations conversational:\n> what files have I changed?\n> commit my changes with a descriptive message\nYou can also prompt for more complex Git operations:\n> create a new branch called feature/quickstart\n> show me the last 5 commits\n> help me resolve merge conflicts\n​\nStep 5: Fix a bug or add a feature\nClaude is proficient at debugging and feature implementation.\nDescribe what you want in natural language:\n> add input validation to the user registration form\nOr fix existing issues:\n> there's a bug where users can submit empty forms - fix it\nClaude Code will:\nLocate the relevant code\nUnderstand the context\nImplement a solution\nRun tests if available\n​\nStep 6: Test out other common workflows\nThere are a number of ways to work with Claude:\nRefactor code\n> refactor the authentication module to use async/await instead of callbacks\nWrite tests\n> write unit tests for the calculator functions\nUpdate documentation\n> update the README with installation instructions\nCode review\n> review my changes and suggest improvements\nRemember\n: Claude Code is your AI pair programmer. Talk to it like you would a helpful colleague - describe what you want to achieve, and it will help you get there.\n​\nEssential commands\nHere are the most important commands for daily use:\nCommand\nWhat it does\nExample\nclaude\nStart interactive mode\nclaude\nclaude \"task\"\nRun a one-time task\nclaude \"fix the build error\"\nclaude -p \"query\"\nRun one-off query, then exit\nclaude -p \"explain this function\"\nclaude -c\nContinue most recent conversation\nclaude -c\nclaude -r\nResume a previous conversation\nclaude -r\nclaude commit\nCreate a Git commit\nclaude commit\n/clear\nClear conversation history\n> /clear\n/help\nShow available commands\n> /help\nexit\nor Ctrl+C\nExit Claude Code\n> exit\n​\nPro tips for beginners\nBe specific with your requests\nInstead of: “fix the bug”\nTry: “fix the login bug where users see a blank screen after entering wrong credentials”\nUse step-by-step instructions\nBreak complex tasks into steps:\n> 1. create a new API endpoint for user profiles\n> 2. add validation for required fields\n> 3. write tests for the endpoint\nLet Claude explore first\nBefore making changes, let Claude understand your code:\n> analyze the database schema\n> how does error handling work in this app?\nSave time with shortcuts\nUse Tab for command completion\nPress ↑ for command history\nType\n/\nto see all slash commands\n​\nWhat’s next?\nNow that you’ve learned the basics, explore more advanced features:\nCLI reference\nMaster all commands and options\nConfiguration\nCustomize Claude Code for your workflow\nCommon workflows\nLearn advanced techniques\n​\nGetting help\nIn Claude Code\n: Type\n/help\nor ask “how do I…”\nDocumentation\n: You’re here! Browse other guides\nCommunity\n: Join our\nDiscord\nfor tips and support\nWas this page helpful?\nYes\nNo\nSet up\nMemory management\nOn this page\nBefore you begin\nStep 1: Start your first session\nStep 2: Ask your first question\nStep 3: Make your first code change\nStep 4: Use Git with Claude Code\nStep 5: Fix a bug or add a feature\nStep 6: Test out other common workflows\nEssential commands\nPro tips for beginners\nWhat’s next?\nGetting help",
  "links": [
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/github-actions",
      "text": "GitHub Actions"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/sdk",
      "text": "Claude Code SDK"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/troubleshooting",
      "text": "Troubleshooting"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/third-party-integrations",
      "text": "Overview"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/amazon-bedrock",
      "text": "Amazon Bedrock"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/google-vertex-ai",
      "text": "Google Vertex AI"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/corporate-proxy",
      "text": "Corporate proxy"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/llm-gateway",
      "text": "LLM gateway"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/devcontainer",
      "text": "Development containers"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/iam",
      "text": "Identity and Access Management"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/security",
      "text": "Security"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/monitoring-usage",
      "text": "Monitoring"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/costs",
      "text": "Costs"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/cli-reference",
      "text": "CLI reference"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/interactive-mode",
      "text": "Interactive mode"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/slash-commands",
      "text": "Slash commands"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/settings",
      "text": "Settings"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/data-usage",
      "text": "Data usage"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/legal-and-compliance",
      "text": "Legal and compliance"
    }
  ],
  "metadata": {
    "scraped_at": "2025-06-23T15:07:26.766816",
    "word_count": 886,
    "link_count": 19,
    "content_length": 5315
  }
}