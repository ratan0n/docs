{
  "url": "https://docs.anthropic.com/en/docs/claude-code/security",
  "title": "Security - Anthropic",
  "text": "Anthropic\nhome page\nEnglish\nSearch...\nSearch...\nNavigation\nAdministration\nSecurity\nWelcome\nDeveloper Guide\nAPI Guide\nClaude Code\nModel Context Protocol (MCP)\nResources\nRelease Notes\nDocumentation\nDeveloper Discord\nSupport\nGetting started\nOverview\nSet up\nQuickstart\nMemory management\nCommon workflows\nBuild with Claude\nAdd Claude Code to your IDE\nModel Context Protocol (MCP)\nGitHub Actions\nClaude Code SDK\nTroubleshooting\nDeployment\nOverview\nAmazon Bedrock\nGoogle Vertex AI\nCorporate proxy\nLLM gateway\nDevelopment containers\nAdministration\nIdentity and Access Management\nSecurity\nMonitoring\nCosts\nReference\nCLI reference\nInteractive mode\nSlash commands\nSettings\nResources\nData usage\nLegal and compliance\n​\nHow we approach security\n​\nSecurity foundation\nYour code’s security is paramount. Claude Code is built with security at its core, developed according to Anthropic’s comprehensive security program. Learn more and access resources (SOC 2 Type 2 report, ISO 27001 certificate, etc.) at\nAnthropic Trust Center\n.\n​\nPermission-based architecture\nClaude Code uses strict read-only permissions by default. When additional actions are needed (editing files, running tests, executing commands), Claude Code requests explicit permission. Users control whether to approve actions once or allow them automatically.\nWe designed Claude Code to be transparent and secure. For example, we require approval for\ngit\ncommands before executing them, giving you direct control. This approach enables users and organizations to configure permissions directly.\nFor detailed permission configuration, see\nIdentity and Access Management\n.\n​\nBuilt-in protections\nTo mitigate risks in agentic systems:\nFolder access restriction\n: Claude Code can only access the folder where it was started and its subfolders—it cannot go upstream to parent directories. This creates a clear security boundary, ensuring Claude Code only operates within the intended project scope\nPrompt fatigue mitigation\n: Support for allowlisting frequently used safe commands per-user, per-codebase, or per-organization\nAccept Edits mode\n: Batch accept multiple edits while maintaining permission prompts for commands with side effects\n​\nUser responsibility\nClaude Code only has the permissions you grant it. You’re responsible for reviewing proposed code and commands for safety before approval.\n​\nProtect against prompt injection\nPrompt injection is a technique where an attacker attempts to override or manipulate an AI assistant’s instructions by inserting malicious text. Claude Code includes several safeguards against these attacks:\n​\nCore protections\nPermission system\n: Sensitive operations require explicit approval\nContext-aware analysis\n: Detects potentially harmful instructions by analyzing the full request\nInput sanitization\n: Prevents command injection by processing user inputs\nCommand blocklist\n: Blocks risky commands that fetch arbitrary content from the web like\ncurl\nand\nwget\n​\nAdditional safeguards\nNetwork request approval\n: Tools that make network requests require user approval by default\nIsolated context windows\n: Web fetch uses a separate context window to avoid injecting potentially malicious prompts\nTrust verification\n: First-time codebase runs and new MCP servers require trust verification\nCommand injection detection\n: Suspicious bash commands require manual approval even if previously allowlisted\nFail-closed matching\n: Unmatched commands default to requiring manual approval\nNatural language descriptions\n: Complex bash commands include explanations for user understanding\nBest practices for working with untrusted content\n:\nReview suggested commands before approval\nAvoid piping untrusted content directly to Claude\nVerify proposed changes to critical files\nUse virtual machines (VMs) to run scripts and make tool calls, especially when interacting with external web services\nReport suspicious behavior with\n/bug\nWhile these protections significantly reduce risk, no system is completely\nimmune to all attacks. Always maintain good security practices when working\nwith any AI tool.\n​\nMCP security\nClaude Code allows users to configure Model Context Protocol (MCP) servers. The list of allowed MCP servers is configured in your source code, as part of Claude Code settings engineers check into source control.\nWe encourage either writing your own MCP servers or using MCP servers from providers that you trust. You are able to configure Claude Code permissions for MCP servers. Anthropic does not manage or audit any MCP servers.\n​\nSecurity best practices\n​\nWorking with sensitive code\nReview all suggested changes before approval\nUse project-specific permission settings for sensitive repositories\nConsider using\ndevcontainers\nfor additional isolation\nRegularly audit your permission settings with\n/permissions\n​\nTeam security\nUse\nenterprise managed policies\nto enforce organizational standards\nShare approved permission configurations through version control\nTrain team members on security best practices\nMonitor Claude Code usage through\nOpenTelemetry metrics\n​\nReporting security issues\nIf you discover a security vulnerability in Claude Code:\nDo not disclose it publicly\nReport it through our\nHackerOne program\nInclude detailed reproduction steps\nAllow time for us to address the issue before public disclosure\n​\nRelated resources\nIdentity and Access Management\n- Configure permissions and access controls\nMonitoring usage\n- Track and audit Claude Code activity\nDevelopment containers\n- Secure, isolated environments\nAnthropic Trust Center\n- Security certifications and compliance\nWas this page helpful?\nYes\nNo\nIdentity and Access Management\nMonitoring\nOn this page\nHow we approach security\nSecurity foundation\nPermission-based architecture\nBuilt-in protections\nUser responsibility\nProtect against prompt injection\nCore protections\nAdditional safeguards\nMCP security\nSecurity best practices\nWorking with sensitive code\nTeam security\nReporting security issues\nRelated resources",
  "links": [
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/costs",
      "text": "Costs"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/cli-reference",
      "text": "CLI reference"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/interactive-mode",
      "text": "Interactive mode"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/slash-commands",
      "text": "Slash commands"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/settings",
      "text": "Settings"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/data-usage",
      "text": "Data usage"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/legal-and-compliance",
      "text": "Legal and compliance"
    }
  ],
  "metadata": {
    "scraped_at": "2025-06-23T15:07:30.483806",
    "word_count": 833,
    "link_count": 7,
    "content_length": 5969
  }
}