{
  "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prompt-templates-and-variables",
  "title": "Use prompt templates and variables - Anthropic",
  "text": "Anthropic\nhome page\nEnglish\nSearch...\nSearch...\nNavigation\nPrompt engineering\nUse prompt templates and variables\nWelcome\nDeveloper Guide\nAPI Guide\nClaude Code\nModel Context Protocol (MCP)\nResources\nRelease Notes\nDocumentation\nDeveloper Discord\nSupport\nFirst steps\nIntro to Claude\nGet started\nModels & pricing\nModels overview\nChoosing a model\nMigrating to Claude 4\nModel deprecations\nPricing\nLearn about Claude\nBuilding with Claude\nFeatures overview\nContext windows\nGlossary\nCapabilities\nPrompt caching\nExtended thinking\nStreaming Messages\nBatch processing\nCitations\nMultilingual support\nToken counting\nEmbeddings\nVision\nPDF support\nFiles API\nGoogle Sheets add-on\nTools\nOverview\nHow to implement tool use\nToken-efficient tool use\nFine-grained tool streaming\nBash tool\nCode execution tool\nComputer use tool\nText editor tool\nWeb search tool\nModel Context Protocol (MCP)\nMCP connector\nRemote MCP servers\nUse cases\nOverview\nTicket routing\nCustomer support agent\nContent moderation\nLegal summarization\nPrompt engineering\nOverview\nClaude 4 best practices\nPrompt generator\nUse prompt templates\nPrompt improver\nBe clear and direct\nUse examples (multishot prompting)\nLet Claude think (CoT)\nUse XML tags\nGive Claude a role (system prompts)\nPrefill Claude's response\nChain complex prompts\nLong context tips\nExtended thinking tips\nTest & evaluate\nDefine success criteria\nDevelop test cases\nUsing the Evaluation Tool\nReducing latency\nStrengthen guardrails\nReduce hallucinations\nIncrease output consistency\nMitigate jailbreaks\nStreaming refusals\nReduce prompt leak\nKeep Claude in character\nLegal center\nAnthropic Privacy Policy\nSecurity and compliance\nWhen deploying an LLM-based application with Claude, your API calls will typically consist of two types of content:\nFixed content:\nStatic instructions or context that remain constant across multiple interactions\nVariable content:\nDynamic elements that change with each request or conversation, such as:\nUser inputs\nRetrieved content for Retrieval-Augmented Generation (RAG)\nConversation context such as user account history\nSystem-generated data such as tool use results fed in from other independent calls to Claude\nA\nprompt template\ncombines these fixed and variable parts, using placeholders for the dynamic content. In the\nAnthropic Console\n, these placeholders are denoted with\n{{double brackets}}\n, making them easily identifiable and allowing for quick testing of different values.\n​\nWhen to use prompt templates and variables\nYou should always use prompt templates and variables when you expect any part of your prompt to be repeated in another call to Claude (only via the API or the\nAnthropic Console\n.\nclaude.ai\ncurrently does not support prompt templates or variables).\nPrompt templates offer several benefits:\nConsistency:\nEnsure a consistent structure for your prompts across multiple interactions\nEfficiency:\nEasily swap out variable content without rewriting the entire prompt\nTestability:\nQuickly test different inputs and edge cases by changing only the variable portion\nScalability:\nSimplify prompt management as your application grows in complexity\nVersion control:\nEasily track changes to your prompt structure over time by keeping tabs only on the core part of your prompt, separate from dynamic inputs\nThe\nAnthropic Console\nheavily uses prompt templates and variables in order to support features and tooling for all the above, such as with the:\nPrompt generator\n:\nDecides what variables your prompt needs and includes them in the template it outputs\nPrompt improver\n:\nTakes your existing template, including all variables, and maintains them in the improved template it outputs\nEvaluation tool\n:\nAllows you to easily test, scale, and track versions of your prompts by separating the variable and fixed portions of your prompt template\n​\nExample prompt template\nLet’s consider a simple application that translates English text to Spanish. The translated text would be variable since you would expect this text to change between users or calls to Claude. This translated text could be dynamically retrieved from databases or the user’s input.\nThus, for your translation app, you might use this simple prompt template:\nTranslate this text from English to Spanish: {{text}}\n​\nNext steps\nGenerate a prompt\nLearn about the prompt generator in the Anthropic Console and try your hand at getting Claude to generate a prompt for you.\nApply XML tags\nIf you want to level up your prompt variable game, wrap them in XML tags.\nAnthropic Console\nCheck out the myriad prompt development tools available in the Anthropic Console.\nWas this page helpful?\nYes\nNo\nPrompt generator\nPrompt improver\nOn this page\nWhen to use prompt templates and variables\nExample prompt template\nNext steps",
  "links": [
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/chain-of-thought",
      "text": "Let Claude think (CoT)"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/use-xml-tags",
      "text": "Use XML tags"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/system-prompts",
      "text": "Give Claude a role (system prompts)"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prefill-claudes-response",
      "text": "Prefill Claude's response"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/chain-prompts",
      "text": "Chain complex prompts"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/long-context-tips",
      "text": "Long context tips"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/extended-thinking-tips",
      "text": "Extended thinking tips"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/define-success",
      "text": "Define success criteria"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/develop-tests",
      "text": "Develop test cases"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/eval-tool",
      "text": "Using the Evaluation Tool"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-latency",
      "text": "Reducing latency"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-hallucinations",
      "text": "Reduce hallucinations"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/increase-consistency",
      "text": "Increase output consistency"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/mitigate-jailbreaks",
      "text": "Mitigate jailbreaks"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/handle-streaming-refusals",
      "text": "Streaming refusals"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-prompt-leak",
      "text": "Reduce prompt leak"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/keep-claude-in-character",
      "text": "Keep Claude in character"
    }
  ],
  "metadata": {
    "scraped_at": "2025-06-23T15:07:48.224864",
    "word_count": 703,
    "link_count": 17,
    "content_length": 4728
  }
}