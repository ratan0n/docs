{
  "url": "https://docs.anthropic.com/en/docs/claude-code/settings",
  "title": "Claude Code settings - Anthropic",
  "text": "Anthropic\nhome page\nEnglish\nSearch...\nSearch...\nNavigation\nReference\nClaude Code settings\nWelcome\nDeveloper Guide\nAPI Guide\nClaude Code\nModel Context Protocol (MCP)\nResources\nRelease Notes\nDocumentation\nDeveloper Discord\nSupport\nGetting started\nOverview\nSet up\nQuickstart\nMemory management\nCommon workflows\nBuild with Claude\nAdd Claude Code to your IDE\nModel Context Protocol (MCP)\nGitHub Actions\nClaude Code SDK\nTroubleshooting\nDeployment\nOverview\nAmazon Bedrock\nGoogle Vertex AI\nCorporate proxy\nLLM gateway\nDevelopment containers\nAdministration\nIdentity and Access Management\nSecurity\nMonitoring\nCosts\nReference\nCLI reference\nInteractive mode\nSlash commands\nSettings\nResources\nData usage\nLegal and compliance\nClaude Code offers a variety of settings to configure its behavior to meet your needs. You can configure Claude Code by running the\n/config\ncommand when using the interactive REPL.\n​\nSettings files\nThe\nsettings.json\nfile is our official mechanism for configuring Claude\nCode through hierarchical settings:\nUser settings\nare defined in\n~/.claude/settings.json\nand apply to all\nprojects.\nProject settings\nare saved in your project directory:\n.claude/settings.json\nfor settings that are checked into source control and shared with your team\n.claude/settings.local.json\nfor settings that are not checked in, useful for personal preferences and experimentation. Claude Code will configure git to ignore\n.claude/settings.local.json\nwhen it is created.\nFor enterprise deployments of Claude Code, we also support\nenterprise\nmanaged policy settings\n. These take precedence over user and project\nsettings. System administrators can deploy policies to\n/Library/Application Support/ClaudeCode/policies.json\non macOS and\n/etc/claude-code/policies.json\non Linux and Windows via WSL.\nExample settings.json\n{\n\"permissions\"\n:\n{\n\"allow\"\n:\n[\n\"Bash(npm run lint)\"\n,\n\"Bash(npm run test:*)\"\n,\n\"Read(~/.zshrc)\"\n]\n,\n\"deny\"\n:\n[\n\"Bash(curl:*)\"\n]\n}\n,\n\"env\"\n:\n{\n\"CLAUDE_CODE_ENABLE_TELEMETRY\"\n:\n\"1\"\n,\n\"OTEL_METRICS_EXPORTER\"\n:\n\"otlp\"\n}\n}\n​\nAvailable settings\nsettings.json\nsupports a number of options:\nKey\nDescription\nExample\napiKeyHelper\nCustom script, to be executed in\n/bin/sh\n, to generate an auth value. This value will generally be sent as\nX-Api-Key\n,\nAuthorization: Bearer\n, and\nProxy-Authorization: Bearer\nheaders for model requests\n/bin/generate_temp_api_key.sh\ncleanupPeriodDays\nHow long to locally retain chat transcripts (default: 30 days)\n20\nenv\nEnvironment variables that will be applied to every session\n{\"FOO\": \"bar\"}\nincludeCoAuthoredBy\nWhether to include the\nco-authored-by Claude\nbyline in git commits and pull requests (default:\ntrue\n)\nfalse\npermissions\nSee table below for structure of permissions.\n​\nPermission settings\nKeys\nDescription\nExample\nallow\nArray of\npermission rules\nto allow tool use\n[ \"Bash(git diff:*)\" ]\ndeny\nArray of\npermission rules\nto deny tool use\n[ \"WebFetch\", \"Bash(curl:*)\" ]\nadditionalDirectories\nAdditional\nworking directories\nthat Claude has access to\n[ \"../docs/\" ]\ndefaultMode\nDefault\npermission mode\nwhen opening Claude Code\n\"allowEdits\"\ndisableBypassPermissionsMode\nSet to\n\"disable\"\nto prevent\nbypassPermissions\nmode from being activated. See\nmanaged policy settings\n\"disable\"\n​\nSettings precedence\nSettings are applied in order of precedence:\nEnterprise policies (see\nIAM documentation\n)\nCommand line arguments\nLocal project settings\nShared project settings\nUser settings\n​\nEnvironment variables\nClaude Code supports the following environment variables to control its behavior:\nAll environment variables can also be configured in\nsettings.json\n. This is useful as a way to automatically set environment variables for each session, or to roll out a set of environment variables for your whole team or organization.\nVariable\nPurpose\nANTHROPIC_API_KEY\nAPI key sent as\nX-Api-Key\nheader, typically for the Claude SDK (for interactive usage, run\n/login\n)\nANTHROPIC_AUTH_TOKEN\nCustom value for the\nAuthorization\nand\nProxy-Authorization\nheaders (the value you set here will be prefixed with\nBearer\n)\nANTHROPIC_CUSTOM_HEADERS\nCustom headers you want to add to the request (in\nName: Value\nformat)\nANTHROPIC_MODEL\nName of custom model to use (see\nModel Configuration\n)\nANTHROPIC_SMALL_FAST_MODEL\nName of\nHaiku-class model for background tasks\nBASH_DEFAULT_TIMEOUT_MS\nDefault timeout for long-running bash commands\nBASH_MAX_TIMEOUT_MS\nMaximum timeout the model can set for long-running bash commands\nBASH_MAX_OUTPUT_LENGTH\nMaximum number of characters in bash outputs before they are middle-truncated\nCLAUDE_BASH_MAINTAIN_PROJECT_WORKING_DIR\nReturn to the original working directory after each Bash command\nCLAUDE_CODE_API_KEY_HELPER_TTL_MS\nInterval in milliseconds at which credentials should be refreshed (when using\napiKeyHelper\n)\nCLAUDE_CODE_MAX_OUTPUT_TOKENS\nSet the maximum number of output tokens for most requests\nCLAUDE_CODE_USE_BEDROCK\nUse Bedrock (see\nBedrock & Vertex\n)\nCLAUDE_CODE_USE_VERTEX\nUse Vertex (see\nBedrock & Vertex\n)\nCLAUDE_CODE_SKIP_BEDROCK_AUTH\nSkip AWS authentication for Bedrock (e.g. when using an LLM gateway)\nCLAUDE_CODE_SKIP_VERTEX_AUTH\nSkip Google authentication for Vertex (e.g. when using an LLM gateway)\nCLAUDE_CODE_DISABLE_NONESSENTIAL_TRAFFIC\nEquivalent of setting\nDISABLE_AUTOUPDATER\n,\nDISABLE_BUG_COMMAND\n,\nDISABLE_ERROR_REPORTING\n, and\nDISABLE_TELEMETRY\nDISABLE_AUTOUPDATER\nSet to\n1\nto disable the automatic updater\nDISABLE_BUG_COMMAND\nSet to\n1\nto disable the\n/bug\ncommand\nDISABLE_COST_WARNINGS\nSet to\n1\nto disable cost warning messages\nDISABLE_ERROR_REPORTING\nSet to\n1\nto opt out of Sentry error reporting\nDISABLE_NON_ESSENTIAL_MODEL_CALLS\nSet to\n1\nto disable model calls for non-critical paths like flavor text\nDISABLE_TELEMETRY\nSet to\n1\nto opt out of Statsig telemetry (note that Statsig events do not include user data like code, file paths, or bash commands)\nHTTP_PROXY\nSpecify HTTP proxy server for network connections\nHTTPS_PROXY\nSpecify HTTPS proxy server for network connections\nMAX_THINKING_TOKENS\nForce a thinking for the model budget\nMCP_TIMEOUT\nTimeout in milliseconds for MCP server startup\nMCP_TOOL_TIMEOUT\nTimeout in milliseconds for MCP tool execution\nMAX_MCP_OUTPUT_TOKENS\nMaximum number of tokens allowed in MCP tool responses (default: 25000)\n​\nConfiguration options\nWe are in the process of migrating global configuration to\nsettings.json\n.\nclaude config\nwill be deprecated in place of\nsettings.json\nTo manage your configurations, use the following commands:\nList settings:\nclaude config list\nSee a setting:\nclaude config get <key>\nChange a setting:\nclaude config set <key> <value>\nPush to a setting (for lists):\nclaude config add <key> <value>\nRemove from a setting (for lists):\nclaude config remove <key> <value>\nBy default\nconfig\nchanges your project configuration. To manage your global configuration, use the\n--global\n(or\n-g\n) flag.\n​\nGlobal configuration\nTo set a global configuration, use\nclaude config set -g <key> <value>\n:\nKey\nDescription\nExample\nautoUpdaterStatus\nEnable or disable the auto-updater (default:\nenabled\n)\ndisabled\npreferredNotifChannel\nWhere you want to receive notifications (default:\niterm2\n)\niterm2\n,\niterm2_with_bell\n,\nterminal_bell\n, or\nnotifications_disabled\ntheme\nColor theme\ndark\n,\nlight\n,\nlight-daltonized\n, or\ndark-daltonized\nverbose\nWhether to show full bash and command outputs (default:\nfalse\n)\ntrue\n​\nTools available to Claude\nClaude Code has access to a set of powerful tools that help it understand and modify your codebase:\nTool\nDescription\nPermission Required\nAgent\nRuns a sub-agent to handle complex, multi-step tasks\nNo\nBash\nExecutes shell commands in your environment\nYes\nEdit\nMakes targeted edits to specific files\nYes\nGlob\nFinds files based on pattern matching\nNo\nGrep\nSearches for patterns in file contents\nNo\nLS\nLists files and directories\nNo\nMultiEdit\nPerforms multiple edits on a single file atomically\nYes\nNotebookEdit\nModifies Jupyter notebook cells\nYes\nNotebookRead\nReads and displays Jupyter notebook contents\nNo\nRead\nReads the contents of files\nNo\nTodoRead\nReads the current session’s task list\nNo\nTodoWrite\nCreates and manages structured task lists\nNo\nWebFetch\nFetches content from a specified URL\nYes\nWebSearch\nPerforms web searches with domain filtering\nYes\nWrite\nCreates or overwrites files\nYes\nPermission rules can be configured using\n/allowed-tools\nor in\npermission settings\n.\n​\nSee also\nIdentity and Access Management\n- Learn about Claude Code’s permission system\nIAM and access control\n- Enterprise policy management\nTroubleshooting\n- Solutions for common configuration issues\nWas this page helpful?\nYes\nNo\nSlash commands\nData usage\nOn this page\nSettings files\nAvailable settings\nPermission settings\nSettings precedence\nEnvironment variables\nConfiguration options\nGlobal configuration\nTools available to Claude\nSee also",
  "links": [
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/legal-and-compliance",
      "text": "Legal and compliance"
    },
    {
      "url": "https://docs.anthropic.com/_sites/docs.anthropic.com/en/docs/claude-code/settings",
      "text": "settings.json"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/bedrock-vertex-proxies",
      "text": "Model Configuration"
    }
  ],
  "metadata": {
    "scraped_at": "2025-06-23T15:07:32.272378",
    "word_count": 1226,
    "link_count": 3,
    "content_length": 8768
  }
}