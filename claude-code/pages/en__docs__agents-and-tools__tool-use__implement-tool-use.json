{
  "url": "https://docs.anthropic.com/en/docs/agents-and-tools/tool-use/implement-tool-use",
  "title": "How to implement tool use - Anthropic",
  "text": "Anthropic\nhome page\nEnglish\nSearch...\nSearch...\nNavigation\nTools\nHow to implement tool use\nWelcome\nDeveloper Guide\nAPI Guide\nClaude Code\nModel Context Protocol (MCP)\nResources\nRelease Notes\nDocumentation\nDeveloper Discord\nSupport\nFirst steps\nIntro to Claude\nGet started\nModels & pricing\nModels overview\nChoosing a model\nMigrating to Claude 4\nModel deprecations\nPricing\nLearn about Claude\nBuilding with Claude\nFeatures overview\nContext windows\nGlossary\nCapabilities\nPrompt caching\nExtended thinking\nStreaming Messages\nBatch processing\nCitations\nMultilingual support\nToken counting\nEmbeddings\nVision\nPDF support\nFiles API\nGoogle Sheets add-on\nTools\nOverview\nHow to implement tool use\nToken-efficient tool use\nFine-grained tool streaming\nBash tool\nCode execution tool\nComputer use tool\nText editor tool\nWeb search tool\nModel Context Protocol (MCP)\nMCP connector\nRemote MCP servers\nUse cases\nOverview\nTicket routing\nCustomer support agent\nContent moderation\nLegal summarization\nPrompt engineering\nOverview\nClaude 4 best practices\nPrompt generator\nUse prompt templates\nPrompt improver\nBe clear and direct\nUse examples (multishot prompting)\nLet Claude think (CoT)\nUse XML tags\nGive Claude a role (system prompts)\nPrefill Claude's response\nChain complex prompts\nLong context tips\nExtended thinking tips\nTest & evaluate\nDefine success criteria\nDevelop test cases\nUsing the Evaluation Tool\nReducing latency\nStrengthen guardrails\nReduce hallucinations\nIncrease output consistency\nMitigate jailbreaks\nStreaming refusals\nReduce prompt leak\nKeep Claude in character\nLegal center\nAnthropic Privacy Policy\nSecurity and compliance\n​\nChoosing a model\nGenerally, use Claude Opus 4, Claude Sonnet 4, Claude Sonnet 3.7, Claude Sonnet 3.5 or Claude Opus 3 for complex tools and ambiguous queries; they handle multiple tools better and seek clarification when needed.\nUse Claude Haiku 3.5 or Claude Haiku 3 for straightforward tools, but note they may infer missing parameters.\nIf using Claude Sonnet 3.7 with tool use and extended thinking, refer to our guide\nhere\nfor more information.\n​\nSpecifying client tools\nClient tools (both Anthropic-defined and user-defined) are specified in the\ntools\ntop-level parameter of the API request. Each tool definition includes:\nParameter\nDescription\nname\nThe name of the tool. Must match the regex\n^[a-zA-Z0-9_-]{1,64}$\n.\ndescription\nA detailed plaintext description of what the tool does, when it should be used, and how it behaves.\ninput_schema\nA\nJSON Schema\nobject defining the expected parameters for the tool.\nExample simple tool definition\nJSON\n{\n\"name\"\n:\n\"get_weather\"\n,\n\"description\"\n:\n\"Get the current weather in a given location\"\n,\n\"input_schema\"\n:\n{\n\"type\"\n:\n\"object\"\n,\n\"properties\"\n:\n{\n\"location\"\n:\n{\n\"type\"\n:\n\"string\"\n,\n\"description\"\n:\n\"The city and state, e.g. San Francisco, CA\"\n}\n,\n\"unit\"\n:\n{\n\"type\"\n:\n\"string\"\n,\n\"enum\"\n:\n[\n\"celsius\"\n,\n\"fahrenheit\"\n]\n,\n\"description\"\n:\n\"The unit of temperature, either 'celsius' or 'fahrenheit'\"\n}\n}\n,\n\"required\"\n:\n[\n\"location\"\n]\n}\n}\nThis tool, named\nget_weather\n, expects an input object with a required\nlocation\nstring and an optional\nunit\nstring that must be either “celsius” or “fahrenheit”.\n​\nTool use system prompt\nWhen you call the Anthropic API with the\ntools\nparameter, we construct a special system prompt from the tool definitions, tool configuration, and any user-specified system prompt. The constructed prompt is designed to instruct the model to use the specified tool(s) and provide the necessary context for the tool to operate properly:\nIn this environment you have access to a set of tools you can use to answer the user's question.\n{{ FORMATTING INSTRUCTIONS }}\nString and scalar parameters should be specified as is, while lists and objects should use JSON format. Note that spaces for string values are not stripped. The output is not expected to be valid XML and is parsed with regular expressions.\nHere are the functions available in JSONSchema format:\n{{ TOOL DEFINITIONS IN JSON SCHEMA }}\n{{ USER SYSTEM PROMPT }}\n{{ TOOL CONFIGURATION }}\n​\nBest practices for tool definitions\nTo get the best performance out of Claude when using tools, follow these guidelines:\nProvide extremely detailed descriptions.\nThis is by far the most important factor in tool performance. Your descriptions should explain every detail about the tool, including:\nWhat the tool does\nWhen it should be used (and when it shouldn’t)\nWhat each parameter means and how it affects the tool’s behavior\nAny important caveats or limitations, such as what information the tool does not return if the tool name is unclear. The more context you can give Claude about your tools, the better it will be at deciding when and how to use them. Aim for at least 3-4 sentences per tool description, more if the tool is complex.\nPrioritize descriptions over examples.\nWhile you can include examples of how to use a tool in its description or in the accompanying prompt, this is less important than having a clear and comprehensive explanation of the tool’s purpose and parameters. Only add examples after you’ve fully fleshed out the description.\nExample of a good tool description\nJSON\n{\n\"name\"\n:\n\"get_stock_price\"\n,\n\"description\"\n:\n\"Retrieves the current stock price for a given ticker symbol. The ticker symbol must be a valid symbol for a publicly traded company on a major US stock exchange like NYSE or NASDAQ. The tool will return the latest trade price in USD. It should be used when the user asks about the current or most recent price of a specific stock. It will not provide any other information about the stock or company.\"\n,\n\"input_schema\"\n:\n{\n\"type\"\n:\n\"object\"\n,\n\"properties\"\n:\n{\n\"ticker\"\n:\n{\n\"type\"\n:\n\"string\"\n,\n\"description\"\n:\n\"The stock ticker symbol, e.g. AAPL for Apple Inc.\"\n}\n}\n,\n\"required\"\n:\n[\n\"ticker\"\n]\n}\n}\nExample poor tool description\nJSON\n{\n\"name\"\n:\n\"get_stock_price\"\n,\n\"description\"\n:\n\"Gets the stock price for a ticker.\"\n,\n\"input_schema\"\n:\n{\n\"type\"\n:\n\"object\"\n,\n\"properties\"\n:\n{\n\"ticker\"\n:\n{\n\"type\"\n:\n\"string\"\n}\n}\n,\n\"required\"\n:\n[\n\"ticker\"\n]\n}\n}\nThe good description clearly explains what the tool does, when to use it, what data it returns, and what the\nticker\nparameter means. The poor description is too brief and leaves Claude with many open questions about the tool’s behavior and usage.\n​\nControlling Claude’s output\n​\nForcing tool use\nIn some cases, you may want Claude to use a specific tool to answer the user’s question, even if Claude thinks it can provide an answer without using a tool. You can do this by specifying the tool in the\ntool_choice\nfield like so:\ntool_choice = {\"type\": \"tool\", \"name\": \"get_weather\"}\nWhen working with the tool_choice parameter, we have four possible options:\nauto\nallows Claude to decide whether to call any provided tools or not. This is the default value when\ntools\nare provided.\nany\ntells Claude that it must use one of the provided tools, but doesn’t force a particular tool.\ntool\nallows us to force Claude to always use a particular tool.\nnone\nprevents Claude from using any tools. This is the default value when no\ntools\nare provided.\nWhen using\nprompt caching\n, changes to the\ntool_choice\nparameter will invalidate cached message blocks. Tool definitions and system prompts remain cached, but message content must be reprocessed.\nThis diagram illustrates how each option works:\nNote that when you have\ntool_choice\nas\nany\nor\ntool\n, we will prefill the assistant message to force a tool to be used. This means that the models will not emit a chain-of-thought\ntext\ncontent block before\ntool_use\ncontent blocks, even if explicitly asked to do so.\nWhen using\nextended thinking\nwith tool use,\ntool_choice: {\"type\": \"any\"}\nand\ntool_choice: {\"type\": \"tool\", \"name\": \"...\"}\nare not supported and will result in an error. Only\ntool_choice: {\"type\": \"auto\"}\n(the default) and\ntool_choice: {\"type\": \"none\"}\nare compatible with extended thinking.\nOur testing has shown that this should not reduce performance. If you would like to keep chain-of-thought (particularly with Opus) while still requesting that the model use a specific tool, you can use\n{\"type\": \"auto\"}\nfor\ntool_choice\n(the default) and add explicit instructions in a\nuser\nmessage. For example:\nWhat's the weather like in London? Use the get_weather tool in your response.\n​\nJSON output\nTools do not necessarily need to be client functions — you can use tools anytime you want the model to return JSON output that follows a provided schema. For example, you might use a\nrecord_summary\ntool with a particular schema. See\nTool use with Claude\nfor a full working example.\n​\nChain of thought\nWhen using tools, Claude will often show its “chain of thought”, i.e. the step-by-step reasoning it uses to break down the problem and decide which tools to use. The Claude Opus 3 model will do this if\ntool_choice\nis set to\nauto\n(this is the default value, see\nForcing tool use\n), and Sonnet and Haiku can be prompted into doing it.\nFor example, given the prompt “What’s the weather like in San Francisco right now, and what time is it there?”, Claude might respond with:\nJSON\n{\n\"role\"\n:\n\"assistant\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"text\"\n,\n\"text\"\n:\n\"<thinking>To answer this question, I will: 1. Use the get_weather tool to get the current weather in San Francisco. 2. Use the get_time tool to get the current time in the America/Los_Angeles timezone, which covers San Francisco, CA.</thinking>\"\n}\n,\n{\n\"type\"\n:\n\"tool_use\"\n,\n\"id\"\n:\n\"toolu_01A09q90qw90lq917835lq9\"\n,\n\"name\"\n:\n\"get_weather\"\n,\n\"input\"\n:\n{\n\"location\"\n:\n\"San Francisco, CA\"\n}\n}\n]\n}\nThis chain of thought gives insight into Claude’s reasoning process and can help you debug unexpected behavior.\nWith the Claude Sonnet 3 model, chain of thought is less common by default, but you can prompt Claude to show its reasoning by adding something like\n\"Before answering, explain your reasoning step-by-step in tags.\"\nto the user message or system prompt.\nIt’s important to note that while the\n<thinking>\ntags are a common convention Claude uses to denote its chain of thought, the exact format (such as what this XML tag is named) may change over time. Your code should treat the chain of thought like any other assistant-generated text, and not rely on the presence or specific formatting of the\n<thinking>\ntags.\n​\nParallel tool use\nBy default, Claude may use multiple tools to answer a user query. You can disable this behavior by:\nSetting\ndisable_parallel_tool_use=true\nwhen tool_choice type is\nauto\n, which ensures that Claude uses\nat most one\ntool\nSetting\ndisable_parallel_tool_use=true\nwhen tool_choice type is\nany\nor\ntool\n, which ensures that Claude uses\nexactly one\ntool\nParallel tool use with Claude Sonnet 3.7\nClaude Sonnet 3.7 may be less likely to make make parallel tool calls in a response, even when you have not set\ndisable_parallel_tool_use\n. To work around this, we recommend enabling\ntoken-efficient tool use\n, which helps encourage Claude to use parallel tools. This beta feature also reduces latency and saves an average of 14% in output tokens.\nIf you prefer not to opt into the token-efficient tool use beta, you can also introduce a “batch tool” that can act as a meta-tool to wrap invocations to other tools simultaneously. We find that if this tool is present, the model will use it to simultaneously call multiple tools in parallel for you.\nSee\nthis example\nin our cookbook for how to use this workaround.\n​\nHandling tool use and tool result content blocks\nClaude’s response differs based on whether it uses a client or server tool.\n​\nHandling results from client tools\nThe response will have a\nstop_reason\nof\ntool_use\nand one or more\ntool_use\ncontent blocks that include:\nid\n: A unique identifier for this particular tool use block. This will be used to match up the tool results later.\nname\n: The name of the tool being used.\ninput\n: An object containing the input being passed to the tool, conforming to the tool’s\ninput_schema\n.\nExample API response with a `tool_use` content block\nJSON\n{\n\"id\"\n:\n\"msg_01Aq9w938a90dw8q\"\n,\n\"model\"\n:\n\"claude-opus-4-20250514\"\n,\n\"stop_reason\"\n:\n\"tool_use\"\n,\n\"role\"\n:\n\"assistant\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"text\"\n,\n\"text\"\n:\n\"<thinking>I need to use the get_weather, and the user wants SF, which is likely San Francisco, CA.</thinking>\"\n}\n,\n{\n\"type\"\n:\n\"tool_use\"\n,\n\"id\"\n:\n\"toolu_01A09q90qw90lq917835lq9\"\n,\n\"name\"\n:\n\"get_weather\"\n,\n\"input\"\n:\n{\n\"location\"\n:\n\"San Francisco, CA\"\n,\n\"unit\"\n:\n\"celsius\"\n}\n}\n]\n}\nWhen you receive a tool use response for a client tool, you should:\nExtract the\nname\n,\nid\n, and\ninput\nfrom the\ntool_use\nblock.\nRun the actual tool in your codebase corresponding to that tool name, passing in the tool\ninput\n.\nContinue the conversation by sending a new message with the\nrole\nof\nuser\n, and a\ncontent\nblock containing the\ntool_result\ntype and the following information:\ntool_use_id\n: The\nid\nof the tool use request this is a result for.\ncontent\n: The result of the tool, as a string (e.g.\n\"content\": \"15 degrees\"\n) or list of nested content blocks (e.g.\n\"content\": [{\"type\": \"text\", \"text\": \"15 degrees\"}]\n). These content blocks can use the\ntext\nor\nimage\ntypes.\nis_error\n(optional): Set to\ntrue\nif the tool execution resulted in an error.\nExample of successful tool result\nJSON\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"tool_result\"\n,\n\"tool_use_id\"\n:\n\"toolu_01A09q90qw90lq917835lq9\"\n,\n\"content\"\n:\n\"15 degrees\"\n}\n]\n}\nExample of tool result with images\nJSON\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"tool_result\"\n,\n\"tool_use_id\"\n:\n\"toolu_01A09q90qw90lq917835lq9\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"text\"\n,\n\"text\"\n:\n\"15 degrees\"\n}\n,\n{\n\"type\"\n:\n\"image\"\n,\n\"source\"\n:\n{\n\"type\"\n:\n\"base64\"\n,\n\"media_type\"\n:\n\"image/jpeg\"\n,\n\"data\"\n:\n\"/9j/4AAQSkZJRg...\"\n,\n}\n}\n]\n}\n]\n}\nExample of empty tool result\nJSON\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"tool_result\"\n,\n\"tool_use_id\"\n:\n\"toolu_01A09q90qw90lq917835lq9\"\n,\n}\n]\n}\nAfter receiving the tool result, Claude will use that information to continue generating a response to the original user prompt.\n​\nHandling results from server tools\nClaude executes the tool internally and incorporates the results directly into its response without requiring additional user interaction.\nDifferences from other APIs\nUnlike APIs that separate tool use or use special roles like\ntool\nor\nfunction\n, Anthropic’s API integrates tools directly into the\nuser\nand\nassistant\nmessage structure.\nMessages contain arrays of\ntext\n,\nimage\n,\ntool_use\n, and\ntool_result\nblocks.\nuser\nmessages include client content and\ntool_result\n, while\nassistant\nmessages contain AI-generated content and\ntool_use\n.\n​\nHandling the\nmax_tokens\nstop reason\nIf Claude’s\nresponse is cut off due to hitting the\nmax_tokens\nlimit\n, and the truncated response contains an incomplete tool use block, you’ll need to retry the request with a higher\nmax_tokens\nvalue to get the full tool use.\nPython\nTypeScript\n# Check if response was truncated during tool use\nif\nresponse\n.\nstop_reason\n==\n\"max_tokens\"\n:\n# Check if the last content block is an incomplete tool_use\nlast_block\n=\nresponse\n.\ncontent\n[\n-\n1\n]\nif\nlast_block\n.\ntype\n==\n\"tool_use\"\n:\n# Send the request with higher max_tokens\nresponse\n=\nclient\n.\nmessages\n.\ncreate\n(\nmodel\n=\n\"claude-opus-4-20250514\"\n,\nmax_tokens\n=\n4096\n,\n# Increased limit\nmessages\n=\nmessages\n,\ntools\n=\ntools\n)\n​\nHandling the\npause_turn\nstop reason\nWhen using server tools like web search, the API may return a\npause_turn\nstop reason, indicating that the API has paused a long-running turn.\nHere’s how to handle the\npause_turn\nstop reason:\nPython\nTypeScript\nimport\nanthropic\nclient\n=\nanthropic\n.\nAnthropic\n(\n)\n# Initial request with web search\nresponse\n=\nclient\n.\nmessages\n.\ncreate\n(\nmodel\n=\n\"claude-3-7-sonnet-latest\"\n,\nmax_tokens\n=\n1024\n,\nmessages\n=\n[\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n\"Search for comprehensive information about quantum computing breakthroughs in 2025\"\n}\n]\n,\ntools\n=\n[\n{\n\"type\"\n:\n\"web_search_20250305\"\n,\n\"name\"\n:\n\"web_search\"\n,\n\"max_uses\"\n:\n10\n}\n]\n)\n# Check if the response has pause_turn stop reason\nif\nresponse\n.\nstop_reason\n==\n\"pause_turn\"\n:\n# Continue the conversation with the paused content\nmessages\n=\n[\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n\"Search for comprehensive information about quantum computing breakthroughs in 2025\"\n}\n,\n{\n\"role\"\n:\n\"assistant\"\n,\n\"content\"\n:\nresponse\n.\ncontent\n}\n]\n# Send the continuation request\ncontinuation\n=\nclient\n.\nmessages\n.\ncreate\n(\nmodel\n=\n\"claude-3-7-sonnet-latest\"\n,\nmax_tokens\n=\n1024\n,\nmessages\n=\nmessages\n,\ntools\n=\n[\n{\n\"type\"\n:\n\"web_search_20250305\"\n,\n\"name\"\n:\n\"web_search\"\n,\n\"max_uses\"\n:\n10\n}\n]\n)\nprint\n(\ncontinuation\n)\nelse\n:\nprint\n(\nresponse\n)\nWhen handling\npause_turn\n:\nContinue the conversation\n: Pass the paused response back as-is in a subsequent request to let Claude continue its turn\nModify if needed\n: You can optionally modify the content before continuing if you want to interrupt or redirect the conversation\nPreserve tool state\n: Include the same tools in the continuation request to maintain functionality\n​\nTroubleshooting errors\nThere are a few different types of errors that can occur when using tools with Claude:\nTool execution error\nIf the tool itself throws an error during execution (e.g. a network error when fetching weather data), you can return the error message in the\ncontent\nalong with\n\"is_error\": true\n:\nJSON\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"tool_result\"\n,\n\"tool_use_id\"\n:\n\"toolu_01A09q90qw90lq917835lq9\"\n,\n\"content\"\n:\n\"ConnectionError: the weather service API is not available (HTTP 500)\"\n,\n\"is_error\"\n:\ntrue\n}\n]\n}\nClaude will then incorporate this error into its response to the user, e.g. “I’m sorry, I was unable to retrieve the current weather because the weather service API is not available. Please try again later.”\nInvalid tool name\nIf Claude’s attempted use of a tool is invalid (e.g. missing required parameters), it usually means that the there wasn’t enough information for Claude to use the tool correctly. Your best bet during development is to try the request again with more-detailed\ndescription\nvalues in your tool definitions.\nHowever, you can also continue the conversation forward with a\ntool_result\nthat indicates the error, and Claude will try to use the tool again with the missing information filled in:\nJSON\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"tool_result\"\n,\n\"tool_use_id\"\n:\n\"toolu_01A09q90qw90lq917835lq9\"\n,\n\"content\"\n:\n\"Error: Missing required 'location' parameter\"\n,\n\"is_error\"\n:\ntrue\n}\n]\n}\nIf a tool request is invalid or missing parameters, Claude will retry 2-3 times with corrections before apologizing to the user.\n<search_quality_reflection> tags\nTo prevent Claude from reflecting on search quality with <search_quality_reflection> tags, add “Do not reflect on the quality of the returned search results in your response” to your prompt.\nServer tool errors\nWhen server tools encounter errors (e.g., network issues with Web Search), Claude will transparently handle these errors and attempt to provide an alternative response or explanation to the user. Unlike client tools, you do not need to handle\nis_error\nresults for server tools.\nFor web search specifically, possible error codes include:\ntoo_many_requests\n: Rate limit exceeded\ninvalid_input\n: Invalid search query parameter\nmax_uses_exceeded\n: Maximum web search tool uses exceeded\nquery_too_long\n: Query exceeds maximum length\nunavailable\n: An internal error occurred\nWas this page helpful?\nYes\nNo\nOverview\nToken-efficient tool use\nOn this page\nChoosing a model\nSpecifying client tools\nTool use system prompt\nBest practices for tool definitions\nControlling Claude’s output\nForcing tool use\nJSON output\nChain of thought\nParallel tool use\nHandling tool use and tool result content blocks\nHandling results from client tools\nHandling results from server tools\nHandling the max_tokens stop reason\nHandling the pause_turn stop reason\nTroubleshooting errors",
  "links": [
    {
      "url": "https://docs.anthropic.com/en/docs/agents-and-tools/tool-use/code-execution-tool",
      "text": "Code execution tool"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/agents-and-tools/tool-use/computer-use-tool",
      "text": "Computer use tool"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/agents-and-tools/tool-use/text-editor-tool",
      "text": "Text editor tool"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/agents-and-tools/tool-use/web-search-tool",
      "text": "Web search tool"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/agents-and-tools/mcp-connector",
      "text": "MCP connector"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/agents-and-tools/remote-mcp-servers",
      "text": "Remote MCP servers"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/about-claude/use-case-guides/overview",
      "text": "Overview"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/about-claude/use-case-guides/ticket-routing",
      "text": "Ticket routing"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/about-claude/use-case-guides/customer-support-chat",
      "text": "Customer support agent"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/about-claude/use-case-guides/content-moderation",
      "text": "Content moderation"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/about-claude/use-case-guides/legal-summarization",
      "text": "Legal summarization"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/overview",
      "text": "Overview"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/claude-4-best-practices",
      "text": "Claude 4 best practices"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prompt-generator",
      "text": "Prompt generator"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prompt-templates-and-variables",
      "text": "Use prompt templates"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prompt-improver",
      "text": "Prompt improver"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/be-clear-and-direct",
      "text": "Be clear and direct"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/multishot-prompting",
      "text": "Use examples (multishot prompting)"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/chain-of-thought",
      "text": "Let Claude think (CoT)"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/use-xml-tags",
      "text": "Use XML tags"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/system-prompts",
      "text": "Give Claude a role (system prompts)"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prefill-claudes-response",
      "text": "Prefill Claude's response"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/chain-prompts",
      "text": "Chain complex prompts"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/long-context-tips",
      "text": "Long context tips"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/extended-thinking-tips",
      "text": "Extended thinking tips"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/define-success",
      "text": "Define success criteria"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/develop-tests",
      "text": "Develop test cases"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/eval-tool",
      "text": "Using the Evaluation Tool"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-latency",
      "text": "Reducing latency"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-hallucinations",
      "text": "Reduce hallucinations"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/increase-consistency",
      "text": "Increase output consistency"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/mitigate-jailbreaks",
      "text": "Mitigate jailbreaks"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/handle-streaming-refusals",
      "text": "Streaming refusals"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-prompt-leak",
      "text": "Reduce prompt leak"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/keep-claude-in-character",
      "text": "Keep Claude in character"
    },
    {
      "url": "https://docs.anthropic.com/_sites/docs.anthropic.com/en/docs/agents-and-tools/tool-use/implement-tool-use",
      "text": "Forcing tool use"
    }
  ],
  "metadata": {
    "scraped_at": "2025-06-23T15:07:42.001232",
    "word_count": 3265,
    "link_count": 36,
    "content_length": 19753
  }
}