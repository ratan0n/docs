{
  "url": "https://docs.anthropic.com/en/docs/claude-code/slash-commands",
  "title": "Slash commands - Anthropic",
  "text": "Anthropic\nhome page\nEnglish\nSearch...\nSearch...\nNavigation\nReference\nSlash commands\nWelcome\nDeveloper Guide\nAPI Guide\nClaude Code\nModel Context Protocol (MCP)\nResources\nRelease Notes\nDocumentation\nDeveloper Discord\nSupport\nGetting started\nOverview\nSet up\nQuickstart\nMemory management\nCommon workflows\nBuild with Claude\nAdd Claude Code to your IDE\nModel Context Protocol (MCP)\nGitHub Actions\nClaude Code SDK\nTroubleshooting\nDeployment\nOverview\nAmazon Bedrock\nGoogle Vertex AI\nCorporate proxy\nLLM gateway\nDevelopment containers\nAdministration\nIdentity and Access Management\nSecurity\nMonitoring\nCosts\nReference\nCLI reference\nInteractive mode\nSlash commands\nSettings\nResources\nData usage\nLegal and compliance\n​\nBuilt-in slash commands\nCommand\nPurpose\n/add-dir\nAdd additional working directories\n/bug\nReport bugs (sends conversation to Anthropic)\n/clear\nClear conversation history\n/compact [instructions]\nCompact conversation with optional focus instructions\n/config\nView/modify configuration\n/cost\nShow token usage statistics\n/doctor\nChecks the health of your Claude Code installation\n/help\nGet usage help\n/init\nInitialize project with CLAUDE.md guide\n/login\nSwitch Anthropic accounts\n/logout\nSign out from your Anthropic account\n/mcp\nManage MCP server connections and OAuth authentication\n/memory\nEdit CLAUDE.md memory files\n/model\nSelect or change the AI model\n/permissions\nView or update\npermissions\n/pr_comments\nView pull request comments\n/review\nRequest code review\n/status\nView account and system statuses\n/terminal-setup\nInstall Shift+Enter key binding for newlines (iTerm2 and VSCode only)\n/vim\nEnter vim mode for alternating insert and command modes\n​\nCustom slash commands\nCustom slash commands allow you to define frequently-used prompts as Markdown files that Claude Code can execute. Commands are organized by scope (project-specific or personal) and support namespacing through directory structures.\n​\nSyntax\n/<prefix>:<command-name> [arguments]\n​\nParameters\nParameter\nDescription\n<prefix>\nCommand scope (\nproject\nfor project-specific,\nuser\nfor personal)\n<command-name>\nName derived from the Markdown filename (without\n.md\nextension)\n[arguments]\nOptional arguments passed to the command\n​\nCommand types\n​\nProject commands\nCommands stored in your repository and shared with your team.\nLocation\n:\n.claude/commands/\nPrefix\n:\n/project:\nIn the following example, we create the\n/project:optimize\ncommand:\n# Create a project command\nmkdir\n-p\n.claude/commands\necho\n\"Analyze this code for performance issues and suggest optimizations:\"\n>\n.claude/commands/optimize.md\n​\nPersonal commands\nCommands available across all your projects.\nLocation\n:\n~/.claude/commands/\nPrefix\n:\n/user:\nIn the following example, we create the\n/user:security-review\ncommand:\n# Create a personal command\nmkdir\n-p\n~/.claude/commands\necho\n\"Review this code for security vulnerabilities:\"\n>\n~/.claude/commands/security-review.md\n​\nFeatures\n​\nNamespacing\nOrganize commands in subdirectories to create namespaced commands.\nStructure\n:\n<prefix>:<namespace>:<command>\nFor example, a file at\n.claude/commands/frontend/component.md\ncreates the command\n/project:frontend:component\n​\nArguments\nPass dynamic values to commands using the\n$ARGUMENTS\nplaceholder.\nFor example:\n# Command definition\necho\n\"Fix issue #\n$ARGUMENTS\nfollowing our coding standards\"\n>\n.claude/commands/fix-issue.md\n# Usage\n>\n/project:fix-issue\n123\n​\nBash command execution\nExecute bash commands before the slash command runs using the\n!\nprefix. The output is included in the command context.\nFor example:\n---\nallowed-tools: Bash(git add:\n*\n), Bash(git status:\n*\n), Bash(git commit:*)\ndescription: Create a git commit\n---\n##\nContext\n-\nCurrent git status: !\n`git status`\n-\nCurrent git diff (staged and unstaged changes): !\n`git diff HEAD`\n-\nCurrent branch: !\n`git branch --show-current`\n-\nRecent commits: !\n`git log --oneline -10`\n##\nYour task\nBased on the above changes, create a single git commit.\n​\nFile references\nInclude file contents in commands using the\n@\nprefix to\nreference files\n.\nFor example:\n#\nReference a specific file\nReview the implementation in @src/utils/helpers.js\n#\nReference multiple files\nCompare @src/old-version.js with @src/new-version.js\n​\nThinking mode\nSlash commands can trigger extended thinking by including\nextended thinking keywords\n.\n​\nFile format\nCommand files support:\nMarkdown format\n(\n.md\nextension)\nYAML frontmatter\nfor metadata:\nallowed-tools\n: List of tools the command can use\ndescription\n: Brief description of the command\nDynamic content\nwith bash commands (\n!\n) and file references (\n@\n)\nPrompt instructions\nas the main content\n​\nMCP slash commands\nMCP servers can expose prompts as slash commands that become available in Claude Code. These commands are dynamically discovered from connected MCP servers.\n​\nCommand format\nMCP commands follow the pattern:\n/mcp__<server-name>__<prompt-name> [arguments]\n​\nFeatures\n​\nDynamic discovery\nMCP commands are automatically available when:\nAn MCP server is connected and active\nThe server exposes prompts through the MCP protocol\nThe prompts are successfully retrieved during connection\n​\nArguments\nMCP prompts can accept arguments defined by the server:\n# Without arguments\n> /mcp__github__list_prs\n# With arguments\n> /mcp__github__pr_review 456\n> /mcp__jira__create_issue \"Bug title\" high\n​\nNaming conventions\nServer and prompt names are normalized\nSpaces and special characters become underscores\nNames are lowercased for consistency\n​\nManaging MCP connections\nUse the\n/mcp\ncommand to:\nView all configured MCP servers\nCheck connection status\nAuthenticate with OAuth-enabled servers\nClear authentication tokens\nView available tools and prompts from each server\n​\nSee also\nInteractive mode\n- Shortcuts, input modes, and interactive features\nCLI reference\n- Command-line flags and options\nSettings\n- Configuration options\nMemory management\n- Managing Claude’s memory across sessions\nWas this page helpful?\nYes\nNo\nInteractive mode\nSettings\nOn this page\nBuilt-in slash commands\nCustom slash commands\nSyntax\nParameters\nCommand types\nProject commands\nPersonal commands\nFeatures\nNamespacing\nArguments\nBash command execution\nFile references\nThinking mode\nFile format\nMCP slash commands\nCommand format\nFeatures\nDynamic discovery\nArguments\nNaming conventions\nManaging MCP connections\nSee also",
  "links": [
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/legal-and-compliance",
      "text": "Legal and compliance"
    }
  ],
  "metadata": {
    "scraped_at": "2025-06-23T15:07:32.264808",
    "word_count": 869,
    "link_count": 1,
    "content_length": 6303
  }
}