{
  "url": "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/handle-streaming-refusals",
  "title": "Streaming refusals - Anthropic",
  "text": "Anthropic\nhome page\nEnglish\nSearch...\nSearch...\nNavigation\nStrengthen guardrails\nStreaming refusals\nWelcome\nDeveloper Guide\nAPI Guide\nClaude Code\nModel Context Protocol (MCP)\nResources\nRelease Notes\nDocumentation\nDeveloper Discord\nSupport\nFirst steps\nIntro to Claude\nGet started\nModels & pricing\nModels overview\nChoosing a model\nMigrating to Claude 4\nModel deprecations\nPricing\nLearn about Claude\nBuilding with Claude\nFeatures overview\nContext windows\nGlossary\nCapabilities\nPrompt caching\nExtended thinking\nStreaming Messages\nBatch processing\nCitations\nMultilingual support\nToken counting\nEmbeddings\nVision\nPDF support\nFiles API\nGoogle Sheets add-on\nTools\nOverview\nHow to implement tool use\nToken-efficient tool use\nFine-grained tool streaming\nBash tool\nCode execution tool\nComputer use tool\nText editor tool\nWeb search tool\nModel Context Protocol (MCP)\nMCP connector\nRemote MCP servers\nUse cases\nOverview\nTicket routing\nCustomer support agent\nContent moderation\nLegal summarization\nPrompt engineering\nOverview\nClaude 4 best practices\nPrompt generator\nUse prompt templates\nPrompt improver\nBe clear and direct\nUse examples (multishot prompting)\nLet Claude think (CoT)\nUse XML tags\nGive Claude a role (system prompts)\nPrefill Claude's response\nChain complex prompts\nLong context tips\nExtended thinking tips\nTest & evaluate\nDefine success criteria\nDevelop test cases\nUsing the Evaluation Tool\nReducing latency\nStrengthen guardrails\nReduce hallucinations\nIncrease output consistency\nMitigate jailbreaks\nStreaming refusals\nReduce prompt leak\nKeep Claude in character\nLegal center\nAnthropic Privacy Policy\nSecurity and compliance\nStarting with Claude 4 models, streaming responses from Claude’s API return\nstop_reason\n:\n\"refusal\"\nwhen streaming classifiers intervene to handle potential policy violations. This new safety feature helps maintain content compliance during real-time streaming.\n​\nAPI response format\nWhen streaming classifiers detect content that violates our policies, the API returns this response:\n{\n\"role\"\n:\n\"assistant\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"text\"\n,\n\"text\"\n:\n\"Hello..\"\n}\n]\n,\n\"stop_reason\"\n:\n\"refusal\"\n}\nNo additional refusal message is included. You must handle the response and provide appropriate user-facing messaging.\n​\nReset context after refusal\nWhen you receive\nstop_reason\n:\nrefusal\n, you must reset the conversation context\nby removing or updating the turn that was refused\nbefore continuing. Attempting to continue without resetting will result in continued refusals.\nUsage metrics are still provided in the response for billing purposes, even when the response is refused.\nYou will be billed for output tokens up until the refusal.\n​\nImplementation guide\nHere’s how to detect and handle streaming refusals in your application:\nShell\nPython\nTypeScript\n# Stream request and check for refusal\nresponse\n=\n$(\ncurl\n-N\nhttps://api.anthropic.com/v1/messages\n\\\n--header\n\"anthropic-version: 2023-06-01\"\n\\\n--header\n\"content-type: application/json\"\n\\\n--header\n\"x-api-key:\n$ANTHROPIC_API_KEY\n\"\n\\\n--data\n'\n{\n\"model\"\n:\n\"claude-opus-4-20250514\"\n,\n\"messages\"\n:\n[\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n\"Hello\"\n}\n]\n,\n\"max_tokens\"\n:\n256\n,\n\"stream\"\n:\ntrue\n}\n'\n)\n# Check for refusal in the stream\nif\necho\n\"\n$response\n\"\n|\ngrep\n-q\n'\"stop_reason\":\"refusal\"'\n;\nthen\necho\n\"Response refused - resetting conversation context\"\n# Reset your conversation state here\nfi\nIf you need to test refusal handling in your application, you can use this special test string as your prompt:\nANTHROPIC_MAGIC_STRING_TRIGGER_REFUSAL_1FAEFB6177B4672DEE07F9D3AFC62588CCD2631EDCF22E8CCC1FB35B501C9C86\n​\nCurrent refusal types\nThe API currently handles refusals in three different ways:\nRefusal Type\nResponse Format\nWhen It Occurs\nStreaming classifier refusals\nstop_reason\n:\nrefusal\nDuring streaming when content violates policies\nAPI input and copyright validation\n400 error codes\nWhen input fails validation checks\nModel-generated refusals\nStandard text responses\nWhen the model itself decides to refuse\nFuture API versions will expand the\nstop_reason\n:\nrefusal\npattern to unify refusal handling across all types.\n​\nBest practices\nMonitor for refusals\n: Include\nstop_reason\n:\nrefusal\nchecks in your error handling\nReset automatically\n: Implement automatic context reset when refusals are detected\nProvide custom messaging\n: Create user-friendly messages for better UX when refusals occur\nTrack refusal patterns\n: Monitor refusal frequency to identify potential issues with your prompts\n​\nMigration notes\nFuture models will expand this pattern to other refusal types\nPlan your error handling to accommodate future unification of refusal responses\nWas this page helpful?\nYes\nNo\nMitigate jailbreaks\nReduce prompt leak\nOn this page\nAPI response format\nReset context after refusal\nImplementation guide\nCurrent refusal types\nBest practices\nMigration notes",
  "links": [],
  "metadata": {
    "scraped_at": "2025-06-23T15:07:53.345066",
    "word_count": 689,
    "link_count": 0,
    "content_length": 4823
  }
}