{
  "url": "https://docs.anthropic.com/en/docs/claude-code/github-actions",
  "title": "Claude Code GitHub Actions - Anthropic",
  "text": "Anthropic\nhome page\nEnglish\nSearch...\nSearch...\nNavigation\nBuild with Claude\nClaude Code GitHub Actions\nWelcome\nDeveloper Guide\nAPI Guide\nClaude Code\nModel Context Protocol (MCP)\nResources\nRelease Notes\nDocumentation\nDeveloper Discord\nSupport\nGetting started\nOverview\nSet up\nQuickstart\nMemory management\nCommon workflows\nBuild with Claude\nAdd Claude Code to your IDE\nModel Context Protocol (MCP)\nGitHub Actions\nClaude Code SDK\nTroubleshooting\nDeployment\nOverview\nAmazon Bedrock\nGoogle Vertex AI\nCorporate proxy\nLLM gateway\nDevelopment containers\nAdministration\nIdentity and Access Management\nSecurity\nMonitoring\nCosts\nReference\nCLI reference\nInteractive mode\nSlash commands\nSettings\nResources\nData usage\nLegal and compliance\nClaude Code GitHub Actions brings AI-powered automation to your GitHub workflow. With a simple\n@claude\nmention in any PR or issue, Claude can analyze your code, create pull requests, implement features, and fix bugs - all while following your project’s standards.\nClaude Code GitHub Actions is currently in beta. Features and functionality may evolve as we refine the experience.\nClaude Code GitHub Actions is built on top of the\nClaude Code SDK\n, which enables programmatic integration of Claude Code into your applications. You can use the SDK to build custom automation workflows beyond GitHub Actions.\n​\nWhy use Claude Code GitHub Actions?\nInstant PR creation\n: Describe what you need, and Claude creates a complete PR with all necessary changes\nAutomated code implementation\n: Turn issues into working code with a single command\nFollows your standards\n: Claude respects your\nCLAUDE.md\nguidelines and existing code patterns\nSimple setup\n: Get started in minutes with our installer and API key\nSecure by default\n: Your code stays on Github’s runners\n​\nWhat can Claude do?\nClaude Code provides powerful GitHub Actions that transform how you work with code:\n​\nClaude Code Action\nThis GitHub Action allows you to run Claude Code within your GitHub Actions workflows. You can use this to build any custom workflow on top of Claude Code.\nView repository →\n​\nClaude Code Action (Base)\nThe foundation for building custom GitHub workflows with Claude. This extensible framework gives you full access to Claude’s capabilities for creating tailored automation.\nView repository →\n​\nSetup\n​\nQuick setup\nThe easiest way to set up this action is through Claude Code in the terminal. Just open claude and run\n/install-github-app\n.\nThis command will guide you through setting up the GitHub app and required secrets.\nYou must be a repository admin to install the GitHub app and add secrets\nThis quickstart method is only available for direct Anthropic API users. If you’re using AWS Bedrock or Google Vertex AI, please see the\nUsing with AWS Bedrock & Google Vertex AI\nsection.\n​\nManual setup\nIf the\n/install-github-app\ncommand fails or you prefer manual setup, please follow these manual setup instructions:\nInstall the Claude GitHub app\nto your repository:\nhttps://github.com/apps/claude\nAdd ANTHROPIC_API_KEY\nto your repository secrets (\nLearn how to use secrets in GitHub Actions\n)\nCopy the workflow file\nfrom\nexamples/claude.yml\ninto your repository’s\n.github/workflows/\nAfter completing either the quickstart or manual setup, test the action by tagging\n@claude\nin an issue or PR comment!\n​\nExample use cases\nClaude Code GitHub Actions can help you with a variety of tasks. For complete working examples, see the\nexamples directory\n.\n​\nTurn issues into PRs\nIn an issue comment:\n@claude implement this feature based on the issue description\nClaude will analyze the issue, write the code, and create a PR for review.\n​\nGet implementation help\nIn a PR comment:\n@claude how should I implement user authentication for this endpoint?\nClaude will analyze your code and provide specific implementation guidance.\n​\nFix bugs quickly\nIn an issue:\n@claude fix the TypeError in the user dashboard component\nClaude will locate the bug, implement a fix, and create a PR.\n​\nBest practices\n​\nCLAUDE.md configuration\nCreate a\nCLAUDE.md\nfile in your repository root to define code style guidelines, review criteria, project-specific rules, and preferred patterns. This file guides Claude’s understanding of your project standards.\n​\nSecurity considerations\nNever commit API keys directly to your repository!\nAlways use GitHub Secrets for API keys:\nAdd your API key as a repository secret named\nANTHROPIC_API_KEY\nReference it in workflows:\nanthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}\nLimit action permissions to only what’s necessary\nReview Claude’s suggestions before merging\nAlways use GitHub Secrets (e.g.,\n${{ secrets.ANTHROPIC_API_KEY }}\n) rather than hardcoding API keys directly in your workflow files.\n​\nOptimizing performance\nUse issue templates to provide context, keep your\nCLAUDE.md\nconcise and focused, and configure appropriate timeouts for your workflows.\n​\nCI costs\nWhen using Claude Code GitHub Actions, be aware of the associated costs:\nGitHub Actions costs:\nClaude Code runs on GitHub-hosted runners, which consume your GitHub Actions minutes\nSee\nGitHub’s billing documentation\nfor detailed pricing and minute limits\nAPI costs:\nEach Claude interaction consumes API tokens based on the length of prompts and responses\nToken usage varies by task complexity and codebase size\nSee\nClaude’s pricing page\nfor current token rates\nCost optimization tips:\nUse specific\n@claude\ncommands to reduce unnecessary API calls\nConfigure appropriate\nmax_turns\nlimits to prevent excessive iterations\nSet reasonable\ntimeout_minutes\nto avoid runaway workflows\nConsider using GitHub’s concurrency controls to limit parallel runs\n​\nConfiguration examples\nFor ready-to-use workflow configurations for different use cases, including:\nBasic workflow setup for issue and PR comments\nAutomated code reviews on pull requests\nCustom implementations for specific needs\nVisit the\nexamples directory\nin the Claude Code Action repository.\nThe examples repository includes complete, tested workflows that you can copy directly into your\n.github/workflows/\ndirectory.\n​\nUsing with AWS Bedrock & Google Vertex AI\nFor enterprise environments, you can use Claude Code GitHub Actions with your own cloud infrastructure. This approach gives you control over data residency and billing while maintaining the same functionality.\n​\nPrerequisites\nBefore setting up Claude Code GitHub Actions with cloud providers, you need:\n​\nFor Google Cloud Vertex AI:\nA Google Cloud Project with Vertex AI enabled\nWorkload Identity Federation configured for GitHub Actions\nA service account with the required permissions\nA GitHub App (recommended) or use the default GITHUB_TOKEN\n​\nFor AWS Bedrock:\nAn AWS account with Amazon Bedrock enabled\nGitHub OIDC Identity Provider configured in AWS\nAn IAM role with Bedrock permissions\nA GitHub App (recommended) or use the default GITHUB_TOKEN\n1\nCreate a custom GitHub App (Recommended for 3P Providers)\nFor best control and security when using 3P providers like Vertex AI or Bedrock, we recommend creating your own GitHub App:\nGo to\nhttps://github.com/settings/apps/new\nFill in the basic information:\nGitHub App name\n: Choose a unique name (e.g., “YourOrg Claude Assistant”)\nHomepage URL\n: Your organization’s website or the repository URL\nConfigure the app settings:\nWebhooks\n: Uncheck “Active” (not needed for this integration)\nSet the required permissions:\nRepository permissions\n:\nContents: Read & Write\nIssues: Read & Write\nPull requests: Read & Write\nClick “Create GitHub App”\nAfter creation, click “Generate a private key” and save the downloaded\n.pem\nfile\nNote your App ID from the app settings page\nInstall the app to your repository:\nFrom your app’s settings page, click “Install App” in the left sidebar\nSelect your account or organization\nChoose “Only select repositories” and select the specific repository\nClick “Install”\nAdd the private key as a secret to your repository:\nGo to your repository’s Settings → Secrets and variables → Actions\nCreate a new secret named\nAPP_PRIVATE_KEY\nwith the contents of the\n.pem\nfile\nAdd the App ID as a secret:\nCreate a new secret named\nAPP_ID\nwith your GitHub App’s ID\nThis app will be used with the\nactions/create-github-app-token\naction to generate authentication tokens in your workflows.\nAlternative for Anthropic API or if you don’t want to setup your own Github app\n: Use the official Anthropic app:\nInstall from:\nhttps://github.com/apps/claude\nNo additional configuration needed for authentication\n2\nConfigure cloud provider authentication\nChoose your cloud provider and set up secure authentication:\nAWS Bedrock\nConfigure AWS to allow GitHub Actions to authenticate securely without storing credentials.\nSecurity Note\n: Use repository-specific configurations and grant only the minimum required permissions.\nRequired Setup\n:\nEnable Amazon Bedrock\n:\nRequest access to Claude models in Amazon Bedrock\nFor cross-region models, request access in all required regions\nSet up GitHub OIDC Identity Provider\n:\nProvider URL:\nhttps://token.actions.githubusercontent.com\nAudience:\nsts.amazonaws.com\nCreate IAM Role for GitHub Actions\n:\nTrusted entity type: Web identity\nIdentity provider:\ntoken.actions.githubusercontent.com\nPermissions:\nAmazonBedrockFullAccess\npolicy\nConfigure trust policy for your specific repository\nRequired Values\n:\nAfter setup, you’ll need:\nAWS_ROLE_TO_ASSUME\n: The ARN of the IAM role you created\nOIDC is more secure than using static AWS access keys because credentials are temporary and automatically rotated.\nSee\nAWS documentation\nfor detailed OIDC setup instructions.\nGoogle Vertex AI\nConfigure Google Cloud to allow GitHub Actions to authenticate securely without storing credentials.\nSecurity Note\n: Use repository-specific configurations and grant only the minimum required permissions.\nRequired Setup\n:\nEnable APIs\nin your Google Cloud project:\nIAM Credentials API\nSecurity Token Service (STS) API\nVertex AI API\nCreate Workload Identity Federation resources\n:\nCreate a Workload Identity Pool\nAdd a GitHub OIDC provider with:\nIssuer:\nhttps://token.actions.githubusercontent.com\nAttribute mappings for repository and owner\nSecurity recommendation\n: Use repository-specific attribute conditions\nCreate a Service Account\n:\nGrant only\nVertex AI User\nrole\nSecurity recommendation\n: Create a dedicated service account per repository\nConfigure IAM bindings\n:\nAllow the Workload Identity Pool to impersonate the service account\nSecurity recommendation\n: Use repository-specific principal sets\nRequired Values\n:\nAfter setup, you’ll need:\nGCP_WORKLOAD_IDENTITY_PROVIDER\n: The full provider resource name\nGCP_SERVICE_ACCOUNT\n: The service account email address\nWorkload Identity Federation eliminates the need for downloadable service account keys, improving security.\nFor detailed setup instructions, consult the\nGoogle Cloud Workload Identity Federation documentation\n.\n3\nAdd Required Secrets\nAdd the following secrets to your repository (Settings → Secrets and variables → Actions):\n​\nFor Anthropic API (Direct):\nFor API Authentication\n:\nANTHROPIC_API_KEY\n: Your Anthropic API key from\nconsole.anthropic.com\nFor GitHub App (if using your own app)\n:\nAPP_ID\n: Your GitHub App’s ID\nAPP_PRIVATE_KEY\n: The private key (.pem) content\n​\nFor Google Cloud Vertex AI\nFor GCP Authentication\n:\nGCP_WORKLOAD_IDENTITY_PROVIDER\nGCP_SERVICE_ACCOUNT\nFor GitHub App (if using your own app)\n:\nAPP_ID\n: Your GitHub App’s ID\nAPP_PRIVATE_KEY\n: The private key (.pem) content\n​\nFor AWS Bedrock\nFor AWS Authentication\n:\nAWS_ROLE_TO_ASSUME\nFor GitHub App (if using your own app)\n:\nAPP_ID\n: Your GitHub App’s ID\nAPP_PRIVATE_KEY\n: The private key (.pem) content\n4\nCreate workflow files\nCreate GitHub Actions workflow files that integrate with your cloud provider. The examples below show complete configurations for both AWS Bedrock and Google Vertex AI:\nAWS Bedrock workflow\nPrerequisites:\nAWS Bedrock access enabled with Claude model permissions\nGitHub configured as an OIDC identity provider in AWS\nIAM role with Bedrock permissions that trusts GitHub Actions\nRequired GitHub secrets:\nSecret Name\nDescription\nAWS_ROLE_TO_ASSUME\nARN of the IAM role for Bedrock access\nAPP_ID\nYour GitHub App ID (from app settings)\nAPP_PRIVATE_KEY\nThe private key you generated for your GitHub App\nname\n:\nClaude PR Action\npermissions\n:\ncontents\n:\nwrite\npull-requests\n:\nwrite\nissues\n:\nwrite\nid-token\n:\nwrite\non\n:\nissue_comment\n:\ntypes\n:\n[\ncreated\n]\npull_request_review_comment\n:\ntypes\n:\n[\ncreated\n]\nissues\n:\ntypes\n:\n[\nopened\n,\nassigned\n]\njobs\n:\nclaude\n-\npr\n:\nif\n:\n|\n(github.event_name == 'issue_comment'\n&&\ncontains(github.event.comment.body\n,\n'@claude'))\n|\n|\n(github.event_name == 'pull_request_review_comment'\n&&\ncontains(github.event.comment.body\n,\n'@claude'))\n|\n|\n(github.event_name == 'issues'\n&&\ncontains(github.event.issue.body\n,\n'@claude'))\nruns-on\n:\nubuntu\n-\nlatest\nenv\n:\nAWS_REGION\n:\nus\n-\nwest\n-\n2\nsteps\n:\n-\nname\n:\nCheckout repository\nuses\n:\nactions/checkout@v4\n-\nname\n:\nGenerate GitHub App token\nid\n:\napp\n-\ntoken\nuses\n:\nactions/create\n-\ngithub\n-\napp\n-\ntoken@v2\nwith\n:\napp-id\n:\n$\n{\n{\nsecrets.APP_ID\n}\n}\nprivate-key\n:\n$\n{\n{\nsecrets.APP_PRIVATE_KEY\n}\n}\n-\nname\n:\nConfigure AWS Credentials (OIDC)\nuses\n:\naws\n-\nactions/configure\n-\naws\n-\ncredentials@v4\nwith\n:\nrole-to-assume\n:\n$\n{\n{\nsecrets.AWS_ROLE_TO_ASSUME\n}\n}\naws-region\n:\nus\n-\nwest\n-\n2\n-\nuses\n:\n./.github/actions/claude\n-\npr\n-\naction\nwith\n:\ntrigger_phrase\n:\n\"@claude\"\ntimeout_minutes\n:\n\"60\"\ngithub_token\n:\n$\n{\n{\nsteps.app\n-\ntoken.outputs.token\n}\n}\nuse_bedrock\n:\n\"true\"\nmodel\n:\n\"us.anthropic.claude-3-7-sonnet-20250219-v1:0\"\nThe model ID format for Bedrock includes the region prefix (e.g.,\nus.anthropic.claude...\n) and version suffix.\nGoogle Vertex AI workflow\nPrerequisites:\nVertex AI API enabled in your GCP project\nWorkload Identity Federation configured for GitHub\nService account with Vertex AI permissions\nRequired GitHub secrets:\nSecret Name\nDescription\nGCP_WORKLOAD_IDENTITY_PROVIDER\nWorkload identity provider resource name\nGCP_SERVICE_ACCOUNT\nService account email with Vertex AI access\nAPP_ID\nYour GitHub App ID (from app settings)\nAPP_PRIVATE_KEY\nThe private key you generated for your GitHub App\nname\n:\nClaude PR Action\npermissions\n:\ncontents\n:\nwrite\npull-requests\n:\nwrite\nissues\n:\nwrite\nid-token\n:\nwrite\non\n:\nissue_comment\n:\ntypes\n:\n[\ncreated\n]\npull_request_review_comment\n:\ntypes\n:\n[\ncreated\n]\nissues\n:\ntypes\n:\n[\nopened\n,\nassigned\n]\njobs\n:\nclaude\n-\npr\n:\nif\n:\n|\n(github.event_name == 'issue_comment'\n&&\ncontains(github.event.comment.body\n,\n'@claude'))\n|\n|\n(github.event_name == 'pull_request_review_comment'\n&&\ncontains(github.event.comment.body\n,\n'@claude'))\n|\n|\n(github.event_name == 'issues'\n&&\ncontains(github.event.issue.body\n,\n'@claude'))\nruns-on\n:\nubuntu\n-\nlatest\nsteps\n:\n-\nname\n:\nCheckout repository\nuses\n:\nactions/checkout@v4\n-\nname\n:\nGenerate GitHub App token\nid\n:\napp\n-\ntoken\nuses\n:\nactions/create\n-\ngithub\n-\napp\n-\ntoken@v2\nwith\n:\napp-id\n:\n$\n{\n{\nsecrets.APP_ID\n}\n}\nprivate-key\n:\n$\n{\n{\nsecrets.APP_PRIVATE_KEY\n}\n}\n-\nname\n:\nAuthenticate to Google Cloud\nid\n:\nauth\nuses\n:\ngoogle\n-\ngithub\n-\nactions/auth@v2\nwith\n:\nworkload_identity_provider\n:\n$\n{\n{\nsecrets.GCP_WORKLOAD_IDENTITY_PROVIDER\n}\n}\nservice_account\n:\n$\n{\n{\nsecrets.GCP_SERVICE_ACCOUNT\n}\n}\n-\nuses\n:\n./.github/actions/claude\n-\npr\n-\naction\nwith\n:\ntrigger_phrase\n:\n\"@claude\"\ntimeout_minutes\n:\n\"60\"\ngithub_token\n:\n$\n{\n{\nsteps.app\n-\ntoken.outputs.token\n}\n}\nuse_vertex\n:\n\"true\"\nmodel\n:\n\"claude-3-7-sonnet@20250219\"\nenv\n:\nANTHROPIC_VERTEX_PROJECT_ID\n:\n$\n{\n{\nsteps.auth.outputs.project_id\n}\n}\nCLOUD_ML_REGION\n:\nus\n-\neast5\nVERTEX_REGION_CLAUDE_3_7_SONNET\n:\nus\n-\neast5\nThe project ID is automatically retrieved from the Google Cloud authentication step, so you don’t need to hardcode it.\n​\nTroubleshooting\n​\nClaude not responding to @claude commands\nVerify the GitHub App is installed correctly, check that workflows are enabled, ensure API key is set in repository secrets, and confirm the comment contains\n@claude\n(not\n/claude\n).\n​\nCI not running on Claude’s commits\nEnsure you’re using the GitHub App or custom app (not Actions user), check workflow triggers include the necessary events, and verify app permissions include CI triggers.\n​\nAuthentication errors\nConfirm API key is valid and has sufficient permissions. For Bedrock/Vertex, check credentials configuration and ensure secrets are named correctly in workflows.\n​\nAdvanced configuration\n​\nAction parameters\nThe Claude Code Action supports these key parameters:\nParameter\nDescription\nRequired\nprompt\nThe prompt to send to Claude\nYes*\nprompt_file\nPath to file containing prompt\nYes*\nanthropic_api_key\nAnthropic API key\nYes**\nmax_turns\nMaximum conversation turns\nNo\ntimeout_minutes\nExecution timeout\nNo\n*Either\nprompt\nor\nprompt_file\nrequired\n**Required for direct Anthropic API, not for Bedrock/Vertex\n​\nAlternative integration methods\nWhile the\n/install-github-app\ncommand is the recommended approach, you can also:\nCustom GitHub App\n: For organizations needing branded usernames or custom authentication flows. Create your own GitHub App with required permissions (contents, issues, pull requests) and use the actions/create-github-app-token action to generate tokens in your workflows.\nManual GitHub Actions\n: Direct workflow configuration for maximum flexibility\nMCP Configuration\n: Dynamic loading of Model Context Protocol servers\nSee the\nClaude Code Action repository\nfor detailed documentation.\n​\nCustomizing Claude’s behavior\nYou can configure Claude’s behavior in two ways:\nCLAUDE.md\n: Define coding standards, review criteria, and project-specific rules in a\nCLAUDE.md\nfile at the root of your repository. Claude will follow these guidelines when creating PRs and responding to requests. Check out our\nMemory documentation\nfor more details.\nCustom prompts\n: Use the\nprompt\nparameter in the workflow file to provide workflow-specific instructions. This allows you to customize Claude’s behavior for different workflows or tasks.\nClaude will follow these guidelines when creating PRs and responding to requests.\nWas this page helpful?\nYes\nNo\nModel Context Protocol (MCP)\nClaude Code SDK\nOn this page\nWhy use Claude Code GitHub Actions?\nWhat can Claude do?\nClaude Code Action\nClaude Code Action (Base)\nSetup\nQuick setup\nManual setup\nExample use cases\nTurn issues into PRs\nGet implementation help\nFix bugs quickly\nBest practices\nCLAUDE.md configuration\nSecurity considerations\nOptimizing performance\nCI costs\nConfiguration examples\nUsing with AWS Bedrock & Google Vertex AI\nPrerequisites\nFor Google Cloud Vertex AI:\nFor AWS Bedrock:\nTroubleshooting\nClaude not responding to @claude commands\nCI not running on Claude’s commits\nAuthentication errors\nAdvanced configuration\nAction parameters\nAlternative integration methods\nCustomizing Claude’s behavior",
  "links": [
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/corporate-proxy",
      "text": "Corporate proxy"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/llm-gateway",
      "text": "LLM gateway"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/devcontainer",
      "text": "Development containers"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/iam",
      "text": "Identity and Access Management"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/security",
      "text": "Security"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/monitoring-usage",
      "text": "Monitoring"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/costs",
      "text": "Costs"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/cli-reference",
      "text": "CLI reference"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/interactive-mode",
      "text": "Interactive mode"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/slash-commands",
      "text": "Slash commands"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/settings",
      "text": "Settings"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/data-usage",
      "text": "Data usage"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/legal-and-compliance",
      "text": "Legal and compliance"
    },
    {
      "url": "https://docs.anthropic.com/_sites/docs.anthropic.com/en/docs/claude-code/github-actions",
      "text": "Using with AWS Bedrock & Google Vertex AI"
    }
  ],
  "metadata": {
    "scraped_at": "2025-06-23T15:07:28.774671",
    "word_count": 2772,
    "link_count": 14,
    "content_length": 18678
  }
}