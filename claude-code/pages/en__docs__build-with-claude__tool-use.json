{
  "url": "https://docs.anthropic.com/en/docs/build-with-claude/tool-use",
  "title": "Tool use with Claude - Anthropic",
  "text": "Anthropic\nhome page\nEnglish\nSearch...\nSearch...\nNavigation\nTools\nTool use with Claude\nWelcome\nDeveloper Guide\nAPI Guide\nClaude Code\nModel Context Protocol (MCP)\nResources\nRelease Notes\nDocumentation\nDeveloper Discord\nSupport\nFirst steps\nIntro to Claude\nGet started\nModels & pricing\nModels overview\nChoosing a model\nMigrating to Claude 4\nModel deprecations\nPricing\nLearn about Claude\nBuilding with Claude\nFeatures overview\nContext windows\nGlossary\nCapabilities\nPrompt caching\nExtended thinking\nStreaming Messages\nBatch processing\nCitations\nMultilingual support\nToken counting\nEmbeddings\nVision\nPDF support\nFiles API\nGoogle Sheets add-on\nTools\nOverview\nHow to implement tool use\nToken-efficient tool use\nFine-grained tool streaming\nBash tool\nCode execution tool\nComputer use tool\nText editor tool\nWeb search tool\nModel Context Protocol (MCP)\nMCP connector\nRemote MCP servers\nUse cases\nOverview\nTicket routing\nCustomer support agent\nContent moderation\nLegal summarization\nPrompt engineering\nOverview\nClaude 4 best practices\nPrompt generator\nUse prompt templates\nPrompt improver\nBe clear and direct\nUse examples (multishot prompting)\nLet Claude think (CoT)\nUse XML tags\nGive Claude a role (system prompts)\nPrefill Claude's response\nChain complex prompts\nLong context tips\nExtended thinking tips\nTest & evaluate\nDefine success criteria\nDevelop test cases\nUsing the Evaluation Tool\nReducing latency\nStrengthen guardrails\nReduce hallucinations\nIncrease output consistency\nMitigate jailbreaks\nStreaming refusals\nReduce prompt leak\nKeep Claude in character\nLegal center\nAnthropic Privacy Policy\nSecurity and compliance\nClaude is capable of interacting with tools and functions, allowing you to extend Claude’s capabilities to perform a wider variety of tasks.\nLearn everything you need to master tool use with Claude via our new\ncomprehensive\ntool use\ncourse\n! Please\ncontinue to share your ideas and suggestions using this\nform\n.\nHere’s an example of how to provide tools to Claude using the Messages API:\nShell\nPython\nTypeScript\nJava\ncurl\nhttps://api.anthropic.com/v1/messages\n\\\n-H\n\"content-type: application/json\"\n\\\n-H\n\"x-api-key:\n$ANTHROPIC_API_KEY\n\"\n\\\n-H\n\"anthropic-version: 2023-06-01\"\n\\\n-d\n'\n{\n\"model\"\n:\n\"claude-opus-4-20250514\"\n,\n\"max_tokens\"\n:\n1024\n,\n\"tools\"\n:\n[\n{\n\"name\"\n:\n\"get_weather\"\n,\n\"description\"\n:\n\"Get the current weather in a given location\"\n,\n\"input_schema\"\n:\n{\n\"type\"\n:\n\"object\"\n,\n\"properties\"\n:\n{\n\"location\"\n:\n{\n\"type\"\n:\n\"string\"\n,\n\"description\"\n:\n\"The city and state, e.g. San Francisco, CA\"\n}\n}\n,\n\"required\"\n:\n[\n\"location\"\n]\n}\n}\n]\n,\n\"messages\"\n:\n[\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n\"What is the weather like in San Francisco?\"\n}\n]\n}\n'\n​\nHow tool use works\nClaude supports two types of tools:\nClient tools\n: Tools that execute on your systems, which include:\nUser-defined custom tools that you create and implement\nAnthropic-defined tools like\ncomputer use\nand\ntext editor\nthat require client implementation\nServer tools\n: Tools that execute on Anthropic’s servers, like the\nweb search\ntool. These tools must be specified in the API request but don’t require implementation on your part.\nAnthropic-defined tools use versioned types (e.g.,\nweb_search_20250305\n,\ntext_editor_20250124\n) to ensure compatibility across model versions.\n​\nClient tools\nIntegrate client tools with Claude in these steps:\n1\nProvide Claude with tools and a user prompt\nDefine client tools with names, descriptions, and input schemas in your API request.\nInclude a user prompt that might require these tools, e.g., “What’s the weather in San Francisco?”\n2\nClaude decides to use a tool\nClaude assesses if any tools can help with the user’s query.\nIf yes, Claude constructs a properly formatted tool use request.\nFor client tools, the API response has a\nstop_reason\nof\ntool_use\n, signaling Claude’s intent.\n3\nExecute the tool and return results\nExtract the tool name and input from Claude’s request\nExecute the tool code on your system\nReturn the results in a new\nuser\nmessage containing a\ntool_result\ncontent block\n4\nClaude uses tool result to formulate a response\nClaude analyzes the tool results to craft its final response to the original user prompt.\nNote: Steps 3 and 4 are optional. For some workflows, Claude’s tool use request (step 2) might be all you need, without sending results back to Claude.\n​\nServer tools\nServer tools follow a different workflow:\n1\nProvide Claude with tools and a user prompt\nServer tools, like\nweb search\n, have their own parameters.\nInclude a user prompt that might require these tools, e.g., “Search for the latest news about AI.”\n2\nClaude executes the server tool\nClaude assesses if a server tool can help with the user’s query.\nIf yes, Claude executes the tool, and the results are automatically incorporated into Claude’s response.\n3\nClaude uses the server tool result to formulate a response\nClaude analyzes the server tool results to craft its final response to the original user prompt.\nNo additional user interaction is needed for server tool execution.\n​\nTool use examples\nHere are a few code examples demonstrating various tool use patterns and techniques. For brevity’s sake, the tools are simple tools, and the tool descriptions are shorter than would be ideal to ensure best performance.\nSingle tool example\nShell\nPython\nJava\ncurl\nhttps://api.anthropic.com/v1/messages\n\\\n--header\n\"x-api-key:\n$ANTHROPIC_API_KEY\n\"\n\\\n--header\n\"anthropic-version: 2023-06-01\"\n\\\n--header\n\"content-type: application/json\"\n\\\n--data\n\\\n'\n{\n\"model\"\n:\n\"claude-opus-4-20250514\"\n,\n\"max_tokens\"\n:\n1024\n,\n\"tools\"\n:\n[\n{\n\"name\"\n:\n\"get_weather\"\n,\n\"description\"\n:\n\"Get the current weather in a given location\"\n,\n\"input_schema\"\n:\n{\n\"type\"\n:\n\"object\"\n,\n\"properties\"\n:\n{\n\"location\"\n:\n{\n\"type\"\n:\n\"string\"\n,\n\"description\"\n:\n\"The city and state, e.g. San Francisco, CA\"\n}\n,\n\"unit\"\n:\n{\n\"type\"\n:\n\"string\"\n,\n\"enum\"\n:\n[\n\"celsius\"\n,\n\"fahrenheit\"\n]\n,\n\"description\"\n:\n\"The unit of temperature, either\n\\\"\ncelsius\n\\\"\nor\n\\\"\nfahrenheit\n\\\"\n\"\n}\n}\n,\n\"required\"\n:\n[\n\"location\"\n]\n}\n}\n]\n,\n\"messages\"\n:\n[\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n\"What is the weather like in San Francisco?\"\n}\n]\n}\n'\nClaude will return a response similar to:\nJSON\n{\n\"id\"\n:\n\"msg_01Aq9w938a90dw8q\"\n,\n\"model\"\n:\n\"claude-opus-4-20250514\"\n,\n\"stop_reason\"\n:\n\"tool_use\"\n,\n\"role\"\n:\n\"assistant\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"text\"\n,\n\"text\"\n:\n\"<thinking>I need to call the get_weather function, and the user wants SF, which is likely San Francisco, CA.</thinking>\"\n}\n,\n{\n\"type\"\n:\n\"tool_use\"\n,\n\"id\"\n:\n\"toolu_01A09q90qw90lq917835lq9\"\n,\n\"name\"\n:\n\"get_weather\"\n,\n\"input\"\n:\n{\n\"location\"\n:\n\"San Francisco, CA\"\n,\n\"unit\"\n:\n\"celsius\"\n}\n}\n]\n}\nYou would then need to execute the\nget_weather\nfunction with the provided input, and return the result in a new\nuser\nmessage:\nShell\nPython\nJava\ncurl\nhttps://api.anthropic.com/v1/messages\n\\\n--header\n\"x-api-key:\n$ANTHROPIC_API_KEY\n\"\n\\\n--header\n\"anthropic-version: 2023-06-01\"\n\\\n--header\n\"content-type: application/json\"\n\\\n--data\n\\\n'\n{\n\"model\"\n:\n\"claude-opus-4-20250514\"\n,\n\"max_tokens\"\n:\n1024\n,\n\"tools\"\n:\n[\n{\n\"name\"\n:\n\"get_weather\"\n,\n\"description\"\n:\n\"Get the current weather in a given location\"\n,\n\"input_schema\"\n:\n{\n\"type\"\n:\n\"object\"\n,\n\"properties\"\n:\n{\n\"location\"\n:\n{\n\"type\"\n:\n\"string\"\n,\n\"description\"\n:\n\"The city and state, e.g. San Francisco, CA\"\n}\n,\n\"unit\"\n:\n{\n\"type\"\n:\n\"string\"\n,\n\"enum\"\n:\n[\n\"celsius\"\n,\n\"fahrenheit\"\n]\n,\n\"description\"\n:\n\"The unit of temperature, either\n\\\"\ncelsius\n\\\"\nor\n\\\"\nfahrenheit\n\\\"\n\"\n}\n}\n,\n\"required\"\n:\n[\n\"location\"\n]\n}\n}\n]\n,\n\"messages\"\n:\n[\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n\"What is the weather like in San Francisco?\"\n}\n,\n{\n\"role\"\n:\n\"assistant\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"text\"\n,\n\"text\"\n:\n\"<thinking>I need to use get_weather, and the user wants SF, which is likely San Francisco, CA.</thinking>\"\n}\n,\n{\n\"type\"\n:\n\"tool_use\"\n,\n\"id\"\n:\n\"toolu_01A09q90qw90lq917835lq9\"\n,\n\"name\"\n:\n\"get_weather\"\n,\n\"input\"\n:\n{\n\"location\"\n:\n\"San Francisco, CA\"\n,\n\"unit\"\n:\n\"celsius\"\n}\n}\n]\n}\n,\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"tool_result\"\n,\n\"tool_use_id\"\n:\n\"toolu_01A09q90qw90lq917835lq9\"\n,\n\"content\"\n:\n\"15 degrees\"\n}\n]\n}\n]\n}\n'\nThis will print Claude’s final response, incorporating the weather data:\nJSON\n{\n\"id\"\n:\n\"msg_01Aq9w938a90dw8q\"\n,\n\"model\"\n:\n\"claude-opus-4-20250514\"\n,\n\"stop_reason\"\n:\n\"stop_sequence\"\n,\n\"role\"\n:\n\"assistant\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"text\"\n,\n\"text\"\n:\n\"The current weather in San Francisco is 15 degrees Celsius (59 degrees Fahrenheit). It's a cool day in the city by the bay!\"\n}\n]\n}\nMultiple tool example\nYou can provide Claude with multiple tools to choose from in a single request. Here’s an example with both a\nget_weather\nand a\nget_time\ntool, along with a user query that asks for both.\nShell\nPython\nJava\ncurl\nhttps://api.anthropic.com/v1/messages\n\\\n--header\n\"x-api-key:\n$ANTHROPIC_API_KEY\n\"\n\\\n--header\n\"anthropic-version: 2023-06-01\"\n\\\n--header\n\"content-type: application/json\"\n\\\n--data\n\\\n'\n{\n\"model\"\n:\n\"claude-opus-4-20250514\"\n,\n\"max_tokens\"\n:\n1024\n,\n\"tools\"\n:\n[\n{\n\"name\"\n:\n\"get_weather\"\n,\n\"description\"\n:\n\"Get the current weather in a given location\"\n,\n\"input_schema\"\n:\n{\n\"type\"\n:\n\"object\"\n,\n\"properties\"\n:\n{\n\"location\"\n:\n{\n\"type\"\n:\n\"string\"\n,\n\"description\"\n:\n\"The city and state, e.g. San Francisco, CA\"\n}\n,\n\"unit\"\n:\n{\n\"type\"\n:\n\"string\"\n,\n\"enum\"\n:\n[\n\"celsius\"\n,\n\"fahrenheit\"\n]\n,\n\"description\"\n:\n\"The unit of temperature, either 'celsius' or 'fahrenheit'\"\n}\n}\n,\n\"required\"\n:\n[\n\"location\"\n]\n}\n}\n,\n{\n\"name\"\n:\n\"get_time\"\n,\n\"description\"\n:\n\"Get the current time in a given time zone\"\n,\n\"input_schema\"\n:\n{\n\"type\"\n:\n\"object\"\n,\n\"properties\"\n:\n{\n\"timezone\"\n:\n{\n\"type\"\n:\n\"string\"\n,\n\"description\"\n:\n\"The IANA time zone name, e.g. America/Los_Angeles\"\n}\n}\n,\n\"required\"\n:\n[\n\"timezone\"\n]\n}\n}\n]\n,\n\"messages\"\n:\n[\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n\"What is the weather like right now in New York? Also what time is it there?\"\n}\n]\n}\n'\nIn this case, Claude will most likely try to use two separate tools, one at a time —\nget_weather\nand then\nget_time\n— in order to fully answer the user’s question. However, it will also occasionally output two\ntool_use\nblocks at once, particularly if they are not dependent on each other. You would need to execute each tool and return their results in separate\ntool_result\nblocks within a single\nuser\nmessage.\nMissing information\nIf the user’s prompt doesn’t include enough information to fill all the required parameters for a tool, Claude Opus is much more likely to recognize that a parameter is missing and ask for it. Claude Sonnet may ask, especially when prompted to think before outputting a tool request. But it may also do its best to infer a reasonable value.\nFor example, using the\nget_weather\ntool above, if you ask Claude “What’s the weather?” without specifying a location, Claude, particularly Claude Sonnet, may make a guess about tools inputs:\nJSON\n{\n\"type\"\n:\n\"tool_use\"\n,\n\"id\"\n:\n\"toolu_01A09q90qw90lq917835lq9\"\n,\n\"name\"\n:\n\"get_weather\"\n,\n\"input\"\n:\n{\n\"location\"\n:\n\"New York, NY\"\n,\n\"unit\"\n:\n\"fahrenheit\"\n}\n}\nThis behavior is not guaranteed, especially for more ambiguous prompts and for less intelligent models. If Claude Opus doesn’t have enough context to fill in the required parameters, it is far more likely respond with a clarifying question instead of making a tool call.\nSequential tools\nSome tasks may require calling multiple tools in sequence, using the output of one tool as the input to another. In such a case, Claude will call one tool at a time. If prompted to call the tools all at once, Claude is likely to guess parameters for tools further downstream if they are dependent on tool results for tools further upstream.\nHere’s an example of using a\nget_location\ntool to get the user’s location, then passing that location to the\nget_weather\ntool:\nShell\nPython\nJava\ncurl\nhttps://api.anthropic.com/v1/messages\n\\\n--header\n\"x-api-key:\n$ANTHROPIC_API_KEY\n\"\n\\\n--header\n\"anthropic-version: 2023-06-01\"\n\\\n--header\n\"content-type: application/json\"\n\\\n--data\n\\\n'\n{\n\"model\"\n:\n\"claude-opus-4-20250514\"\n,\n\"max_tokens\"\n:\n1024\n,\n\"tools\"\n:\n[\n{\n\"name\"\n:\n\"get_location\"\n,\n\"description\"\n:\n\"Get the current user location based on their IP address. This tool has no parameters or arguments.\"\n,\n\"input_schema\"\n:\n{\n\"type\"\n:\n\"object\"\n,\n\"properties\"\n:\n{\n}\n}\n}\n,\n{\n\"name\"\n:\n\"get_weather\"\n,\n\"description\"\n:\n\"Get the current weather in a given location\"\n,\n\"input_schema\"\n:\n{\n\"type\"\n:\n\"object\"\n,\n\"properties\"\n:\n{\n\"location\"\n:\n{\n\"type\"\n:\n\"string\"\n,\n\"description\"\n:\n\"The city and state, e.g. San Francisco, CA\"\n}\n,\n\"unit\"\n:\n{\n\"type\"\n:\n\"string\"\n,\n\"enum\"\n:\n[\n\"celsius\"\n,\n\"fahrenheit\"\n]\n,\n\"description\"\n:\n\"The unit of temperature, either 'celsius' or 'fahrenheit'\"\n}\n}\n,\n\"required\"\n:\n[\n\"location\"\n]\n}\n}\n]\n,\n\"messages\"\n:\n[\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n\"What is the weather like where I am?\"\n}\n]\n}\n'\nIn this case, Claude would first call the\nget_location\ntool to get the user’s location. After you return the location in a\ntool_result\n, Claude would then call\nget_weather\nwith that location to get the final answer.\nThe full conversation might look like:\nRole\nContent\nUser\nWhat’s the weather like where I am?\nAssistant\n<thinking>To answer this, I first need to determine the user’s location using the get_location tool. Then I can pass that location to the get_weather tool to find the current weather there.</thinking>[Tool use for get_location]\nUser\n[Tool result for get_location with matching id and result of San Francisco, CA]\nAssistant\n[Tool use for get_weather with the following input]{ “location”: “San Francisco, CA”, “unit”: “fahrenheit” }\nUser\n[Tool result for get_weather with matching id and result of “59°F (15°C), mostly cloudy”]\nAssistant\nBased on your current location in San Francisco, CA, the weather right now is 59°F (15°C) and mostly cloudy. It’s a fairly cool and overcast day in the city. You may want to bring a light jacket if you’re heading outside.\nThis example demonstrates how Claude can chain together multiple tool calls to answer a question that requires gathering data from different sources. The key steps are:\nClaude first realizes it needs the user’s location to answer the weather question, so it calls the\nget_location\ntool.\nThe user (i.e. the client code) executes the actual\nget_location\nfunction and returns the result “San Francisco, CA” in a\ntool_result\nblock.\nWith the location now known, Claude proceeds to call the\nget_weather\ntool, passing in “San Francisco, CA” as the\nlocation\nparameter (as well as a guessed\nunit\nparameter, as\nunit\nis not a required parameter).\nThe user again executes the actual\nget_weather\nfunction with the provided arguments and returns the weather data in another\ntool_result\nblock.\nFinally, Claude incorporates the weather data into a natural language response to the original question.\nChain of thought tool use\nBy default, Claude Opus is prompted to think before it answers a tool use query to best determine whether a tool is necessary, which tool to use, and the appropriate parameters. Claude Sonnet and Claude Haiku are prompted to try to use tools as much as possible and are more likely to call an unnecessary tool or infer missing parameters. To prompt Sonnet or Haiku to better assess the user query before making tool calls, the following prompt can be used:\nChain of thought prompt\nAnswer the user's request using relevant tools (if they are available). Before calling a tool, do some analysis within \\<thinking>\\</thinking> tags. First, think about which of the provided tools is the relevant tool to answer the user's request. Second, go through each of the required parameters of the relevant tool and determine if the user has directly provided or given enough information to infer a value. When deciding if the parameter can be inferred, carefully consider all the context to see if it supports a specific value. If all of the required parameters are present or can be reasonably inferred, close the thinking tag and proceed with the tool call. BUT, if one of the values for a required parameter is missing, DO NOT invoke the function (not even with fillers for the missing params) and instead, ask the user to provide the missing parameters. DO NOT ask for more information on optional parameters if it is not provided.\nJSON mode\nYou can use tools to get Claude produce JSON output that follows a schema, even if you don’t have any intention of running that output through a tool or function.\nWhen using tools in this way:\nYou usually want to provide a\nsingle\ntool\nYou should set\ntool_choice\n(see\nForcing tool use\n) to instruct the model to explicitly use that tool\nRemember that the model will pass the\ninput\nto the tool, so the name of the tool and description should be from the model’s perspective.\nThe following uses a\nrecord_summary\ntool to describe an image following a particular format.\nShell\nPython\nJava\n#!/bin/bash\nIMAGE_URL\n=\n\"https://upload.wikimedia.org/wikipedia/commons/a/a7/Camponotus_flavomarginatus_ant.jpg\"\nIMAGE_MEDIA_TYPE\n=\n\"image/jpeg\"\nIMAGE_BASE64\n=\n$(\ncurl\n\"\n$IMAGE_URL\n\"\n|\nbase64\n)\ncurl\nhttps://api.anthropic.com/v1/messages\n\\\n--header\n\"content-type: application/json\"\n\\\n--header\n\"x-api-key:\n$ANTHROPIC_API_KEY\n\"\n\\\n--header\n\"anthropic-version: 2023-06-01\"\n\\\n--data\n\\\n'\n{\n\"model\"\n:\n\"claude-opus-4-20250514\"\n,\n\"max_tokens\"\n:\n1024\n,\n\"tools\"\n:\n[\n{\n\"name\"\n:\n\"record_summary\"\n,\n\"description\"\n:\n\"Record summary of an image using well-structured JSON.\"\n,\n\"input_schema\"\n:\n{\n\"type\"\n:\n\"object\"\n,\n\"properties\"\n:\n{\n\"key_colors\"\n:\n{\n\"type\"\n:\n\"array\"\n,\n\"items\"\n:\n{\n\"type\"\n:\n\"object\"\n,\n\"properties\"\n:\n{\n\"r\"\n:\n{\n\"type\"\n:\n\"number\"\n,\n\"description\"\n:\n\"red value [0.0, 1.0]\"\n}\n,\n\"g\"\n:\n{\n\"type\"\n:\n\"number\"\n,\n\"description\"\n:\n\"green value [0.0, 1.0]\"\n}\n,\n\"b\"\n:\n{\n\"type\"\n:\n\"number\"\n,\n\"description\"\n:\n\"blue value [0.0, 1.0]\"\n}\n,\n\"name\"\n:\n{\n\"type\"\n:\n\"string\"\n,\n\"description\"\n:\n\"Human-readable color name in snake_case, e.g.\n\\\"\nolive_green\n\\\"\nor\n\\\"\nturquoise\n\\\"\n\"\n}\n}\n,\n\"required\"\n:\n[\n\"r\"\n,\n\"g\"\n,\n\"b\"\n,\n\"name\"\n]\n}\n,\n\"description\"\n:\n\"Key colors in the image. Limit to less than four.\"\n}\n,\n\"description\"\n:\n{\n\"type\"\n:\n\"string\"\n,\n\"description\"\n:\n\"Image description. One to two sentences max.\"\n}\n,\n\"estimated_year\"\n:\n{\n\"type\"\n:\n\"integer\"\n,\n\"description\"\n:\n\"Estimated year that the image was taken, if it is a photo. Only set this if the image appears to be non-fictional. Rough estimates are okay!\"\n}\n}\n,\n\"required\"\n:\n[\n\"key_colors\"\n,\n\"description\"\n]\n}\n}\n]\n,\n\"tool_choice\"\n:\n{\n\"type\"\n:\n\"tool\"\n,\n\"name\"\n:\n\"record_summary\"\n}\n,\n\"messages\"\n:\n[\n{\n\"role\"\n:\n\"user\"\n,\n\"content\"\n:\n[\n{\n\"type\"\n:\n\"image\"\n,\n\"source\"\n:\n{\n\"type\"\n:\n\"base64\"\n,\n\"media_type\"\n:\n\"'\n$IMAGE_MEDIA_TYPE\n'\"\n,\n\"data\"\n:\n\"'\n$IMAGE_BASE64\n'\"\n}\n}\n,\n{\n\"type\"\n:\n\"text\"\n,\n\"text\"\n:\n\"Describe this image.\"\n}\n]\n}\n]\n}\n'\n​\nPricing\nTool use requests are priced based on:\nThe total number of input tokens sent to the model (including in the\ntools\nparameter)\nThe number of output tokens generated\nFor server-side tools, additional usage-based pricing (e.g., web search charges per search performed)\nClient-side tools are priced the same as any other Claude API request, while server-side tools may incur additional charges based on their specific usage.\nThe additional tokens from tool use come from:\nThe\ntools\nparameter in API requests (tool names, descriptions, and schemas)\ntool_use\ncontent blocks in API requests and responses\ntool_result\ncontent blocks in API requests\nWhen you use\ntools\n, we also automatically include a special system prompt for the model which enables tool use. The number of tool use tokens required for each model are listed below (excluding the additional tokens listed above). Note that the table assumes at least 1 tool is provided. If no\ntools\nare provided, then a tool choice of\nnone\nuses 0 additional system prompt tokens.\nModel\nTool choice\nTool use system prompt token count\nClaude Opus 4\nauto\n,\nnone\nany\n,\ntool\n346 tokens\n313 tokens\nClaude Sonnet 4\nauto\n,\nnone\nany\n,\ntool\n346 tokens\n313 tokens\nClaude Sonnet 3.7\nauto\n,\nnone\nany\n,\ntool\n346 tokens\n313 tokens\nClaude Sonnet 3.5 (Oct)\nauto\n,\nnone\nany\n,\ntool\n346 tokens\n313 tokens\nClaude Sonnet 3.5 (June)\nauto\n,\nnone\nany\n,\ntool\n294 tokens\n261 tokens\nClaude Haiku 3.5\nauto\n,\nnone\nany\n,\ntool\n264 tokens\n340 tokens\nClaude Opus 3\nauto\n,\nnone\nany\n,\ntool\n530 tokens\n281 tokens\nClaude Sonnet 3\nauto\n,\nnone\nany\n,\ntool\n159 tokens\n235 tokens\nClaude Haiku 3\nauto\n,\nnone\nany\n,\ntool\n264 tokens\n340 tokens\nThese token counts are added to your normal input and output tokens to calculate the total cost of a request.\nRefer to our\nmodels overview table\nfor current per-model prices.\nWhen you send a tool use prompt, just like any other API request, the response will output both input and output token counts as part of the reported\nusage\nmetrics.\n​\nNext Steps\nExplore our repository of ready-to-implement tool use code examples in our cookbooks:\nCalculator Tool\nLearn how to integrate a simple calculator tool with Claude for precise numerical computations.\nCustomer Service Agent\nBuild a responsive customer service bot that leverages client tools to\nenhance support.\nJSON Extractor\nSee how Claude and tool use can extract structured data from unstructured text.\nWas this page helpful?\nYes\nNo\nGoogle Sheets add-on\nHow to implement tool use\nOn this page\nHow tool use works\nClient tools\nServer tools\nTool use examples\nPricing\nNext Steps",
  "links": [],
  "metadata": {
    "scraped_at": "2025-06-23T15:08:04.120096",
    "word_count": 3537,
    "link_count": 0,
    "content_length": 21059
  }
}