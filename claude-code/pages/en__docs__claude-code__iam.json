{
  "url": "https://docs.anthropic.com/en/docs/claude-code/iam",
  "title": "Identity and Access Management - Anthropic",
  "text": "Anthropic\nhome page\nEnglish\nSearch...\nSearch...\nNavigation\nAdministration\nIdentity and Access Management\nWelcome\nDeveloper Guide\nAPI Guide\nClaude Code\nModel Context Protocol (MCP)\nResources\nRelease Notes\nDocumentation\nDeveloper Discord\nSupport\nGetting started\nOverview\nSet up\nQuickstart\nMemory management\nCommon workflows\nBuild with Claude\nAdd Claude Code to your IDE\nModel Context Protocol (MCP)\nGitHub Actions\nClaude Code SDK\nTroubleshooting\nDeployment\nOverview\nAmazon Bedrock\nGoogle Vertex AI\nCorporate proxy\nLLM gateway\nDevelopment containers\nAdministration\nIdentity and Access Management\nSecurity\nMonitoring\nCosts\nReference\nCLI reference\nInteractive mode\nSlash commands\nSettings\nResources\nData usage\nLegal and compliance\n​\nAuthentication methods\nSetting up Claude Code requires access to Anthropic models. For teams, you can set up Claude Code access in one of three ways:\nAnthropic API via the Anthropic Console\nAmazon Bedrock\nGoogle Vertex AI\n​\nAnthropic API authentication\nTo set up Claude Code access for your team via Anthropic API:\nUse your existing Anthropic Console account or create a new Anthropic Console account\nYou can add users through either method below:\nBulk invite users from within the Console (Console -> Settings -> Members -> Invite)\nSet up SSO\nWhen inviting users, they need one of the following roles:\n“Claude Code” role means users can only create Claude Code API keys\n“Developer” role means users can create any kind of API key\nEach invited user needs to complete these steps:\nAccept the Console invite\nCheck system requirements\nInstall Claude Code\nLogin with Console account credentials\n​\nCloud provider authentication\nTo set up Claude Code access for your team via Bedrock or Vertex:\nFollow the\nBedrock docs\nor\nVertex docs\nDistribute the environment variables and instructions for generating cloud credentials to your users. Read more about how to\nmanage configuration here\n.\nUsers can\ninstall Claude Code\n​\nAccess control and permissions\nWe support fine-grained permissions so that you’re able to specify exactly what the agent is allowed to do (e.g. run tests, run linter) and what it is not allowed to do (e.g. update cloud infrastructure). These permission settings can be checked into version control and distributed to all developers in your organization, as well as customized by individual developers.\n​\nPermission system\nClaude Code uses a tiered permission system to balance power and safety:\nTool Type\nExample\nApproval Required\n”Yes, don’t ask again” Behavior\nRead-only\nFile reads, LS, Grep\nNo\nN/A\nBash Commands\nShell execution\nYes\nPermanently per project directory and command\nFile Modification\nEdit/write files\nYes\nUntil session end\n​\nConfiguring permissions\nYou can view & manage Claude Code’s tool permissions with\n/permissions\n. This UI lists all permission rules and the settings.json file they are sourced from.\nAllow\nrules will allow Claude Code to use the specified tool without further manual approval.\nDeny\nrules will prevent Claude Code from using the specified tool. Deny rules take precedence over allow rules.\nAdditional directories\nextend Claude’s file access to directories beyond the initial working directory.\nDefault mode\ncontrols Claude’s permission behavior when encountering new requests.\nPermission rules use the format:\nTool(optional-specifier)\nA rule that is just the tool name matches any use of that tool. For example, adding\nBash\nto the list of allow rules would allow Claude Code to use the Bash tool without requiring user approval.\n​\nPermission modes\nClaude Code supports several permission modes that can be set as the\ndefaultMode\nin\nsettings files\n:\nMode\nDescription\ndefault\nStandard behavior - prompts for permission on first use of each tool\nacceptEdits\nAutomatically accepts file edit permissions for the session\nplan\nPlan mode - Claude can analyze but not modify files or execute commands\nbypassPermissions\nSkips all permission prompts (requires safe environment - see warning below)\n​\nWorking directories\nBy default, Claude has access to files in the directory where it was launched. You can extend this access:\nDuring startup\n: Use\n--add-dir <path>\nCLI argument\nDuring session\n: Use\n/add-dir\nslash command\nPersistent configuration\n: Add to\nadditionalDirectories\nin\nsettings files\nFiles in additional directories follow the same permission rules as the original working directory - they become readable without prompts, and file editing permissions follow the current permission mode.\n​\nTool-specific permission rules\nSome tools use the optional specifier for more fine-grained permission controls. For example, an allow rule with\nBash(git diff:*)\nwould allow Bash commands that start with\ngit diff\n. The following tools support permission rules with specifiers:\nBash\nBash(npm run build)\nMatches the exact Bash command\nnpm run build\nBash(npm run test:*)\nMatches Bash commands starting with\nnpm run test\n.\nClaude Code is aware of shell operators (like\n&&\n) so a prefix match rule like\nBash(safe-cmd:*)\nwon’t give it permission to run the command\nsafe-cmd && other-cmd\nRead & Edit\nEdit\nrules apply to all built-in tools that edit files. Claude will make a best-effort attempt to apply\nRead\nrules to all built-in tools that read files like Grep, Glob, and LS.\nRead & Edit rules both follow the\ngitignore\nspecification. Patterns are resolved relative to the directory containing\n.claude/settings.json\n. To reference an absolute path, use\n//\n. For a path relative to your home directory, use\n~/\n.\nEdit(docs/**)\nMatches edits to files in the\ndocs\ndirectory of your project\nRead(~/.zshrc)\nMatches reads to your\n~/.zshrc\nfile\nEdit(//tmp/scratch.txt)\nMatches edits to\n/tmp/scratch.txt\nWebFetch\nWebFetch(domain:example.com)\nMatches fetch requests to example.com\nMCP\nmcp__puppeteer\nMatches any tool provided by the\npuppeteer\nserver (name configured in Claude Code)\nmcp__puppeteer__puppeteer_navigate\nMatches the\npuppeteer_navigate\ntool provided by the\npuppeteer\nserver\n​\nEnterprise managed policy settings\nFor enterprise deployments of Claude Code, we support enterprise managed policy settings that take precedence over user and project settings. This allows system administrators to enforce security policies that users cannot override.\nSystem administrators can deploy policies to:\nmacOS\n:\n/Library/Application Support/ClaudeCode/policies.json\nLinux and Windows (via WSL)\n:\n/etc/claude-code/policies.json\nThese policy files follow the same format as regular\nsettings files\nbut cannot be overridden by user or project settings. This ensures consistent security policies across your organization.\n​\nSettings precedence\nWhen multiple settings sources exist, they are applied in the following order (highest to lowest precedence):\nEnterprise policies\nCommand line arguments\nLocal project settings (\n.claude/settings.local.json\n)\nShared project settings (\n.claude/settings.json\n)\nUser settings (\n~/.claude/settings.json\n)\nThis hierarchy ensures that organizational policies are always enforced while still allowing flexibility at the project and user levels where appropriate.\n​\nCredential management\nClaude Code supports authentication via Claude.ai credentials, Anthropic API credentials, Bedrock Auth, and Vertex Auth. On macOS, the API keys, OAuth tokens, and other credentials are stored on encrypted macOS Keychain. Alternately, the setting\napiKeyHelper\ncan be set to a shell script which returns an API key. By default, this helper is called after 5 minutes or on HTTP 401 response; specifying environment variable\nCLAUDE_CODE_API_KEY_HELPER_TTL_MS\ndefines a custom refresh interval.\nWas this page helpful?\nYes\nNo\nDevelopment containers\nSecurity\nOn this page\nAuthentication methods\nAnthropic API authentication\nCloud provider authentication\nAccess control and permissions\nPermission system\nConfiguring permissions\nPermission modes\nWorking directories\nTool-specific permission rules\nEnterprise managed policy settings\nSettings precedence\nCredential management",
  "links": [
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/costs",
      "text": "Costs"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/cli-reference",
      "text": "CLI reference"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/interactive-mode",
      "text": "Interactive mode"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/slash-commands",
      "text": "Slash commands"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/settings",
      "text": "Settings"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/data-usage",
      "text": "Data usage"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/legal-and-compliance",
      "text": "Legal and compliance"
    }
  ],
  "metadata": {
    "scraped_at": "2025-06-23T15:07:30.442857",
    "word_count": 1162,
    "link_count": 7,
    "content_length": 7935
  }
}