{
  "url": "https://docs.anthropic.com/en/docs/claude-code/sdk",
  "title": "Claude Code SDK - Anthropic",
  "text": "Anthropic\nhome page\nEnglish\nSearch...\nSearch...\nNavigation\nBuild with Claude\nClaude Code SDK\nWelcome\nDeveloper Guide\nAPI Guide\nClaude Code\nModel Context Protocol (MCP)\nResources\nRelease Notes\nDocumentation\nDeveloper Discord\nSupport\nGetting started\nOverview\nSet up\nQuickstart\nMemory management\nCommon workflows\nBuild with Claude\nAdd Claude Code to your IDE\nModel Context Protocol (MCP)\nGitHub Actions\nClaude Code SDK\nTroubleshooting\nDeployment\nOverview\nAmazon Bedrock\nGoogle Vertex AI\nCorporate proxy\nLLM gateway\nDevelopment containers\nAdministration\nIdentity and Access Management\nSecurity\nMonitoring\nCosts\nReference\nCLI reference\nInteractive mode\nSlash commands\nSettings\nResources\nData usage\nLegal and compliance\nThe Claude Code SDK enables running Claude Code as a subprocess, providing a way to build AI-powered coding assistants and tools that leverage Claude’s capabilities.\nThe SDK is available for command line, TypeScript, and Python usage.\n​\nAuthentication\nTo use the Claude Code SDK, we recommend creating a dedicated API key:\nCreate an Anthropic API key in the\nAnthropic Console\nThen, set the\nANTHROPIC_API_KEY\nenvironment variable. We recommend storing this key securely (eg. using a Github\nsecret\n)\n​\nBasic SDK usage\nThe Claude Code SDK allows you to use Claude Code in non-interactive mode from your applications.\n​\nCommand line\nHere are a few basic examples for the command line SDK:\n# Run a single prompt and exit (print mode)\n$ claude\n-p\n\"Write a function to calculate Fibonacci numbers\"\n# Using a pipe to provide stdin\n$\necho\n\"Explain this code\"\n|\nclaude\n-p\n# Output in JSON format with metadata\n$ claude\n-p\n\"Generate a hello world function\"\n--output-format json\n# Stream JSON output as it arrives\n$ claude\n-p\n\"Build a React component\"\n--output-format stream-json\n​\nTypeScript\nThe TypeScript SDK is included in the main\n@anthropic-ai/claude-code\npackage on NPM:\nimport\n{\nquery\n,\ntype\nSDKMessage\n}\nfrom\n\"@anthropic-ai/claude-code\"\n;\nconst\nmessages\n:\nSDKMessage\n[\n]\n=\n[\n]\n;\nfor\nawait\n(\nconst\nmessage\nof\nquery\n(\n{\nprompt\n:\n\"Write a haiku about foo.py\"\n,\nabortController\n:\nnew\nAbortController\n(\n)\n,\noptions\n:\n{\nmaxTurns\n:\n3\n,\n}\n,\n}\n)\n)\n{\nmessages\n.\npush\n(\nmessage\n)\n;\n}\nconsole\n.\nlog\n(\nmessages\n)\n;\nThe TypeScript SDK accepts all arguments supported by the command line SDK, as well as:\nArgument\nDescription\nDefault\nabortController\nAbort controller\nnew AbortController()\ncwd\nCurrent working directory\nprocess.cwd()\nexecutable\nWhich JavaScript runtime to use\nnode\nwhen running with Node.js,\nbun\nwhen running with Bun\nexecutableArgs\nArguments to pass to the executable\n[]\npathToClaudeCodeExecutable\nPath to the Claude Code executable\nExecutable that ships with\n@anthropic-ai/claude-code\n​\nPython\nThe Python SDK is available as\nclaude-code-sdk\non PyPI:\npip\ninstall\nclaude-code-sdk\nPrerequisites:\nPython 3.10+\nNode.js\nClaude Code CLI:\nnpm install -g @anthropic-ai/claude-code\nBasic usage:\nimport\nanyio\nfrom\nclaude_code_sdk\nimport\nquery\n,\nClaudeCodeOptions\n,\nMessage\nasync\ndef\nmain\n(\n)\n:\nmessages\n:\nlist\n[\nMessage\n]\n=\n[\n]\nasync\nfor\nmessage\nin\nquery\n(\nprompt\n=\n\"Write a haiku about foo.py\"\n,\noptions\n=\nClaudeCodeOptions\n(\nmax_turns\n=\n3\n)\n)\n:\nmessages\n.\nappend\n(\nmessage\n)\nprint\n(\nmessages\n)\nanyio\n.\nrun\n(\nmain\n)\nThe Python SDK accepts all arguments supported by the command line SDK through the\nClaudeCodeOptions\nclass:\nfrom\nclaude_code_sdk\nimport\nquery\n,\nClaudeCodeOptions\nfrom\npathlib\nimport\nPath\noptions\n=\nClaudeCodeOptions\n(\nmax_turns\n=\n3\n,\nsystem_prompt\n=\n\"You are a helpful assistant\"\n,\ncwd\n=\nPath\n(\n\"/path/to/project\"\n)\n,\n# Can be string or Path\nallowed_tools\n=\n[\n\"Read\"\n,\n\"Write\"\n,\n\"Bash\"\n]\n,\npermission_mode\n=\n\"acceptEdits\"\n)\nasync\nfor\nmessage\nin\nquery\n(\nprompt\n=\n\"Hello\"\n,\noptions\n=\noptions\n)\n:\nprint\n(\nmessage\n)\n​\nAdvanced usage\nThe documentation below uses the command line SDK as an example, but can also be used with the TypeScript and Python SDKs.\n​\nMulti-turn conversations\nFor multi-turn conversations, you can resume conversations or continue from the most recent session:\n# Continue the most recent conversation\n$ claude\n--continue\n# Continue and provide a new prompt\n$ claude\n--continue\n\"Now refactor this for better performance\"\n# Resume a specific conversation by session ID\n$ claude\n--resume\n550e8400-e29b-41d4-a716-446655440000\n# Resume in print mode (non-interactive)\n$ claude\n-p\n--resume\n550e8400-e29b-41d4-a716-446655440000\n\"Update the tests\"\n# Continue in print mode (non-interactive)\n$ claude\n-p\n--continue\n\"Add error handling\"\n​\nCustom system prompts\nYou can provide custom system prompts to guide Claude’s behavior:\n# Override system prompt (only works with --print)\n$ claude\n-p\n\"Build a REST API\"\n--system-prompt\n\"You are a senior backend engineer. Focus on security, performance, and maintainability.\"\n# System prompt with specific requirements\n$ claude\n-p\n\"Create a database schema\"\n--system-prompt\n\"You are a database architect. Use PostgreSQL best practices and include proper indexing.\"\nYou can also append instructions to the default system prompt:\n# Append system prompt (only works with --print)\n$ claude\n-p\n\"Build a REST API\"\n--append-system-prompt\n\"After writing code, be sure to code review yourself.\"\n​\nMCP Configuration\nThe Model Context Protocol (MCP) allows you to extend Claude Code with additional tools and resources from external servers. Using the\n--mcp-config\nflag, you can load MCP servers that provide specialized capabilities like database access, API integrations, or custom tooling.\nCreate a JSON configuration file with your MCP servers:\n{\n\"mcpServers\"\n:\n{\n\"filesystem\"\n:\n{\n\"command\"\n:\n\"npx\"\n,\n\"args\"\n:\n[\n\"-y\"\n,\n\"@modelcontextprotocol/server-filesystem\"\n,\n\"/path/to/allowed/files\"\n]\n}\n,\n\"github\"\n:\n{\n\"command\"\n:\n\"npx\"\n,\n\"args\"\n:\n[\n\"-y\"\n,\n\"@modelcontextprotocol/server-github\"\n]\n,\n\"env\"\n:\n{\n\"GITHUB_TOKEN\"\n:\n\"your-github-token\"\n}\n}\n}\n}\nThen use it with Claude Code:\n# Load MCP servers from configuration\n$ claude\n-p\n\"List all files in the project\"\n--mcp-config mcp-servers.json\n# Important: MCP tools must be explicitly allowed using --allowedTools\n# MCP tools follow the format: mcp__$serverName__$toolName\n$ claude\n-p\n\"Search for TODO comments\"\n\\\n--mcp-config mcp-servers.json\n\\\n--allowedTools\n\"mcp__filesystem__read_file,mcp__filesystem__list_directory\"\n# Use an MCP tool for handling permission prompts in non-interactive mode\n$ claude\n-p\n\"Deploy the application\"\n\\\n--mcp-config mcp-servers.json\n\\\n--allowedTools\n\"mcp__permissions__approve\"\n\\\n--permission-prompt-tool mcp__permissions__approve\nWhen using MCP tools, you must explicitly allow them using the\n--allowedTools\nflag. MCP tool names follow the pattern\nmcp__<serverName>__<toolName>\nwhere:\nserverName\nis the key from your MCP configuration file\ntoolName\nis the specific tool provided by that server\nThis security measure ensures that MCP tools are only used when explicitly permitted.\nIf you specify just the server name (i.e.,\nmcp__<serverName>\n), all tools from that server will be allowed.\nGlob patterns (e.g.,\nmcp__go*\n) are not supported.\n​\nCustom permission prompt tool\nOptionally, use\n--permission-prompt-tool\nto pass in an MCP tool that we will use to check whether or not the user grants the model permissions to invoke a given tool. When the model invokes a tool the following happens:\nWe first check permission settings: all\nsettings.json files\n, as well as\n--allowedTools\nand\n--disallowedTools\npassed into the SDK; if one of these allows or denies the tool call, we proceed with the tool call\nOtherwise, we invoke the MCP tool you provided in\n--permission-prompt-tool\nThe\n--permission-prompt-tool\nMCP tool is passed the tool name and input, and must return a JSON-stringified payload with the result. The payload must be one of:\n// tool call is allowed\n{\n\"behavior\"\n:\n\"allow\"\n,\n\"updatedInput\"\n:\n{\n...\n}\n,\n// updated input, or just return back the original input\n}\n// tool call is denied\n{\n\"behavior\"\n:\n\"deny\"\n,\n\"message\"\n:\n\"...\"\n// human-readable string explaining why the permission was denied\n}\nFor example, a TypeScript MCP permission prompt tool implementation might look like this:\nconst\nserver\n=\nnew\nMcpServer\n(\n{\nname\n:\n\"Test permission prompt MCP Server\"\n,\nversion\n:\n\"0.0.1\"\n,\n}\n)\n;\nserver\n.\ntool\n(\n\"approval_prompt\"\n,\n'Simulate a permission check - approve if the input contains \"allow\", otherwise deny'\n,\n{\ntool_name\n:\nz\n.\nstring\n(\n)\n.\ndescribe\n(\n\"The tool requesting permission\"\n)\n,\ninput\n:\nz\n.\nobject\n(\n{\n}\n)\n.\npassthrough\n(\n)\n.\ndescribe\n(\n\"The input for the tool\"\n)\n,\n}\n,\nasync\n(\n{\ntool_name\n,\ninput\n}\n)\n=>\n{\nreturn\n{\ncontent\n:\n[\n{\ntype\n:\n\"text\"\n,\ntext\n:\nJSON\n.\nstringify\n(\nJSON\n.\nstringify\n(\ninput\n)\n.\nincludes\n(\n\"allow\"\n)\n?\n{\nbehavior\n:\n\"allow\"\n,\nupdatedInput\n:\ninput\n,\n}\n:\n{\nbehavior\n:\n\"deny\"\n,\nmessage\n:\n\"Permission denied by test approval_prompt tool\"\n,\n}\n)\n,\n}\n,\n]\n,\n}\n;\n}\n)\n;\nTo use this tool, add your MCP server (eg. with\n--mcp-config\n), then invoke the SDK like so:\nclaude\n-p\n\"...\"\n\\\n--permission-prompt-tool mcp__test-server__approval_prompt\n\\\n--mcp-config my-config.json\nUsage notes:\nUse\nupdatedInput\nto tell the model that the permission prompt mutated its input; otherwise, set\nupdatedInput\nto the original input, as in the example above. For example, if the tool shows a file edit diff to the user and lets them edit the diff manually, the permission prompt tool should return that updated edit.\nThe payload must be JSON-stringified\n​\nAvailable CLI options\nThe SDK leverages all the CLI options available in Claude Code. Here are the key ones for SDK usage:\nFlag\nDescription\nExample\n--print\n,\n-p\nRun in non-interactive mode\nclaude -p \"query\"\n--output-format\nSpecify output format (\ntext\n,\njson\n,\nstream-json\n)\nclaude -p --output-format json\n--resume\n,\n-r\nResume a conversation by session ID\nclaude --resume abc123\n--continue\n,\n-c\nContinue the most recent conversation\nclaude --continue\n--verbose\nEnable verbose logging\nclaude --verbose\n--max-turns\nLimit agentic turns in non-interactive mode\nclaude --max-turns 3\n--system-prompt\nOverride system prompt (only with\n--print\n)\nclaude --system-prompt \"Custom instruction\"\n--append-system-prompt\nAppend to system prompt (only with\n--print\n)\nclaude --append-system-prompt \"Custom instruction\"\n--allowedTools\nSpace-separated list of allowed tools, or\nstring of comma-separated list of allowed tools\nclaude --allowedTools mcp__slack mcp__filesystem\nclaude --allowedTools \"Bash(npm install),mcp__filesystem\"\n--disallowedTools\nSpace-separated list of denied tools, or\nstring of comma-separated list of denied tools\nclaude --disallowedTools mcp__splunk mcp__github\nclaude --disallowedTools \"Bash(git commit),mcp__github\"\n--mcp-config\nLoad MCP servers from a JSON file\nclaude --mcp-config servers.json\n--permission-prompt-tool\nMCP tool for handling permission prompts (only with\n--print\n)\nclaude --permission-prompt-tool mcp__auth__prompt\nFor a complete list of CLI options and features, see the\nCLI reference\ndocumentation.\n​\nOutput formats\nThe SDK supports multiple output formats:\n​\nText output (default)\nReturns just the response text:\n$ claude\n-p\n\"Explain file src/components/Header.tsx\"\n# Output: This is a React component showing...\n​\nJSON output\nReturns structured data including metadata:\n$ claude\n-p\n\"How does the data layer work?\"\n--output-format json\nResponse format:\n{\n\"type\"\n:\n\"result\"\n,\n\"subtype\"\n:\n\"success\"\n,\n\"total_cost_usd\"\n:\n0.003\n,\n\"is_error\"\n:\nfalse\n,\n\"duration_ms\"\n:\n1234\n,\n\"duration_api_ms\"\n:\n800\n,\n\"num_turns\"\n:\n6\n,\n\"result\"\n:\n\"The response text here...\"\n,\n\"session_id\"\n:\n\"abc123\"\n}\n​\nStreaming JSON output\nStreams each message as it is received:\n$ claude\n-p\n\"Build an application\"\n--output-format stream-json\nEach conversation begins with an initial\ninit\nsystem message, followed by a list of user and assistant messages, followed by a final\nresult\nsystem message with stats. Each message is emitted as a separate JSON object.\n​\nMessage schema\nMessages returned from the JSON API are strictly typed according to the following schema:\ntype\nSDKMessage\n=\n// An assistant message\n|\n{\ntype\n:\n\"assistant\"\n;\nmessage\n:\nMessage\n;\n// from Anthropic SDK\nsession_id\n:\nstring\n;\n}\n// A user message\n|\n{\ntype\n:\n\"user\"\n;\nmessage\n:\nMessageParam\n;\n// from Anthropic SDK\nsession_id\n:\nstring\n;\n}\n// Emitted as the last message\n|\n{\ntype\n:\n\"result\"\n;\nsubtype\n:\n\"success\"\n;\nduration_ms\n:\nfloat\n;\nduration_api_ms\n:\nfloat\n;\nis_error\n:\nboolean\n;\nnum_turns\n:\nint\n;\nresult\n:\nstring\n;\nsession_id\n:\nstring\n;\ntotal_cost_usd\n:\nfloat\n;\n}\n// Emitted as the last message, when we've reached the maximum number of turns\n|\n{\ntype\n:\n\"result\"\n;\nsubtype\n:\n\"error_max_turns\"\n|\n\"error_during_execution\"\n;\nduration_ms\n:\nfloat\n;\nduration_api_ms\n:\nfloat\n;\nis_error\n:\nboolean\n;\nnum_turns\n:\nint\n;\nsession_id\n:\nstring\n;\ntotal_cost_usd\n:\nfloat\n;\n}\n// Emitted as the first message at the start of a conversation\n|\n{\ntype\n:\n\"system\"\n;\nsubtype\n:\n\"init\"\n;\napiKeySource\n:\nstring\n;\ncwd\n:\nstring\n;\nsession_id\n:\nstring\n;\ntools\n:\nstring\n[\n]\n;\nmcp_servers\n:\n{\nname\n:\nstring\n;\nstatus\n:\nstring\n;\n}\n[\n]\n;\nmodel\n:\nstring\n;\npermissionMode\n:\n\"default\"\n|\n\"acceptEdits\"\n|\n\"bypassPermissions\"\n|\n\"plan\"\n;\n}\n;\nWe will soon publish these types in a JSONSchema-compatible format. We use semantic versioning for the main Claude Code package to communicate breaking changes to this format.\nMessage\nand\nMessageParam\ntypes are available in Anthropic SDKs. For example, see the Anthropic\nTypeScript\nand\nPython\nSDKs.\n​\nInput formats\nThe SDK supports multiple input formats:\n​\nText input (default)\nInput text can be provided as an argument:\n$ claude\n-p\n\"Explain this code\"\nOr input text can be piped via stdin:\n$\necho\n\"Explain this code\"\n|\nclaude\n-p\n​\nStreaming JSON input\nA stream of messages provided via\nstdin\nwhere each message represents a user turn. This allows multiple turns of a conversation without re-launching the\nclaude\nbinary and allows providing guidance to the model while it is processing a request.\nEach message is a JSON ‘User message’ object, following the same format as the output message schema. Messages are formatted using the\njsonl\nformat where each line of input is a complete JSON object. Streaming JSON input requires\n-p\nand\n--output-format stream-json\n.\nCurrently this is limited to text-only user messages.\n$\necho\n'{\"type\":\"user\",\"message\":{\"role\":\"user\",\"content\":[{\"type\":\"text\",\"text\":\"Explain this code\"}]}}'\n|\nclaude\n-p\n--output-format\n=\nstream-json --input-format\n=\nstream-json\n--verbose\n​\nExamples\n​\nSimple script integration\n#!/bin/bash\n# Simple function to run Claude and check exit code\nrun_claude\n(\n)\n{\nlocal\nprompt\n=\n\"\n$1\n\"\nlocal\noutput_format\n=\n\"\n${2\n:-\ntext}\n\"\nif\nclaude\n-p\n\"\n$prompt\n\"\n--output-format\n\"\n$output_format\n\"\n;\nthen\necho\n\"Success!\"\nelse\necho\n\"Error: Claude failed with exit code\n$?\n\"\n>\n&2\nreturn\n1\nfi\n}\n# Usage examples\nrun_claude\n\"Write a Python function to read CSV files\"\nrun_claude\n\"Optimize this database query\"\n\"json\"\n​\nProcessing files with Claude\n# Process a file through Claude\n$\ncat\nmycode.py\n|\nclaude\n-p\n\"Review this code for bugs\"\n# Process multiple files\n$\nfor\nfile\nin\n*.js\n;\ndo\necho\n\"Processing\n$file\n...\"\nclaude\n-p\n\"Add JSDoc comments to this file:\"\n<\n\"\n$file\n\"\n>\n\"\n${file}\n.documented\"\ndone\n# Use Claude in a pipeline\n$\ngrep\n-l\n\"TODO\"\n*.py\n|\nwhile\nread\nfile\n;\ndo\nclaude\n-p\n\"Fix all TODO items in this file\"\n<\n\"\n$file\n\"\ndone\n​\nSession management\n# Start a session and capture the session ID\n$ claude\n-p\n\"Initialize a new project\"\n--output-format json\n|\njq\n-r\n'.session_id'\n>\nsession.txt\n# Continue with the same session\n$ claude\n-p\n--resume\n\"\n$(\ncat\nsession.txt\n)\n\"\n\"Add unit tests\"\n​\nBest practices\nUse JSON output format\nfor programmatic parsing of responses:\n# Parse JSON response with jq\nresult\n=\n$(\nclaude\n-p\n\"Generate code\"\n--output-format json\n)\ncode\n=\n$(\necho\n\"\n$result\n\"\n|\njq\n-r\n'.result'\n)\ncost\n=\n$(\necho\n\"\n$result\n\"\n|\njq\n-r\n'.cost_usd'\n)\nHandle errors gracefully\n- check exit codes and stderr:\nif\n!\nclaude\n-p\n\"\n$prompt\n\"\n2\n>\nerror.log\n;\nthen\necho\n\"Error occurred:\"\n>\n&2\ncat\nerror.log\n>\n&2\nexit\n1\nfi\nUse session management\nfor maintaining context in multi-turn conversations\nConsider timeouts\nfor long-running operations:\ntimeout\n300\nclaude\n-p\n\"\n$complex_prompt\n\"\n||\necho\n\"Timed out after 5 minutes\"\nRespect rate limits\nwhen making multiple requests by adding delays between calls\n​\nReal-world applications\nThe Claude Code SDK enables powerful integrations with your development workflow. One notable example is the\nClaude Code GitHub Actions\n, which uses the SDK to provide automated code review, PR creation, and issue triage capabilities directly in your GitHub workflow.\n​\nRelated resources\nCLI usage and controls\n- Complete CLI documentation\nGitHub Actions integration\n- Automate your GitHub workflow with Claude\nCommon workflows\n- Step-by-step guides for common use cases\nWas this page helpful?\nYes\nNo\nGitHub Actions\nTroubleshooting\nOn this page\nAuthentication\nBasic SDK usage\nCommand line\nTypeScript\nPython\nAdvanced usage\nMulti-turn conversations\nCustom system prompts\nMCP Configuration\nCustom permission prompt tool\nAvailable CLI options\nOutput formats\nText output (default)\nJSON output\nStreaming JSON output\nMessage schema\nInput formats\nText input (default)\nStreaming JSON input\nExamples\nSimple script integration\nProcessing files with Claude\nSession management\nBest practices\nReal-world applications\nRelated resources",
  "links": [
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/corporate-proxy",
      "text": "Corporate proxy"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/llm-gateway",
      "text": "LLM gateway"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/devcontainer",
      "text": "Development containers"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/iam",
      "text": "Identity and Access Management"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/security",
      "text": "Security"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/monitoring-usage",
      "text": "Monitoring"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/costs",
      "text": "Costs"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/cli-reference",
      "text": "CLI reference"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/interactive-mode",
      "text": "Interactive mode"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/slash-commands",
      "text": "Slash commands"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/settings",
      "text": "Settings"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/data-usage",
      "text": "Data usage"
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/legal-and-compliance",
      "text": "Legal and compliance"
    }
  ],
  "metadata": {
    "scraped_at": "2025-06-23T15:07:28.859533",
    "word_count": 2755,
    "link_count": 13,
    "content_length": 17162
  }
}