URL: https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prompt-improver
TITLE: Use our prompt improver to optimize your prompts - Anthropic
SCRAPED: 2025-06-23T15:07:48.567795
WORD_COUNT: 1032
LINKS_FOUND: 18
================================================================================

Anthropic
home page
English
Search...
Search...
Navigation
Prompt engineering
Use our prompt improver to optimize your prompts
Welcome
Developer Guide
API Guide
Claude Code
Model Context Protocol (MCP)
Resources
Release Notes
Documentation
Developer Discord
Support
First steps
Intro to Claude
Get started
Models & pricing
Models overview
Choosing a model
Migrating to Claude 4
Model deprecations
Pricing
Learn about Claude
Building with Claude
Features overview
Context windows
Glossary
Capabilities
Prompt caching
Extended thinking
Streaming Messages
Batch processing
Citations
Multilingual support
Token counting
Embeddings
Vision
PDF support
Files API
Google Sheets add-on
Tools
Overview
How to implement tool use
Token-efficient tool use
Fine-grained tool streaming
Bash tool
Code execution tool
Computer use tool
Text editor tool
Web search tool
Model Context Protocol (MCP)
MCP connector
Remote MCP servers
Use cases
Overview
Ticket routing
Customer support agent
Content moderation
Legal summarization
Prompt engineering
Overview
Claude 4 best practices
Prompt generator
Use prompt templates
Prompt improver
Be clear and direct
Use examples (multishot prompting)
Let Claude think (CoT)
Use XML tags
Give Claude a role (system prompts)
Prefill Claude's response
Chain complex prompts
Long context tips
Extended thinking tips
Test & evaluate
Define success criteria
Develop test cases
Using the Evaluation Tool
Reducing latency
Strengthen guardrails
Reduce hallucinations
Increase output consistency
Mitigate jailbreaks
Streaming refusals
Reduce prompt leak
Keep Claude in character
Legal center
Anthropic Privacy Policy
Security and compliance
Our prompt improver is compatible with all Claude models, including those with extended thinking capabilities. For prompting tips specific to extended thinking models, see
here
.
The prompt improver helps you quickly iterate and improve your prompts through automated analysis and enhancement. It excels at making prompts more robust for complex tasks that require high accuracy.
​
Before you begin
You’ll need:
A
prompt template
to improve
Feedback on current issues with Claude’s outputs (optional but recommended)
Example inputs and ideal outputs (optional but recommended)
​
How the prompt improver works
The prompt improver enhances your prompts in 4 steps:
Example identification
: Locates and extracts examples from your prompt template
Initial draft
: Creates a structured template with clear sections and XML tags
Chain of thought refinement
: Adds and refines detailed reasoning instructions
Example enhancement
: Updates examples to demonstrate the new reasoning process
You can watch these steps happen in real-time in the improvement modal.
​
What you get
The prompt improver generates templates with:
Detailed chain-of-thought instructions that guide Claude’s reasoning process and typically improve its performance
Clear organization using XML tags to separate different components
Standardized example formatting that demonstrates step-by-step reasoning from input to output
Strategic prefills that guide Claude’s initial responses
While examples appear separately in the Workbench UI, they’re included at the start of the first user message in the actual API call. View the raw format by clicking ”
</> Get Code
” or insert examples as raw text via the Examples box.
​
How to use the prompt improver
Submit your prompt template
Add any feedback about issues with Claude’s current outputs (e.g., “summaries are too basic for expert audiences”)
Include example inputs and ideal outputs
Review the improved prompt
​
Generate test examples
Don’t have examples yet? Use our
Test Case Generator
to:
Generate sample inputs
Get Claude’s responses
Edit the responses to match your ideal outputs
Add the polished examples to your prompt
​
When to use the prompt improver
The prompt improver works best for:
Complex tasks requiring detailed reasoning
Situations where accuracy is more important than speed
Problems where Claude’s current outputs need significant improvement
For latency or cost-sensitive applications, consider using simpler prompts. The prompt improver creates templates that produce longer, more thorough, but slower responses.
​
Example improvement
Here’s how the prompt improver enhances a basic classification prompt:
Original prompt
From the following list of Wikipedia article titles, identify which article this sentence came from.
Respond with just the article title and nothing else.
Article titles:
{{titles}}
Sentence to classify:
{{sentence}}
Improved prompt
You are an intelligent text classification system specialized in matching sentences to Wikipedia article titles. Your task is to identify which Wikipedia article a given sentence most likely belongs to, based on a provided list of article titles.
First, review the following list of Wikipedia article titles:
<article_titles>
{{titles}}
</article_titles>
Now, consider this sentence that needs to be classified:
<sentence_to_classify>
{{sentence}}
</sentence_to_classify>
Your goal is to determine which article title from the provided list best matches the given sentence. Follow these steps:
1. List the key concepts from the sentence
2. Compare each key concept with the article titles
3. Rank the top 3 most relevant titles and explain why they are relevant
4. Select the most appropriate article title that best encompasses or relates to the sentence's content
Wrap your analysis in <analysis> tags. Include the following:
- List of key concepts from the sentence
- Comparison of each key concept with the article titles
- Ranking of top 3 most relevant titles with explanations
- Your final choice and reasoning
After your analysis, provide your final answer: the single most appropriate Wikipedia article title from the list.
Output only the chosen article title, without any additional text or explanation.
Notice how the improved prompt:
Adds clear step-by-step reasoning instructions
Uses XML tags to organize content
Provides explicit output formatting requirements
Guides Claude through the analysis process
​
Troubleshooting
Common issues and solutions:
Examples not appearing in output
: Check that examples are properly formatted with XML tags and appear at the start of the first user message
Chain of thought too verbose
: Add specific instructions about desired output length and level of detail
Reasoning steps don’t match your needs
: Modify the steps section to match your specific use case
​
Next steps
Prompt library
Get inspired by example prompts for various tasks.
GitHub prompting tutorial
Learn prompting best practices with our interactive tutorial.
Test your prompts
Use our evaluation tool to test your improved prompts.
Was this page helpful?
Yes
No
Use prompt templates
Be clear and direct
On this page
Before you begin
How the prompt improver works
What you get
How to use the prompt improver
Generate test examples
When to use the prompt improver
Example improvement
Troubleshooting
Next steps