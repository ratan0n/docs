URL: https://docs.anthropic.com/en/docs/agents-and-tools/tool-use/fine-grained-tool-streaming
TITLE: Fine-grained tool streaming - Anthropic
SCRAPED: 2025-06-23T15:07:42.242719
WORD_COUNT: 728
LINKS_FOUND: 35
================================================================================

Anthropic
home page
English
Search...
Search...
Navigation
Tools
Fine-grained tool streaming
Welcome
Developer Guide
API Guide
Claude Code
Model Context Protocol (MCP)
Resources
Release Notes
Documentation
Developer Discord
Support
First steps
Intro to Claude
Get started
Models & pricing
Models overview
Choosing a model
Migrating to Claude 4
Model deprecations
Pricing
Learn about Claude
Building with Claude
Features overview
Context windows
Glossary
Capabilities
Prompt caching
Extended thinking
Streaming Messages
Batch processing
Citations
Multilingual support
Token counting
Embeddings
Vision
PDF support
Files API
Google Sheets add-on
Tools
Overview
How to implement tool use
Token-efficient tool use
Fine-grained tool streaming
Bash tool
Code execution tool
Computer use tool
Text editor tool
Web search tool
Model Context Protocol (MCP)
MCP connector
Remote MCP servers
Use cases
Overview
Ticket routing
Customer support agent
Content moderation
Legal summarization
Prompt engineering
Overview
Claude 4 best practices
Prompt generator
Use prompt templates
Prompt improver
Be clear and direct
Use examples (multishot prompting)
Let Claude think (CoT)
Use XML tags
Give Claude a role (system prompts)
Prefill Claude's response
Chain complex prompts
Long context tips
Extended thinking tips
Test & evaluate
Define success criteria
Develop test cases
Using the Evaluation Tool
Reducing latency
Strengthen guardrails
Reduce hallucinations
Increase output consistency
Mitigate jailbreaks
Streaming refusals
Reduce prompt leak
Keep Claude in character
Legal center
Anthropic Privacy Policy
Security and compliance
Tool use now supports fine-grained streaming for parameter values. This allows developers to stream tool use parameters without buffering / JSON validation, reducing the latency to begin receiving large parameters.
Fine-grained tool streaming is a beta feature. Please make sure to evaluate your responses before using it in production.
Please use
this form
to provide feedback on the quality of the model responses, the API itself, or the quality of the documentation—we cannot wait to hear from you!
When using fine-grained tool streaming, you may potentially receive invalid or partial JSON inputs. Please make sure to account for these edge cases in your code.
​
How to use fine-grained tool streaming
To use this beta feature, simply add the beta header
fine-grained-tool-streaming-2025-05-14
to a tool use request and turn on streaming.
Here’s an example of how to use fine-grained tool streaming with the API:
Shell
Python
TypeScript
curl
https://api.anthropic.com/v1/messages
\
-H
"content-type: application/json"
\
-H
"x-api-key:
$ANTHROPIC_API_KEY
"
\
-H
"anthropic-version: 2023-06-01"
\
-H
"anthropic-beta: fine-grained-tool-streaming-2025-05-14"
\
-d
'
{
"model"
:
"claude-sonnet-4-20250514"
,
"max_tokens"
:
65536
,
"tools"
:
[
{
"name"
:
"make_file"
,
"description"
:
"Write text to a file"
,
"input_schema"
:
{
"type"
:
"object"
,
"properties"
:
{
"filename"
:
{
"type"
:
"string"
,
"description"
:
"The filename to write text to"
}
,
"lines_of_text"
:
{
"type"
:
"array"
,
"description"
:
"An array of lines of text to write to the file"
}
}
,
"required"
:
[
"filename"
,
"lines_of_text"
]
}
}
]
,
"messages"
:
[
{
"role"
:
"user"
,
"content"
:
"Can you write a long poem and make a file called poem.txt?"
}
]
,
"stream"
:
true
}
' | jq '
.usage'
In this example, fine-grained tool streaming enables Claude to stream the lines of a long poem into the tool call
make_file
without buffering to validate if the
lines_of_text
parameter is valid JSON. This means you can see the parameter stream as it arrives, without having to wait for the entire parameter to buffer and validate.
With fine-grained tool streaming, tool use chunks start streaming faster, and are often longer and contain fewer word breaks. This is due to differences in chunking behavior.
Example:
Without fine-grained streaming (15s delay):
Chunk 1: '{"'
Chunk 2: 'query": "Ty'
Chunk 3: 'peScri'
Chunk 4: 'pt 5.0 5.1 '
Chunk 5: '5.2 5'
Chunk 6: '.3'
Chunk 8: ' new f'
Chunk 9: 'eatur'
...
With fine-grained streaming (3s delay):
Chunk 1: '{"query": "TypeScript 5.0 5.1 5.2 5.3'
Chunk 2: ' new features comparison'
Because fine-grained streaming sends parameters without buffering or JSON validation, there is no guarantee that the resulting stream will complete in a valid JSON string.
Particularly, if the
stop reason
max_tokens
is reached, the stream may end midway through a parameter and may be incomplete. You will generally have to write specific support to handle when
max_tokens
is reached.
Was this page helpful?
Yes
No
Token-efficient tool use
Bash tool
On this page
How to use fine-grained tool streaming