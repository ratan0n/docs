URL: https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/long-context-tips
TITLE: Long context prompting tips - Anthropic
SCRAPED: 2025-06-23T15:07:50.124965
WORD_COUNT: 692
LINKS_FOUND: 12
================================================================================

Anthropic
home page
English
Search...
Search...
Navigation
Prompt engineering
Long context prompting tips
Welcome
Developer Guide
API Guide
Claude Code
Model Context Protocol (MCP)
Resources
Release Notes
Documentation
Developer Discord
Support
First steps
Intro to Claude
Get started
Models & pricing
Models overview
Choosing a model
Migrating to Claude 4
Model deprecations
Pricing
Learn about Claude
Building with Claude
Features overview
Context windows
Glossary
Capabilities
Prompt caching
Extended thinking
Streaming Messages
Batch processing
Citations
Multilingual support
Token counting
Embeddings
Vision
PDF support
Files API
Google Sheets add-on
Tools
Overview
How to implement tool use
Token-efficient tool use
Fine-grained tool streaming
Bash tool
Code execution tool
Computer use tool
Text editor tool
Web search tool
Model Context Protocol (MCP)
MCP connector
Remote MCP servers
Use cases
Overview
Ticket routing
Customer support agent
Content moderation
Legal summarization
Prompt engineering
Overview
Claude 4 best practices
Prompt generator
Use prompt templates
Prompt improver
Be clear and direct
Use examples (multishot prompting)
Let Claude think (CoT)
Use XML tags
Give Claude a role (system prompts)
Prefill Claude's response
Chain complex prompts
Long context tips
Extended thinking tips
Test & evaluate
Define success criteria
Develop test cases
Using the Evaluation Tool
Reducing latency
Strengthen guardrails
Reduce hallucinations
Increase output consistency
Mitigate jailbreaks
Streaming refusals
Reduce prompt leak
Keep Claude in character
Legal center
Anthropic Privacy Policy
Security and compliance
While these tips apply broadly to all Claude models, you can find prompting tips specific to extended thinking models
here
.
Claude’s extended context window (200K tokens for Claude 3 models) enables handling complex, data-rich tasks. This guide will help you leverage this power effectively.
​
Essential tips for long context prompts
Put longform data at the top
: Place your long documents and inputs (~20K+ tokens) near the top of your prompt, above your query, instructions, and examples. This can significantly improve Claude’s performance across all models.
Queries at the end can improve response quality by up to 30% in tests, especially with complex, multi-document inputs.
Structure document content and metadata with XML tags
: When using multiple documents, wrap each document in
<document>
tags with
<document_content>
and
<source>
(and other metadata) subtags for clarity.
Example multi-document structure
<
documents
>
<
document
index
=
"
1
"
>
<
source
>
annual_report_2023.pdf
</
source
>
<
document_content
>
{{ANNUAL_REPORT}}
</
document_content
>
</
document
>
<
document
index
=
"
2
"
>
<
source
>
competitor_analysis_q2.xlsx
</
source
>
<
document_content
>
{{COMPETITOR_ANALYSIS}}
</
document_content
>
</
document
>
</
documents
>
Analyze the annual report and competitor analysis. Identify strategic advantages and recommend Q3 focus areas.
Ground responses in quotes
: For long document tasks, ask Claude to quote relevant parts of the documents first before carrying out its task. This helps Claude cut through the “noise” of the rest of the document’s contents.
Example quote extraction
You are an AI physician's assistant. Your task is to help doctors diagnose possible patient illnesses.
<
documents
>
<
document
index
=
"
1
"
>
<
source
>
patient_symptoms.txt
</
source
>
<
document_content
>
{{PATIENT_SYMPTOMS}}
</
document_content
>
</
document
>
<
document
index
=
"
2
"
>
<
source
>
patient_records.txt
</
source
>
<
document_content
>
{{PATIENT_RECORDS}}
</
document_content
>
</
document
>
<
document
index
=
"
3
"
>
<
source
>
patient01_appt_history.txt
</
source
>
<
document_content
>
{{PATIENT01_APPOINTMENT_HISTORY}}
</
document_content
>
</
document
>
</
documents
>
Find quotes from the patient records and appointment history that are relevant to diagnosing the patient's reported symptoms. Place these in
<
quotes
>
tags. Then, based on these quotes, list all information that would help the doctor diagnose the patient's symptoms. Place your diagnostic information in
<
info
>
tags.
Prompt library
Get inspired by a curated selection of prompts for various tasks and use cases.
GitHub prompting tutorial
An example-filled tutorial that covers the prompt engineering concepts found in our docs.
Google Sheets prompting tutorial
A lighter weight version of our prompt engineering tutorial via an interactive spreadsheet.
Was this page helpful?
Yes
No
Chain complex prompts
Extended thinking tips
On this page
Essential tips for long context prompts