URL: https://docs.anthropic.com/en/docs/claude-code/costs
TITLE: Manage costs effectively - Anthropic
SCRAPED: 2025-06-23T15:07:31.901426
WORD_COUNT: 547
LINKS_FOUND: 2
================================================================================

Anthropic
home page
English
Search...
Search...
Navigation
Administration
Manage costs effectively
Welcome
Developer Guide
API Guide
Claude Code
Model Context Protocol (MCP)
Resources
Release Notes
Documentation
Developer Discord
Support
Getting started
Overview
Set up
Quickstart
Memory management
Common workflows
Build with Claude
Add Claude Code to your IDE
Model Context Protocol (MCP)
GitHub Actions
Claude Code SDK
Troubleshooting
Deployment
Overview
Amazon Bedrock
Google Vertex AI
Corporate proxy
LLM gateway
Development containers
Administration
Identity and Access Management
Security
Monitoring
Costs
Reference
CLI reference
Interactive mode
Slash commands
Settings
Resources
Data usage
Legal and compliance
Claude Code consumes tokens for each interaction. The average cost is $6 per developer per day, with daily costs remaining below $12 for 90% of users.
For team usage, Claude Code charges by API token consumption. On average, Claude Code costs ~$50-60/developer per month with Sonnet 4 though there is large variance depending on how many instances users are running and whether they’re using it in automation.
​
Track your costs
Use
/cost
to see current session usage
Anthropic Console users
:
Check
historical usage
in the Anthropic Console (requires Admin or Billing role)
Set
workspace spend limits
for the Claude Code workspace (requires Admin role)
Pro and Max plan users
: Usage is included in your subscription
​
Managing costs for teams
When using Anthropic API, you can limit the total Claude Code workspace spend. To configure,
follow these instructions
. Admins can view cost and usage reporting by
following these instructions
.
On Bedrock and Vertex, Claude Code does not send metrics from your cloud. In order to get cost metrics, several large enterprises reported using
LiteLLM
, which is an open-source tool that helps companies
track spend by key
. This project is unaffiliated with Anthropic and we have not audited its security.
​
Reduce token usage
Compact conversations:
Claude uses auto-compact by default when context exceeds 95% capacity
Toggle auto-compact: Run
/config
and navigate to “Auto-compact enabled”
Use
/compact
manually when context gets large
Add custom instructions:
/compact Focus on code samples and API usage
Customize compaction by adding to CLAUDE.md:
#
Summary instructions
When you are using compact, please focus on test output and code changes
Write specific queries:
Avoid vague requests that trigger unnecessary scanning
Break down complex tasks:
Split large tasks into focused interactions
Clear history between tasks:
Use
/clear
to reset context
Costs can vary significantly based on:
Size of codebase being analyzed
Complexity of queries
Number of files being searched or modified
Length of conversation history
Frequency of compacting conversations
Background processes (haiku generation, conversation summarization)
​
Background token usage
Claude Code uses tokens for some background functionality even when idle:
Haiku generation
: Small creative messages that appear while you type (approximately 1 cent per day)
Conversation summarization
: Background jobs that summarize previous conversations for the
claude --resume
feature
Command processing
: Some commands like
/cost
may generate requests to check status
These background processes consume a small amount of tokens (typically under $0.04 per session) even without active interaction.
For team deployments, we recommend starting with a small pilot group to
establish usage patterns before wider rollout.
Was this page helpful?
Yes
No
Monitoring
CLI reference
On this page
Track your costs
Managing costs for teams
Reduce token usage
Background token usage