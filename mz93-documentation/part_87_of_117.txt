# RATANON/MZ93-DOCUMENTATION - Part 87/112

---
**Dataset:** ratanon/mz93-documentation
**Part:** 87 of 112
**GitHub:** https://github.com/ratan0n/docs/tree/main/mz93-documentation
**Size:** ~68.9 KB
---

# Document 2042: Setting Up a Certificate Authority - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204643870
**Categories:** chunks_index.json

This page explains how to set up a CA. In the following example it is called Test CA. To start Test CA, we need a private key. This is the top secret of the CA. If this is compromised then the CA is doomed! All certificates issued by this CA will be revoked. This is why the root private key is so important and often kept off-line necessitating a multi-tier hierarchy. For our Test CA, we need to create the key-pair and create a Certificate Signing Request (CSR) for the root CA's public key. This CSR i s f or the CA itself. These two steps can be done in a single command using SSL as follows: $ openssl req -new -keyout cakey.pem -out careq.pem When prompted for Common Name , the hostname where the certificate is valid should be entered, for example localhost. Other values can be anything. Now we need to generate a certificate out of Test CA's CSR. Obviously this would be self signed. The following OpenSSL command is used to generate a self signed certificate form the CSR. openssl x509 -signkey cakey.pem -req -days 3650 -in careq.pem -out caroot.cer -extensions v3_ca At this point you have self signed root certificate of our Test CA. This certificate, caroot.cer , along with the private key, cakey.pem , will be used to sign others certificates. This root public certificate should be publicly available and must be trusted by programs. Test CA is ready, you need to note that when a CA issues a new certificate, it will put a unique serial number into that certificate. So you need to tell OpenSSL what is the next serial number to use. To do that, create a serial.txt file containing a serial number in the same directory as cakey.pem and caroot.cer . $ echo 1234 > serial.txt

---

# Document 2043: Disk Forwarding Agent Configuration - Batch - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204640925/Disk+Forwarding+Agent+Configuration+-+Batch
**Categories:** chunks_index.json

You open the Disk forwarding agent configuration dialog from a workflow configuration. To open the Disk collection agent configuration, click Build  New Configuration . Select Workflow from the Configurations dialog. When prompted to Select workflow type, select Batch . Click Add agent and select Disk from the Forwarding tab of the Agent Selection dialog. Disk Tab Disk forwarding agent configuration - Disk tab Setting Description Setting Description Input Type The agent can act on two input types. Depending on which one the agent is configured to work with, the behavior will differ. The default input type is bytearray, that is the agent expects bytearrays. If nothing else is stated the documentation refer to input of bytearray. If the input type is MultForwardingUDR , the behavior is different. For further information about the agent's behavior in MultiForwardingUDR input, see Disk Forwarding MultiForwardingUDR Input - Batch . Directory Enter the absolute pathname of the target directory on the local file system of the EC, where the forwarded files will be stored. The files will be temporarily stored in the automatically created subdirectory DR_TMP_DIR , in the target directory. When an End Batch message is received, the files are moved from the subdirectory to the target directory. Note! When the File already exists! error is thrown during a workflow execution, the temporary file created in the DR_TMP_DIR directory will not be removed. If changing to a new path, you will need to remove the temporary file created in the previous path's DR_TMP_DIR before running the workflow with the new directory. Create Directory Check to create the directory, or the directory structure, of the path that you specify in Directory. Note! The directories are created when the workflow is executed. Compression Select the compression type of the target files. Determines if the agent will compress the files or not. No Compression - agent does not compress the files. Default setting. Gzip - agent compresses the files using gzip. Note! No extra extension will be appended to the target filenames, even if compression is selected. The configuration of the filenames is managed in the Filename Template tab only. Command If a Command is supplied, it will be executed on each successfully closed temporary file, using the parameter values declared in Arguments. Refer to the section, Commands in Desktop User's Guide . Note! At this point the temporary file is created and closed, however the final filename has not yet been created. The entered Command has to exist in the execution environment, either including an absolute path, or to be found in the PATH for the execution environment. Arguments This field is optional. Each entered parameter value has to be separated from the preceding value with a space. The temporary filename is inserted as the second last parameter, and the final filename is inserted as the last parameter, automatically. This means that if, for instance, no parameter is given in the field, the arguments will be as follows: $1=<temporary_filename> $2=<final_filename> If three parameters are given in the field Arguments, the arguments are set as: $1=<parameter_value_#1> $2=<parameter_value_#2> $3=<parameter_value_#3> $4=<temporary_filename> $5=<final_filename> Produce Empty Files If enabled, files will be produced although containing no data. Filename Template Tab For a detailed description of the Filename Template tab, see Filename Template Tab in Workflow Template .

---

# Document 2044: Data Veracity Collection Example - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204738363/Data+Veracity+Collection+Example
**Categories:** chunks_index.json

This section contains one example for the Data Veracity Collection agent. Example Workflow: Example Data UDRs for the Data Veracity Collection workflow can be created beforehand using the Data Veracity Forwarding workflow found in Data Veracity Forwarding Example . This is a workflow example for the Data Veracity Collection agent. Open Data Veracity Collection workflow example This workflow collects the UDRs from the Data Veracity table according to the selected Error Code as specified in Data Veracity Profile. The Data Veracity Collection agent forwards UDRType(Dataveracity) to Analysis_1 agent, and we cast the input.errorUDR to the Ultra that is expected by Encoder_1 agent, and output to Disk.

---

# Document 2045: Ultra Format Definition Language (UFDL) - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204647680/Ultra+Format+Definition+Language+UFDL
**Categories:** chunks_index.json

The MediationZone Ultra formatting subsystem manages the decoding of information that originates from network elements. The information is converted to internal UDRs (usage data records) that can be processed by MediationZone agents, such as the Analysis Agent and Aggregation Agent. It also provides functionality to encode the internal UDRs to different output formats. Ultra is configured with a language called the Ultra Format Definition Language (UFDL). There are six main building blocks of UFDL: External formats - describes the way data is structured physically. This information is used by Ultra when decoding and encoding the data to include real-time requests and answer messages. Internal formats - describes a UDR (fields and types) that can be accessed from a MediationZone agent In maps - describes how to map the information of an external format to an internal format (for a decoder) Out maps - describes how to map the information of an internal format to an external format (for an encoder) Decoders  a declaration of a decoder that converts an external format to an internal format Encoders - a declaration of an encoder that converts an internal format to an external format Open Relationship between UFDL building blocks Open Example of data converted using Decoder and Encoder agents Ultra includes support for, and has been deployed using, numerous different physical formats. Direct support is included for any format described in ASN.1 (BER and PER), and XML Schema (XML). Ultra also contains a specification language to describe other physical formats, such as proprietary tagged records, fixed size records and binary data structures down to bit-level. Among other formats, this language has been used to provide support for AMA, INAMA, TAP2, TAP3, EMI, and a number of proprietary equipment vendor formats. It is important to note that based on format specifications, MediationZone generates code for decoding and encoding functionality automatically. This means that there is no interpretation, with associated performance penalties, performed at runtime. The following two figures illustrate how raw source data is defined as a UDR called udrAsciiSwitch in ULTRA. Open Raw source data file content Open UDR representation in ULTRA of raw source data

---

# Document 2046: Periods Data Model Rules - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205656167/Periods+Data+Model+Rules
**Categories:** chunks_index.json

The UDRs in PCC.Periods contain information about different time periods when rules associated with the periods should be active. The fields are used for defining a period of time during which a rule is active or not active. If all the fields (except StartTime and StopTime) are left empty, the period will always be active. See APL - PCC Runtime Support for further information about how to use the PCC.Periods UDRs with APL and REST HTTP Interface for information on how to access the PCC.Periods UDRs from the REST HTTP interface. Periods UDR Field Description Field Description ID (int) The unique ID of the period. Name (string) The name of the period, e g used by the Rules UDR. StartTime (date) Defines the start date and time for this period. This is the overall start time for the period and this field is mandatory for all periods. StopTime (date) Defines the end date and time for this period. This is the overall end time for the period and this field is mandatory for all periods. StartTimeOfDay (date) Defines the start time of the day in hours and minutes for this period. The rules using this period will start being active at this time of day. The format should be HH:MM. StopTimeOfDay (date) Defines the end time of the day in hours and minutes for this period. The rules using this period will stop being active at this time of day. The format should be HH:MM. Weekdays (list <int>) Determines which weekdays the period should be active. The days are stated with integer values; 0 - Monday, 1 - Tuesday, 2 - Wednesday, 3 - Thursday, 4 - Friday, 5 - Saturday, and 6 - Sunday. Any combination is possible. IncludedPeriods (list <Period (PCC.Periods)>) Contains a list of other periods that should be included in this period. Since the list contains periods, they can in turn include or exclude other periods in their respective IncludedPeriods and ExcludedPeriods settings, which can be useful for creating a more complex inclusion setup. ExcludedPeriods (list<Period (PCC.Periods)>) Contains a list of other periods that should be excluded from this period. Since the list contains periods, they can in turn include or exclude other periods in their respective IncludedPeriods and ExcludedPeriods settings, which can be useful for creating a more complex exclusion setup. Below is a screenshot of the UDR Assistance displaying the Periods UDR: Open Periods UDR Configuring a Period A period configuration can consist of either a single period or a period including or excluding one or several other periods. To configure a period: Configure each period with StartTime and StopTime and any included/excluded periods. For periods that are not supposed to be active 24 h a day, 365 days a year, configure the fields StartTimeOfDay , StopTimeOfDay , and Weekdays . If no Weekdays are defined, the period will be active every day of the week. If no StartTimeOfDay or StopTimeOfDay are defined, the period will be active all the time that the included periods are active. Add periods that you want to include and exclude for the period in the IncludedPeriods and ExcludedPeriods fields. Note If a period includes other periods, that should all be active during the same hours/minutes and days, you only have to configure the StartTimeOfDay , StopTimeOfDay , and Weekday fields in the top-level period. However, if the included periods should be active during different hours/minutes or days, the StartTimeOfDay , StopTimeOfDay , and Weekdays fields should be configured for each included period and not for the top-level period. Using the settings for including and excluding periods will create a tree structure with one period at the top with one or several periods included and excluded beneath. In order for a configured period to be active, all three of the following criteria must met: The current timestamp must be within the set StartTime and StopTime of the top-level period. If any periods are included, the current time stamp must be within the set StartTimeOfDay and StopTimeOfDay of at least one included period. If any periods are excluded, the current time stamp cannot be within the StartTimeOfDay or StopTimeOfDay of any of the excluded periods. Example of a Period Configuration In this example, we have a period including and excluding five other periods, configured as follows: "Top Level" Period StartTime 2012-01-01 08:00 StopTime 2015-12-31 08:00 Included periods Weekdays, Weekends Excluded periods Midsummer "Weekdays" Period StartTime 2012-01-01 07:00 StopTime 2013-01-01 06:00 StartTimeOfDay 08:00 StopTimeOfDay 16:00 Weekdays Monday(0), Tuesday(1), Wednesday(2), Thursday(3), Friday(4) "Weekends" Period StartTime 2012-01-01 07:00 StopTime 2013-01-01 06:00 StartTimeOfDay 08:00 StopTimeOfDay 16:00 Included periods Ordinary, Christmas "Midsummer" Period StartTime 2012-06-22 12:00 StopTime 2012-06-23 00:00 StartTimeOfDay 12:00 StopTimeOfDay 16:00 Weekdays Friday(4), Saturday(5) "Christmas" Period StartTime 2012-12-24 06:00 StopTime 2012-12-26 00:00 StartTimeOfDay 12:00 StopTimeOfDay 23:00 "Ordinary" Period StartTime 2012-01-01 06:00 StopTime 2013-01-01 00:00 StartTimeOfDay 08:00 StopTimeOfDay 16:00 Weekdays Saturday(5), Sunday(6) Open Example of a Period Configuration If current date and time is 2012-06-08 10:00 ( a Friday ) the period will be active. If current date and time is 2012-12-25 23:20 (a Tuesday ) the period will not be active.

---

# Document 2047: Websocket Server Agent Input/Output Data, MIM and Events - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204741271/Websocket+Server+Agent+Input+Output+Data+MIM+and+Events
**Categories:** chunks_index.json

Input/Output Data The agent emits UDRs of the following types: NewConnection CloseConnection BinaryMessage TextMessage The agent retrieves UDRs of the following types: BinaryMessage TextMessage CloseConnection MIM For information about the MIM and a list of the general MIM parameters, see MIM . The agent publishes the following MIM parameter: MIM Value Description Open Connections (list<string>) This MIM parameter is of type list of string. This MIM shows list of one URL per open connection. Agent Message Events There are no message events for this agent. Debug Events There are no debug events for this agent.

---

# Document 2048: Disk Forwarding Agent - Batch - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204738571/Disk+Forwarding+Agent+-+Batch
**Categories:** chunks_index.json

The Disk forwarding agent creates files on the local file system containing the received data. Files are created when a Begin Batch message is received and closed when an End Batch message is received. In addition, the Filename Template service offers the possibility to compress (gzip) the files or to further process them, using commands. To ensure that downstream systems will not use the files until they are closed, they are stored in a temporary directory until the End Batch message is received. This behavior also applies to Cancel Batch messages. If a Cancel Batch is received, file creation is canceled. The section contains the following subsections: Disk Forwarding Agent Configuration - Batch Disk Forwarding Agent Transaction Behavior - Batch Disk Forwarding Agent Events - Batch Disk Forwarding MultiForwardingUDR Input - Batch Disk Forwarding Agent Input/Output Data and MIM - Batch

---

# Document 2049: Categorized Grouping Profile - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204671477/Categorized+Grouping+Profile
**Categories:** chunks_index.json

Configurations relating to the Categorized Grouping agent are made in the Categorized Grouping profile. The Categorized Grouping profile is loaded when you start a workflow that depends on it. Changes to the profile become effective when you restart the workflow. Configuration To create a new Categorized Grouping profile configuration, click the New Configuration button from the Configuration dialog available from Build View and then select Categorized Grouping Profile from the menu. The contents of the menus in the menu bar may change depending on which configuration type has been opened in the current active tab. The Categorized Grouping Profile profile uses the standard menu items and buttons that are visible for all configurations, and these are described in Common Configuration Buttons . Open Categorized Grouping profile dialog The contents of the menus in the menu bar may change depending on which configuration type that has been opened. The Audit profile uses the standard menu items and buttons that are visible for all configurations, and these are described in Build View . The Audit profile configuration contains the following settings: Setting Description Setting Description Working Directory Absolute path to the working directory to be used by the agent. It will be used to keep data over multiple input transaction boundaries. The same root directory can be used for several agents over several workflows. To enable concatenation and grouping over several activations of the workflow, all ECs where the workflow can be activated, must be able to access the same global root directory. Each agent will create and work in its own unique subdirectory. An agent may leave persistent data if closing conditions are not met, the workflow aborts or Cancel Batch occurs in the last transaction. Abort on Inconsistent Working Directory This setting controls the agents behavior if its storage is not in its expected state, that is, if the agent discovers that the persistent directory does not have the expected contents. Not selected - Warn about the condition and continue from a clean state. Any old data will be moved to a subdirectory. Selected - Abort the workflow. If the workflow aborts, manual intervention may be needed. Regardless of this setting, warnings will be logged. Activate Use of Grouping Activating this option will lead to the spawning of an external process of the script identified by the "Script path" described next. If not used, the category data will be concatenated. Script Path Specifies the external script to be used for grouping operations. Script Arguments Used to state the order and contents of arguments and flags in the user defined script. The reserved words %1 and %2 states the position in the call where the arguments are expected. %1 This reserved word will during execution be replaced with the target file the script should create (including absolute path) %2 An absolute path to a directory which contains the files (and potential subdirectories) that should be grouped. The agent guarantees that this directory does not contain any other files or directories except for those that are subject to grouping. Example - Type script #!/bin/sh cd $2 //Go to the directory stated in %2 tar cf $1 * //Tar file contents of %2 gzip -9 $1 //Gzip the tared file mv $1.gz $1 //Rename to previous filename exit 0 //Exit Byte Count Specifies the byte count closing condition for the agent. This field will have to be set to a value larger than zero. File Count Specifies the file count closing condition for the agent. This value is optional. Closing Interval Specifies the closing interval in seconds for the agent. This value is optional. After each timeout, all categories will be closed and the timer will be moved forward according to the timeout interval. Close on Deactivation Setting this option will cause the agent to emit its data when the last file has been finished by the workflow. If a workflow aborts before all categories have been committed and this check box is enabled, the agent shall try to log a warning in the system log that data is remaining in the persistent storage. Note! If more than one Closing Condition is reached, the condition with the highest number will be reported. 0 - Timeout 1 - This is the last transaction during this activation 2 - APL code requested closing 3 - The input file count limit is reached 4 - The input file size liimit for this category is reached or exceeded

---

# Document 2050: Installing the Desktop Launcher - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204644368
**Categories:** chunks_index.json

To install and run the Desktop Launcher: Open a browser and go to http://<platform host>:<platform port>/launch/desktop/launcher Download the Desktop Launcher (jar or exe file). Double-click the downloaded file. If you choose to run an .exe file, you can download it from the software package that you receive in <package name>/release/complete/desktop/launcher/bundles/ . Windows associates .jar files with a Java version. This decides which Java version the desktop installer runs on. The association between filetype and program is set in the windows registry in a parameter called jar file . If you choose to run the .exe file, the correct Java version is detected automatically.

---

# Document 2051: GCP BigQuery Agent - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205033273/GCP+BigQuery+Agent
**Categories:** chunks_index.json

The GCP BigQuery agent is a batch forwarding agent that inserts UDR data into the BigQuery Data Warehouse in a GCP Project specified by the agent configuration, based on user-defined mappings between UDR fields and BigQuery database table columns. A special column in the target data table is also assigned a unique Transaction ID, generated for each batch. In relation to this, a batch status table is utilized to indicate the batch status for the unique Transaction ID. Open GCP BigQuery Agent Workflow Note! Due to the nature of BigQuery, the order of insertion of the UDR data into the BigQuery table is done out of sequence and will appear as such in the target table. Sorting will have to be done from BigQuery itself. Note! The GCP BigQuery batch forwarding agent is implemented using a streaming API called the tabledata.insertAll method. You will need to refer to the GCP Bigquery documentation to ensure it is supported for your BigQuery tier. This section includes the following subsections: GCP BigQuery Agent Configuration GCP BigQuery Agent Transaction Behavior GCP BigQuery Agent Input/Output Data and MIM GCP BigQuery Agent Events

---

# Document 2052: Duplicate Batch Agent - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204738589
**Categories:** chunks_index.json

This section describes the Duplicate Batch profile, the Duplicate Batch Detection agent, and the Duplicate Batch Inspector. This processing agent is available in batch workflow configurations. The Duplicate Batch agent allows duplication control on passed data batches. Each data batch is tested against already stored metadata from batches, to see if they are considered to be duplicates. Metadata for data batches are kept for a configurable number of days. If the metadata of a batch has been removed, a duplicate of this batch can no longer be detected. If any duplicates are detected, a message is logged to the System Log, and the duplicate batch is canceled, which may cause the workflow to abort. For further information, see System Log . To monitor the duplicate batches, the Duplicate Batch Inspector may be used. See Duplicate Batch Inspector . It is only appropriate to use the agent after agents that may create duplicate batches, typically a file-based collection agent. Several workflows may utilize the same Duplicate Batch profile. In this case, their batches are mutually compared. Loading

---

# Document 2053: Inter Workflow Real-Time Forwarding Agent Transaction Behavior - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205000713/Inter+Workflow+Real-Time+Forwarding+Agent+Transaction+Behavior
**Categories:** chunks_index.json

For information about the general transaction behavior, see the section Transactions in Workflow Monitor . Retrieves The agent retrieves commands from other agents and based on them generates a state change of the file currently processed. Command Description Begin Batch Creates and opens a target file in a temporary directory. End Batch Moves the file from the temporary directory to the target directory. Cancel Batch Deletes the current file from the temporary directory.

---

# Document 2054: Open Architecture - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204678939/Open+Architecture
**Categories:** chunks_index.json

MediationZone is based on an open and multi-layered architecture that enables service providers to rapidly adapt the deployed platform to new business requirements. Open Multi-layered architecture In addition to traditional file based, offline mediation, MediationZones architecture is optimized for in-memory, real-time event exchange and processing. Agents and servers use direct reference calls, which eliminates execution overhead otherwise induced by alternative data-transfer mechanisms such as file or database. Deploy anywhere MediationZone can be deployed on bare metal hardware, or on virtual machines using on-premise or cloud infrastructure.

---

# Document 2055: Amazon S3 Collection Agent Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204672052/Amazon+S3+Collection+Agent+Configuration
**Categories:** chunks_index.json

To open the Amazon S3 collection agent configuration dialog from a workflow configuration, you can do the following: right-click the agent icon and select Configuration... select the agent icon and click the Edit button Note! If you are using the Amazon S3 collection agent in a Batch workflow, part of the configuration may be done in the Filename Sequence and Sort Order tabs in Workflow Template . For Real-Time workflow, additional configurations in Decoder , Decompression and Execution tabs are available in Batch-Based Real-Time Agents - Agent Configuration . The Amazon S3 tab contains settings related to the placement and handling of the source files to be co llecte d by the agent. Open Amazon S3 collection agent configuration - Amazon S3 tab Setting Description Setting Description Profile Select the File System profile you want the agent to use, see File System Profile for further information about this profile. File Information Directory Enter the absolute pathname of the source directory on the location stated in the File System profile, where the source files reside. Include Subfolders Select this check box if you have subfolders in the source directory from which you want files to be collected. If you select Enable Sort Order in the Sort Order tab, the sort order selected will also apply to subfolders. Filename Enter the name of the source files in the location stated in the File System profile. Regular expressions according to Java syntax applies. For further information, see http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html . Example To match all filenames beginning with TTFILE , type: TTFILE.* Compression Select the compression type of the source files: No Compression - agent does not decompress the files. This is the default setting. Gzip - agent decompresses the files using gzip. This determines if the agent will decompress the files before passing them on in the workflow. Before Collection Move to Temporary Directory If enabled, the source files will be moved to the automatically created subdirectory DR_TMP_DIR in the source directory, prior to collection. This option supports safe collection of a source file reusing the same name. Append Suffix to Filename Enter the suffix that you want to be added to the file name prior to collecting it. Important! Before you execute your workflow, make sure that none of the file names in the collection directory include this suffix. Inactive Source Warning (h) If the specified value is greater than zero, and if no file has been collected during the specified number of hours, the following message is logged: The source has been idle for more than <n> hours, the last inserted file is <file>. After Collection Move to If enabled, the source files will be moved from the source directory (or from the directory DR_TMP_DIR , if using Move to Temporary Directory ) to the directory specified in the >Destination field, after the collection. If the Prefix or Suffix fields are set, the file will be renamed as well. Note! It is only possible to move files within the same bucket. Destination Enter The absolute pathname of the directory on the location specified in the referenced File System profile into which the source files will be moved after collection. This field is only enabled if Move to is selected. Rename If enabled, the source files will be renamed after the collection, remaining in the source directory from which they were collected (or moved back from the directory DR_TMP_DIR , if using the Move To Temporary Directory setting). Prefix/Suffix Enter the Prefix and/or suffix that will be appended to the beginning respectively the end of the name of the source files, after the collection. These fields are only enabled if Move to or Rename is selected. Note! If Rename is enabled, the source files will be renamed in the current directory (source or DR_TMP_DIR ). Be sure not to assign a prefix or suffix, giving files new names, still matching the filename regular expression, or else the files will be collected over and over again. Search and Replace Select this option if you want to apply the Search and Replace function. Select either the Move to or Rename setting. Search : Enter the part of the filename that you want to replace. Replace : Enter the replacement text. Search and Replace operate on your entries in a way that is similar to the Unix sed utility. The identified filenames are modified and forwarded to the following agent in the workflow. This functionality enables you to perform advanced filename modifications, as well: Use regular expression in the Search entry to specify the part of the filename that you want to extract. Note! A regular expression that fails to match the original file name will abort the workflow. Enter Replace with characters and meta characters that define the pattern and content of the replacement text. Search and Replace Examples To rename the file file1.new to file1.old , use: Search : .new Replace : .old To rename the file JAN2011_file to file_DONE , use: Search : ([A-Z]*[0-9]*)_([a-z]*) Replace : $2_DONE Remove If enabled, the source files will be removed from the source directory (or from the directory DR_TMP_DIR , if using the Move To Temporary Directory setting), after the collection. Keep (days) Number of days to keep source files after the collection. In order to delete the source files, the workflow has to be executed (scheduled or manually) again, after the configured number of days. Note! A date tag is added to the filename, determining when the file may be removed. This field is only enabled if Move to or Rename is selected. Ignore If enabled, the source files will remain in the source directory after collection. UDR Type Route FileReferenceUDR Select this check box if you want to forward the data to an SQL Loader agent. See SQL Loader Agent for further information.

---

# Document 2056: UDR Functions - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205656728/UDR+Functions
**Categories:** chunks_index.json

The following functions for UDR described here are: 1 udrAddError 2 udrClearErrors 3 udrClone 4 udrContainsError 5 udrCreate 6 udrDecode 7 udrEncode 8 udrForceDecode 9 udrGetErrorCodes 10 udrGetErrorMessages 11 udrGetErrorsAsString 12 udrGetFields 13 udrGetValue 14 udrIsPresent 15 udrMass Functions 16 udrRoute 17 udrSetValue 18 udrUnsetPresent udrAddError Adds an error description message to the UDR, which will be visible from the Error Correction System Inspector window or the Data Veracity browser, Error Code column. A UDR can have several error descriptions. void udrAddError ( drudr myUDR, string ecsErrorCode, string myString ) Parameter Description Parameter Description myUDR The UDR to add error message to. ecsErrorCode An ECS Error Code as defined from the Error Correction System Inspector and Data Veracity browser. myString Any string to associate with the Error Code. This parameter comprises the Error Case found in the ECS or Data Veracity. Optional. Returns Nothing Example - Using udrAddError The following example appends error text to a UDR, which when displayed in ECS or Data Veracity will look like the following figure: udrAddError( input, "CALL_ID_ERROR", "The callId: " + input.callId + " Calling number: " + input.anum ); udrClearErrors Removes all error descriptions, added to a UDR. This is useful when collecting UDRs from ECS or Data Veracity for a new validation which may send them back to ECS or Data Veracity. Adding a new error description, if one already exists, will make it impossible to auto-assign the UDR to a reprocessing group when it arrives to either Data Veracity or the ECS. void udrClearErrors( drudr myUDR ) Parameter Description Parameter Description myUDR The UDR to clear errors from Returns Nothing udrClone Clones a UDR. It is used when having multiple routes leaving the agent, where any of the routes changes the content of a UDR. For complex UDR structures, this can be a heavy operation, and must be used with care. drudr udrClone( drudr myUDR ) Parameter Description Parameter Description myUDR The UDR to clone Returns A clone of myUDR udrContainsError Returns true if an error description has been added to the UDR. boolean udrContainsError( drudr myUDR ) Parameter Description Parameter Description myUDR The UDR to evaluate for error descriptions Returns true or false udrCreate Creates a new UDR of the specified type. All fields are included, except for the optional. drudr udrCreate( type UDRType ) Parameter Description Parameter Description UDRType A defined UDR type Returns: A UDR of the specified type udrDecode Decodes a bytearray into a list of UDRs, and returns an error message if the operation fails. To route the UDRs to a subsequent agent, loop through the resulting list routing each element individually. Note! Built-in CSV and JSON formats are not supported by udrDecode. string udrDecode ( string decoderName , list<drudr> UDRlist , bytearray indata , boolean fullDecode ) //Optional Parameter Description Parameter Description decoderName The name of a defined decoder UDRlist The list in which the resulting, decoded UDRs will be saved indata The input data to decode fullDecode States if Full Decode will be applied. By default, this parameter is set to true . For further information, see the Ultra Reference Guide . Returns A string containing nothing ( null ) if the operation succeeded, and an error message if it failed Example - Using udrDecode A list must be created, not only declared, previously used by udrDecode : list<drudr> myList = listCreate(drudr); if (udrDecode("myFolder.myFormat.myDecoder", myList, input) == null) { // Do something } else { // Error handling } udrEncode Encodes a UDR. Note! Built-in CSV and JSON formats are not supported by udrEncode. bytearray udrEncode ( string encoderName , drudr myUDR ) Parameter Description Parameter Description encoderName The name of a defined encoder myUDR The UDR to encode Returns A bytearray udrForceDecode By default, a Decoder only evaluates record sizes and field termination marks. It does not read the field values to evaluate for validity. This is done for each field when it is actually accessed, either from an agent utilizing APL code, or from an Encoder. The udrForceDecode function will decode each field within a UDR. If a field is not valid, the agent will abort. This function is equal to the Full Decode option in the Decoder window. Note that the function has a negative impact on performance, and must be used mainly for testing purposes. string udrForceDecode ( drudr myUDR , boolean abortOnFail ) //Optional Parameter Description Parameter Description myUDR The UDR to fully decode abortOnFail An optional argument. If not stated, true is assumed. If set to false , the workflow does not abort if decoding fails. Returns If decoding succeeds, null is returned. If not - and abortOnFail is set to false - an error message is returned. udrGetErrorCodes Returns a list of strings containing all error codes added to the UDR. list <string> udrGetErrorCodes( drudr myUDR ) Parameter Description Parameter Description myUDR The UDR Returns A list of strings with all error codes added to the UDR udrGetErrorMessages Returns a list of strings containing all error messages added to the UDR. list <string> udrGetErrorMessages( drudr myUDR ) Parameter Description Parameter Description myUDR The UDR Returns A list of strings with all error messages added to the UDR udrGetErrorsAsString Returns a string containing all error information that has been added to the UDR. string udrGetErrorsAsString( drudr myUDR ) Parameter Descripton Parameter Descripton myUDR The UDR Returns A string with all error information added to the UDR udrGetFields Returns a list of the field names and field information in a UDR. list<UDRFieldInfo> udrGetFields ( drudr myUDR ) Parameter Description Parameter Description myUDR The UDR. Returns list<UDRFieldInfo> A list of the fields in the UDR and the field information. See the information below on UDRFieldInfo . UDRFieldInfo is the UDR that is populated with the field information of the UDR that contains a list of fields. The following fields are included in UDRFieldInfo : Field Description Field Description fieldName (string) The name of the field fieldType (string) The field type, e g string, int, double etc. isOptional (boolean) This indicates if the field is optional or not. isReadOnly (boolean) This indicates if the field is read-only or not. udrGetValue Returns the value of fieldName in the myUDR . any udrGetValue ( drudr myUDR , string fieldname ) Parameter Description Parameter Description myUDR The UDR containing the field of interest fieldname A string, exactly matching the name of an existing field. If the field is OPTIONAL and is not present, the function returns null . Constructed field names, that is subUDR.subField are allowed. If a field in the path is not present, null is returned in this case as well. Returns Any, depending on the field type udrIsPresent Returns true if the UDR field is present. boolean udrIsPresent(identifier field ) Parameter Description Parameter Description field The full field name including the UDR name. For instance, input.IN.moRecord . Returns true or false . If a field is optional and not present, accessing the field will return the default null value that is null for object types, 0 for numeric types and false for boolean types. Example - Using udrIsPresent The function is recursive. If the optional field myField is to be accessed, and it is nested in three levels: fieldA.fieldB.myfield , and all levels are optional, only one if -statement is required: if ( udrIsPresent( input.fieldA.fieldB.myField ) ) { // Some kind of operation. } udrMass Functions The udrMass functions enable you to manage a decoder which purpose is to process large amounts of collected UDRs, while maintaining control over UDRs tailing bytes in between calls to consume . The udrMass functions include: udrMassCreateDecoder udrMassClearBuffer udrMassDecode udrMassEOFCheck udrMassGetDataTail udrMassCreateDecoder Creates a decoder object. any udrMassCreateDecoder(string decoderName ) Parameter Description Parameter Description decoderName The name of the decoder object. Returns: A decoder object. Example - Using udrMass* APL functions any myDecoder; initialize { myDecoder = udrMassCreateDecoder("Default.ascii.asciiFile"); } drain { list<drudr> myList = listCreate(drudr); string msg = udrMassEOFCheck(myDecoder, myList, false); if (msg == null) { // Do something } else { // Error handling } } consume { list<drudr> myList = listCreate(drudr); string msg = udrMassDecode(myDecoder, myList, input, false); if (msg == null) { // Do something } else { // Error handling } } udrMassClearBuffer The udrMassClearBuffer function clears the remaining buffer in the decoder. void udrMassClearBuffer(any theDecoder) Parameter Description Parameter Description theDecoder The decoder object that udrMassCreateDecoder generates Returns: Nothing udrMassDecode The udrMassDecode function Decodes the bytearray input data by using the decoder, and generates it as a list. Note! See the example above, Using udrMass* APL Functions. string udrMassDecode( any theDecoder , list<drudr> myList , bytearray inputData , boolean forceDecode ) Parameter Description Parameter Description theDecoder The decoder object that udrMassCreateDecoder generates myList The product of the encoding process is saved as a list of UDRs. inputData The input data that is to be encoded into UDRs forceDecode Use true to force decoding (a full decode). Returns: If decoding fails, an error message is returned. Otherwise, returns null . udrMassEOFCheck The udrMassEOFCheck function attempts to decode any remaining bytes that are left behind and stored in the decoder. If the function executes and decoding is successful, the procedure sends endBatch to the decoder, the returned string is empty, and the myList parameter contains the UDRs. Otherwise, an error message is generated. string udrMassEOFCheck( any theDecoder, list<drudr> myList, boolean forceDecode) Parameter Description Parameter Description theDecoder The decoder object that udrMassCreateDecoder generates myList The data that udrMassEOFCheck decodes forceDecode Use true to force decoding (a full decode). Returns: If decoding fails, an error message is returned. Otherwise, returns null . udrMassGetDataTail The udrMassGetDataTail function makes the decoder generate the remaining bytes that it holds. The bytes are still stored in the decoder. Note! This function enables you to investigate the data that is stored in the decoder. Do not use it to reset the internal array of the remaining bytes. bytearray udrMassGetDataTail(any theDecoder ) Parameter Description Parameter Description theDecoder The decoder object that udrMassCreateDecoder generates Returns: The raw bytearray data that the decoder in udrMassDecode uses as input. For further information see the section above, udrMassDecode . udrRoute The udrRoute function sends a UDR to a workflow route. If no call to the route function is made, the agent will not have any outgoing routes in the Workflow Editor environment - it will not be possible to link to a subsequent agent. The function routes a UDR to all the output routes, or a named output route. If the clone keyword is used, the UDR is cloned before output. Note! The udrRoute function cannot be used within global APL scripts, that is in code saved in the APL Code Editor . void udrRoute ( drudr myUDR , string routeName , //Optional clone ) //Optional Parameter Description Parameter Description myUDR The UDR to send on routeName The route on which to send the UDR clone The UDR is cloned before routing on the output/outputs. Returns Nothing udrSetValue Sets the field named fieldName in the UDR myUDR to value . void udrSetValue ( drudr myUDR , string fieldName , any value ) Parameter Description Parameter Description myUDR The UDR, for which to set the field value fieldName A string, exactly matching an existing field. Constructed field names in the form of subUDR.subField are allowed. Trying to set a non-existing field will cause runtime error. value A value depending on the field type Returns Nothing udrUnsetPresent In the output files the Encoder maps by default, null fields as present but empty. This can be avoided by clearing a flag, Is Present, using the udrUnsetPresent function. The field can be changed to Is Present again either via udrSetValue (see the section above, udrSetValue) or regular assignment of fields. void udrUnsetPresent(identifier field ) Parameter Description Parameter Description field The full name of the optional field including the UDR name. For instance, input.IN.moRecord . Returns Nothing

---

# Document 2057: SnmpRequestUDR - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205002130/SnmpRequestUDR
**Categories:** chunks_index.json

Open The SNMP Request agent accepts input in the form of SnmpRequestUDR . Such input triggers the agent to produce a request to the specified target. This UDR is routed as input to an SNMP Request agent to trigger it to perform a request for a specific OID to a specific target. There are two kinds of triggered requests - resolved and unresolved. Resolved requests are mapped to the generated UDR structure of the connected SNMP profile. Unresolved requests are simple OID - Value mappings. Unresolved requests are also divided into scalar and tree requests. A scalar request retrieves a single scalar value while a tree request retrieves an entire MIB sub tree, in the form of a flattened OID - Value map. If the Network Element is not specified in the CSV file, there are also fields available in this UDR for initiating a request. Field Description Field Description unresolved (boolean) This flag controls if the request is unresolved or not. tree (boolean) This flag controls if the request is a sub tree request or not. It is only valid if unresolved is true. community (string) What community to use for the request. baseOid (string) Base part of the OID to request. This field cannot be used with oidList . instanceOid (string) Instance part of the OID to request. This field cannot be used with oidList . oidList (list<OidUDR>) List of OIDs if you want to request several at the same time. remotehost (string) Address of host to send request to. remoteport (int) Port of host to send request to. Fields for initiating requests authPassword (string) authProto (int) context (any) contextEngineID (string) contextName (string) description (string) privPassword (string) privProto (int) retries (int) timeout (int) user (string) version (int)

---

# Document 2058: REST HTTP Interface - Products - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204677387
**Categories:** chunks_index.json

Provisioning of Products is supported via a REST HTTP Interface which is implemented using the standard HTTP methods GET , PUT , POST and DELETE . The interface supports XML and JSON formats, and enables external systems to provision and update Products. The REST HTTP Interface runs on the EC Web Interface and is started when the EC process is started. Authentication is performed against the Platform, if possible. If the Platform is unreachable, the user is authenticated against the locally defined user (configured in EC web interface properties). The UDRs available in the Products REST Interface are: Capacity Enforcement Notification Product ProductMapping To retrieve one UDR: http://<host>:<port>/PCC/Products/<area>/<udr-type>/<udr-id> To retrieve all UDRs of a certain type: http://<host>:<port>/PCC/Products/<area>/<udr-type> Note! In the examples in this chapter, HTTP/1.0 have been used, but REST supports HTTP/1.1 as well. Creating a UDR A UDR can be created by sending data to the HTTP Interface using POST to the base URL for the resource. The response will be the created UDR. Default format for the response is XML if nothing is specified. The format of the response is determined by the Accept HTTP header. Example - Creating a ProductMapping UDR in area TEST using XML POST http://localhost:9090/PCC/Products/TEST/ProductMapping HTTP/1.0 Content-Type: application/xml The xml-data should be structured as follows: <ProductMapping> <Priority>1</Priority> <Arguments>Arg 1</Arguments> <Arguments>Arg 2</Arguments> <Targets>1000</Targets> <Targets>1001</Targets> </ProductMapping> Example Creating a ProductMapping UDR in area TEST using JSON POST http://localhost:9090/PCC/Products/TEST/ProductMapping HTTP/1.0 Content-Type: application/json The json-data should be structured as follows: { "Priority": 20, "Arguments": [ "21", "22" ], "Targets": [ 101, 200 ] } Retrieving a UDR The format of the response is determined by the Accept HTTP header. Retrieving all Capacity UDRs in area TEST as JSON GET http://localhost:9090/PCC/Products/TEST/Capacity/ HTTP/1.0 Accept: application/json Example output: { "Capacitys": [ { "Misc": { "entry": [ { "key": "qht", "type": "int", "value": "600" } ] }, "ID": 1001, "Name": "4GB Roaming",> "Capacity": 10240, "CapacityUnit": 1,> "CounterType": 2, "CounterUnit": 1, "QuotaDefault": 1024, "QuotaMinimum": 256 }, { "Misc": { "entry": [ { "key": "qht", "type": "int", "value": "1850" } ] }, "ID": 1002, "Name": "5GB national", "Capacity": 5120, "CapacityUnit": 1, "CounterType": 2, "CounterUnit": 1, "QuotaDefault": 4096, "QuotaMinimum": 2048 } ] } Retrieving a specific Capacity UDR in area TEST as JSON GET http://localhost:9090/PCC/Products/TEST/Capacity/1024 HTTP/1.0 Accept: application/json Example output: { "Misc": { "entry": [ { "key": "vqt", "type": "double", "value": "0.2" }, { "key": "qht", "type": "int", "value": "600" } ] }, "ID": 1024, "Name": "10GB Roaming", "Capacity": 10240, "CapacityUnit": 1, "CounterType": 2, "CounterUnit": 1, "QuotaDefault": 1024, "QuotaMinimum": 256 } Retrieving all Enforcement UDRs in area TEST as JSON GET http://localhost:9090/PCC/Products/TEST/Enforcement HTTP/1.0 Accept: application/json Example output: { "Enforcements": [ { "ID": 1001, "Name": "Enf100%", "CounterType": 2, "Level": 1 }, { "ID": 1002, "Name": "Enf0%", "CounterType": 2, "Level": 0 }, ] } Retrieving a specific Enforcement UDR in area TEST as JSON GET http://localhost:9090/PCC/Products/TEST/Enforcement/1001 HTTP/1.0 Accept: application/json Example output: { "ID": 1001, "Name": "Enf100%", "CounterType": 2, "Level": 1 } Retrieving all Notification UDRs in area TEST as JSON GET http://localhost:9090/PCC/Products/TEST/Notification HTTP/1.0 Accept: application/json Example output: { "Notifications": [ { "ID": 1001, "Name": "Surf Europe 4GB 80%", "Message": "TH_80", "CounterType": 2, "Level": 0.8, "Required": true, "Type": "0", "Address": "127.0.0.1" }, { "ID": 1002, "Name": "Surf Europe 4GB 100%", "Message": "TH_100_1", "CounterType": 2, "Level": 1.0, "Required": true, "Type": "0", "Address": "127.0.0.1" }, ] } Retrieving a specific Notification UDR in area TEST as JSON GET http://localhost:9090/PCC/Products/TEST/Notification/1001 HTTP/1.0 Accept: application/json Example output: { "ID": 1001, "Name": "Surf Europe 4GB 80%", "Message": "TH_80", "CounterType": 2, "Level": 0.8, "Required": true, "Type": "0", "Address": "127.0.0.1" } Retrieving all Product UDRs in area TEST as JSON GET http://localhost:9090/PCC/Products/TEST/Product HTTP/1.0 Accept: application/json Example output: { "Products": [ { "Misc": { "entry": [] }, "ID": 1001, "Name": "Surf Europe", "StartTime": "2010-05-08 00:00", "StopTime": "2020-12-12 00:00", "StopFallthrough": false, "Currency": "SEK", "Capacities": [ 3 ], "Duration": 24, "DurationUnit": 2, "ResetType": 1, "ResetInterval": 1, "ResetIntervalUnit": 1, "Price": 0, "Enforcements": [1], "Notifications": [1,2], "RetainedCounters": 0, "StopAtCapacity": false }, { "Misc": { "entry": [] }, "ID": 1002, "Name": "Surf Europe", "StartTime": "2010-05-08 00:00", "StopTime": "2020-12-12 00:00", "StopFallthrough": false, "Currency": "SEK", "Capacities": [4], "Duration": 24, "DurationUnit": 2, "ResetType": 1, "ResetInterval": 1, "ResetIntervalUnit": 1, "Price": 0, "Enforcements": [1], "Notifications": [3,4], "RetainedCounters": 0, "StopAtCapacity": false } ] } Retrieving a specific Product UDR in area TEST as JSON GET http://localhost:9090/PCC/Products/TEST/Product/1001 HTTP/1.0 Accept: application/json Example output: { "Misc": { "entry": [] }, "ID": 1001, "Name": "Surf Europe", "StartTime": "2015-05-08 00:00", "StopTime": "2020-12-12 00:00", "StopFallthrough": false, "Currency": "SEK", "Capacities": [3], "Duration": 24, "DurationUnit": 2, "ResetType": 1, "ResetInterval": 1, "ResetIntervalUnit": 1, "Price": 0, "Enforcements": [1], "Notifications": [1,2], "RetainedCounters": 0, "StopAtCapacity": false } Retrieving all ProductMapping UDRs in area TEST as JSON GET http://localhost:9090/PCC/Products/TEST/ProductMapping HTTP/1.0 Accept: application/json Example output: { "ProductMappings": [ { "ID": 1001, "Priority": 1, "Arguments": [".*"], "Targets": [1001,1002] }, { "ID": 1002, "Priority": 2, "Arguments": [".*"], "Targets": [1003,1004] } ] } Retrieving a specific ProductMapping UDR in area TEST as JSON GET http://localhost:9090/PCC/Products/TEST/ProductMapping/1001 HTTP/1.0 Accept: application/json Example Output: { "ID": 1001, "Priority": 1, "Arguments": ["Arg 1","Arg 2"], "Targets": [1001,1002] } Updating a UDR Updates are made using PUT . Example Updating a ProductMapping UDR in area TEST using XML PUT http://localhost:9090/PCC/Products/TEST/ProductMapping/<id> HTTP/1.0 Content-Type: application/xml Content-Length: 185 The format of the xml-data should be structured as follows: <ProductMapping> <Priority>1</Priority> <Arguments>Arg 1</Arguments> <Arguments>Arg 2</Arguments> <Targets>1000</Targets> <Targets>1001</Targets> </ProductMapping> Deleting a UDR Deleting a UDR is done by using the DELETE method. Example Deleting a ProductMapping UDR with a specific key in area TEST DELETE http://localhost:9090/PCC/Products/TEST/ProductMapping/<id> HTTP/1.0 Clearing an Area Clearing an area is done with a HTTP DELETE call to /PCC/Products/<source area>/admin/clear . Example Clearing area TEST. DELETE http://localhost:9090/PCC/Products/TEST/admin/clear HTTP/1.0 Copy One Area to Another Copying one area to another is done with a HTTP PUT call to /PCC/Products/<source area>/admin/copyArea?dest=<destination area> . Example Copying data from TEST to PROD. PUT http://localhost:9090/PCC/Products/TEST/admin/copyArea?dest=PROD HTTP/1.0 Content-Length: 0 Error Codes There are several different codes that can be returned for the different operations. For admin commands: http://<host>:<port>/PCC/Products/<area>/admin/clear http://<host>:<port>/PCC/Products/<area>/admin/copyArea http://<host>:<port>/PCC/Products/<area>/admin/refresh Error code Description Error code Description 200 Will be returned if the last operation was successful. 500 Will be returned if there was an error. When creating a UDR: http://<host>:<port>/PCRF/Rules/<area>/<udr-type> Error code Description Error code Description 201 Will be returned if the UDR was created. 409 Will be returned if a UDR with the stated key already exists, or if there are dependencies missing. 415 Will be returned if the UDR key is of type string and the key is missing, or if the key type is incorrect. 500 Will be returned if the UDR requires references that are missing, or if there was an error. When retrieving one UDR: http://<host>:<port>/PCRF/Rules/<area>/<udr-type>/<id> Error code Description Error code Description 200 Will be returned if the requested UDR was found. 204 Will be returned if there is no UDR with the stated ID. 500 If there was an error. When retrieving all UDRs: http://<host>:<port>/PCRF/Rules/<area>/<udr-type> Error code Description Error code Description 200 Will be returned with an empty list or with a list containing the UDRs. When updating a UDR: http://<host>:<port>/PCRF/Rules/<area>/<udr-type>/<id> Error code Description Error code Description 200 Will be returned if the UDR was updated successfully. 408 Will be returned if the keys in the URL and the XML are different, or the key in the URL is set to "0". 409 Will be returned if the UDR requires references that are missing, or if there is not UDR with the stated key. 500 Will be returned if there was an error. When deleting a UDR: http://<host>:<port>/PCRF/Rules/<area>/<udr-type>/<id> Error code Description Error code Description 200 Will be returned if the UDR was deleted successfully. 204 Will be returned if there is no UDR with the stated key. 409 Will be returned if the UDR is referenced by another UDR. 500 Will be returned if there was an error.

---

# Document 2059: Analysis Agent Syntax Highlighting and Right-click Menu - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204606393
**Categories:** chunks_index.json

In the code area, the different parts of the code are color-coded according to type, for easier identification. When right-click in the code area, a context-sensitive popup menu appears, enabling easy access to the most common actions you might want to perform. Code Definition The text is color-coded according to the following definitions: Brown - Strings Blue - Functions Cyan - Own (user-defined) functions Green - Types Purple - Keywords Orange - Comments Hint! To refresh the text press Ctrl+Shift+L. Right-click Menu The right-click menu has the foll owin g options: Open Text Editor right-cl ick menu Option Description Option Description UDR Assistance... Opens the UDR Internal Format Browser from which the UDR Fields may be inserted into the code area. MIM Assistance... Open the MIM Browser from which the available MIM Resources may be inserted into the code area. UDR Internal Format Browser You use the UDR Internal Format Browser to easily insert UDR Fields into the code area. It opens in a dialog box that overlaps over the Agent Configuration screen. Open UDR Internal Format Browser The layout of the UDR Internal Format Browser is presented in two main sections  on the left, there is the UDR Types list, and on the right, there are the UDR Fields that correspond to the selection. Select a UDR Type from the presented list. You can expand on the types by clicking on the arrow button to show an individual type. Additionally, you can use the Search field box to find a particular type. Buttons to Expand All or Collapse All list items are also available. When the UDR type is selected, proceed to the UDR Fields selection on the right. The shown results can be filtered using the following options: Option Description Option Description Show Optional Select this option to show optional UDR fields. Show Readable Select this option to show readable UDR fields. Datatype You can filter the datatypes by using this dropdown menu list. Enable this option and select an entry. The available options are the following: bigint , bigdec, bitset, boolean, byte, bytearray, char, date, double, float. int, ipaddress, list<any>, map<any, any>, long, short, string , and void . You can also use the filter input field to type in a string to search for a particular UDR field. Select the appropriate one from the list and press OK to confirm the selection. The other available dialog boxes are Cancel, Refresh, and Apply. MIM Browser You use the MIM Browser to easily insert MIMs into the code area. It opens in a dialog box that overlaps over the Agent Configuration screen. Open The MIM Browser It shows the available selection of MIM types under dropdown sections based on their type. You can optionally use the buttons available on the top bar to Expand All or Collapse All available items. Make your selection and press OK to confirm. You can also Close the MIM Browser by clicking on the button. APL Code Completion To make APL coding easier, the APL Code Completion feature helps you to find and add APL functions and their respective syntax. To access APL Code Completion, place the cursor where you want to add an APL function, press CTRL+SPACE and select the correct function. In order to reduce the number of hits, type the initial characters of the APL function. The characters to the left of the cursor will be used as a filter. APL Code Completion covers: Installed APL functions APL functions defined in APL Code configurations APL functions created with Development Toolkit Function blocks such as beginBatch and consume Flow control statements such as while and if Installed UDR formats UDR formats created with the Development Toolkit User-defined UDR f orma ts Open APL Code Completion

---

# Document 2060: Setting Environment Variables for Platform - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204736082
**Categories:** chunks_index.json

Add the following environment variables into a login script for the user mzadmin, ensuring the variables are always used. The example values will be used later on in the installation parameters file install.xml . Variable Description MZ_HOME Example value: /opt/mz This environment variable specifies where the MediationZone software is to be installed. Note! The directory must exist and be empty prior to the installation. JAVA_HOME Example value: /opt/jdk/jdk-17.0.2 This environment variable specifies where the JDK is installed. For example: /opt/jdk-<interim.update.patch> PATH The search path must contain the following directories: $JAVA_HOME/bin:$MZ_HOME/bin This environment variable specifies the search path. Example - Setting Environment Variables export MZ_HOME=/opt/mz export JAVA_HOME=/opt/jdk/jdk-17.0.2 export PATH=$JAVA_HOME/bin:$MZ_HOME/bin:$PATH Note! In order for MediationZone to function properly, the following Oracle file needs configuration: $ORACLE_HOME/network/admin/listener.ora See https://infozone.atlassian.net/wiki/spaces/MD93/pages/204670130 for more information. Note! The installation script only supports using Oracle SID. It does not support using the Oracle service name.

---

# Document 2061: Tracing Functions Using APL in a Workflow - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204676812/Tracing+Functions+Using+APL+in+a+Workflow
**Categories:** chunks_index.json

If you want to perform traces to see which functions change a UDR, you can use the trace() APL function. The trace command syntax is as follows: void trace (drudr myUDR, string message) Parameter Description Parameter Description myUDR The UDR to trace on message The message displayed in the trace Returns Nothing Example - trace() Function This is an example of how the trace() function can be used in an Analysis agent. import ultra.Default.traceudr; consume { MyTraceUDR tu1 = udrCreate(MyTraceUDR); tu1.intField = 1; tu1.strField = "first"; trace(tu1, "Sending to Dest1"); udrRoute(tu1, "dest1"); MyTraceUDR tu2 = udrCreate(MyTraceUDR); tu2.intField = 2; tu2.strField = "second"; tu2.subUdr = tu1; trace(tu2, "Sending to Dest2"); udrRoute(tu2, "dest2"); } When doing a trace in Desktop, the messages defined by the trace() function will be shown in the table displaying trace results: Open See Tracing in Desktop for more information about executing traces in Desktop.

---

# Document 2062: HDFS Agents  Preparations - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205000526/HDFS+Agents+Preparations
**Categories:** chunks_index.json

Hadoop mzp Package Note! You are recommended to determine if the HDFS agents works right out of the box with your Hadoop setup to decide if you need to apply the steps below. Apache Hadoop jar files and dependencies required by the HDFS agents are bundled in an mzp package and included during installation of the HDFS agents. The bundled Apache Hadoop package currently contains version 3.3.4 Hadoop jars as well as its version compatible dependencies. The included mzp package has been tested with Apache Hadoop version 3.3.4 setup and in most cases, the HDFS agents will work right out of the box without the need to apply the steps below to provide a custom Apache Hadoop package. However, should you experience issues (e.g. getting NoClassDefFoundError or ClassNotFoundException ) when running a HDFS agent workflow, it is possibly due to one of the following scenarios and that you may require a different set of Hadoop jar files and dependencies. As there are several different distributions of Hadoop available, you may find compatibility issues when you are using a different distribution than the one that is available at hadoop.apache.org . Your Hadoop setup is of a much earlier or later version compared to the version of the Hadoop jars in the bundled Apache Hadoop package. To create and commit the Hadoop mzp package: Copy the set of jar files for the Hadoop version you want to use to the machine that MediationZone is running on. The set of jar files comprises hadoop-auth , hadoop-common , hadoop-hdfs , commons-collections and version compatible dependencies of these jars. You can refer to the set of jars used in the tested example below and include additional dependencies as needed. If your HDFS agents do not work with your custom Hadoop mzp package, contact support. Depending on the file structure, the files may be located in different folders, but typically they will be located in a folder called hadoop , or hadoop-common , where the hadoop-common.jar file is placed in the root directory, and the rest of the jar files are placed in a subdirectory called /lib . Set a variable called $FILES for all the different jars. This example shows how this is done for the Cloudera Distribution of Hadoop 4. FILES="-exported 3.1.0 file=hadoop-auth-3.1.0.jar  -exported 3.1.0 file=hadoop-common-3.1.0.jar  -exported 3.1.0 file=hadoop-hdfs-3.1.0.jar  -exported 3.1.0 file=hadoop-aws-3.1.0.jar  -exported 3.1.0 file=hadoop-annotations-3.1.0.jar  file=hadoop-hdfs-client-3.1.0.jar  file=stax2-api-3.1.4.jar  file=commons-collections-3.2.2.jar  file=htrace-core4-4.1.0-incubating.jar  file=woodstox-core-5.0.3.jar  file=commons-configuration2-2.1.1.jar  file=httpclient-4.5.2.jar file=commons-logging-1.1.3.jar  file=protobuf-java-2.5.0.jar  file=guava-11.0.2.jar  file=re2j-1.1.jar  file=aws-java-sdk-bundle-1.11.271.jar" Create the mzp package: mzsh pcreate "Apache Hadoop" "<distribution>" apache_hadoop_cdh4.mzp -level platform -osgi true $FILES The following example shows how this could look like for the Cloudera Distribution of Hadoop 4. mzsh pcreate "Apache Hadoop" "4.4" apache_hadoop_cdh4.mzp -level platform -osgi true $FILES Commit the new package: mzsh mzadmin/<password> pcommit apache_hadoop_<application>.mzp Restart the Platform and ECs: mzsh shutdown platform <ec> <ec> mzsh startup platform <ec> <ec> Hadoop with Kerberos Kerberos Use It is possible to use manually-created Kerberos tickets by using the kinit command. The UseGroupInformation class can access them from the ticket cache. In this case, the items cannot be auto-renewed. It is advised that you allow the system to handle user logins and ticket renewal as we do not recommend you manually create tickets.

---

# Document 2063: Data Veracity Forwarding Agent Events - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204640555/Data+Veracity+Forwarding+Agent+Events
**Categories:** chunks_index.json

Agent Message Events There are no message events for this agent. For further information about the agent message event type, see Agent Event . Debug Events Debug messages are dispatched in debug mode. During execution, the messages are displayed in the Workflow Monitor. You can configure Event Notifications that are triggered when a debug message is dispatched. For further information about the debug event type, see Debug Event . The agent produces the following debug events: <count> rows has inserted to Table <table name> This event is reported at end batch upon a successful commit. Finished execution, total <count> rows inserted. This event is reported at end batch showing the total number of records that were inserted.

---

# Document 2064: Setting up Prometheus - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/283082788/Setting+up+Prometheus
**Categories:** chunks_index.json



---
**End of Part 87** - Continue to next part for more content.
