# RATANON/MZ93-DOCUMENTATION - Part 15/112

---
**Dataset:** ratanon/mz93-documentation
**Part:** 15 of 112
**GitHub:** https://github.com/ratan0n/docs/tree/main/mz93-documentation
**Size:** ~63.1 KB
---

The Search & Repair UI allows users to perform the following: Search for Data Veracity records (erroneous UDRs or batch files) Change the state Mark Data Veracity records for deletion Force delete Data Veracity records Repair Data Veracity records Open Data Veracity - Search Searching for UDR Input Type To perform a search for UDR Input Type in Data Veracity, follow the steps below: Unsupported Data Type for Search Searching or filtering of UDRs with list and map data types are currently not supported by Data Veracity. Searching by filter with Bit Set Field data type is not supported by Data Veracity as well. To search for UDR Input Type, you must first select a Data Veracity profile. Click the Filter button to open the Search dialog. Open Data Veracity Search dialog Click Browse to select the Data Veracity profile . Select UDR for Input type . When you have selected UDR for Input type , you can configure the following: UDR types - Select the specific UDR from a list. You can only choose ONE UDR type to access. Open Data Veracity UDR types combo box Display Fields - Select specific fields (which includes meta data, user defined MIMs and UDR fields) that you would like to display in the query results. Open Display Fields selection dialog box Search Query - Add the filter rules that you want in the query builder by clicking on Add . If more than one rule is defined, you would be able to choose between AND or OR by clicking on either of the buttons. You could also add a new group of rules by clicking on the Add Group button to define a nested set of rules for the query. When you run a query, rows in the table that matches the expression will be displayed in the Query Results . For more information, see the Search Query section below. Click OK to execute the query and the results will be displayed. Open Example Query Result for UDR Input type Query Results Sort Order Sorting of search results is done from the Data Veracity Database via SQL query statement and so the sorting behavior will depend on the behavior of the Data Veracity Database(for example, sorting of alphabetical characters in Oracle and SAP HANA is case sensitive, whereas in PostgreSQL it is case insensitive). Data Veracity State column values is represented as numbers in the Data Veracity Database. State column will be sorted by the order of the numbers assigned to the states where: NEW UPDATED PRE_DELETE REPROCESSED DELETE_APPROVED Searching for Batch Input Type To perform a search for Batch Input Type in Data Veracity, follow the steps below: To search for Batch, you must first select a Data Veracity profile. Click the Filter button to open the Search dialog. Open Data Veracity Search dialog Click Browse to select the Data Veracity profile . Select Batch for Input type . When you have selected Batch for Input type , you can configure the following: Display Fields - Select specific fields (which includes meta data and user defined MIMs) that you would like to display in the query results. Open Display Fields selection dialog box Search Query - In the Search Query panel, add the Filter rules that you want in the query builder by clicking on Add . If more than one rule is defined, you would be able to choose between AND or OR by clicking on either of the buttons. You could also add a new group of rules by clicking on the Add Group button to define a nested set of rules for the query. For more information, see the Search Query section below. Click OK to execute the query and the results will be displayed. Open Example Query Result for Batch Input type Query Results Sort Order Sorting of search results is done from the Data Veracity Database via SQL query statement and so the sorting behavior will depend on the behavior of the Data Veracity Database(for example, sorting of alphabetical characters in Oracle and SAP HANA is case sensitive, whereas in PostgreSQL it is case insensitive). Searching with Saved Filters To perform a search by loading a previously saved filter, follow the steps below: To search with a saved filter, you must select a previously saved filter. Click the Filter button to open the Search dialog. Search and select a saved filter with the Saved filters drop down and the configured filter values will all be loaded in the Search dialog. Open Click OK to execute the query and the results will be displayed. Search Query Open Search Query builder This panel represents an expression based on the columns in the Data Veracity table. When you execute a query, rows in the Data Veracity table that matches the expression will be displayed. Item Description Item Description AND Click this button to apply AND logic on a set of rules or groups. OR Click this button to apply OR logic on a set of rules or groups. Field name This drop-down list contains columns in the selected database table that you can use in your query. The query is carried out based on this selection as a filter rule to populate the result for the Display Field. Open Example field names Operator This is a comparison operator that is applied to the values of the specified column. The available operators are listed according to the data type of the selected column. Open Example operators drop-down Value This field contains a value that is used for comparison with the selected column. When between and not between is the selected operator, two value fields are displayed. When you click this field and the column is of a date type, a date picker will be displayed. Add Click this button to add a new rule to the expression. Add Group Click this button to add a group of rules within the expression. The groups can be nested. Remove Group This button will only appear when a group is added. Click this button to delete a group. When you delete a group, the rules contained within it will be deleted as well. Delete Click this button to delete a rule. Additional Actions Apart from searching for Data Veracity records in the Data Veracity tables, you can perform the following actions in the Search & Repair. These actions buttons/menus can be found on the query results table. Marking Records for Deletion UDRs or Batch files could be marked for deletion using the Mark Delete option. Executing this option will give the selected records the PRE_DELETE state and make it available in the Approve Delete UI. For more information about how deletion is approved, , refer to Approve Delete . To mark records for deletion, you can click on Mark Delete at the Actions column to mark a single record for deletion. select the records you will want to mark for deletion then click on Mark Delete button in the result table menu bar. click on Mark Delete button in the result table menu bar when all of the records are deselected if you wish to mark for deletion all the records in the result table. A message will be displayed asking if you are sure that you would want to mark the selected records for deletion. If you click OK , the selected records will have their states marked as PRE_DELETE. Repairing UDRs This is only applicable when Input type is UDR . UDRs stored in Data Veracity could be edited and updated by the user to rectify any erroneous values found in the query results table. The repair job is conducted following these steps: To repair UDRs values, you can Select the Data Veracity records of UDRs in which the user would like to repair the values, then click on the Repair button in the result table menu bar. click on Repair button(from the 3 dots menu) in the result table menu bar when all of the records are deselected if you wish to repair all the UDRs in the result table. The New Repair Rules dialog box will appear. From this dialog box, you can create and save a new rule. Alternatively, you can load an existing rule to use or even to modify it. There can be one or multiple rules for each repair rule in Data Veracity. For more information about managing Repair Rules refer to Repair Rules . Repair rules dialog box To create a new rule, click on the New Rule button to begin: You will select the UDR Field in the first combo box. You will then select the operation to be conducted in the second combo box. You can also check the APL check box to allow the include business logic in the form of APL codes into the rule itself. To remove a rule, click on the Minus button on the right side of each rule. Clicking on the Save button will save the Repair Rule as a new rule, but if the Repair Rule is already an existing rule, you have the option to save it as a new repair rule or to update the existing rule. Click the Repair Selected or Repair All button to execute the repair job. It will also take you to the Repair Jobs page where the repair job will be listed and the user will be able to monitor the progress of the job. For more information on the Repair Jobs page, please refer to Repair Jobs . View UDRs This is only applicable when Input type is UDR . Click on View UDR at the Actions column to inspect a UDR and view the field and values present in the UDR. Delete Records Delete is an operation for the user to completely remove the Data Veracity record from the Data Veracity database tables without marking the record for deletion. Note! Delete is only available to users with Write permissions for Data Veracity and Data Veracity - Search Application. For more information on User Privileges Management, please refer to User Privileges Management . To delete records, you can click on Delete at the Actions column to delete a single record. select the records you will want to delete then click on Delete button in the result table menu bar. click on Delete button(from the 3 dots menu) in the result table menu bar. when all of the records are deselected if you wish to delete all the records in the result table. A message will be displayed asking if you would want to permanently remove the selected records. If you click OK , the selected records will be completely removed from the Data Veracity database tables. Setting the State of a Data Veracity Record Set state is an operation for the user to manipulate the state of the records. There are a total of 5 different states in Data Veracity: NEW, UPDATED, PRE_DELETE, REPROCESSED and DELETE_APPROVED. Each of these states signify the current status of the records where: NEW is for newly inserted records from the Data Veracity Forwarding Agent or from cancelled batches. UPDATED is for records that has been through a successful repair job execution. PRE_DELETE is for records that have been marked for deletion. REPROCESSED is for records that have been collected by the Data Veracity Collection Agent. DELETE_APPROVED is for records that have been approved for deletion by an administrator. Note! Set state is only available to users with Write permissions for Data Veracity and Data Veracity - Search Application. For more information on User Privileges Management, please refer to User Privileges Management . To set a state for records, you can select the records you will want to delete then click on Set State button in the result table menu bar, then choose from the five states to set the records to. click on Set State button(from the 3 dots menu) in the result table menu bar when all of the records are deselected if you wish to set state for all the records in the result table, then choose from the five states to set the records to. A message will be displayed asking if you are sure that you want to change the state to the selected new state. If you click OK , the selected records will have their states changed. Export Data Veracity Records Data Veracity allows the user to export all records in the search result into a zipped file. Click the Export button in the result table menu bar. In the Export search result dialog, enter the following: Filename - The export filename should contains alphanumeric- or dash (-) characters. Do not add a file extension or a path. Delimiter - You can enter a character or string that should represent the separator token, e.g. a comma or a semi-colon. Open Export search result dialog Select the check box Include Header to add the column names to first row in the file. Click the OK button. A dialog box containing a link to download the zipped file will be displayed. All the columns of the table that is specified in Display Field will be included in the file.

---

# Document 311: Workflow Bridge Profile Configuration General Tab - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205654790
**Categories:** chunks_index.json

The General tab is displayed by default when creating or opening a Workflow Bridge profile. Open Workflow Bridge profile Setting Description Setting Description Send Reply Over Bridge Select this checkbox if the Collection workflow must send a reply back to the Forwarding workflow each time a ConsumeCycleUDR has been received. If this is not checked only ConsumeCycleUDRs with an wfbActionUDR will be sent back. Note! This only applies for the ConsumeCycleUDR , since the WorkflowState UDRs must always be acknowledged. There is no timeout handling for outstanding ConsumeCycleUDR s requests in the forwarding agent, it must be handled in the Workflow logic if required. Force Serialization This option is enabled by default and applies to situations where the Workflows are running on the same EC. You can disable it to increase performance, if you are certain that no configurations will be changed during the execution of these Workflows. Note! If this option is disabled, it is strongly recommended to NOT perform any configuration changes while the Workflows are running. Response Timeout (s) Enter the time (in seconds) that the Workflow Bridge Forwarding agent will wait for a response for a WorkflowState UDR from the Workflow Bridge Real-time Collection agent. After the specified time, the Workflow Bridge Forwarding agent will time out and abort the workflow. The default value is "60". Bulk Size Configure Bulk Size if you want data to be bulked by the Workflow Bridge Forwarding agent before being sent to the collection side. Enter the number of UDRs that should be bulked. The default value is "0", which means that the bulk functionality will not be used. Bulk Timeout (ms) Enter the time (in milliseconds) that the Workflow Bridge Forwarding agent should wait in case the bulk size criteria is not fulfilled. Default value is "0" which is an infinite timeout. Number of Collectors If you want to configure broadcasting or load balancing, that is, if you want several different Workflow Bridge collecting workflow instances to be able to receive data from the forwarding workflow, you enter the number of collecting workflows you want to use in this field. The number of collecting workflows connected to the workflow bridge must not exceed the limit set by this value. In the case of a batch forwarding workflow, it must be started after at least one collector is running, or it will abort. Collecting workflows that are started after the limit has been reached will also abort. Real-time forwarding workflows do not require any collectors running when started, and Number of Collectors represents an upper limit only. Validation of this configuration will also be performed. Transport Select the transport protocol that you prefer for the best performance, Aeron , TCP , or TCP(netty4) . Note! If you select Aeron, you cannot use Bulk Size and Bulk Timeout. If you select TCP , Netty version 3 is used. If you select TCP(netty4) , netty version 4 is used and you can set the advanced property highThroughput to false (in the Advanced tab) to save CPU usage (at the cost of lower throughput). Default is true. It can be wise to perform some test runs with the sort of traffic you will use later and especially check which one gives the best characteristics in terms of throughput and latency. You can always switch between Aeron or TCP/IP even on a system that is in service, but you must restart the workflow when doing this. Load Balancing Strategy Select the Load Balancing Strategy for preferred scalability and redundancy. The Load Balancing Strategy is used if you set the number of collectors to more than 1. There are two strategies: Static : LoadIDs from the UDRs are used to determine how data should be distributed via the workflows. See Workflow Bridge Example Real-Time to Real-Time Scenario with Load Balancing for how to use this. Dynamic : Select to distribute the load over all the available collectors. The LoadID from the UDR is used virtually and is not connected to any hardware at the collecting side. The LoadID settings of the workflows will be ignored during load balancing. When selecting Dynamic , another field called Virtual Destinations is displayed. The default setting of the Virtual Destination field is 1024. The LoadIDs in the UDR are mapped to virtual destinations distributed evenly on available consumer instances. The LoadIDs set in the Workflow Table are ignored. For instance, if Virtual Destinations is set to 1024, the UDR's LoadIDs must be populated with values from 0-1023. The Workflow Bridge engine will create the amount of virtual destinations that you have specified in the LoadID field. If starting another workflow, the virtual destinations will be redistributed evenly between the available workflows. In most cases the default setting 1024 of Virtual Destinations is sufficient and will work fine. In case you want to change this, it should be set as a number that is the power of two, such as 512, 1024, or 2048. The number of destinations may vary, so make sure the number is set high enough to get a decent distribution. Note! The Virtual Destinations field is only available if you have set Load Balancing Strategy to Dynamic . UDR Types If you enter a UDR type into the list of UDR types then workflows are validated to only allow Workflow Bridge Cycle UDRs, and UDRs of that type, to be sent into the Workflow Bridge Forwarding Agent. Click the Add button to select the UDR types. If you leave this field blank any UDR type can be sent to the Workflow Bridge Forwarding Agent. Click the Remove button to remove a UDR type. Note! After a Workflow Bridge profile has been changed and saved, all running workflows that are connected to this profile must be restarted.

---

# Document 312: Redis Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205881522
**Categories:** chunks_index.json

After Redis has been installed, you can create Redis profiles to communicate with Redis. For information on how to extend the Redis database, see https://aws.amazon.com/documentation/elasticache/ . Note! Created or updated Redis profiles that are used for PCC do not become effective until you restart the ECs. Redis Profiles A Redis profile is used to read and write data in a Redis database. This profile can be accessed by workflows using Aggregation, Distributed Storage or PCC. As a client to Redis, the profile operates in synchronous mode. When sending a request to Redis, the profile expects a server response, indicating success or failure, before proceeding to send the next one in queue. PCC using a Redis profile has been verified using Amazon ElastiCache. For information about how to create a Redis profile, see Redis Profile .

---

# Document 313: Rules Data Model - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204743007/Rules+Data+Model
**Categories:** chunks_index.json

The UDRs in PCRF.Rules store information about different rules regarding the provided quality of service for different subscribers. See APL - PCC Runtime Support for further information about how to use the PCC.Rules UDRs with APL. The main objects of PCRF.Rules are: Object Description Object Description Rules_Mapping A flexible mapping table used to map from an external representation to a list of rules. The mapping should not include any information related to a specific subscriber. Rules Rules contains the rule settings regarding quality of service and charging that should be applied for the subscribers. Overview of the Rules Data Model The different UDRs within the Rules Data Model are connected as follows: Open Overview of the Rules Data Model RulesMapping UDR In the RulesMapping UDR you set up the priority for the rules mapping, the product, enforcements, notifications, etc that the rules mapping should use and the PCC rules that should be applied. Field Description Field Description ID (int) The unique ID of the rules mapping table. Priority (int) The priority of the mapping item, a low value indicates a high priority. Determines the order in which the matched mapping objects are returned. Arguments (list<string>) The arguments of a mapping object e g the product. The arguments are stated with regular expressions, which means that entering "Products [2-5]" will match Products 2, 3, 4, or 5. Targets (list<PCC_Rule>) The different rules used by the mapping object, see the section below PCC_Rule UDR. StopFallthrough (boolean) Used in the rules selection process. If several rules apply, but the one with highest priority has been configured with StopFallthrough set to Yes in the APL code, only this rule will be returned if it is active. If it is not active, all other active rules that apply will be returned. Below is a screenshot of the UDR Assistance displaying the RulesMapping UDR: Open RulesMapping UDR Example RulesMapping UDR The following values: ID=11 Priority=2 Arguments=['Product 1'] Targets=[1,2] ID=12 Priority=1 Arguments=['Product 2-4'] Targets=[3] StopFallthrough=yes will give the following setup: The second mapping table, with priority 1, will have higher priority than the first one, with priority 2. The first mapping table use the product Product 1 , while the second mapping table use the products Product 2 , Product 3 , or Product 4 . The first mapping table uses PCC Rules with IDs 1 and 2, while the second mapping object uses the rule with ID 3. If the second mapping table is active, only the rules for this table will be returned even if other rules apply. PCC_Rule UDR In the PCC_Rule UDR you determine the period during which the rule should be active, the charging rule that should be applied and the quality of service that should be applied for the rule. Field Description Field Description ID (int) The unique ID of the rule. Period (string) The activity period that the rule should have, see Periods Data Model Rules . Charging_Rules (list<Charging_Rule (PCRF.Rules)>)) The charging rules that should be applied for this rule, see the section below, Charging_Rule UDR. Rule_Name (string) The name of the rule. QoS (QoS_Information (PCRF.Rules) The quality of service that should be applied for this rule, see the section below, QoS_Information UDR. Below is a screenshot of the UDR Assistance displaying the Rules UDR: Open Rules UDR Example Rules UDR The following values: ID=1 Period='WEEKDAYS' Charging_Rules=[1] Rule_Name='PRIMARY' QoS=[20] ID=2 Period='NIGHTS' Charging_Rules=[3] Rule_Name='SECONDARY' QoS=[10] ID=3 Period="WEEKENDS' Charging_Rules=[5] Rule_Name='THIRD' QoS=[30] will give the following setup: The IDs used for the three rules; 1,2 3, are the IDs stated as Targets in the mapping tables, see the section above, RulesMapping UDR. The three rules are active during three different periods; WEEKDAYS , NIGHTS and WEEKENDS , see Periods Data Model Rules . Rule number 1 uses the charging rule with ID 1, rule number 2 uses charging rule with ID 3 and rule number 3 uses charging rule with ID 5, see the section below, Charging_Rule UDR. The names of the rules are PRIMARY , SECONDARY and THIRD . The first rule uses QoS ID 20, the second rule uses QoS ID 10 and the third rule uses QoS ID 30, see the section below, QoS_Information UDR. Charging_Rule UDR In the Charging_Rule UDR you determine the Static, Dynamic or Final Indication that should be used for the charging rule. Field Description Field Description ID (int) The unique ID of the charging rule. Name (string) The name of the charging rule. Static_Rule (Static_Rule (PCRF.Rules)) The static rule that should be applied, see the section below, Static_Rule UDR. Dynamic_Rule (Dynamic_Rule (PCRF.Rules)) The dynamic rule that should be applied, see the section below, Dynamic_Rule UDR. Final_Indication_Rule (Final_Indication_Rule (PCRF.Rules)) The final indication rule that should be applied, see the section below, Final_Indication_Rule UDR. Note The Charging rule only indicates one type of rule; static, dynamic or final indication, not a combination. Below is a screenshot of the UDR Assistance displaying the Charging_Rule UDR: Open Charging_Rule UDR Example Charging_Rule UDR The following values: ID=1 Name='PRIMARY' Static_Rule=111 Dynamic_Rule= Final_Indication_Rule= ID=3 Name='SECONDARY' Static_Rule=112 Dynamic_Rule= Final_Indication_Rule= ID=5 Name='REST' Static_Rule= Dynamic_Rule= Final_Indication_Rule=200 will give the following setup: The first charging rule, with ID 1 and name Primary , uses the static rule with ID 111. The second charging rule, with ID 3 and name Secondary , uses the static rule with ID 112. The third charging rule, with ID 5 and name Rest , uses the final indication rule with ID 200. QoS_Information UDR The QoS_Information UDR contains Quality of Service parameters according to 3GPP specifications TS 29.212 and TS23.203. Field Description Field Description ID (int) The unique ID of the quality of service. Name (string) The name of the quality of service. APN_AGG_MBR_DL (long) The maximum aggregated bit rate for downloading data to the APN (Access Point Name). APN_Agg_MBR_UL (long) The maximum aggregated bit rate for uploading data from the APN (Access Point Name). ARP (Allocation_Retention_Priority (PCRF.Rules)) The priority of allocation and retention, the pre-emption capability and pre-emption vulnerability. This field is only applicable for Dynamic Rules. GBR_DL (long) The guaranteed bit rate for downloading data. GBR_UL (long) The guaranteed bit rate for uploading data. MBR_DL (long) The maximum bit rate for downloading data. MBR_UL (long) The maximum bit rate for uploading data. QCI (int) The Quality of Service Class Identifier identifies a set of QoS parameters that define the authorized QoS, excluding the applicable bitrates and ARP, for the bearer or service flow. The following values are defined: 1 - Has priority 2 and is used for conversational voice services. 2 - Has priority 4 and is used for conversational video (live streaming) services. 3 - Has priority 3 and is used for real time gaming services. 4 - Has priority 5 and is used for non-conversational video (buffered streaming) services. 5 - Has priority 1 and is used for IMS signaling services. 6 - Has priority 6 and is used for video (buffered streaming) and TCP-based (e g www, e-mail, chat, ftp, p2p file sharing, progressive video, etc) services. 7 - Has priority 7 and is used for voice, video (live streaming), and interactive gaming services. 8 - Has priority 8 and is used for video (buffered streaming), TCP-based (e g www, e-mail, chat, ftp, p2p file sharing, progressive video, etc) services. 9 - Has priority 9 and is used for video (buffered streaming), TCP-based (e g www, e-mail, chat, ftp, p2p file sharing, progressive video, etc) services, for example. Below is a screenshot of the UDR Assistance displaying the QoS_Information UDR: Open QoS_Information UDR Example QoS_Information UDR The following values: ID=10 Name='Quality A' APN_AGG_MBR_DL=32 APN_AGG_MBR_UL=32 GBR_DL=64 GBR_UL=64 MBR_DL=128 MBR_UL=64 QCI=7 ID=20 Name='Quality B' APN_AGG_MBR_DL=32 APN_AGG_MBR_UL=32 GBR_DL=64 GBR_UL=64 MBR_DL=128 MBR_UL=128 QCI=4 will give the following setup: The maximum aggregated bit rate for both uploading and downloading data is 32 kbit/s for both QoS settings, Quality A and Quality B . The guaranteed bit rate for both uploading and downloading data is 64 kbit/s for both QoS settings. The maximum bit rate for uploading data is 64 kbit/s for Quality A and 128 kbit/s for Quality B . The maximum bit rate for downloading data is 128 kbit/s for both QoS settings. The first QoS setting uses Quality of Service Indicator 7, while the second uses Quality of Service Indicator 4. Static_Rule UDR Static rules are provisioned via the Gx interface and can be activated or deactivated at any time. Field Description Field Description ID (int) The unique ID of the static rule. Rule_Name (string) The name of the static rule. Rule_Base_Name (string) The base name of the rule which indicates the name of a pre-defined group of PCC rules. This field is not necessary if a Rule Name has been set. Below is a screenshot of the UDR Assistance displaying the Static_Rule UDR: Open Static_Rule UDR Example Static_Rule UDR The following values: ID=111 Rule_Name='STATIC 1' ID=112 Rule_Name='STATIC 2' ID=113 Rule_Name='STATIC 3' will give the following setup: The three static rules; 111, 112 and 113, have the names STATIC 1 , STATIC 2 and STATIC 3 . Dynamic_Rule UDR Dynamic rules are dynamically provisioned via the Gx interface. Dynamic PCC rules can be installed, modified and removed at any time. For information about the fields in the Dynamic_Rule UDR, see specification TS 29.212 from 3GPP. Below is a screenshot of the UDR Assistance displaying the Dynamic_Rule UDR: Open Dynamic_Rule UDR Final_Indication_Rule UDR A Final Indication Rule is used to indicate when a subscriber should be redirected or blocked based on reaching a certain usage level. In the case of mobile data traffic control, this would be done by sending the information in the Gy-answer (as opposed to Gx, which is used for Static and Dynamic rules), in the Multiple-Services-Credit-Control field "Final-Unit-Indication", with the same fields populated as the fields in this table. Field Description Field Description ID (int) The unique ID of the final indication rule. The ID is only included as a key and will not be part of the MSCC. Name (string) The name of the final indication rule. Rating_Group (int) The rating group for the final indication rule. Final_Unit_Action (int) Indicates if redirection should be used. Possible values are 0 - Terminate, 1 - Redirect and 2 -Restrict Access. Redirect_Address_Type (int) The type of address used for the redirect messages; 0 - IPv4 Address, 1 - IPv6 Address, 2 - URL, or 3 - SIP URI. Redirect_Server_Address (string) The address the subscriber should be redirected to. Filter_Id (list<string>) The ID of the filter to be used. Restriction_Filter_Rule (list<string>) The Restriction_Filter_Rule to be used Below is a screenshot of the UDR Assistance displaying the Final_Indication_Rule UDR: Open Final_Indication_Rule UDR Example Final_Indication_Rule UDR The following values: ID=100 Name='FIRST REDIRECT' Rating_Group=1 Final_Unit_Action=1 Redirect_Address_Type=2 Redirect_Server_Address='http://example1.com' ID=200 Name"'SECOND REDIRECT' Rating_Group=2 Final_Unit_Action=1 Redirect_Address_Type=2 Redirect_Server_Address='http://example2.com' will give the following setup: The first rule, with ID 100 and name First Redirect , will use rating group 1 while the second rule, with ID 200 and name Second Redirect will use rating group 2. Both rules will use redirect messages (indicated by setting Final_Unit_Action to 1). The type of address used for the redirect messages is URL (indicated by setting Redirect_Address_Type to 2). The subscribers adhering to the rule with ID 100 will be redirected to http://example1.com , while the subscribers adhering to the rule with ID 200 will be redirected to http://example2.com/ .

---

# Document 314: ParquetEncoderUDR - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205653372/ParquetEncoderUDR
**Categories:** chunks_index.json

The Parquet Encoder agent receives ParquetEncoderUDRs, converts the data into Parquet, and forwards bytearray data to a forwarder to (eventually) be written to a Parquet document. Field Description Field Description payload Fields passed for the row as an APL map (map: string -> any). The contents of the map must match up with the schema specified in the Encoder configuration.

---

# Document 315: Rules Data Model - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204743007
**Categories:** chunks_index.json

The UDRs in PCRF.Rules store information about different rules regarding the provided quality of service for different subscribers. See APL - PCC Runtime Support for further information about how to use the PCC.Rules UDRs with APL. The main objects of PCRF.Rules are: Object Description Object Description Rules_Mapping A flexible mapping table used to map from an external representation to a list of rules. The mapping should not include any information related to a specific subscriber. Rules Rules contains the rule settings regarding quality of service and charging that should be applied for the subscribers. Overview of the Rules Data Model The different UDRs within the Rules Data Model are connected as follows: Open Overview of the Rules Data Model RulesMapping UDR In the RulesMapping UDR you set up the priority for the rules mapping, the product, enforcements, notifications, etc that the rules mapping should use and the PCC rules that should be applied. Field Description Field Description ID (int) The unique ID of the rules mapping table. Priority (int) The priority of the mapping item, a low value indicates a high priority. Determines the order in which the matched mapping objects are returned. Arguments (list<string>) The arguments of a mapping object e g the product. The arguments are stated with regular expressions, which means that entering "Products [2-5]" will match Products 2, 3, 4, or 5. Targets (list<PCC_Rule>) The different rules used by the mapping object, see the section below PCC_Rule UDR. StopFallthrough (boolean) Used in the rules selection process. If several rules apply, but the one with highest priority has been configured with StopFallthrough set to Yes in the APL code, only this rule will be returned if it is active. If it is not active, all other active rules that apply will be returned. Below is a screenshot of the UDR Assistance displaying the RulesMapping UDR: Open RulesMapping UDR Example RulesMapping UDR The following values: ID=11 Priority=2 Arguments=['Product 1'] Targets=[1,2] ID=12 Priority=1 Arguments=['Product 2-4'] Targets=[3] StopFallthrough=yes will give the following setup: The second mapping table, with priority 1, will have higher priority than the first one, with priority 2. The first mapping table use the product Product 1 , while the second mapping table use the products Product 2 , Product 3 , or Product 4 . The first mapping table uses PCC Rules with IDs 1 and 2, while the second mapping object uses the rule with ID 3. If the second mapping table is active, only the rules for this table will be returned even if other rules apply. PCC_Rule UDR In the PCC_Rule UDR you determine the period during which the rule should be active, the charging rule that should be applied and the quality of service that should be applied for the rule. Field Description Field Description ID (int) The unique ID of the rule. Period (string) The activity period that the rule should have, see Periods Data Model Rules . Charging_Rules (list<Charging_Rule (PCRF.Rules)>)) The charging rules that should be applied for this rule, see the section below, Charging_Rule UDR. Rule_Name (string) The name of the rule. QoS (QoS_Information (PCRF.Rules) The quality of service that should be applied for this rule, see the section below, QoS_Information UDR. Below is a screenshot of the UDR Assistance displaying the Rules UDR: Open Rules UDR Example Rules UDR The following values: ID=1 Period='WEEKDAYS' Charging_Rules=[1] Rule_Name='PRIMARY' QoS=[20] ID=2 Period='NIGHTS' Charging_Rules=[3] Rule_Name='SECONDARY' QoS=[10] ID=3 Period="WEEKENDS' Charging_Rules=[5] Rule_Name='THIRD' QoS=[30] will give the following setup: The IDs used for the three rules; 1,2 3, are the IDs stated as Targets in the mapping tables, see the section above, RulesMapping UDR. The three rules are active during three different periods; WEEKDAYS , NIGHTS and WEEKENDS , see Periods Data Model Rules . Rule number 1 uses the charging rule with ID 1, rule number 2 uses charging rule with ID 3 and rule number 3 uses charging rule with ID 5, see the section below, Charging_Rule UDR. The names of the rules are PRIMARY , SECONDARY and THIRD . The first rule uses QoS ID 20, the second rule uses QoS ID 10 and the third rule uses QoS ID 30, see the section below, QoS_Information UDR. Charging_Rule UDR In the Charging_Rule UDR you determine the Static, Dynamic or Final Indication that should be used for the charging rule. Field Description Field Description ID (int) The unique ID of the charging rule. Name (string) The name of the charging rule. Static_Rule (Static_Rule (PCRF.Rules)) The static rule that should be applied, see the section below, Static_Rule UDR. Dynamic_Rule (Dynamic_Rule (PCRF.Rules)) The dynamic rule that should be applied, see the section below, Dynamic_Rule UDR. Final_Indication_Rule (Final_Indication_Rule (PCRF.Rules)) The final indication rule that should be applied, see the section below, Final_Indication_Rule UDR. Note The Charging rule only indicates one type of rule; static, dynamic or final indication, not a combination. Below is a screenshot of the UDR Assistance displaying the Charging_Rule UDR: Open Charging_Rule UDR Example Charging_Rule UDR The following values: ID=1 Name='PRIMARY' Static_Rule=111 Dynamic_Rule= Final_Indication_Rule= ID=3 Name='SECONDARY' Static_Rule=112 Dynamic_Rule= Final_Indication_Rule= ID=5 Name='REST' Static_Rule= Dynamic_Rule= Final_Indication_Rule=200 will give the following setup: The first charging rule, with ID 1 and name Primary , uses the static rule with ID 111. The second charging rule, with ID 3 and name Secondary , uses the static rule with ID 112. The third charging rule, with ID 5 and name Rest , uses the final indication rule with ID 200. QoS_Information UDR The QoS_Information UDR contains Quality of Service parameters according to 3GPP specifications TS 29.212 and TS23.203. Field Description Field Description ID (int) The unique ID of the quality of service. Name (string) The name of the quality of service. APN_AGG_MBR_DL (long) The maximum aggregated bit rate for downloading data to the APN (Access Point Name). APN_Agg_MBR_UL (long) The maximum aggregated bit rate for uploading data from the APN (Access Point Name). ARP (Allocation_Retention_Priority (PCRF.Rules)) The priority of allocation and retention, the pre-emption capability and pre-emption vulnerability. This field is only applicable for Dynamic Rules. GBR_DL (long) The guaranteed bit rate for downloading data. GBR_UL (long) The guaranteed bit rate for uploading data. MBR_DL (long) The maximum bit rate for downloading data. MBR_UL (long) The maximum bit rate for uploading data. QCI (int) The Quality of Service Class Identifier identifies a set of QoS parameters that define the authorized QoS, excluding the applicable bitrates and ARP, for the bearer or service flow. The following values are defined: 1 - Has priority 2 and is used for conversational voice services. 2 - Has priority 4 and is used for conversational video (live streaming) services. 3 - Has priority 3 and is used for real time gaming services. 4 - Has priority 5 and is used for non-conversational video (buffered streaming) services. 5 - Has priority 1 and is used for IMS signaling services. 6 - Has priority 6 and is used for video (buffered streaming) and TCP-based (e g www, e-mail, chat, ftp, p2p file sharing, progressive video, etc) services. 7 - Has priority 7 and is used for voice, video (live streaming), and interactive gaming services. 8 - Has priority 8 and is used for video (buffered streaming), TCP-based (e g www, e-mail, chat, ftp, p2p file sharing, progressive video, etc) services. 9 - Has priority 9 and is used for video (buffered streaming), TCP-based (e g www, e-mail, chat, ftp, p2p file sharing, progressive video, etc) services, for example. Below is a screenshot of the UDR Assistance displaying the QoS_Information UDR: Open QoS_Information UDR Example QoS_Information UDR The following values: ID=10 Name='Quality A' APN_AGG_MBR_DL=32 APN_AGG_MBR_UL=32 GBR_DL=64 GBR_UL=64 MBR_DL=128 MBR_UL=64 QCI=7 ID=20 Name='Quality B' APN_AGG_MBR_DL=32 APN_AGG_MBR_UL=32 GBR_DL=64 GBR_UL=64 MBR_DL=128 MBR_UL=128 QCI=4 will give the following setup: The maximum aggregated bit rate for both uploading and downloading data is 32 kbit/s for both QoS settings, Quality A and Quality B . The guaranteed bit rate for both uploading and downloading data is 64 kbit/s for both QoS settings. The maximum bit rate for uploading data is 64 kbit/s for Quality A and 128 kbit/s for Quality B . The maximum bit rate for downloading data is 128 kbit/s for both QoS settings. The first QoS setting uses Quality of Service Indicator 7, while the second uses Quality of Service Indicator 4. Static_Rule UDR Static rules are provisioned via the Gx interface and can be activated or deactivated at any time. Field Description Field Description ID (int) The unique ID of the static rule. Rule_Name (string) The name of the static rule. Rule_Base_Name (string) The base name of the rule which indicates the name of a pre-defined group of PCC rules. This field is not necessary if a Rule Name has been set. Below is a screenshot of the UDR Assistance displaying the Static_Rule UDR: Open Static_Rule UDR Example Static_Rule UDR The following values: ID=111 Rule_Name='STATIC 1' ID=112 Rule_Name='STATIC 2' ID=113 Rule_Name='STATIC 3' will give the following setup: The three static rules; 111, 112 and 113, have the names STATIC 1 , STATIC 2 and STATIC 3 . Dynamic_Rule UDR Dynamic rules are dynamically provisioned via the Gx interface. Dynamic PCC rules can be installed, modified and removed at any time. For information about the fields in the Dynamic_Rule UDR, see specification TS 29.212 from 3GPP. Below is a screenshot of the UDR Assistance displaying the Dynamic_Rule UDR: Open Dynamic_Rule UDR Final_Indication_Rule UDR A Final Indication Rule is used to indicate when a subscriber should be redirected or blocked based on reaching a certain usage level. In the case of mobile data traffic control, this would be done by sending the information in the Gy-answer (as opposed to Gx, which is used for Static and Dynamic rules), in the Multiple-Services-Credit-Control field "Final-Unit-Indication", with the same fields populated as the fields in this table. Field Description Field Description ID (int) The unique ID of the final indication rule. The ID is only included as a key and will not be part of the MSCC. Name (string) The name of the final indication rule. Rating_Group (int) The rating group for the final indication rule. Final_Unit_Action (int) Indicates if redirection should be used. Possible values are 0 - Terminate, 1 - Redirect and 2 -Restrict Access. Redirect_Address_Type (int) The type of address used for the redirect messages; 0 - IPv4 Address, 1 - IPv6 Address, 2 - URL, or 3 - SIP URI. Redirect_Server_Address (string) The address the subscriber should be redirected to. Filter_Id (list<string>) The ID of the filter to be used. Restriction_Filter_Rule (list<string>) The Restriction_Filter_Rule to be used Below is a screenshot of the UDR Assistance displaying the Final_Indication_Rule UDR: Open Final_Indication_Rule UDR Example Final_Indication_Rule UDR The following values: ID=100 Name='FIRST REDIRECT' Rating_Group=1 Final_Unit_Action=1 Redirect_Address_Type=2 Redirect_Server_Address='http://example1.com' ID=200 Name"'SECOND REDIRECT' Rating_Group=2 Final_Unit_Action=1 Redirect_Address_Type=2 Redirect_Server_Address='http://example2.com' will give the following setup: The first rule, with ID 100 and name First Redirect , will use rating group 1 while the second rule, with ID 200 and name Second Redirect will use rating group 2. Both rules will use redirect messages (indicated by setting Final_Unit_Action to 1). The type of address used for the redirect messages is URL (indicated by setting Redirect_Address_Type to 2). The subscribers adhering to the rule with ID 100 will be redirected to http://example1.com , while the subscribers adhering to the rule with ID 200 will be redirected to http://example2.com/ .

---

# Document 316: Aggregation Profile - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204998848/Aggregation+Profile
**Categories:** chunks_index.json

Take into account the following behaviors when using the Aggregation profile: You can apply an Aggregation profile to any number of workflow configurations. Aggregation sessions created in the storage that is specified by the profile can be accessed by multiple active workflows simultaneously. When you have selected file storage and are using an Aggregation profile across several workflow configurations, you must consider the read-and-write lock mechanisms that are applied to the stored sessions. For further information about read-and-write locks, see Aggregation Agent Configuration - Batch and Aggregation Agent Configuration - Real-Time . The Aggregation profile is loaded when you start a workflow that depends on it. Changes to the profile become effective when you restart the workflow. Session UDR Each Aggregation profile stores sessions of a specific Session UDR type that you define in ultra. This means that your Aggregation profile configuration must include a session UDR type. See the example below: Example - Defining a Session UDR type in an Ultra Configuration session SessionUDRType { int intField; string strField; list<drudr> udrList; }; It is recommended that you keep the session UDR as small as possible. A larger UDR decreases performance compared to a small one. Note! Take particular care when updating the Ultra formats. It is not possible to collect data from the Aggregation session storage if the corresponding UDR has been renamed. However, if you change the format definition, you can still collect the data. Changes to the formats are handled as follows: Default values are assigned to fields that are added or renamed. Fields that have been removed are ignored. Default values are assigned to fields with data types that have been changed. For further information on Ultra formats, see Ultra Reference Guide . Configuration The contents of the buttons in the menu bar may change depending on which configuration type has been opened in the currently active tab. The Aggregation profile uses the standard buttons that are visible for all configurations, and these are described in Build View . The profile consists of four tabs: Session Tab Association Tab Storage Tab Advanced Tab Session Tab In the Session tab you can browse and select a Session UDR Type and configure the Storage selection settings. Open Aggregation profile configuration - Session tab Setting Description Setting Description Session UDR Type Click on the Browse... button and select the Session UDR Type. The Session UDR is defined in Ultra see Aggregation Profile | Session UDR above for more information. Storage Select the type of storage for aggregation sessions. The available settings are: Couchbase Storage Elasticsearch Storage File Storage Memory Only Redis Storage SQL Storage File Storage and Memory Only can be used in batch and real-time workflows. Elasticsearch Storage and SQL Storage can only be used in batch workflows. Couchbase Storage and Redis Storage can only be used in real-time workflows. These storage types allow highly available systems with geographic redundancy. The session data that is replicated within the storage is available across workflows, EC Groups, and systems. This serves to minimize data loss in failover scenarios. Note! Data stored in Couchbase or Redis is not available in the Aggregation Session Inspector . Open Session tab in the Aggregation profile Association Tab You use the Association tab to configure rules that are used to match an incoming UDR with a session. Every UDR type requires a set of rules that are processed in a certain order. In most cases, only one rule per incoming UDR type is defined. You can use a primary expression to filter out UDRs that are candidates for a specific rule. If the UDR is filtered out by the primary expression, it is matched with the existing sessions by using one or several ID fields as a key. For UDRs with ID Fields matching an existing session, an additional expression may be used to specify additional matching criteria. For example, if dynamic IP addresses are provided to customers based on time intervals, the field that contains the IP address could be used in ID Fields while the actual time could be compared in Additional Expression . Open Aggregation profile configuration - Association tab Setting Description Setting Description UDR Types Click on the Add button to select a UDR Type in the UDR Internal Format dialog. The selected UDR type will then appear in this field. Each UDR type may have a list of rules attached to it. Selecting the UDR type will display its rules as separate tabs to the right in the Aggregation profile configuration. Primary Expression The Primary Expression is optional. Enter an APL code expression that is going to be evaluated before the ID Fields are evaluated. If the evaluation result is false the rule is ignored and the evaluation continues with the next rule. Use the input variable to write this filtering expression. ID Fields Click on the Add button to select additional ID Fields in the ID Fields dialog. These fields, along with the Additional Expression settings enable the system to determine whether a UDR belongs to an existing session or not. If the contents of the selected fields match the contents of a session, and an Additional Expression evaluation results in true , the UDR belongs to the session. Note! Ensure that the selected fields are of the same type and appear in the same order for all the rules that are defined for the agent. Additional Expression The Additional Expression is optional. Enter an APL code expression that is going to be evaluated along with the ID Fields. Use the input variable to write this filtering expression. The Additional Expression is useful when you have several UDR types with a varying number of ID Fields, that are about to be consolidated. Having several UDR types requires the ID fields to be equal in number and type. If one of the types requires additional fields that do not have any counterpart in the other type or types, these must be evaluated in the Additional Expression field. Save the field contents as a session variable, and compare the new UDRs with it. For an example, see Association - Radius UDRs in Aggregation Example - Association of IP Data . Note! When using Additional Expressions for Aggregation the caching mechanism only takes into account the primary and secondary rules when creating the session CRC. This means that if the number of sessions that cannot be told apart without the use of an Additional Expression is high, the performance of the Aggregation Agent decreases due to cache read/write operations. This is especially true if the Max Cached Sessions property is low compared to the number of sessions. For this reason, it is recommended that Max Cached Sessions is set to a high value when using Additional Expressions. Create Session on Failure Select this check box to create a new session if no matching session is found. If the check box is not selected, a new session will not be created when no matching session is found. Note! If you provide a primary expression, and it evaluates to false , the rule is ignored and no new session is created. If the order of the input UDRs is not important, all the rules should have this check box checked. This means that the session object is going to be created regardless of the order in which the UDRs arrive. However, if the UDRs are expected to arrive in a particular sequence, Create Session on Failure must only be selected for the UDR type or field that is considered to be the master UDR, i e the UDR that marks the beginning of the sequence. In this case, all the slave UDR types or fields are targeted for error handling if they arrive before their master UDR. Note! At least one of all defined rules must have this check box selected. Otherwise, no session will ever be created. For further information about all available system properties, see System Properties . Add Rule Click this button to add a new rule for the selected UDR Type. The rule will appear as a new folder to the right of the UDR Types in the Aggregation profile configuration. Usually, only one rule is required. However, in a situation where a session is based on an IP number, stored in either a target or source IP field, two rules are required. The source IP field can be listed in the ID Fields of the first rule and the target IP field listed in the ID Fields of the second rule. Remove Rule Click this button to remove the currently displayed rule. Storage Tab The Storage tab contains settings that are specific for File Storage, Couchbase Storage, Redis Storage, Elasticsearch Storage, and SQL Storage. Couchbase Storage Open Aggregation profile configuration - Couchbase Storage Setting Description Setting Description Profile Select a Couchbase Profile . This profile is used to access the primary storage for aggregation sessions. Mirror Profile Selecting this Couchbase profile is optional. It is used to access secondary storage, providing read-only access for aggregation sessions. Typically, the Mirror Profile is identically configured to a (primary) Profile , that is used by workflows on a different EC Group or other MediationZone system. This is useful to minimize data loss in various failover scenarios. The read-only sessions can be retrieved with APL commands. For more information and examples, see Aggregation Functions . Open Mirror profile concept Elasticsearch Storage Open Aggregation profile configuration - Elasticsearch Storage Setting Description Setting Description Elasticsearch Select an Elasticsearch Profile . This profile is used to access the storage for aggregation sessions. File Storage Open Aggregation profile configuration - File Storage settings Setting Description Setting Description Storage Host Select a Storage Host from the drop-down list. For storage of aggregation sessions select either a specific EC Group or Automatic . If you select Automatic , the same EC Group that has been used by the running workflow will be applied. Alternatively, if the Aggregation Session Inspector is used, a storage host is selected automatically. Refer to Aggregation Session Inspector for further information on the Aggregation Session Inspector. Note! It is recommended that you configure the aggregation workflow to run on the same EC Group that you have selected as Storage Host . Directory Enter the directory on the Storage Host where you want the aggregation data to be stored. Note! If the Storage Host above, is configured to be Automatic , the corresponding Directory has to be a shared file system between all the EC Groups. If this field is greyed out with a stated directory, it means that the directory path has been hard-coded using the mz.present.aggregation.storage.path property. This property is set to false by default. Example - Using the mz.preset.aggregation.storage.path property To enable the property and state the directory to be used: mzsh topo set val:common.mz.preset.aggregation.storage.path '/mydirectory/agg' To disable the property: mzsh topo unset val:common.mz.preset.aggregation.storage.path Partial File Count In this field, you can enter the maximum number of partial files that you want to store. Consider the following: Startup: All the files are read at startup. It takes longer if there are many partial files. Transaction commitment: When the transactions are committed, many small files (large Partial File Count) increase performance. In a batch workflow, use this variable to tune performance. Note! In a real-time workflow, updates to sessions are saved on disk only if the Storage tab is configured with Storage Commit Conditions . Max Cached Sessions Enter the maximum number of sessions to keep in the memory cache. This is a performance-tuning parameter that determines the memory usage of the Aggregation agent. Set this value to be low enough so that there is still enough space for the cache in memory, but not too low, as this will cause performance to deteriorate, see Performance Tuning with File Storage for more information. Enable Separate Storage Per Workflow This option enables each workflow to have a separate session storage. Multiple workflows are allowed to run simultaneously using the same Aggregation profile. If this checkbox is selected, a workflow will never see a session from another workflow. Note! Sometimes, you may notice that file storage takes up more space than expected. This is expected behavior. Read through this note for an overall understanding of the way file storage in Aggregation works. When session data is stored, it is appended to the session file. This means that old session data from the session file is still present in the storage and the current version is added to the file. Removal of old data is done only under certain conditions because otherwise, aggregation handling would be too slow. This is why file storage takes up more space than calculated with session number and single session object size. The session files on the disk grow up to a certain threshold ( 50MB by default) and then a new file is created and used. The old session file will be deleted when no more active sessions are stored in it. The accepted size of a session file can be adjusted by using aggregation.min_session_file_size parameter. For instance, aggregation.min_session_file_size=20000000 will set it to 20MB. This parameter is set with the mzsh topo command on EC, cell, or container level. Old files are removed during the storage commit. Also, since there is a possibility that there will be old session files present because of some long-lived sessions stored there, a defragmentation algorithm is implemented. It runs occasionally and moves those long-lived sessions to new session files so that old session files can be deleted. This is why aggregation storage takes up a lot of disk space. It is designed to provide higher performance at the expense of higher disk space consumption. Memory Only Open Aggregation profile configuration dialog - Memory Only storage When you have selected Memory Only as storage, there are no additional settings in the Storage tab. Redis Storage Open Aggregation profile configuration dialog - Redis Storage Setting Description Setting Description Profile Select a Redis Profile . This profile is used to access the storage for aggregation sessions. SQL Storage Open Aggregation profile configuration dialog - SQL Storage Setting Description Setting Description Profile Select a Database Profile configured with the SQL database type. This profile is used to access the storage for aggregation sessions. Note! Currently the SQL storage only supports PostgreSQL and SAP HANA databases. Storage sharing functionality is currently not supported. Index Fields Click the Add button to select the UDR type. Table SQL Script This text box will generate the SQL statements for the selected UDRs' table schema and indexes for Id, TxId. The schema will be generated based on the number of UDRs in the UDR Type Mapping table. Note! Users will have to copy the SQL script generated in the text box to create the PostgreSQL and SAP HANA tables on their own in the database listed in the Database profile. The Aggregation profile will not automatically create the tables for you. Note! The following table columns are mandatory when creating the database: Column Name Data Type Id VARCHAR(24) TxId BIGINT Deleted BOOLEAN Timeout BIGINT Session BYTEA Advanced Tab The Advanced tab is available when you have selected Couchbase Storage , Redis Storage , Elasticsearch Storage or SQL Storage in the Session tab . It contains properties that can be used for performance tuning. For information about performance tuning, see Aggregation Performance Tuning . These fields supports parameterization using ${} syntax, see Appendix 1 - Profiles for more information on how parameterization works. Couchbase Storage Open The Aggregation profile configuration dialog - Advanced tab for Couchbase Storage You can also set the properties listed in the Advanced tab as Execution properties in the STR. This will override the values that are set in the profile, including default values. Example - Overriding the Advanced properties $ mzsh topo set topo://container:container1/pico:ec1/val:  config.properties.mz.cb.agg.json_serializer.format MZ-BIN Note! See the Note at the end of this page for more information when using pessimistic or optimistic locking mechanisms for Couchbase aggregation storage. Elasticsearch Storage Open The Aggregation profile configuration dialog - Advanced tab for Elasticsearch Storage For Elasticsearch Storage, you can modify the properties listed as shown above in the Advanced tab. Redis Storage Open The Aggregation profile configuration dialog - Advanced tab for Redis Storage For Redis Storage, you can only modify the properties in the Advanced tab. Note! See the Note at the end of this page for more information when using optimistic locking for Redis aggregation storage. SQL Storage Open The Aggregation profile configuration dialog - Advanced tab for SQL Storage For SQL Storage, you can modify the properties listed as shown above in the Advanced tab. Note! When using Couchbase or Redis aggregation storage, it is important to take note of the concept of locking mechanisms when configuring workflows. Locking mechanisms are of two types: Pessimistic and Optimistic. Redis aggregation storage only has an Optimistic lock whereas Couchbase aggregation storage has both Optimistic and Pessimistic locks. Pessimistic Lock When a workflow thread is working on a session, it is considered to be fully locked. No other thread can work on that particular session. Once the first thread is finished, the lock is released and another thread can take the lock and work on the session. Optimistic Lock Instead of acquiring a traditional lock for a session, a workflow thread obtains a CAS (Compare And Swap) for that session. The CAS serves as a kind of hash or fingerprint of the session data. When the consume block is done and the session is ready to be updated, an error occurs if the CAS no longer matches. In scenarios where multiple threads have made updates to the same session, only the changes from the first thread to complete its work are accepted. Any other thread(s) attempting to update will encounter failure and need to restart their work from the beginning. This process ensures that only changes from one workflow at a time can be committed, akin to the principles of pessimistic locking. It's essential to understand a key distinction: the consume and sessionInit blocks may be invoked multiple times due to the retry mechanism mentioned earlier. As a result, it's advisable to avoid using global variables within the aggregation APL. However, the udrRoute function can be safely utilized within these blocks since it is executed only when the Optimistic lock succeeds. If global variables are necessary, they can be relocated to an analysis agent and updated through the udrRoute function. It is important to note that the threads specified in the locks above may live in multiple processes on multiple machines. Note! Threads may live in multiple processes on multiple machines.

---

# Document 317: Buckets Data Model - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204677301
**Categories:** chunks_index.json



---
**End of Part 15** - Continue to next part for more content.
