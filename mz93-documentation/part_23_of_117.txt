# RATANON/MZ93-DOCUMENTATION - Part 23/112

---
**Dataset:** ratanon/mz93-documentation
**Part:** 23 of 112
**GitHub:** https://github.com/ratan0n/docs/tree/main/mz93-documentation
**Size:** ~62.4 KB
---

The workflow table is located at the bottom of the workflow template. There must always be at least one valid and runnable workflow per workflow configuration, otherwise it will not be valid. The three leftmost columns gather the workflow meta data: Valid, ID, and Name. A workflow table always contains these columns. The ID is automatically generated starting at 1. The ID is unique within the workflow configuration. The Name is generated based on the ID, for example 'Workflow_1'. The names can be edited, however, if two workflows have exactly the same name a validation error will occur. The workflow table is populated depending on settings made in the Workflow Properties dialog, in the Workflow Table tab. For example adding rows and field type settings is done there and will propagate changes in the workflow table. Apart from the three first columns, columns in the table represent fields of Default and Per Workflow type. See Workflow Properties for further information about the field types. You can also configure your own fields to be referenced by your APL code, which can be updated. The fields are configured in the Workflow Properties and referenced by the APL command dynamicFieldGet . The fields can be of either boolean , int , or string type, and you can configure different categories for the fields, for an easier overview. Open Example of a workflow table If there is a default value for a field, it is displayed in the table as <default value> . If no default value is set in the agent in the template, < > is displayed. If the field is of a Per Workflow type and not yet defined, the symbol is shown in the cell pointing out that the cell is not valid. Different icons that can appear in the workflow table: Icon Description Icon Description Open Workflow is not yet validated Open Workflow is valid and runnable Open Workflow is invalid Open The cell is invalid. Open The field contains an External Reference. The order of table rows can be switched to not ordered, ascending or descending by clicking on the header one or multiple times. Info! Number fields will be numerically ordered and other fields will be ordered alphabetically. If External References are used, ordering will be done alphabetically by External Reference name. If the column is for a number field, numbers will be numerically ordered and separately grouped from the alphabetically ordered External References cells. Table Toolbar The workflow table toolbar presents you with options to manipulate each workflow and any data within the rows. The following are the buttons found on the bar: With no workflows selected With no workflows selected Open Option Description Search Allows you to search the text of all columns. The Valid column is excluded from the search as it only have icons for values. Add workflow Creates a new workflow by adding a row into the workflow table. The button opens the Add Workflow dialog and allows you to rename the workflow. If you have set some of the agent configuration to be configurable per workflow in the Workflow Properties then you will be able to configure those fields. Export Opens an export dialog where you select and save workflow configurations in a file. With this export file you transfer and update workflow table data either on your current machine or on a different client. The export file can be created in the following format: .csv The .csv export file contains a header row, comma (,) delimited fields, and text values that are delimited by a quotation mark ("). Exported fields that contain profiles are given a unique string identifier. The ID and Name fields are exported as well. In the export file, External References are enclosed in braces ({}) and preceded by a dollar symbol ($), for example ${OUTPUT_DIR} . For further information see External Reference Profile . Import Opens an import dialog where you can import an exported file. This file might contain, for example, data that has been saved in the workflow table, locally or on a different client. This command supports the following file format: .csv Selecting Keep old workflows will result in the contents of the file being appended into the workflow table. Selecting Save before import will save the workflow configuration before proceeding with the import. This is so you can rollback to the previous version in case the import goes wrong. Importing a table may result in any of the following scenarios: If the ID number of the imported workflow (a table row), is identical to the ID number of one of the rows that are already in the table, the imported entry overwrites the existing one. If the ID number of the imported workflow is -1, the imported entry is added to the bottom of the table. If the ID number of the imported workflow does not exist in the table and is not equal to -1, the imported entry is added to the table. The ID number remains the same number as it was in the import file. With one workflow selected Open Option Description Clear selection(s) Clears the currently selected row so that it is not selected anymore. Edit Opens the Edit Workflow dialog where you are able to edit the agent configuration field values that have been set to be configurable per workflow. For more on what per workflow is, refer to Workflow Properties . Delete Removes the entire workflow and all configurations associated with the selected row. If removed, the ID number of that workflow will never again return within that workflow configuration. Validation Message Opens an Information dialog where a message regarding the validity of the template, workflow, and cell is shown. With many workflows selected Open Option Description Clear selection(s) Clears all currently selected row(s). Delete Removes the entire workflow and all configurations associated with the selected rows. If removed, the ID number of that workflow will never again return within that workflow configuration. Right-Click Menu Item Description Item Description Edit Opens the Edit Workflow dialog where you are able to edit the agent configuration field values that have been set to be configurable per workflow. For more on what per workflow is, refer to Workflow Properties . Delete Removes the entire Workflow that is associated with the selected row. If removed, the ID number of that workflow will never again return within that workflow configuration. To remove more than one workflow, select all the relevant rows. Validation Message Opens an Information dialog where a message regarding the validity of the template, workflow, and cell is shown.

---

# Document 501: Access Controller Extensions - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204613139/Access+Controller+Extensions
**Categories:** chunks_index.json

In this chapter, you will find how you can use Access Controller with tools like SCIM, OIDC (for Single Sign On) and LDAP to secure your users access to the system. This chapter includes the following sections: SCIM Single Sign On (OIDC) Enhanced User Security LDAP Authentication

---

# Document 502: Amazon S3 Collection Agent Transaction Behavior - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204738033/Amazon+S3+Collection+Agent+Transaction+Behavior
**Categories:** chunks_index.json

The transaction behavior for the Amazon S3 collection agent is described here. For more information about general transaction behavior please refer to the section Transactions in Workflow Monitor . Input/Output Data The agent emits commands that change the state of the file currently processed. Command Description Begin Batch Emitted before the first part of each collected file is fed into a workflow. End Batch Emitted after the last part of each collected file has been fed into the system. The agent retrieves commands from other agents and based on them generates a state change of the file currently processed. Command Description Cancel Batch If a Cancel Batch message is received, the agent sends the batch to ECS. Note! If the Cancel Batch behavior defined on workflow level is configured to abort the workflow, the agent will never receive the last Cancel Batch message. In this situation ECS will not be involved, and the file will not be moved, but left at its current place. Hint End Batch If a Hint End Batch message is received, the collector splits the batch at the end of the current block processed (32 kB), If the block end occurs within a UDR, the batch will be split at the end of the preceding UDR. After a batch split, the collector emits an End Batch message, followed by a Begin Batch message (provided that there is data in the subsequent block).

---

# Document 503: Workflow Bridge Batch Forwarding Agent Transaction Behavior, Input/Output Data and MIM - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205002792/Workflow+Bridge+Batch+Forwarding+Agent+Transaction+Behavior+Input+Output+Data+and+MIM
**Categories:** chunks_index.json

Transaction Behavior Emits

---

# Document 504: Functions for Python - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205686497/Functions+for+Python
**Categories:** chunks_index.json

The following functions apply to Python agents in both real-time and batch workflows. This section includes the following: UDR Related Functions udrRoute This function routes a UDR or bytearray to all the output routes, or a named output route. def udrRoute(udr, route=None) Parameter Description udr The UDR to route route The route on which to send the UDR Returns Nothing Example - udrRoute def consume(input): if isinstance(input, InstallModel): udrRoute(input, 'install') else: udrRoute(input) udrCreate This function creates a new UDR of the specified type, and can take keyword arguments to set its fields. def udrCreate(typename, **kwargs) Parameter Description typename A defined UDR type **kwargs Keyword arguments to set the specified fields Returns A UDR of the type specified Example - udrCreate # # The following shows six different ways of creating UDRs # from ultra.MyFolder.MyUltra import MyUDR myudr1 = MyUDR(field1=33, field2=88) myudr2 = MyUDR() myudr2.field1 = 33 myudr2.field2 = 88 myudr3 = udrCreate(MyUDR, field1=33, field2=88) myudr4 = udrCreate(MyUDR) myudr4.field1 = 33 myudr4.field2 = 88 myudr5 = udrCreate("MyFolder.MyUltra.MyUDR", field1=33, field2=88) myudr6 = udrCreate("MyFolder.MyUltra.MyUDR") myudr6.field1 = 33 myudr6.field2 = 88 udrIsPresent This function returns True if the UDR field is present. def udrIsPresent(udr, attr) Parameter Description udr The UDR attr The attribute name Returns True if the UDR field is present. Example - udrIsPresent if udrIsPresent(myudr, 'field1'): debug("The optional field 'field1' is present") udrUnsetPresent This function marks an optional attribute for a UDR as not present. def udrUnsetPresent(udr, attr) Parameter Description udr The UDR attr The attribute name Returns Nothing udrConsume Note! This function applies for the Python Connector agent only. This function consumes a UDR routed to the Python Connector agent. The timeout is in seconds. Note! UDRs that have not been consumed are overwritten. def udrConsume(timeout=None) Parameter Description timeout The timeout in seconds, which waits forever if no timeout is specified Returns The UDR or bytearray routed, or None if timed out while waiting Debug Related Functions debug This function prints the supplied object to the output target specified in the Execution tab of the Workflow Properties dialog. If Event is selected, the output is shown in the Workflow Monitor. def debug(obj) Parameter Description obj The object to write to debug output. The object can be of any type. Note that printing a UDR type will dump all the field values, which may be a large amount of data. Similarly, the debug output for a table, map, list or bytearray type may be very large. The output is the string representation of object. Returns Nothing isDebugEnabled This function states if debugging has been enabled for the workflow. A debug event is only sent if isDebugEnabled returns True . def isDebugEnabled() Parameter Description Returns True or False depending on if debug is enabled or not MIM Related Functions mimGet This function returns the value of a MIM resource available in the workflow. def mimGet(category, mimResourceName) Parameter Description category The name of the agent or workflow that owns the MIM resource mimResourceName The name of the MIM resource whose value is to be returned Returns The MIM value. Example - mimGet mimGet("Workflow", "Batch Count") # Retrieving a MIM resource owned by the workflow. mimGet("Python_1", "Source File Count") # Retrieving a MIM resource owned by the agent "Python_1". mimSet This function assigns a value to a user defined MIM resource. The function may be called at any time. Note that it is the responsibility of the user to make sure the MIM value is available in accordance with the specified assigned type. def mimSet(name, value) Parameter Description name The name of the MIM resource to assign a value value The value to assign, which must match the published MIM type Returns Nothing Example - mimSet mimSet("My MIM", 88) Misc Functions abort Note! This function does not apply for the Python Connector agent. This function stops the workflow, and logs a user defined message to the System Log. def abort(message) Parameter Description message The message that is sent to the System Log when the workflow is aborted Returns Nothing Example - abort abort("The processing failed, aborting this workflow!") wfStop This function stops a running workflow. wfStop produces a single stop signal and does not wait for the workflow to stop. If it succeeds in stopping the workflow, the stop is registered in the System Log. def wfStop(wfName, immediate=True) Parameter Description wfName You must provide the name of the workflow to be stopped. immediate For a real-time workflow, the immediate flag has no significance. For a batch workflow, when immediate=True , the function stops the currently handled batch; when immediate=False , the currently handled batch is run and then the workflow stops. Returns If the command is successful the value is None . Otherwise, a text message is returned. Example - wfStop wfStop("Default.MyWorkflow.workflow_1") isStopped Note! This function does not apply for the Python Connector agent. This function states if the workflow has been stopped. def isStopped() Parameter Description Returns True or False depending on if workflow has been stopped or not Example - isStopped if not isStopped(): debug('Not stopped yet') Dynamic Functions dynamicFieldGet This function retrieves the stated dynamic field from the workflow instance table. The returned value can either be a boolean, an integer, or a string. def dynamicFieldGet(category, name) Parameter Description category The cateogry of the dynamic field name The name of the dynamic field Returns The value of the selected dynamic field Example - dynamicFieldGet dynamicFieldGet('Control', 'Filename') Timeout Functions Note! The timeout functions only apply for the Python collection and processing agents in real-time workflows. setTimeout A timeout can be set to trigger delayed actions, see the def timeout(obj) function block in Function Blocks for Agents in Real-Time Workflows . The timeout is in seconds. Setting a timeout on an object sets or updates the current timeout in seconds on that object. A timeout is triggered once on the object, and then it has to be set again to be repeated. def setTimeout(obj, timeout) Parameter Description obj The object can be of any type timeout The timeout in seconds Returns Nothing removeTimeout A timeout can be removed, see the def timeout(obj) function block in Function Blocks for Agents in Real-Time Workflows . The timeout is in seconds. def removeTimeout(obj) Parameter Description obj The same object as used in setTimeout Returns Nothing Log Related Functions logInformation This function logs a message string to the System Log of type information. def logInformation(message) Parameter Description message A message appearing in the log Returns Nothing logWarning This function logs a message string to the System Log of type warning. logWarning(message) Parameter Description message A message appearing in the log Returns Nothing logError This function logs a message string to the System Log of type error. def logError(message) Parameter Description message A message appaering in the log Returns Nothing logException This function logs the current exception to the System Log. def logException() Parameter Description Returns Nothing Example - logException try: some_function() except: # Log exception to the System Log instead of aborting the workflow. logException() formatException This function formats the current exception and returns the string. def formatException() Parameter Description Returns The current exception formatted as a string Functions for Python Agents in Batch Workflows Only The following functions only apply for the Python agents in batch workflows. beginBatch Note! This function only applies for Python collection agents in batch workflows. This function starts a new batch. def beginBatch() Parameter Description Returns Nothing Example - beginBatch def execute(): beginBatch() udrRoute(PulseUDR()) endBatch() endbatch Note! This function only applies for Python collection agents in batch workflows. This function ends the current batch. def endBatch() Parameter Description Returns Nothing cancelBatch This function emits a Cancel Batch that aborts the processing of the current batch and possibly continues with the next batch (depending on the workflow configuration). def cancelBatch(message, errorUDR=None) Parameter Description message A message, which is logged to the System Log when the batch is cancelled. errorUDR It is possible to send an error UDR containing any useful information. This parameter is optional. Returns Nothing Example - cancelBatch cancelBatch("Cancel this batch") splitBatch Note! This function only applies for Python collection agents in batch workflows. When invoked, this function propagates to the other agents that the input batch will be split. def splitBatch() Parameter Description Returns Nothing hintEndBatch This function sends a Hint End Batch message to the collection agent in the workflow, possibly causing a split of the current batch being processed. def hintEndBatch() Parameter Description Returns Nothing getTransactionId This function returns the current transaction id, or None if there is currently no active transaction. def getTransactionId() Parameter Description Returns The current transaction id or None

---

# Document 505: HTTP/2 UDRs - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204739358
**Categories:** chunks_index.json

The HTTP/2 UDR types are designed to exchange data between the workflows, and can be viewed in the UDR Internal Format Browser . The supported HTTP/2 UDRs are as follows: 1 Push 2 Cookie 3 Response 4 MultipartSegment 5 AuthToken 6 RequestCycle Push The Push UDR can be used for sending additional resources belonging to a request. The following fields are included in the Push UDR: Field Description Field Description path (string) Set the URI path to be used for the push. request (RequestCycle (http)) The RequestCycle UDR the Push UDR belongs to. Cookie The Cookie UDR is used for including cookie information in Response UDRs. The following fields are included in the Cookie UDR: Field Description Field Description domain (string) The domain to which the cookie belongs. expires (string) The date and time when the cookie expires. httponly (boolean) If set to true , cookies will not be exposed through channels other than HTTP and HTTPS requests. name (string) The name of the cookie. path (string) The path to the page the cookie belongs to, for example "mydomain.com/mypage.html". secure (boolean) Indicates whether the data is sent in secure mode or not. value (string) The value of the cookie. Response The Response UDR contains the response to the request and is incorporated in the RequestCycle UDR. The following fields are included in the Response UDR: Field Description Field Description body (any) This field contains the message body, that is, the payload, of the response. For HEAD requests, a body is never present in the response. For all other request methods, responses are present with the following exceptions: responses to CONNECT requests with status code 2xx responses to requests with status code 1xx (informational) responses to requests with status code 204 (no content) responses to requests with status code 304 (not modified) cookies (list<CookieUDR>) This field contains any Cookie UDRs included. headers (map<string,list<string>>) This field is populated by all the headers present in the response. The map keys contain header field names and the content is stored in the corresponding map values. httpVersion (string) This field contains the HTTP version; HTTP/1 or HTTP/2. mimetype (string) The type of the content, for example "text/html", "image/gif", etc. openAPIUDR (DRUDR) This field is used if an OpenAPI profile has been associated with the HTTP/2 Server agent. statusCode (int) The HTTP status code, for example: 200 - OK, 404 - Not Found, etc. MultipartSegment The MultipartSegment UDR is used when sending requests containing multiple types of content, or when the content has been split up in multiple parts. The following fields are included in the MultipartSegment UDR: Field Description Field Description content (bytearray) The body of the message. contentType (string) The type of the content, for example " multipart/form-data ", "multipart/mixed" , etc. filename (string) The actual file name, for example "img.jpg". name (string) An informal name of the file, for example "myFile". AuthToken The AuthToken UDR is used for providing token information when the option Token Authentication is selected in the agent's configuration. The following fields are included in the AuthToken UDR: Field Description Field Description claims (map<sting,any>) The payload and any additional claims, that is, any additional user information required for authentication, for example website or zoneinfo. token (string) The security token used for authentication. username (string) The user name. RequestCycle When the HTTP/2 Server agent receives a request, it converts it to a RequestCycle UDR that is routed into the workflow. The UDR will then get the Response field populated in the workflow before being routed back to the HTTP/2 Server agent. The following fields are included in the RequestCycle UDR: Field Description Field Description authToken (HttpAuthTokenUDR) If Token Authentication is selected in the agent configuration, the AuthToken UDR contains the required information for authentication. body (bytearray) This field contains the message body, that is the payload, of the request. For a request, the presence of a message body is indicated by the presence of a Content-Length or Transfer-Encoding field. clientHost (string) The IP address or hostname of the client that is connecting to the server. clientPort (int) The port of the client that is connecting to the server. contentType (string) The type of the content, for example "text/html", "image/gif", etc. context (any) This field can be used in the workflow configuration to keep track of, and use, internal workflow information related to a RequestCycle UDR. For instance, before you route a RequestCycle UDR to the HTTP/2 agent, store the TCPIPUDR from a TCP/IP collection agent in the Context field. You can then read the TCPIPUDR from the Context field in the RequestCycle UDR that contains the answer, and use it to send back a response to the TCP/IP collection agent. cookies (list<string>) Information about any cookies attached to the request. errorMessages (list<string>) This list contains all the error messages from the errors encountered by the HTTP/2 Server agent when processing a request. The field will only be set when Route Error to APL is enabled on the HTTP/2 Server agent. errorStatusCode (int) The HTTP error code will be set to this field base on the type of errors encountered by the HTTP/2 Server agent when processing a request. The field will only be set when Route Error to APL is enabled on the HTTP/2 Server agent. followRedirects (boolean) This controls whether the HTTP/2 Client agent should automatically follow redirects. The default value is true . headers (map<string,list<string>>) This field is populated by all the headers present in the request, for example Date, Connection. The map keys contain header field names and the content is stored in the corresponding map values. host (string) The hostname or IP address where the HTTP server is running. httpVersion (string) This field contains the HTTP version; HTTP/1 or HTTP/2. isError (boolean) This field is set to true upon encountering any errors when the HTTP/2 Server agent is processing a request. The field will only be set when Route Error to APL is enabled on the HTTP/2 Server agent. method (string) The request method, for example GET or POST. HTTP/2 supports the following methods; GET, POST, PUT, DELETE, and PATCH. HEAD, CONNECT, OPTIONS, and TRACE are not supported. multipartSegments (list<MultipartSegment (http)>) If the request is of a multipart type, this field contains MultipartSegment UDRs. openAPIUDR (DRUDR) This field is used if an OpenAPI profile has been associated with the HTTP/2 Server agent. parameters (map<string,string>) This field contains any SETTINGS parameters included, for example Header Table Size, Max Concurrent Streams, etc. password (string) The password associated with the username for the account on the HTTP server. path (string) The path of the target URI. port (string) The HTTP server port number. pushSupported (boolean) Indicates whether push is supported. Push can be used with HTTP/2 but not with HTTP/1. requestTimeout (int) The number of milliseconds to wait for a response. response (Response (http)) This field is populated by the contents of Response UDR. secure (boolean) Indicates whether the data is sent in secure mode or not. username (string) The username for the account on the HTTP server.

---

# Document 506: PCC User's Guide - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204677233/PCC+User+s+Guide
**Categories:** chunks_index.json

Search this document: The PCC functionality enables you to to manage and retrieve policy rules based on 3GPP and non-3GPP definitions (PCC Policy Control), create and manage buckets for usage management based on subscriber information (PCC Usage Management), as well as route and transform realtime data such as Diameter messages (PCC Routing Control). This section contains all documentation relevant for PCC. PCC Rules PCC Buckets PCC Routing Control PCC Extensions

---

# Document 507: Netflow Agent - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205001090/Netflow+Agent
**Categories:** chunks_index.json

This section describes the NetFlow agent. This is a collection agent for real-time workflow configurations. The NetFlow agent gathers traffic data from one or many Cisco routers. NetFlow data contains information, such as source and destination IP address, down- and uploaded bytes, which is commonly used for statistical purposes. Each router can potentially be identified through several IP addresses (interfaces) and if so, it may send UDP packets on any of these interfaces to the agent. The agent offers a possibility of mapping all these IP addresses into one that enables detection of the fact that they originated from the same router. Open Example of a NetFlow network When activated, the agent will connect to the configured port and start listening for incoming packets from the routers. Each received packet will be unpacked into one or several flow records. Based on the information in the flow record, the agent will create and populate one of the standard NetFlow UDR types available and forward the UDR into the workflow. If the agent fails to unpack or read the packet/ flow record, it will silently be removed from the stream. Since Cisco routers do not offer the possibility of re-requesting historic data, the agent will lose all data delivered from the router while the agent is not active. Note! The real-time job queue may fill up, in which case a warning will be raised in the System Log stating that the job queue is full. Records arriving to a full queue will be thrown away. A message in the System Log will state when the queue status is back to normal. NetFlow-Related UDR Types The UDR types created by default in the NetFlow agent can be viewed in the UDR Internal Format Browse r in the NetFlow folder. To open the browser open an APL Editor , right-click in the editing area, and select the UDR Assistance... option in the pop-up menu. Prerequisites The reader of this information should be familiar with: The Cisco NetFlow export formats. For further information, see http://www.cisco.com/ . The section contains the following subsections: Netflow Meta Information Model Netflow Configuration Netflow Events Netflow Input/Output Data Netflow V9 and V10 (IPFIX) considerations

---

# Document 508: SCP Agents - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205653906/SCP+Agents
**Categories:** chunks_index.json

This section describes the SCP collection and forwarding agents. The collection agent is available for batch and real-time workflows. The forwarding agent is available for batch workflows. The SCP protocol is intended for use with SSH servers that do not support the SFTP protocol. SCP is applied by issuing remote shell commands over the SSH connection with server systems that understand standard shell commands such as the Unix command syntax. Prerequisites The reader of this information should be familiar with the SSH2 and SCP protocols. Additionally, SCP-specific credentials need to be prepared in advance consisting of the following. Server Identification Attributes Authentication Server Keys The section contains the following subsections: SCP Agents Overview and Preparations SCP Collection Agent SCP Forwarding Agent SCP Prerequisite Preparation

---

# Document 509: Workflow Template - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204997489/Workflow+Template
**Categories:** chunks_index.json

The workflow template is the area where the workflow is designed. The workflow template has one workflow per default. You can add more workflows via the Add Workflow button. Note! A workflow configuration cannot be activated, the workflows in it however can. Note! Each configuration only allows 1 user to edit it at any one time. While editing the configuration, it is locked to the user's session. To release the lock, you must navigate away from the configuration to another page. It is advised not to close the browser tab without navigating away from the configuration first as this will cause the lock to stay in place until timeout. Open You create a workflow configuration by using one of the following methods: Click Build  New Configuration . Select Workflow from the Configurations dialog or click the New button in the upper left part of the Workflow Template window. Select a Workflow Type : Batch , Realtime , or Task , and then Ok . Click Add agent to open the Agents selection dialog. Click on the agent from the Agents selection dialog to deploy the agent to the template. A workflow template can have multiple labels located next to the workflow template name. These labels serve to identify the workflow template. The following are the labels that may appear: Label Description Label Description Open This label identifies the workflow as a Batch workflow. This label is mutually exclusive to Realtime and Task. Open This label identifies the workflow as a Realtime workflow. This label is mutually exclusive to Batch and Task. Open This label identifies the workflow as a Task workflow. This label is mutually exclusive to Batch and Realtime. Open This label identifies the workflow as a Read Only workflow. Read Only workflows will be locked from any editing and you must click on the Edit button to modify a Read Only workflow. Open This label identifies the workflow as a valid workflow. For more information about validation, refer to Workflow Validation . Open This label identifies the workflow as an invalid workflow. For more information about validation, refer to Workflow Validation . Here are more things that you can do on the workflow template: 1 Configuration 1.1 Routing Agents 1.2 Route Options 1.3 Agent Options 1.4 Agent Selection Dialog 1.5 Workflow Tables 1.6 Workflow Properties 1.7 Workflow Monitor 2 Visualization 3 Common Agent Services 3.1 Thread Buffer Tab 3.2 Filename Sequence Tab 3.3 Sort Order Tab 3.4 Filename Template Tab Configuration Note! Due to the agents' relationships within a workflow configuration, it is preferable that all agents and routes are added before the configuration is started. Each agent in the workflow configuration has a specific configuration dialog named after the agent type. You can access these configurations by double-clicking the agent or the route. Subsequently you can also click on the Edit button when selecting an agent or a route. This causes a dialog to appear with options. See Agent Options or Route Options for more information. When an agent is deployed into the workflow template it receives a default name located underneath it. The same applies to routes when they are added. These names may be modified to ease identification in monitoring facilities and logs. All editing and triggering from the workflow template generate changes to the workflow configuration. Examples of this are adding and removing agents, altering agent positions, and editing agent settings and preferences. If you have the Workflow Monitor open, the changes made after saving the workflow template will be reflected. The workflow table is affected if it includes columns that correspond to an agent removed from the workflow template. Routing Agents To create a data flow, agents need to be connected to each other. To connect the agents, click the left mouse button on the center of the source agent and without releasing the left mouse button, move the pointer to the target agent and release there. This creates a route between the two agents indicating the data flow. You can also create a route between agents by using the button under agent options and selecting the target agent in the dialog. You can modify a route name by clicking on its name and typing a new name. Route names must be unique within a workflow configuration and may only contain the a-z, A-Z, 0-9, "-" and "_" characters. Route Options Clicking on a route in the workflow template provides you with a couple of options. Open Options Description Options Description Open Opens the Edit Route dialog where you can then edit the route name and route style. You can also double-click the route itself to open the Edit Route dialog. A route name is modified by typing a new name. Route names must be unique within a workflow configuration and may only contain the a-z, A-Z, 0-9, "-" and "_" characters. You can also change the appearance of the routes by selecting from the following Route Style options; Orthogonal , Bezier , or Straight. The default route style is Bezier . Note! In a real-time workflow a fourth kind of routing type appears by default when a response is returned to an agent that sent out a request. The route is shown as a dot-dashed line. Open Open Removes the selected route. Agent Options Clicking an agent in the workflow template provides you with a few options. Open Options Description Options Description Open Opens the Agent Configuration dialog where you can add or edit the settings and configuration values for the selected agent. You can also double-click the agent itself to open the Agent Configuration dialog. In a read only configuration mode, you can proceed to edit directly on the agent configuration dialog. To save, click Edit on the dialog bar as shown below. Open A read only agent configuration dialog Note! By clicking Edit on the dialog bar, the system will validate if any other changes have been performed and saved on the same agent and prompt a version change dialog. You can then decide to accept the saved changes and discard your local changes or choose to have your local changes overwrite the other version. Open Removes the agent and all its stored configuration. This action will not prompt you with any dialog and it is final so be absolutely sure that you want to remove the agent. Open Opens a dialog with an option to route the selected agent to another agent. Open Open Brings up an information dialog that displays parts of the agent's configuration. Open Agent Selection Dialog For more information about the different types of agents, refer to the Agent Selection Dialog section. Workflow Tables For more information about the workflow monitor, refer to the Workflow Table section. Workflow Properties For more information about the workflow monitor, refer to the Workflow Properties section. Workflow Monitor For more information about the workflow monitor, refer to the Workflow Monitor section. Visualization You can manipulate visuals of the workflow template by zooming in or out, or moving the workflow template around. A toolbar is present on the right side of the workflow template to allow you to manipulate the visuals. Open Workflow template visualization toolbar Options Description Options Description Open Zooms in on the workflow template. Open Zooms out of the workflow template. Open Centers the workflow template so that all agents and routes are visible on the canvas. Open Displays all the keyboard shortcuts that you can use within the workflow template. There is also a zoom percentage along with an x and y coordinate, which are displayed as soon as you zoom in or out. The default range on the zoom percentage is 100% while the x and y coordinates, which are determined from the point on the top left corner of the workflow template canvas, start at 0, 0, respectively. These values appear at the bottom left corner of the canvas whenever you manipulate the visuals. Open Common Agent Services Some agent configuration dialogues are optionally equipped with additional tabs holding configurations for different common services. This section describes the general services that are available. The user guide for each agent, in turn describe what services it uses. Thread Buffer Tab By default, a batch workflow uses one active thread at a time. By configuring a buffer storage for an agent, it is possible for yet another thread to be created. This is also called multithreading. One thread populates the buffer, and another pulls it for data. Adding yet another buffer for another agent adds yet another thread, and so on. This is especially useful in complex workflows with many agents. All batch agents that receive UDRs can use this functionality. Note! A workflow that is configured with multithreading can only handle data of the UDR type. If bytearrays are routed into an agent using this service, an exception is thrown. Open the Configuration dialog of the agent and select the Thread Buffer tab. The tab is present in batch processing and batch forwarding agents. Open Item Description Item Description Use Buffer Enables multithreading. For further information, see Multithreading . Print Statistics Statistics to be used when trying out where to use the Thread Buffer in the workflow. After each batch execution, the full and empty percentages of the threads using the buffer are logged in the event area at the bottom of the Workflow Monitor. For information on how to interpret the results, see the section below, Analyzing Thread Buffer Statistics. A UDR may be queued up while another thread is busy processing a reference to it. Workflows routing the same UDR on several routes and involving further processing of its data, must consequently be reconfigured to avoid this. A simple workaround is to route the UDR to an Analysis agent for cloning before routing it to the other agents (one unique clone per route). Analyzing Thread Buffer Statistics By using the Print Statistics alternative in the Thread Buffer tab, buffer statistics are logged for the whole batch execution and show the full and empty percentages for the threads using the thread buffer. For information about multithreading in a batch workflow, refer to the section Threads in a Batch Workflow, in Multithreading . Example - A thread buffer printout 11:03:04: Buffer usage statistics [5] for 2089 turnover(s) of UDRs: Incoming queue: Available 54%. Full 46%. Outgoing queue: Available 59%. Empty 41%. The number within brackets, which is [5] in the example, is the batch counter id. Turnover is the total number of UDRs that have passed through the buffer. Available indicates how often (out of the total turnover time) the buffer has been available for the incoming queue to forward a UDR and for the outgoing queue to fetch a UDR. Incoming queue: Full is logged for the incoming thread and indicates how often (out of the total turnover time) the buffer has been full and an incoming UDR had to wait for available buffer space. In the example, Full indicates that for 46% of the incoming UDRs there was a delay because of a full buffer. Outgoing queue: Empty is logged for the outgoing thread and indicates how often (out of the total turnover time) an outgoing queue had to wait for data because of an empty buffer. In the example, Empty indicates that for 41% of the attempts to fetch a UDR, the buffer was empty. The percentage values for Empty and Full must be as low as possible, and as equal as possible. The latter may be hard to achieve, since the agents may differ too much in processing complexity. If possible, add and configure another agent to take over some of the processing steps from the most complex agent. See the section below, Thread Buffer Tab, for how to configure the thread buffer. Filename Sequence Tab For batch collection agents such as Disk, FTP, and SFTP, there is a service available, found in the agents' configuration dialog in the Filename Sequence tab. The filename sequence is used when you want to collect files that contain a sequence number in the file name. The sequence number is expected to be found at a specific position in the file name and has a fixed or dynamic size. Note! When collecting from several sources, the Filename Sequence service is applied to the data that arrive from all the sources, as though all the information arrives from a single source. This means that the Filename Sequence number count is not specific to any of the sources. Open Item Description Item Description Enable Filename Sequence Determines if the service will be used or not. Start Position The offset in the file name where the sequence number starts. The first character has offset 0 (zero). In the example file name TTFILE0001 the start position is 6. Length The length of the sequence number, if the sequence number has a static length (padded with leading zeros). If the sequence number length is dynamic this value is set to 0 (zero). Example TTFILE0001-TTFILE9999 Length: 4 TTFILE1-TTFILE9999 Length: 0 Wrap On If the Filename Sequence service is enabled, a value must be specified on which the sequence will wrap. This number should be larger than or equal to Next Sequence Number and it must be larger than Wrap To . Wrap To The value that the sequence will wrap to. This value must be less than the Wrap On value and less than or equal to Next Sequence Number. Warn On Out Of Sequence If enabled, the agent logs an informative message to the System Log when detecting an out of sequence file, before deactivating. The collection agent will not continue to collect any files upon the next activation, until either the missing file is found, or the Next Sequence Number is set to a valid value. Sort Order Tab The Sort Order service is available for some batch collection agents and is used to sort matched files before collection. The sort pattern is expected to occur at a specific position in the file name or to be located using a regular expression. However, if the sort pattern cannot be applied, the workflow will abort, except for files with a name which is shorter than Position plus Length . For information on this exception, see the description below for Position . Note! Regular expressions according to Java syntax apply. For further information see Pattern (Java SE 17 & JDK 17) . Open Item Description Item Description Enable Sort Order Determines if the service will be used or not. If enabled, the sort order that you select also applies to subfolders if you have selected the Include Subfolders checkbox for the FTP, SFTP, and Disk collection agents. For further information, see the section for the relevant agent in Appendix 2 - Batch and Real-Time Workflow Agents . Modification Time Select to enable file collection order according to the modification time stamp. If Sort Direction is set to Ascending , the oldest files are collected first. The time resolution depends on the server and protocol. Note! Most FTP and SCP servers follow the Unix modification date format for file time stamps. The modification date resolution is one minute for files that are time stamped during the last six months. After six months a resolution of one day is applied. Value Pattern The method used to locate the item (part of the file name) to be the target for the sorting. This could be either Position that indicates that the item is located at a fixed position in the file name or Regular Expression indicating that the item should be fetched using a regular expression. Position If Position is enabled, the files are sorted based on the part of the filename indicated by Position plus Length . The Start Position value states the offset in the file name where the sorting item starts. The first character has offset 0 (zero). The Length value states the length of the sorting item (part of the file name) if it has a static length. To sort items with a dynamic length, use the value zero (0). Note! Files with a name which is shorter than Position plus Length are ignored. However, when Include Subfolders option is selected, a folder name shorter than Position plus Length will cause the workflow to abort. Regular Expression If enabled, the sorting item is extracted from the file name using the regular expression. If the file name does not end with a digit, this is the correct option. Example - Sorting using regular expression d+ locates the first digit sequence in a file name. Sort the following files in an alphabetical or numerical order: FILEA_1354.log FILEB_23.log FILEC_1254.log, Use d+ in the regular expression. Depending on the selected Sort Direction, the files are sorted in the following order: FILEC_1254.log FILEA_1354.log FILEB_23.log Sort Type Type of sorting. Could be either Alphanumeric or Numeric . Ignore Case If enabled, the sorting is not case sensitive. Sort Direction Indicates if the sort order should be Ascending or Descending . Note! When Include Subfolders option is selected, the same sort order criteria are applied to subfolder names. Filename Template Tab The Filename Template service is available to batch forwarding agents that are responsible for creating a file, and the Disk forwarding agent for real-time workflows. The configuration contains MIM resources for all available agents in the workflow, the values of which may be used when constructing a filename for the outgoing file. Since this service includes a selection of MIM resources from available agents in the workflow, it is advised to add all agents to the workflow, and to assign route and agent names, before the filename template configuration is completed. Note! The Filename Template service also provides you with the so called Dynamic Directory support. This means that you can change the output directory during execution of a workflow, the input data of which is bytearray. See Input Data in the configuration Target tab of your relevant forwarding agent. By creating directories and subdirectories with names which consist of MIM values, and by adding appropriate APL code, you configure the output directory to sort the out data into directories that are created during the workflow execution. For further information, see the section below, Defining a MIM Resource of FNTUDR Type. Open The list contains MIM resources or user defined values that create the file name. The order of the items in the list controls the order in the file name. There are two ways in which you can determine the order of the items. You can use the Up and Down arrow buttons, or you can use the column headers. If you begin to sort the items using the column headers, the Up and Down arrows are disabled. The table - with MIM resources, user defined values, separators and/or directory delimiters - is used to create the filepath or filename. The order of the items in the table defines the filepath or filename. Since the service uses a selection of MIM resources from available agents in the workflow, it is advised to add all agents to the workflow before the filename template configuration is completed. Item Description Item Description Create Non-Existing Directories When this checkbox is selected, non-existing directories stated in the path are created. If not selected, the agent will abort if a required directory is missing. Open Item Description Item Description MIM Defined Determines if the Value will be selected from a MIM resource. The MIM resource of type FNTUDR is represented in the template table in the same way as other MIMs, however it has another appearance when the filename or filepath is presented. A MIM FNTUDR value can represent a sub-path with delimiters, a part of a filename, or a directory. For further information about how to use the FNTUDR in filename templates, see the section below, Defining a MIM Resource of FNTUDR Type. User Defined Determines if the Value will be a user defined constant entered in the text field. Directory Delimiter Determines if the Value will be a directory delimiter indicating that the file sub-path will have a directory delimiter at that specified position. You cannot have two directory delimiters directly after each other, or a delimiter in the beginning or end of a filename template. The MIM resource of the special UDR type FNTUDR can include, begin or/and end with directory delimiters this must be noted when adding delimiters in the template. For further information about using the FNTUDR in filename templates, see the section below, Defining a MIM Resource of FNTUDR Type. Size Number of allocated characters in the file name for the selected MIM resource (or user defined constant). If the actual value is smaller than this number, the remaining space will be padded with the chosen padding character. If left empty, the number of characters allocated in the file name will be equal to the MIM value or the constant. Padding Character to pad remaining space with if Size is set. If Size is not set, this value is ignored. Alignment Left or right alignment within the allocated size. If Size is not set, this value is ignored. Separator Separating character to add to the file name after the MIM value or constant. Date Format Adds a timestamp to the file name in the selected way. For further information about the format, see Date and Time Format Codes in Administration and Management in Legacy Desktop . Example - Configuring a Filename Template tab In this example, there is a workflow containing a Disk collection agent named Disk_In and two Disk forwarding agents named Disk_Out and Disk_Out2. The desired output file names from both forwarding agents are as follows: A-B-C.DAT Where A is the name of the Disk forwarding agent, B is the name of the currently collected file, C is the number of UDRs in the outgoing file and .DAT is a customer suffix. It is desired that the number of UDRs in the files takes up six characters and is right aligned. The following file name template configuration applies to the first agent: Open The following file name template configuration applies to the second agent: Open If two files FILE1 and FILE2 are processed where 100 UDRs goes to Disk_Out and 250 goes to Disk_Out2 from each file, the resulting file names would be: Disk_Out-FILE1-000100.DAT Disk_Out2-FILE1-000250.DAT Disk_Out-FILE2-000100.DAT Disk_Out2-FILE2-000250.DAT Defining a MIM Resource of FNTUDR Type A MIM resource with a value of the FNTUDR type included in the filename template is treated somewhat differently than other MIM resources. A FNTUDR value is a text string that can contain delimiters. The delimiters in the FNTUDR value will be replaced by directory delimiters when determining the target file path. The FNTUDR is defined in the FNT folder. Example - How to create an FNTUDR value to published as a MIM resource The following example shows a set of APL code that creates a FNTUDR value and publishes it as a MIM resource. To use the FNTUDR value in a filename template, the MIM resource must be added in the filename template configuration. import ultra.FNT; mimPublish( global, "FNTUDR Value" , any ); consume { FNTUDR fntudr = udrCreate(FNTUDR); fntAddString(fntudr, "dir"); fntAddString(fntudr, "1"); fntAddDirDelimiter(fntudr); fntAddString(fntudr, "dir2"); fntAddDirDelimiter(fntudr); fntAddString(fntudr, "partOfFileName"); mimSet ("FNTUDR Value", fntudr); udrRoute(input); } The following filename template configuration uses the FNTUDR published by the APL code. Open The resulting output file in the previous example is saved in a file with the following sub path from the root directory. dir0/dir1/dir2/partOfFileName20070101_1 The part dir1/dir2/partOfFileName derives from the FNTUDR Value. For further information about how to manipulate FNTUDRs with APL functions and how to publish MIM resources, see the APL Reference Guide and the section Meta Information Model in Administration and Management in Legacy Desktop .

---

# Document 510: Amazon SQS Collection Agent - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/299663414/Amazon+SQS+Collection+Agent
**Categories:** chunks_index.json

The SQS Collection Agent consumes messages from Amazon Simple Queue Service. After collection, the agent can carry out the following operations in the queue: Delete the message. Set a new visibility timer (resets the period after which the message becomes available again in the queue.) To carry out any of these operations you need an Analysis agent that configures the reply and sends it back to the collector. If you want to keep the original behavior of the queue, do not send any replies back. In the workflow example below, messages are collected from SQS and forwarded to Disk. A reply is sent back to either delete the message once its been successfully processed or, reset the visibility timer for selected messages. Open Workflow: collecting from Amazon SQS and forwarding to file. The following procedure shows the key configurations for creating the above workflow. Workflow design Create the workflow with the following agents: Agent Configuration Agent Configuration Aws SQS Collects messages from Amazon SQS Service. Analysis Receives UDRs of type sqsCollectorCycleUDR and validates them. A reply is sent back to the collector for a select set of messages. All messages are forwarded to the next node in the workflow. Encoder Encodes the data to the format of the forwarded files Disk Creates files. The size of the files is set in the collector. Aws SQS Collector configuration Update the SQS Collector configuration as required. Field Description Field Description Max messages to receive The maximum number of messages that can be received from the AWS SQS queue. The range can be set from 1-10. Poll time (seconds) The interval of time before the agent checks for new messages. The range can be set from 0-20. Standard attributes The standard attributes that you want to include in the message collection. The default value is 'All'. Here is an example SQS Collection Agent configuration: Open SQS Collection Agent configuration Analysis Configure the Analysis agent to send all collected messages to the Encoder and check if a message belongs to a specific group id. The validity parameter will be reset in the queue for these messages. consume { // Reset the visibility for messages in message group id "Group_B" if(mapGet(input.standardAttributes,"MessageGroupId")=="Group_B"){ input.visibility = 1; udrRoute(input, "r_2"); } // Forward all the messages to the Encoder udrRoute(input, "r_3"); } Note! If a reply is sent back to the collector, the standard behavior of the queue is reset: If the validity field of the UDR has been updated, the validity parameter is changed to this value in the queue. If the UDR has not been changed, the message is deleted in the queue (without waiting for the preset validity period).

---

# Document 511: Text Snippets - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/315949109/Text+Snippets
**Categories:** chunks_index.json

Excerpt - Agent Event Description An agent event is an information message from the agent that can be used when configuring an event notification in an Event Notifications configuration, see Agent Event for more information about this event type. Excerpt- No Agent Events There are no agent events for this agent. Excerpt - Debug Event Description A debug event is an event that is dispatched when debug is used, and can be used when configuring an event notification in an Event Notifications configuration, see Debug Event for more information about this event type. Excerpt - No Debug Events There are no debug events for this agent. Excerpt - MIM The Meta Information Model (MIM) enables agents in a workflow to get information from other agents in the workflow. See Administration and Management in Legacy Desktop | [inlineExtension] MIM for more information about the MIM and a list of the general MIM parameters. Excerpt - No MIMs This agent does not publish any MIM parameters.

---

# Document 512: Decoders - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204678303
**Categories:** chunks_index.json

A decoder specifies how data arrives from a source. There are two basic types of decoders: Simple decoders - Decode one or more external formats. Constructed decoders - Coordinate the decoding between multiple simple or constructed decoders. Simple Decoders The syntax of a simple decoder is declared as follows: decoder <name> : <decoder options>; The decoder options are: Option Description Option Description in_map(<map name>) Specifies what in-maps to use. At least one is required. block_size(<size>) Specifies that this is a blocked format with specified block size. terminated_by(<terminator>) Specifies the block filler used. This option has no effect if block_size has not been specified. The decoder may contain one or several in-maps, depending on whether it manages a single or multiple (mixed) record type. For multiple maps, the corresponding external records except the last one must support identification. The decoder tries each in_map in the specified order. The first one, for which the identification criteria are met, is used. How the record identification is specified depends on the actual external record type. For example, sequential external records must use the identified_by option while BER encoded records support identification by the standard tagging scheme. Simple decoders may be given blocking information through the block_size and terminated_by constructs. The block_size parameter contains the size of a block and the terminated_by parameter specifies the start of a padding character. Example - Simple decoder decoder SimpleDecoder : in_map(Map1), in_map(Map2), block_size(2048), terminated_by(0x00); This decoder starts by reading the next byte and evaluates if it equals 0x00. Should it be 0x00, it jumps to the next even boundary of 2048 and repeats this procedure. If it is not 0x00, it evaluates the identification for both of the externals specified in Map1 and Map2 (in that order). Constructed Decoders A constructed decoder is defined in terms of a number of other simple or constructed decoders. They are used to specify the decoders to be used in sequence, for example to specify separate decoders managing header, trailer, and record information. For instance, three external record types ( Rheader , Rudr , Rtrailer ), with corresponding in_map s ( Mheader , Mudr , and Mtrailer ) and decoder s ( Dheader , Dudr , and Dtrailer ). The following constructed decoder specifies the header record to be decoded first. Then any number of UDR records are decoded, followed by a single trailer record. Example - Constructed decoder decoder TTFile { decoder Dheader; decoder Dudr *; decoder Dtrailer; }; As can be seen, the constructed decoder does not (and cannot) have any decoder options. The asterisk after Dudr indicates that zero or more entries can occur before a terminating trailer record. For such a sub-decoder, the constructed decoder switches to the next decoder when the sub-decoder cannot handle the input (as deduced by the identification criteria of the in_map s in the sub-decoder). In this case it means that the Dudr decoder must support identification logic, or the Dtrailer decoder is never reached (and the decoder aborts with an "Unexpected EOF" error). This example could also have been supported with a simple decoder: Example - Simple decoder decoder TTFile : in_map(Mheader), in_map(Mudr), in_map(Mtrailer); The difference is that the order of header, UDR, and trailer would not be enforced for the simple decoder. The simple decoder also does not work if, for instance, the header does not support identification.

---

# Document 513: Websocket UDRs - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205035208/Websocket+UDRs
**Categories:** chunks_index.json

The Websocket UDR types include the following UDRs; BinaryMessage CloseConnection NewConnection TextMessage TLSInformation and X509Certificate The section contains the following subsections: NewConnection UDR CloseConnection UDR BinaryMessage UDR TextMessage UDR TLSInformation and X509Certificate

---

# Document 514: System Exporter - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204605469
**Categories:** chunks_index.json



---
**End of Part 23** - Continue to next part for more content.
