# RATANON/MZ93-DOCUMENTATION - Part 74/112

---
**Dataset:** ratanon/mz93-documentation
**Part:** 74 of 112
**GitHub:** https://github.com/ratan0n/docs/tree/main/mz93-documentation
**Size:** ~62.2 KB
---

The AMQP UDR types include the following UDRs: Open The UDR types in AMQP The following describes the the properties used in each UDR type in the AMQP agent: BasicProperties The BasicProperties UDR contains the different basic properties used in the Publish and Received UDRs. See the AMQP specification for further information about these properties. The following fields are included in the BasicProperties UDR: Field Description Field Description appId (string) This field contains the creating application ID. contentEncoding (string) This field contains the MIME content encoding. contentType (string) This field contains the MIME message type. correlationId (string) This field contains the application correlation identifier. deliveryMode (int) This field indicates the delivery mode; 1 - Non-persistent or 2 - Persistent. expiration (string) This field contains the message expiration specification. headers (map<string, any>) This field contains the message header field table messageId (string) This field contains the message application identifier. priority (int) This field contains the message priority, 0-9. replyTo (string) This filed contains the address to send replies to. timestamp (date) This field contains the message timestamp. type (string) This field contains the message type name. userId (string) This field contains the creating user id. ConnectionEstablished The ConnectionEstablished UDR indicates that the connection with the broker has been established. The following fields are included in the ConnectionEstablished UDR: Field Description Field Description sessionId (long) This field contains the id for the session in long format. Envelope The Envelope UDR is included in the Received UDR. The following fields are included in the Envelope UDR: Field Description Field Description deliveryTag (long) This field contains the server-assigned and channel-specific delivery tag. exchange (string) This fields contains the name of the exchange used. isRedeliver (boolean) This field indicates that the message has been previously delivered to this or another client. routingKey (string) This field contains the routing key. Error The Error UDR can be configured to be sent out from the AMQP agent in case of any specified errors. The following fields are included in the Error UDR: Field Description Field Description affectedUDR (DRUDR) This field contains the UDR that was affected by the error. message (string) This field contains the error message in string format. LoginInfo The LoginInfo UDR is used to provide authentication credentials via UDRs instead of the AMQP agent configuration. The following fields are included in the LoginInfo UDR: Field Description Field Description password (string) This field contains the password associated with the user. user (string) This field contains the username to be used for broker connections. For further information about how to enable authentication via LoginInfo UDRs, see AMQP Agent Configuration . Publish The Publish UDR is contained in the RequestCycle UDR. The following fields are included in the Publish UDR: Field Description Field Description basicProperties (BasicProperties (AMPQ)) This field contains the BasicProperties UDR associated with the Publish UDR. body (bytearray) This field contains the message body to be sent in bytearray format. exchange (string) This fields contains the name of the exchange used. routingKey (string) This field contains the routing key for the binding. Received The Received UDR is contained in the RequestCycle UDR. The following fields are included in the Publish UDR: Field Description Field Description basicProperties (BasicProperties (AMPQ)) This field contains the BasicProperties UDR associated with the Publish UDR. body (bytearray) This field contains the message body in bytearray format. consumerTag (string) This field contains the consumer tag specified by the client or provided by the server. envelope (Envelope (AMQP)) This field contains the Envelope UDR associated with the Publish UDR. queue (string) This field contains the queue name. RequestCycle The RequestCycle UDR is used for receiving and publishing messages. This UDR should be routed to the AMQP agent when you want to send an RPC call as specified in the AMQP standard. It can contain Received and Publish UDRs. The following fields are included in the RequestCycle UDR: Field Description Field Description answer (Received (AMPQ)) This field contains the Received UDR associated with the Publish UDR. context (any) This field can be used in the workflow configuration to keep track of, and use, internal workflow information related to a RequestCycle UDR. For instance, before you route a RequestCycle UDR to the AMQP agent, store the TCPIPUDR from a TCP/IP collection agent in the Context field. You can then read the TCPIPUDR from the Context field in the RequestCycle UDR that contains the answer, and use it to send back a response to the TCP/IP collection agent. request (Publish (AMQP)) This field contains the Publish UDR. Subscribe The Subscribe UDR is sent to the AMQP agent to initiate a subscription or to check if a queue exists. If the subscription operation is successful, the agent will route a SubscriptionOk UDR to the workflow. If the operation fails the agent will send an Error UDR. The following fields are included in the Subscribe UDR: Field Description Field Description declareQueue (boolean) When this field is set to true, the queue will be created, if it does not already exist. When this field is set to false and the queue does not exist, the subscription will fail. If the operation is successful, the isSubscribed field in the corresponding SubscriptionOk UDR will be set to true . passive (boolean) Use this field to check if a queue exists without subscribing. If the operation is successful, the isSubscribed field in the corresponding SubscriptionOk UDR will be set to false . queueName (string) This field contains the name of the queue in string format. tagName (string) This field contains the tag name in string format. SubscribeOk The SubscribeOk UDR is sent out from the AMQP agent to acknowledge the subscription. The following fields are included in the SubscribeOk UDR: Field Description Field Description isSubscribed (string) This field reflects the value of the passive field in the Subscribe UDR. For instance, if passive is set to true isSubscribe will be set to false . queueName (string) This field contains the queue name in string format. tagName (string) This field contains the tag name in string format.

---

# Document 1755: Web Service Request Agent Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205654668/Web+Service+Request+Agent+Configuration
**Categories:** chunks_index.json

To open the Web Service Provider agents' configuration, click Build  New Configuration . Select Workflow from the Configurations dialog. When prompted to Select workflow type , select Realtime . Click Add agent and select Web Service in the Processing tab, in the Agent Selection dialog. Double-click the agent icon or right-click the icon and select Edit agent , to display the Agent Configuration dialog. Open The Web Service Request agent configuration dialog Setting Description Setting Description Web Service Profile Click on the Browse button and select a predefined Web Service profile. Response Timeout (ms) The timeout value specifies the maximum allowed response time in milliseconds back to the Request agent after a request has been sent to the service. If the response time is exceeded, the Request agent times out and an error message will be logged in the System Log and the WSCycleUDR will be routed out from the agent with the errorMessage field set. Support CDATA encapsulated content If activated, content encapsulated with CDATA tag will always be sent without escape characters in the SOAP message. Note! The content must be completely encapsulated by CDATA tag for correct output. No leading or trailing characters are allowed, for example: data = "<![CDATA[This will be output as CDATA]]>" HTTP Setting Description Setting Description Extract Profile Settings Click on this button to automatically fill in the settings from the Service Port Definition in the profile. Address Settings HTTP Address Enter the complete URL address, including port, for the web service used to connect to the information requesting client. Authentication Enable Basic Access Authentication Select this check box to enable Basic Access Authentication. Username Enter the username that should be provided by the requesting client when using Basic Access Authentication. Password Enter the password that should be provided by the requesting client when using Basic Access Authentication. Raw XML Enable Route Raw XML Select this checkbox to enable route SOAP XML message functionality. The only security option supported for this functionality TLS. Route Raw XML to Select the dedicated route to redirect SOAP XML message. This option is available only when you select the Enable Route Raw XML checkbox. Note! To be recognized as carrying SOAP error information, a SOAP message MUST contain a single SOAP Fault element information item as the only child element information item of the SOAP Body. When generating a fault, SOAP senders MUST NOT include additional element information items in the SOAP Body. A message whose Body contains a Fault plus additional element information items has no SOAP-defined semantics.

---

# Document 1756: XML Schema Support - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204744281/XML+Schema+Support
**Categories:** chunks_index.json

This chapter describes the XML addition to the Ultra Format Definition Language (UFDL). This addition enables you to compile a subset of XML Schema element definitions and to decode the XML input data. This chapter includes the following sections: Overview External - XML Records IPDR Compliance XML Schema Limitations An XML Format Example

---

# Document 1757: Workflow Bridge Collection Agent Load Balancing and Collection Host Definition - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204644171/Workflow+Bridge+Collection+Agent+Load+Balancing+and+Collection+Host+Definition
**Categories:** chunks_index.json

Load Balancing In order to enable load balancing, you should make the load ID column appear in the workflow table via the workflow properties window. Configure separate Load IDs for each workflow and save. In the forwarding workflow, you can then use these load IDs in the APL for directing certain UDRs to certain workflows. Defining Collector Host If you want to specify which host the forwarding agents are to connect to, you can set the property wfb.host as an execution property in the STR, and enter the host that you want the agent to connect to as the value. Example - Setting the collector host $ mzsh topo set topo://container:container1/pico:ec1/val:config.properties.wfb.host <host>

---

# Document 1758: HDFS Collection Agent Input/Output Data and MIM - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204641645/HDFS+Collection+Agent+Input+Output+Data+and+MIM
**Categories:** chunks_index.json

Input/Output Data The Input/Output data is the type of data an agent expects and delivers. The agent produces bytearray types. MIM For information about the MIM and a list of the general MIM param eters , see Administration and Management in Legacy Desktop . Publishes MIM Value Description File Modified Timestamp This MIM parameter contains a timestamp, indicating when the file is stored in the collection directory. File Modified Timestamp is of the date type and is defined as a header MIM context type. File Retrieval Timestamp This MIM parameter contains a timestamp, indicating when the file processing starts. File Retrieval Timestamp is of the date type and is defined as a header MIM context type. Source File Count This MIM parameter contains the number of files, available to this instance for collection at startup. The value is constant throughout the execution of the workflow, even if more files arrive during the execution. The new files will not be collected until the next execution. Source File Count is of the long type and is defined as a global MIM context type. Source File Size This MIM parameter contains the file size, in bytes, of the source file. Source File Size is of the long type and is defined as a header MIM context type. Source Filename This MIM parameter contains the name of the currently processed file, as defined at the source. Source Filename is of the string type and is defined as a header MIM context type. Source Filenames This MIM parameter contains a list of file names of the files that are about to be collected from the current collection directory. Note When the agent collects from multiple directories, the MIM value is cleared after collection of each directory. Then, the MIM value is updated with the listing of the next directory. Source Filenames is of the list<any> type and is defined as a Header MIM context type. Source Files Left This parameter contains the number of source files that are yet to be collected. This is the number that appears in the Execution Manager backlog. Source Files Left is of the long type and is defined as a header MIM context type. Source Pathname This MIM parameter contains the path to the directory where the file currently under processing is located. Source Pathname is of the string type and is defined as a global MIM context type. The path is defined in the HDFS tab. Accesses The agent does not access any MIM resources.

---

# Document 1759: Common SAP CC UDRs - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204740430/Common+SAP+CC+UDRs
**Categories:** chunks_index.json

ChargedItemFieldTypeUDR This is a constant UDR, where value returns either "String", "Date", "Number" or "Boolean", depending on if the field type is STRING , DATE , NUMBER , or BOOLEAN . For an example that describes how to get the value, see the section below, OperationTypeUDR. Field Description Field Description NUMBER Constant value "Number" STRING Constant value "String" BOOLEAN Constant value "Boolean" DATE Constant value "Date" value (string) The property type value, can be "String", "Date", "Number", or "Boolean". This is a read-only field. ChargedItemFieldUDR Field Description Field Description name (name) The name of the field type (ChargedItemFieldTypeUDR) The type of the field value (any) The value of the field which must be cast to the right type, based on the type field. Note that numbers are represented as strings. ChargedItemUDR Field Description Field Description key (int) The numeric key of the charged item chargedItemClassId (string) The class identifier corresponding to the charged item fields (list<ChargedItemFieldUDR>) A list of all the fields in the corresponding charged item ChargeExecutionContextUDR This UDR is used to limit what is included in the response of a charge or blank charge operation. Info! The Execution Context in the UDR name is not related to the Execution Context. Note! The SAP CC APIs that the SAP CC agents depend on does not support setting the itemImmediatelyLoaded flag for ChargingOutputContext . As a result, the SAP CC agents are unable to support scenarios such as CIT creation via charging requests. Field Description Field Description outputChargeableItemExported This boolean field determines whether chargeable items must be exported in the output of the charging operation. resultAccountInfoReturned This boolean field determines if the account information is returned in the result of the charging operation. resultAccountOperationReturned This boolean field determines if the account operations is returned in the result of the charging operation. resultAllReturned This boolean field determines if all available information is returned in the result of the charging operation. resultChargeableItemInfoReturned This boolean field determines if the chargeable item information is returned in the result of the charging operation. resultChargedItemReturned This boolean field determines if the charged item is returned in the result of the charging operation. resultChargingContractInfoReturned This boolean field determines if the charging contract information is returned in the result of the charging operation. resultChargingProcessInfoReturned This boolean field determines if the charging process information is returned in the result of the charging operation. resultNotificationReturned This boolean field determines if the notifications is returned in the result of the charging operation. resultResponseItemReturned This boolean field determines if the response items is returned in the result of the charging operation. TransactionSetUDR This UDR represents the TransactionSet associated with a charging request result. The transaction set may be empty. Field Description Field Description allNotifications (list<NotificationUDR>) This list offers a shortcut to the generated Notification contained in all generated transactions (master and dependents). For further information, see Notification UDRs . dependentTransactionList (list<TransactionUDR>) This list contains the transactions generated by the associated dependent charges (if they exist). For further information, see the section below, TransactionUDR. masterTransaction (list<TransactionUDR>) This field contains the transaction generated by the master charge. For further information, see the section below, TransactionUDR. name (string) The name origin (string) The origin of the transaction set. It corresponds to the origin of the master transaction which can be: usage recurring oneshot snapshotId (int) The snapshot identifier used to rate event transactionSetId (long) The transaction set owner id ServiceSessionUDR This UDR represents the services associated with a Charging Request. Field Description Field Description cancellation (boolean) TRUE : Cancel session FALSE : Do not cancel session  this is the default value. confirmationItem (ChargeableItemUDR  optional) A ChargeableItem represents the information that the client needs to send to perform the charge process. It consists of a name and a list of properties. propertyToInverse (string) The name of the property used by the inverse rating process. This property must be contained in the chargeableItem definition on the SAP Convergent Charging Core server. reservationId (string) This field contains a unique identifier for the service. reservationItem (ChargeableItemUDR  optional) A ChargeableItem represents the information that the client needs to send to perform the charge process. It consist of a name and a list of properties. sessionResolutionMode (ResolutionModeUDR  optional) This optional field can be used to pass over the default agent configuration. If set, it defines the session termination to apply if this particular session has reached its 'time to live'. The session can be either cancelled (cancel) or confirmed (confirm). sessionTTL (long  optional) This optional field can be used to pass over the default agent configuration. If set, it defines the 'time to live' for this particular charging session. Note! This field will only work on SAP CC 5.0 SP1 and later. For older versions, this field will be present but it will not have any effect on the TTL. TransactionUDR This UDR represents the Transaction associated with a Charging Request Result. A transaction corresponds to the details of the price computation by the rating engine. It may be empty. Field Description Field Description currency (string) A string representation of the currency. The currency value respects the SAP Convergent Charging Currency.getAlphaCode() format. For example EUR , or USD detailList (list<TransactionDetailUDR>) This field contains the list of the transaction details produced during the price plan execution. It may be empty. For further information, see the section below, TransactionDetailUDR. dispatchCode1 (string) This field contains the value of the dispatch code. dispatchCode2 (string) This field contains the value of the dispatch code2. dispatchCode3 (string) This field contains the value of the dispatch code3. label (string) This field contains the label of the transaction. MoneyAmount (string) A string representation of the charged amount. The toConfirmMoneyAmount value respects the SAP Convergent Charging Money.toString() format. For example: EUR 12.15 , or USD 0.123456 notifList (list<NotificationUDR>) This list contains the notification produced during the price plan execution. For further information, see Notification UDRs . offerCode (string) This field contains the offer code of the subscription. chargeCode (string) This field contains the charge code of the subscription which leads to this transaction. operationType (OperationTypeUDR) This field contains the operation type of the transaction. It can be: CREDIT DEBIT origin (OriginUDR) This field contains the origin of the transaction. It can be: ONE_SHOT RECURRING USAGE relationshipType (RelationshipTypeUDR) This field contains the relationship type of the transaction. It can be: CLIENT PARTNER sessionId (string) When the transaction is produced during a session based rating, this field contains the corresponding session id. subscriptionCode (string) This field contains the subscription code against which the transaction was produced. transDate (date) The date of the transaction TransactionDetailUDR This UDR represents a transaction detail. It corresponds to a property produced during the price plan computation. TransactionDetailUDR is an instance of a PropertyUDR . For more details, refer to the section below, PropertyUDR. PropertyUDR This UDR is the base representation of a name-value property. In addition, a type can be added to specify how to cast the value. Field Description Field Description ccType (PropertyTypeUDR) The type of property. This field is read only. The ccType will be populated when the properties are returned while retrieving charged items. When it comes to submitting chargeable items, it can be left empty. The property types can be: STRING - Used for String, Boolean, or DRIpAddress Object types NUMBER - Used for Byte, Character, Short, Integer, Float, Double, Long and BigInteger object types DATE - Used for Date or DRDate Object types BIG_DECIMAL - Used for BigDecimal Object type. In this case the value will be a string representation of this bigDecimal ( BigDecimal.toPlainString() ). name (string) The name of the property value (any) The value of the property OperationTypeUDR This is a constant UDR, where value returns either "1" or "0", depending on if the operation type is CREDIT or DEBIT. This is an APL code example for how to get the operation type value: OperationTypeUDR rt = (OperationTypeUDR) input; if( rt.value == rt.DEBIT.value ) { ... ... } else if ( rt.value == rt.CREDIT.value ) { ... ... } Field Description Field Description CREDIT (OperationTypeUDR) Constant value 1 DEBIT (OperationTypeUDR) Constant value 0 value (string) The operation type value, which can be "1" or "0". This is a read-only field. OrderStateUDR This is a constant UDR, where value returns either "2" or "1", depending on if the order state is FREE or PAID. For an APL code example describing how to get the value, see the section above, OperationTypeUDR. Field Description Field Description FREE (OrderStateUDR) Constant value 2 PAID (OrderStateUDR) Constant value 1 value (string) The order state value, which can be "2" or "1". This is a read-only field. OriginUDR This is a constant UDR, where value returns either "2", "1" or "0", depending on if the origin is ONE_SHOT , RECURRING or USAGE . For an APL code example describing how to get the value, see the section above, OperationTypeUDR. Field Description Field Description ONE_SHOT (OriginUDR) Constant value 2 RECURRING (OriginUDR) Constant value 1 USAGE (OriginUDR) Constant value 0 value (string) The origin value, which can be "2", "1" or "0". This is a read-only field. PropertyTypeUDR This is a constant UDR, where value returns either "String", "Date", "Number" or "BigDecimal", depending on if the property type is BIG_DECIMAL , DATE, NUMBER or STRING . For an APL code example describing how to get the value, see the section above, OperationTypeUDR. Field Description Field Description BIG_DECIMAL (String) Constant value x DATE (Date) Constant value x NUMBER (Number) Constant value x STRING (BigDecimal) Constant value x value (string) The property type value, which can be "String", "Date", "Number" or "BigDecimal". This is a read-only field. RelationshipTypeUDR This is a constant UDR, where value returns either "1" or "0", depending on if the relationship type is PARTNER or CLIENT . For an APL code example describing how to get the value, see the section above, OperationTypeUDR. Field Description Field Description CLIENT (RelationshipTypeUDR) Constant value 0 PARTNER (RelationshipTypeUDR) Constant value 1 value (string) The relationship type value, which can be "1" or "0". This is a read-only field. ResolutionModeUDR This is a constant UDR, where value returns either "-1", "1" or "0", depending on if the resolution mode is USE_DEFAULT , CANCEL, or CONFIRM . For an APL code example describing how to get the value, see the section above, OperationTypeUDR. Field Description Field Description USE_DEFAULT (ResolutionModeUDR) Constant value -1 CANCEL (ResolutionModeUDR) Constant value 1 CONFIRM (ResolutionModeUDR) Constant value 0 value (string) The resolution mode value, which can be "-1", "1" or "0". This is a read-only field. ResponseItemUDR Field Description Field Description key (int) The numeric key of the response item chargedItemClassId (string) The class identifier corresponding to the response item fields (list<ChargedItemFieldUDR>) A list of all the fields in the corresponding response item ResultTypeUDR This is a constant UDR, where value returns either "-1", "0" or "1", "2" or "3" depending on if the result type is USE_DEFAULT , NO_TRANSACTIONS , MASTER_TRANSACTION , ALL_TRANSACTIONS, or ALL_TRANSACTIONS_AND_RECURRING . For an APL code example describing how to get the value, see the section above, OperationTypeUDR. Field Description Field Description USE_DEFAULT (ResultTypeUDR) Constant value -1 NO_TRANSACTIONS (ResultTypeUDR) Constant value 0 MASTER_TRANSACTION (ResultTypeUDR) Constant value 1 ALL_TRANSACTIONS (ResultTypeUDR) Constant value 2 ALL_TRANSACTIONS_AND_RECURRING (ResultTypeUDR) Constant value 3 value (string) The result type value, which can be "-1", "0" or "1", "2" or "3". This is a read-only field.

---

# Document 1760: The Diameter Base Protocol - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204672701/The+Diameter+Base+Protocol
**Categories:** chunks_index.json

The Diameter Base Protocol is a successor of the Radius Protocol. It is designed to provide an extensible framework for any services that require the support of authentication, authorization, and accounting (AAA), across several networks. The Diameter Base Protocol, unlike the Radius Protocol, also enables new access control features while maintaining flexibility for further extension. According to RFC 6733, the Diameter Base Protocol alone does not offer much functionality. The Diameter Base Protocol should be regarded as a standard transport and management interface for AAA applications that provide a well-defined functionality subset. To increase functionality, predefined AAA applications are added. An AAA application usually consist of new command code and AVP definitions that map the semantics of the application. One example of a predefined application is the Diameter Credit-Control. For further information, see RFC 4006. The Diameter Workflow Operation There are two Diameter agents: Diameter Stack Diameter Request Diameter Stack The Diameter Stack agent manages transport, decoding, and encoding of Diameter input messages. In order for a workflow to act as a Diameter server, you must use the Diameter Stack agent. The Diameter Stack agent communicates with the workflow by using the UDR type called RequestCycleUDR . When a request message arrives to the stack, the message is decoded, validated, and turned into a UDR of the pre-generated UDR type, as specified in the Commands tab in Diameter Application Profile . This UDR is inserted into the RequestCycleUDR s Request field and routed through the workflow. By using the APL function udrCreate the Answer field is populated with an appropriate answer message, and then RequestCycleUDR is routed back to the stack agent, for transmission of the answer. It is possible to use multiple Diameter Stack agents in a workflow if that is required in the business logic. However, for the best possible performance, it is recommended to use one Diameter Stack agent per wo rkflo w. Open A Diameter Stack workflow Note! Diameter Base Protocol commands such as Capability-Exchange-Request and Capability-Exchange-Answer , are handled internally by the Diameter Stack agent. You see an indication of execution of these commands on the Workflow Monitor in the debug mode. The Diameter Stack agent also publish MIM values that contain counters for the various commands. AVPs (Attribute-Value pairs) from the Diameter Base Protocol are static, unchangeable, and always available to the system. Diameter Request In order for a workflow to act as a Diameter client, you must use both the Diameter Request agent and the Diameter Stack agent. The Diameter Request agent simply references a Diameter Stack agent that is suitable for the outgoing route. A RequestCycleUDR with a populated Request field is routed into the Diameter Request agent. This agent then uses the selected stack to send the message. A RequestCycleUDR containing the original Request field and a populated Answer field is then routed back into the workflow. A Diameter Request workflow Diameter Related UDR Types You view the UDR types that are created by default in the Diameter agents (based on RFC 6733), in the UDR Internal Format Browser, in the Diameter folder. To open the browser, open an APL Editor. In the editing area right-click and select UDR Assist ance. Open The UDR Internal Format Browser Each Command or AVP that is defined in the Diameter application profile configuration will result in a UDR type after it has been saved. Note that the base commands and AVPs in RFC 6733 are predefined and included automatically. Note! The BaseUDR and BaseCommand UDR types are internal and shall not be used in APL code. RequestCycleUDR The Diameter Stack agent and Diameter Request agent communicate with the workflow by using the UDR type RequestCycleUDR. For more information, see the sections above, Diameter Stack, and Diameter Request. The following fields are included in the RequestCycleUDR: Field Description Field Description Answer (BaseCommand (Diameter)) This field is populated with an "answer message UDR", before routed back by the workflow to the Diameter Stack agent. For the Diameter Request agent it will work the reversed way: after the answer field has been populated by the agent, the RequestCycleUDR is routed to the workflow. Note! In the answer message UDR, the fields Origin_Host and Origin_Realm will be automatically populated by the Diameter stack in case they are unconfigured, i e set to null. Otherwise, your configured values will be used. The field EndToEndIdientifier is available as a read-only field and will always have the same value as in the "request message UDR". AnswerReceivedTime (long) A timestamp indicating when the client receives the answer in nanoseconds. AnswerSentTime (long) A timestamp indicating when the server sends the answer in nanoseconds. Context (any) This is an internal working field that can be used in the workflow configuration to keep track of and use internal workflow information related to the request, when processing the answer. An example for a proxy workflow including TCP/IP and Diameter agents: When sending the RequestCycleUDR to the Diameter Request agent, the input TCPIPUDR is saved in the Context field. When the response is received from the Diameter agent, the TCPIPUDR can be read from the Context field and this TCPIPUDR can be used to send back the response to the TCP/IP agent. ExcludePeers (list<string>) You can populate this field with a list a list of peers, identified by their hostnames. When Round Robin is selected as the Realm Routing Strategy , these peers will be excluded from lookups in the Realm Routing Table . You can use ExcludePeers to act on errors in the answers from a Diameter server. For instance, if a peer answers with the Result-Code AVP set to DIAMETER_TOO_BUSY 3004 , you may want to exclude this peer in consecutive requests for some time. IncomingRemotePeer (string) This field is populated with the Diameter identity of the sending peer. Note! The field is read-only and will be automatically populated by the Diameter stack. Request (BaseCommand (Diameter)) The Diameter Stack agent populates the Request field with the "request message UDR" before routing the RequestCycleUDR to the workflow. For the Diameter Request agent it will work the reversed way and request messages will be transmitted from the workflow to the Diameter Stack agent by using this field. Note! In the request message UDR, the fields Origin_Host and Origin_Realm will be automatically populated by the Diameter stack in case they are unconfigured, i e set to null. Otherwise, your configured values will be used. The value of the field EndToEndIdientifier can be configured by using APL. If it is not configured, the value will be set by the stack sending out the request. RequestReceivedTime (long) A operating system uptime indicating when the server receives the request in nanoseconds. RequestSentTime (long) A operating system uptime indicating when the client sends the request in nanoseconds. Session_Id(string) A Diameter Session-Id value that will be read from the Request field in the Diameter message. This is a read-only field. Throttled(boolean) This fl ag indicates whether the UDR has been throttled or not. Default is false , and if the UDR has been throttled, it will be set to true . Note! If Throttled is true , the Answer field of the RequestCycleUDR will be set to null. WrappedMZObject The WrappedMZObject UDR does not map to a Diameter message but can be used to send data between workflows. WrappedMZObject is added as a field in the RequestCycleUDR (request or answer). Note! Since this is not a normal Diameter message, the receiver has to be another workflow. The following fields are included in the WrappedMZObject UDR: Field Description Field Description Data (any) The data to send to another workflow. Destination_Host (string) The server host, the destination of the message. Destination_Realm (string) The realm where to route the message. Is_Request (boolean) Used to indicate if the message is a request or not. Is_Unidirectional (boolean) To be used if when no reply is expected. DiameterErrorUDR When any of the following errors occurs, the Diameter Stack agent creates a DiameterErrorUDR : Decoding and validation errors for known requests and answers (e g unknown or missing AVP) Unknown request or answer (unknown command ID) Failure in CER/CEA handshake (e g no common applications) Request or answer sent before CER/CEA handshake A DiameterErrorUDR is not created unless the erroneous incoming data is formatted as a Diameter command. It must contain a header followed by a payload. The following fields are included in the DiameterErrorUDR UDR: Field Description Field Description ErrorMessage (string) This field contains the error message. IncomingMessage (BaseCommand(Diameter)) This field is populated with the incoming message if it can be decoded. IncomingRemotePeer (string) This field contains the name of the source peer, as specified in the Diameter routing profile configuration. If the peer is unknown, this field contains the content of the Origin-Host AVP, provided that the incoming message can be decoded. RawIncomingMessage (bytearray) This field contains the original Diameter message. ResultCode (int) This fields contains the Diameter result code. SentAnswer (BaseCommand(Diameter)) This field is populated with the answer message, if any. OriginalData (bytearray) This field is always empty. You can configure the Diameter Stack agent to route UDRs of this type to the workflow. For more information, see Advanced Tab in Diameter Stack Agent Configuration . ConnectionLost UDR The ConnectionLost UDR is sent whenever a connection to a peer is lost, regardless of the reason for the connection going down, i e, whether it is a controlled shutdown or, for example, a network failure. Field Description Field Description Message (string) This field contains the connection related message indicating the reason for the lost connection. PeerName (string) This field contains the name of the peer to which the connection is lost. You can configure the Diameter Stack agent to route UDRs of this type to the workflow. For more information, see Advanced Tab in Diameter Stack Agent Configuration . Special Error Handling The Diameter Stack agent produces three error answers with internal result codes. No suitable route When there is no peer or realm in the Diameter Routing profile that matches the content of the AVPs that are used for routing, a message with the error code 4997 is returned. The following AVPs are used for routing: Destination-Host Destination-Realm Acct-Application-Id Auth-Application-Id Vendor-Specific-Application-Id This error may also occur when all the peers of a realm are specified in the ExcludePeers field of a RequestCycle UDR and Round Robin is the selected Realm Routing Strategy . Connection to peer not open When connection with the peer that is receiving the request is not established, a message with the error code 4998 is returned. Timed out waiting for answer When a request is sent to a peer and no answer is received within a configurable timeout, a message with the error code 4999 is returned. Peer Failover Handling The connections to peers are monitored through the standard Diameter watchdog as described in RFC 6733 and RFC 3539. Possible states of the connections are: OKAY, SUSPECT, DOWN, REOPEN, INITIAL. These states are used by Diameter Stack agent for peer selection, failover handling, and to determine when messages should be routed to the workflow. The diagram below illustrates a failover scenario where a CCR (Credit Control Request) message is routed from a workflow. Open Handling of Outstanding Request at Peer Failover A CCR message is routed from a workflow to a Diameter Stack agent. The Diameter Stack agent routes the CCR message to Peer 1. The peer connection status of Peer 1 is OKAY. Peer 1 does not respond within the timeout period that is configured in the Diameter Stack agent and an Error Answer Message is routed back to the workflow. The workflow is configured to act on the Error Answer Message and resends the CCR message. Since the Diameter Stack agent does not receive an answer after the first CCR message, it sends a DWR (Diameter Watchdog Request) message to Peer 1. The watchdog timer interval TWINIT expires without a response from Peer. The Diameter Stack agent sends a second DWR message to Peer 1. The workflow makes a third attempt at sending the CCR message. In the meantime, TWINIT has expired twice and the connection state for Peer 1 has changed to SUSPECT. This triggers the Diameter Stack agent to resend the CCR message to a different peer. Diameter requests are only routed to peers with status REOPEN and SUSPECT as a last resort, i e when there are no peers with status INITIAL or OKAY. For this reason the Diameter agent now immediately routes the CCR message to another available peer (Peer 2 in this example). TWINIT has now expired three times and the peer connection status has changed to DOWN. This means that messages are no longer routed to this peer. Peer 2 responds with a Credit Control Answer (CCA) message to the Diameter Request agent, which then routes the message back to the workflow. For simplicity of the example above, TWINIT appears longer than the Diameter answer timeout. In a production configuration this is typically not the case. For information about how to configure the Diameter answer timeout and TWINIT, see Diameter Stack Agent . For information about how to configure Diameter peers, see Diameter Routing Profile .

---

# Document 1761: SAP CC Batch UDRs - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205034483/SAP+CC+Batch+UDRs
**Categories:** chunks_index.json

The SAP CC Batch UDR types are designed to formalize the exchange between workflows and the SAP Convergent Charging Core Server. The SAP CC agents translate the response into a charging or acquisition result UDR, which is referred to by a CCBatchCycleUDR that becomes available in the workflow. The SAP CC Batch UDR types can be viewed in the UDR Internal Format Browser in the sapcc folder, in the batch subfolder. To open the browser, open an APL Editor, and, in the editing area, right -click an d select UDR Assistance . The section contains the following subsections: Batch Answer Batch Request CCBatchCycleUDR

---

# Document 1762: Real-Time Disk_Deprecated Forwarding Agent MultiForwardingUDR Input - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205655382/Real-Time+Disk_Deprecated+Forwarding+Agent+MultiForwardingUDR+Input
**Categories:** chunks_index.json

When the Disk_Deprecated forwarding agent is set to use MultiForwardingUDR input, it accepts input of the UDR type MultiForwardingUDR declared in the package FNT. The declaration follows: internal MultiForwardingUDR { // Entire file content byte[] content; // Target filename and directory FNTUDR fntSpecification; }; The content of the MultiForwardingUDR will be stored at the path that you have set in the fntSpecification field. Use the APL functions fntAddString and fntAddDirDelimiter to set the value of this field. For further information about these functions, see FNTUDR Functions in the APL Reference Guide .

---

# Document 1763: SAP CC Online Agent Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204609065/SAP+CC+Online+Agent+Configuration
**Categories:** chunks_index.json

You open the SAP CC Online agent configuration dialog from a workflow configuration. To open the SAP CC Online agent configuration, click Build  New Configuration . Select Workflow from the Configurations dialog. When prompted to Select workflow type , select Realtime . Click Add agent and select SAP CC Online from the Agent Selection dialog. Connection Tab The Connection tab contains configuration data that is required to connect to a re mo te s erve r. Open SAP CC Online agent configuration dialog - Connection tab Setting Description Setting Description Hosts In this section, add IP address/hostname and external charging port of at least one SAP Convergent Charging Core server Dispatcher Instance. The SAP CC Online agent will try to connect to the listed hosts until a connection is successfully established with one of them. Note! When Hosts is set to Default or Per Workflow in Workflow Properties, you can specify multiple hosts in the workflow table. Each host must be separated by a semi-colon. For example: host1:2000;host2:2000 . Note! If you upgrade, or import a configuration, from a version previous to MedationZone 7.2, the Host and Port settings are no longer included in the workflow table for your workflow. Instead, you must manually configure the Hosts setting in the Workflow Table tab in the Workflow Properties dialog. Connection Settings Enable Authentication Select this check box to enable charging API authentication. Note! Charging API Authentication is only available for SAP CC version 4.1 SP2 and later. User Name SAP CC user id Password The password for the SAP CC user Timeout The timeout (in milliseconds) to apply for each charging request. This value corresponds to the maximum time that SAP CC can take to execute one charging request. Enable Secured Connection Select to use TLS encrypted communication with Hosts . For more information about setting up Secured Connection, refer to SAP CC Secured Connection . Keystore Path The path to the keystore on an Execution Container host. The path must be the same for all hosts. Note! The keystore format to be used by this particular agent is PKCS12 only. Keystore Password The password of the keystore. Advanced Setting s T ab The Advanced Settings tab contains configurations rel ated to charging request behavior. Open SAP CC Online agent configuration dialog - Advanced tab Setting Description Setting Description Default charging properties Transaction Set to Return This parameter controls the content of the charging answer. Select No Transaction if no details shall be returned in the charging answer. Only the status (success or failure) and the price will be returned. Select Master Transaction if the details of the price computation shall be returned in the charging answer. It includes user defined notification that may be raised by the price plan. This applies only to the master transaction. Select All Transactions if the details of the price computation shall be returned in the charging answer. It includes user defined notifications that may be raised by the price plan. This applies only to the master and dependents transactions. Select All Transaction and Recurring if the details of the price computation shall be returned in the charging answer. It includes user defined notifications that may be raised by the price plan. This applies master transactions and dependents, but also one-shot- and recurring transactions, which may be triggered by the usage event. In Session Cleanup Transaction Set to Return This parameter controls the content of the charging answer in the case a session cleanup occurred during a charging request. The same value as for Transaction Set to Return applies here. Session Time To Live Defines the default session 'time to live' (in seconds) for the session charging request. This is the time period during which a session is considered active if no updates occurred. Default Session Resolution This parameter controls the default session termination to apply when a session has reached its 'time to live'. The session (in fact, the last reservation) could be either: Cancelled - Cancel Confirmed - Confirm Reservation Renewal Listener Listen For Reservation Renewal Events Select to listen for Reservation Renewal Events from SAP Convergent Charging. Listener Identifier Identifies the listener that the client binds to in order to receive Reservation Renewal Events. The Listener Identifier registered by an agent must be in the range of 1 to 127. If several agents use the same Listener Identifier the first agent to register will receive the events. If the first agent to register the Listener Identifier becomes unavailable, the second agent to register will receive the events. Spending Status Monitoring Listen For Spending Status Reports Select to listen for Spending Status Reports from SAP Convergent Charging. Listener Identifier Identifies the listener that the client binds to in order to receive Spending Status Reports. The Listener Identifier registered by an agent must be in the range of 1 to 127. If several agents use the same Listener Identifier the first agent to register will receive the events. If the first agent to register the Listener Identifier becomes unavailable, the second agent to register will receive the events. Default Monitoring Listener Identifier This is the default ID that will be used for the monitoring session. Default Monitoring Session TTL This is the default Time To Live value (in seconds) that will be used. Debugging Enable Debug Events Select this check box to enable debug mode. Useful for testing purposes. Response Data Convert Bigdecimal Response to String Select this check box to allow conversion of the BigDecimal data type from the SAP Convergent Charging response into string. By default, the check box is empty. Note! In terms of backwards compatibility, enabling this option prevents any compatibility issues with workflows that support the configurations from before the BigDecimal data type was introduced in version 8.0.5.0. Flow Control Tab The Flow Control tab contains configurations required to control the request flow with Con verg ent Charging Core Server. Canceled - Cancel Confirmed - Confirm Open SAP CC Online agent configuration dialog - Flow Control tab Setting Description Setting Description Enable Flow Control This parameter determines if the flow controller is activated or not on the SAP CC Stateful Service Client. Queue Properties Queue Size This parameter controls the maximum number of waiting requests to be executed by the SAP Convergent Charging core server. This is mandatory to make sure that the core server is not flooded with too many requests. Requests that cannot fit in the queue wait until the size reaches the Re-accept Request Threshold parameter explained below. The value of this parameter depends on: The total number of incoming requests that can be handled by the available SAP CC Dispatchers (refer to the description of the SAP CC STATEFUL_SERVICE_QUEUE_SIZE parameter) The number of SAP CC Stateful Service Clients connected within the different workflows. Note! Take into account that additional SAP CC Stateful Service Clients may exist in the overall landscape. Example - Setting the queue size Consider the following scenario: A SAP CC landscape can handle 30000 requests using 3 Dispatchers, each configured with a queue size set to 10000. 5 connected SAP CC Stateful Service Clients The maximum queue size for all the flow controllers should be set to a value that is lower than 30000 requests (e.g. 25000), and thus, the Queue Size for each SAP CC agent can be set to 5000 requests. In addition, the Re-accept Request Threshold value can be set to 4995. Re-accept Request Threshold This parameter defines the threshold of the queue below which waiting requests are processed again. This parameter is only relevant when some requests are waiting because the queue has reached its size. Note! It is strongly recommended to activate flow control in a production system. The SAP CC Online agent relies on the Asynchronous CC client and if no control is enabled, the agent will send as many requests as possible to the SAP Convergent Charging core server, which could lead to two unexpected behaviors: Increased latency of charging requests. An unstable server that will not be able to answer the requests. Monitoring Event Tab The Monitoring Event tab contains configurations for sending an event related to latency, for example, the number of successfully processed UDRs, erroneous UDRs, and so on. The monitoring information is sent through a CC Monitoring Event. For further information about how to set up the CC Monitoring Event, see Event Notifications . It is recommended that you do not enable these monitoring features in a p roduc tion landscape. Open SAP CC Online Agent Configuration - Monitoring Event Tab Setting Description Setting Description Enable Global Event Select to send a CC Monitoring Event when the Workflow is stopped. Enable Spot Event Select to send a CC Monitoring Event with a configured frequency, see Spot Frequency below. Spot Frequency Configure the frequency (in seconds) for how often a CC Monitoring Event shall be sent. Default frequency is 1000 second.

---

# Document 1764: KPI Profile - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204611299/KPI+Profile
**Categories:** chunks_index.json

The KPI profile contains a KPI Management service model and is used by the KPI Cluster, KPI Cluster Out, and KPI agents. The profile can be created either directly in the profile or via REST. When the profile and service model has been created, it has to be deployed. See The KPI profile is loaded when you start a workflow that depends on it. This section includes the following subsections: Creating a Profile and Service Model Using the Model Builder Creating a Profile and Provisioning via REST

---

# Document 1765: Workflow Types - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204997393/Workflow+Types
**Categories:** chunks_index.json

There are four types of workflow configurations: Batch Real-Time Task System Task Batch Workflow A batch workflow processes input from a specific source, usually a file. The workflow creates batches from the data and processes them one by one. In a batch workflow data is collected by a single collecting agent in a transaction-safe manner. A single batch is collected (only once) and is fully processed by the workflow before the next batch is collected. A batch workflow: Processes batches, one at a time. Is started either manually or by a scheduled trigger. Stops either when it finishes processing the input, or when aborted. Note! If the workflow aborts, the current batch can be reprocessed. Real-Time Workflow Real-time workflows are used in systems where instant processing requests need to be addressed as they occur. In real-time workflows most of the collecting agents communicate in a two-way manner; they receive requests and provide replies. A real-time workflow: Can have more than one collecting agent Note! Multithreading operations differ from batch workflows in the following ways: The order of UDR processing cannot be guaranteed. Only global MIMs are used. They can process several UDRs simultaneously. See Multithreading . Once started, the real-time workflows remain active. A real-time workflow is started either manually or by a scheduled trigger and stops either manually or due to an error. Processes reside in memory. Transaction safety must be handled prior to collection and after distribution. Errors are registered in the System Log and the workflow continues to run. Real-time workflow error handling rarely leads to workflow aborts. Note! Real-time workflows may use the Inter Workflow or Kafka agents to forward data to a batch workflow. Task Workflows Task workflows are single-agent workflows that execute user-defined SQL, shell scripts, or unit tests. System Task Workflows MediationZone comes with built-in System Task workflows. System Task workflows and groups let you perform activities such as log and run-time data cleanup. System Task workflows include the following types: Archive Cleaner Configuration Cleaner Data Veracity Maintenance ECS Maintenance Statistics Cleaner System Backup System Log Cleaner User Cleanup This section includes information about: Opening a System Task Workflow Modifying a System Task Workflow Configuration Opening a System Task Workflow You open a System Task Workflow from the workflow configurations list ( Build menu). To open a System Task, double-click a System Task workflow or workflow group in the Configurations pane. Open System Task Workflows list Modifying a System Task Workflow Configuration You modify all the System Task Workflow configurations at the template level. The workflow properties are all set to Final and cannot be modified. You can modify a System Task configuration, including its scheduling criteria, but you cannot create or remove a System Task configuration. The Archive Cleaner Workflow lets you modify only its scheduling criteria. For further information see Scheduling in Managing a Workflow Group . To Modify a System Task Workflow: Open the System Task Workflow that you want to modify by double-clicking on it or right-clicking and selecting View Configuration . Double-click the agent icon. The agent's configuration dialog opens. Perform the changes and click OK . Save the workflow. Archive Cleaner The Archive Cleaner System Task lets you remove old archived files from the file system. Archive Cleaner operates according to data that it receives from the Archive profiles. Note! You can only modify the scheduling criteria of the Archive Cleaner. See Archive Profile . Since schedules can only be applied to workflow groups, you modify the Archive Cleaner scheduling from the workflow group configuration. Configuration Cleaner The Configuration Cleaner lets you specify the maximum age of an old configuration before it is removed. Note! You cannot remove the most recent configuration with the Configuration Cleaner, only the previous ones. To configure the Configuration Cleaner: Select a configuration type from the table and click the entry in the Keep column. A drop-down list appears. Select one of the following options: Always , Days , or Versions . The Configuration Cleaner System Task Item Description Item Description Type The icon represents the configuration type. Name The name of the configuration type. Keep Specify how long to keep old configurations in the system. Always : Always keep configurations. Days : Keep configurations for a specified number of days. Versions : Keep only a certain amount of versions of the configurations. Value Specify the number of days or versions that represent the period during which configurations are kept. Data Veracity Maintenance The Data Veracity Maintenance system task removes outdated Data Veracity data, provided that the state is REPROCESSED or DELETE_APPROVED. For more information see Data Veracity Maintenance System Task . Open The Data Veracity Maintenance Task ECS Maintenance ECS Maintenance lets you remove old ECS data from the file system, provided that the state is REPROCESSED . For more information see ECS Maintenance System Task . Open The ECS Maintenance Task Statistics Cleaner The Statistics Cleaner lets you remove old statistics data that has been collected by the Statistics server and stored in the database. Open The Statistics Cleaner Task Item Description Item Description Minute Level Records Specifies the number of days during which a minute-level record should be kept in the database. Hour Level Records Specifies the number of days during which an hour-level record should be kept in the database. Day Level Records Specifies the number of days during which a day-level record should be kept in the database. System Backup System Backup enables you to create a backup of all the configurations in the system. A backup file is saved on the host machine where the Platform application is installed. The System Backup files are stored in $MZ_HOME/backup/yyyy_MM , where yyyy_MM is translated to the current year and month, and $MZ_HOME/backup is the default path . The system saves a backup file and names it according to the following format: backup_<date>.zip . In addition, System Backup lets you specify the maximum age of backup files before they are removed. You can change this location using the following command: <property name="mz.backup.path" value="${mz.home}/backup"/> The System Backup configuration dialog contains two tabs: System Backup : To enable the option. Cleanup : To configure the option. The System Backup System Task - the System Backup tab Item Description Item Description Enable System Backup Select this checkbox to enable the system backup. This setting is selected by default. Use Encryption Select this checkbox to enable encryption of the backup. Password Enter a password. Open The System Backup System Task - the Cleanup tab Item Description Item Description Imported Files Every time the System Importer imports a configuration, the system saves it as a backup on the Platform. Enter the period, in days, during which the imported files should remain on disk. System Backup Files Defines the maximum age of system backup files before they are removed from the host disk. System Log Cleaner The System Log Cleaner deletes the System Log periodically. You specify how long to keep different message types in the System Log Cleaner configuration. Open The System Log Cleaner Task Item Description Item Description Error/Disaster Enter the number of days to keep Error and Disaster messages before they are removed from the database. Max value: 999 days Default value: 30 days Warning Enter the number of days to keep Warning messages in the database. Max value: 999 days Default value: 20 days Information Enter the number of days to keep Information messages in the database. Max value: 999 days Default value: 10 days User Cleanup Task The User Cleanup Task automatically deletes inactive users. When either a SSO or LDAP user is logged in, the user is added into the system. However, the user is not removed when it is deleted from the external server. The User Cleanup Task is used to delete users that have not logged in for a configurable number of days. Open The User Cleanup Task Item Description Item Description Apply to the following user types Checkbox options to determine which User Type to apply the cleanup task on. Multiple options may be selected. Local users - apply the clean up on local system users SSO users - apply the clean up on SSO users LDAP users - apply the clean up on LDAP users Retention Period The default value is 0 (zero). This setting specifies the number of days to wait before a user is deleted after their last login session. A value of 0 (zero) disables the cleanup function. Default Successor If a certain user is deleted from the platform, a successor needs to be designated. This user will take ownership of all previously owned configurations.

---

# Document 1766: SQL Server Considerations - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204999315/SQL+Server+Considerations
**Categories:** chunks_index.json

When distributing data to an SQL Server table, the following must be taken into consideration: The table must have at least one UNIQUE column. The column reserved for the Transaction ID must be of type bigint . Columns of type UNIQUEIDENTIFIER must be set with a function. Hence, map it to NULL in the agent. Columns with an IDENTITY set must be mapped to NULL in the agent. Note! For MS SQL, the column type timestamp is not supported in tables accessed by MediationZone. Use column type datetime instead. See System Administrator's Guide for information about time zone settings.

---

# Document 1767: Buckets Data Model - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204677301/Buckets+Data+Model
**Categories:** chunks_index.json



---
**End of Part 74** - Continue to next part for more content.
