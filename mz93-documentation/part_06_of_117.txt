# RATANON/MZ93-DOCUMENTATION - Part 6/112

---
**Dataset:** ratanon/mz93-documentation
**Part:** 6 of 112
**GitHub:** https://github.com/ratan0n/docs/tree/main/mz93-documentation
**Size:** ~70.0 KB
---

This section describes the Management API of the Authorization Server. Once you have setup the Authorization Server service instance, you will need to provision scopes and register clients before access tokens can be requested. The Authorization Server will provide access tokens for registered (known) clients only. The Management API's purpose is to help with the process of provisioning scopes and client registration via a set of HTTP based APIs and managing them. Provisioning Scopes A scope is what is known as an arbitrary string based on the user's context. Examples such as normal_scope, admin_scope determines the user's access level and the scopes that are associated with that level. Scope values cannot have space characters and it is recommended that any space be substituted with the underscore character. Scopes can be added and removed using the /scope endpoint URI after the Management API base URI while setting up the Authorization Server. Example - Scope endpoint URI http(s)://hostname:port/authserver/api /scope The following table lists all HTTP APIs available for provisioning scopes and the expected success return value. URI HTTP Method Input Parameters Input Format and Example Return Value Return Format and Example URI HTTP Method Input Parameters Input Format and Example Return Value Return Format and Example /scope GET None Format: N/A Example: N/A Space delimited list of all scopes provisioned Format: JSON Example: {"scope":"normal_scope admin_scope"} /scope POST Space delimited list of scopes to be provisioned Format: JSON Example: {"scope":"normal_scope admin_scope"} Space delimited list of scopes provisioned succesfully Format: JSON Example: {"scope":"normal_scope admin_scope"} /scope PATCH Space delimited list of scopes to be removed Format: JSON Example: {"scope":"admin_scope"} Space delimited list of scopes removed successfully Format: JSON Example: {"scope":"admin_scope"} Client Registration A client is an application that requires the REST API to be hosted on the HTTP/2 Server agent. When the OAuth2 authorization is enabled in the HTTP/2 Server agent, the client must obtain an access token such as generated by Authorization Server and then provide the access token via the Authorization HTTP header for REST API requests. The client must be registered first before obtaining the access token from the Authorization Server. Any unregistered client will not be accepted. Clients can be registered and removed using the /clients endpoint URI after the Management API base URI. Example - Client endpoint URI http(s)://hostname:port/authserver/api /clients Note! The client name MUST be unique. The following table lists all HTTP APIs available for provisioning scopes and the expected success return value: URI HTTP Method Input Parameters Input Format and Example Return Value Return Format and Example URI HTTP Method Input Parameters Input Format and Example Return Value Return Format and Example /clients GET None Format: N/A Example: N/A List of all clients registered Format: JSON Example: [{"client_name":"Some App","client_id":"YCuIPYVa0GryebpzniAZU5VGqye_dxBGdcXI","client_secret":"Ofy1-QfO3yrFYdk3dj1pmM30GKVre9Q6bMk6V7YIRmqGHwaijQ","scope":"normal_scope admin_scope"}] /clients/<client_name> GET None Format: N/A Example: N/A Client details for the <client_name> specified Format: JSON Example: {"client_name":"Some App","client_id":"YCuIPYVa0GryebpzniAZU5VGqye_dxBGdcXI","client_secret":"Ofy1-QfO3yrFYdk3dj1pmM30GKVre9Q6bMk6V7YIRmqGHwaijQ","scope":"normal_scope admin_scope"} /clients POST client_name and scope of the client to be registered Format: JSON Example: {"client_name":"Some App","scope":"normal_scope admin_scope"} Clients details for the <client_name> registered Format: JSON Example: {"client_name":"Some App","client_id":"YCuIPYVa0GryebpzniAZU5VGqye_dxBGdcXI","client_secret":"Ofy1-QfO3yrFYdk3dj1pmM30GKVre9Q6bMk6V7YIRmqGHwaijQ","scope":"normal_scope admin_scope"} /clients/<client_name> DELETE N/A Format: N/A Example: N/A Status for the removal of the client with <client_name> Format: JSON Example: {"status":"success"} /clients/<client_name> PUT scope of client to be registered or modified if client exists Format: JSON Example: {"scope":"normal_scope admin_scope"} Client details for the <client_name> that is registered or modified Format: JSON Example: {"client_name":"Some App","client_id":"YCuIPYVa0GryebpzniAZU5VGqye_dxBGdcXI","client_secret":"Ofy1-QfO3yrFYdk3dj1pmM30GKVre9Q6bMk6V7YIRmqGHwaijQ","scope":"normal_scope admin_scope"} /clients/<client_name> PATCH N/A Format: N/A Example: N/A Client details for the <client_name> that is specified and with new client_id and client_secret generated Format: JSON Example: {"client_name":"Some App","client_id":"YCuIPYVa0GryebpzniAZU5VGqye_dxBGdcXI","client_secret":"Ofy1-QfO3yrFYdk3dj1pmM30GKVre9Q6bMk6V7YIRmqGHwaijQ","scope":"normal_scope admin_scope"} HTTP Status Code The Management API in the Authorization Server will return certain codes to the client to indicate a successful or unsuccessful request. The following table will show the HTTP Status Code for successful HTTP API calls as well as all unsuccessful HTTP API calls. HTTP Status Code Return Value Return Format Return Example HTTP Status Code Return Value Return Format Return Example 200 (Successful) This indicates that the HTTP API call is successful. The response will often include a body that is dependent on which method was used in the request. JSON Highly dependent on the HTTP method type. 400 (Bad Request) Status of the HTTP API call and description of the status. Error is due to incorrect usage of the HTTP API by the user. JSON {"status":"error","description":"invalid form data"} 401 (Unauthorized) Incorrect username and/or password provided for the HTTP API call when HTTP Basic Authentication is enabled for the Management API. The response HTTP header parameter "WWW-Authenticate" will be set to "Basic" in this case. N/A N/A 500 (Internal Server Error) Status of the HTTP API call and description of the status. Error is due to the Authorization Server unable to handle the request internally. JSON {"status":"error","description":"database error"} Access Token Endpoint The access token endpoint is used by the client to request for access tokens. All clients have to be registered by using the Management API before the access token can be requested as all unregistered clients will not have their token request accepted. See the Client Registration section above for more information. Every registered client will have a client_id and client_secret assigned by the Authorization Server and the access token can only be requested using this set of client credentials. The access token can be requested using the Access Token URI that was configured using the access-token-uri parameter. Example - Access Token URI if the access-token-uri parameter value was configured to /token. The access token endpoint would be: http(s)://hostname:port/authserver/token The client can request for the access token at the access token endpoint by following the steps below: Setting the "client_id" and "client_secret" as username and password respectively in the HTTP Basic Authentication header. Setting the "grant_type" parameter using the "application/x-www-form-urlencoded" format in the HTTP request entity-body. The value MUST be set to "client_credentials". In the case that the client doesn't support HTTP Basic Authentication, the "client_id" and "client_secret" can be set using the the "application/x-www-form-urlencoded" format in the HTTP request entity-body as well using the "client_id" and "client_secret" parameter names respectively. Example - Using HTTP Basic Authentication header HTTP access token request by specifying client_id and client_secret in the HTTP Basic Authentication header POST /token HTTP/1.1 Host: oauth2.server.com Authorization: Basic WUN1SVBZVmEwR3J5ZWJwem5pQVpVNVZHcXllX2R4QkdkY1hJOk9meTEtUWZPM3lyRllkazNkajFwbU0zMEdLVnJlOVE2Yk1rNlY3WUlSbXFHSHdhaWpR Content-Type: application/x-www-form-urlencoded grant_type=client_credentials Example - Using application/x-www-form-urlencoded in the HTTP request entity-body HTTP access token request by specifying client_id and client_secret in the application/x-www-form-urlencoded format in the HTTP request entity-body POST /token HTTP/1.1 Host: oauth2.server.com Content-Type: application/x-www-form-urlencoded grant_type=client_credentials client_id=YCuIPYVa0GryebpzniAZU5VGqye_dxBGdcXI client_secret=Ofy1-QfO3yrFYdk3dj1pmM30GKVre9Q6bMk6V7YIRmqGHwaijQ The access token response will contain the following parameters to the entity-body of the HTTP response with a 200 (OK) status code: entity-body Description entity-body Description access_token The access token issued by the Authorization Server token_type The value will always be Bearer expires_in The lifetime (in seconds) of the access token Example - HTTP access token response HTTP/1.1 200 OK Content-Type: application/json Content-Length: 572 { "access_token":"eyJraWQiOiJqd3QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiJSaWVsbGUgQXBwIiwic2NvcGUiOiJzY29wZTEgc2NvcGUzIiwiaXNzIjoiZGlnaXRhbHJvdXRlIiwiZXhwIjoxNTIwMjY4MTk2LCJpYXQiOjE1MjAyNjYzOTZ9.fInkdt_Fe4QQ-gAgI7CszIMkru61aec6OYxQsotkydh5xVczJsaJ-QkAfPtJ0tTVkAYeJZYmVEi_aApY8HNJMrZgvS07S8PnBOwsPUAPAHTDVU3u3c9zqhVzV5233rcoMdiUK61Qa7MoreE_4BwxjYMbek08DscwPWRZ-3V1r49PZ5i2MI5kfj4LdNTcuJZZ62-oILupdvVCiGTt9poGZqZdktEkgKANXPhxp1oQ-w1LD9uhmsRWP_6Cd4R1ky1HJxEocbDtx0uf068De4v1rxH2myaz7faZBexeQEUHjiDLxomnBnQENTfxTEVIj7WLqenAzPIkAOC_KvVv5EaJJg", "token_type":"Bearer", "expires_in":1800 } In the event of an error when requesting an access token, The Authorization Server will respond with an HTTP 400 (Bad Request) status code unless specified otherwise. The response will include the following parameters: entity-body Description entity-body Description error A single ASCII [USASCII] error code from the following: invalid_client unsupported_grant_type error_description Human-readable ASCII [USASCII] text providing additional information, used to assist the client developer in understanding the error that occurred. Example - HTTP access token error response HTTP/1.1 400 Bad Request Content-Type: application/json Content-Length: 64 {"error":"invalid_client","error_description":"Unknown client"}

---

# Document 114: Excel Decoder Agent Input/Output Data and MIM - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205032990/Excel+Decoder+Agent+Input+Output+Data+and+MIM
**Categories:** chunks_index.json

Input/Output Data Input/Output data is the type of data that an agent both recognizes and delivers. The Decompressor agent consumes bytearray types and delivers ExcelUDR s. MIM For information about the MIM and a list of the general MIM parameters, see MIM . The Excel Decoder agent only publishes and accesses MIMs of general type.

---

# Document 115: File System Type - Git - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/315392053/File+System+Type+-+Git
**Categories:** chunks_index.json

Git is the default File System Type selected when you create a new File System Profile. There is one tab below this - General . Open New Configuration - File system profile General tab The following settings are available in the General tab in the Git File System Type: Setting Description Setting Description Repository URL The URL to the repository. Git Provider Open the dropdown to select the Git Provider you want to connect to. The options are: GITHUB BITBUCKET GITLAB Username This field will only be available when BITBUCKET is selected as the Git Provider. Enter your Bitbucket username here. Token Token to access the repository. This field is optional. Use Secrets Profile Select the checkbox to use a Secrets Profile to get the Token. Get Branches Click this button to fetch the branches from the repository. If the connection is working, the Branch combo box will be populated. If the connection fails, an error dialog will be shown. Branch Select the branch to use. Note! It is not possible to create a new branch using Usage Engine. The branch must already exist in the repository specified in the Repository URL . View Repository Click here to browse the folders in the repository. It is only possible when the configuration is saved. Note! When you Save As, the remote repository is cloned to the platform and may take some time. This directory is $MZHOME/gitrepos by default. It can be changed by setting the property mz.git.basePath to some other path accessible from the Platform It is not possible to change the Repository URL or branch once the configuration is saved. Import of Git File System Profile An imported new Git File System Profile configuration will always be invalid since the repository has not been cloned. You clone the repository in the profile by clicking the Clone Repository button. Open Open When the cloning is done the text on the button will change to Preview Repository , and the configuration should now be valid, which you can verify by clicking the Validate button.

---

# Document 116: Alarm Detection - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204670892/Alarm+Detection
**Categories:** chunks_index.json

Alarm Detection helps you define the criteria for the generation of alarm messages. You select a condition, or combine a set of conditions, that within specific limits, generate an alarm message. To monitor the system alarms, you use the Desktop. Note that you can deliver alarm messages to SNMP monitoring systems, as well. To create a new Alarm Detection configuration, click Build  New Configuration in the Desktop, and then select Alarm Detection from the Configurations window. To open an existing Alarm Detection configuration, double-click on the configuration in the Configuration browser, or right-click a configuration and then select View Configuration . The Alarm Detection configuration contains the standard configuration buttons as described in Common Configuration Buttons and one additional button: Button Description Button Description Open To define a variable to use in the APL code, see the APL Reference Guide , and the section below, Workflow Alarm Value for further information. Defining an Alarm Detection To define Alarm Detection, you must Configure the Alarm Detection and Add an Alarm Condition. An Alarm Detection definition is made up of: A condition, or a set of conditions, see the section below, Alarm Conditions An object such as host, pico instance, or workflow, that the alarm should supervise The parameter that you want the alarm to supervise, for example, the Statistics value Time and value limits of supervision To create a valid alarm detection configuration make sure that: The Alarm Detection includes at least one condition. Two conditions within an alarm guard the same object: host, pico instance, or workflow. Two conditions are set to the same time interval criteria. This section contains the following subsection: Alarm Detection Configuration

---

# Document 117: REST Server Profile Deprecated - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204671802/REST+Server+Profile+Deprecated
**Categories:** chunks_index.json

The REST Server Profile Deprecated is used to define the endpoint URI for any particular REST Server_Deprecated agent in MediationZone. There can be one or many endpoints for a REST server and the URIs defined by this profile will determine the endpoints where the client application will be able to connect via the REST Server_Deprecated agent. If no endpoint URIs are defined in the profile, the REST Server_Deprecated agent will accept all client requests as valid. Configuration To create a new REST Server Profile Deprecated, click the New Configuration button from the Configuration dialog available from Build View , and then select REST Server Profile Deprecation from the selection screen. The contents of the menus in the menu bar may change depending on which configuration type has been opened in the currently active tab. The REST Server Profile Deprecated uses the standard menu items and buttons that are visible for all configurations, and these are described in Common Configuration Buttons . REST Server Profile Deprecated The following settings are available in the REST Server Profile Deprecated: Setting Description Setting Description Endpoint URI This table will display the endpoint URIs defined for a particular REST server.

---

# Document 118: System Monitor - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204676116/System+Monitor
**Categories:** chunks_index.json

The System Monitor gives the possibility to access and read the JMX MBeans for services running on pico hosts (instead of using external tools like jconsole or visualvm). From the main menu you can select the pico you want to monitor. Note that the System monitor is aimed primarily for trouble-shooting activities. To open the Configuration Browser, click the Tools button in the upper left part of the Desktop window, and then select System Monitor from the menu. Open The System Monitor In the table, the following columns are included: Column Description Column Description Pico Name The name of the pico instance. Type The type of pico. Host The name of the host. Java Version The version of JDK used by the host. CPUs The number of CPUs at the host. Start time Displays the date and time when the pico was started. The time is displayed in ISO 601 format. System Monitor Tabs The System Monitor tabs can be accessed by double-clicking a certain pico to open a new dialog with tabs correlating to various JMX MBean values for this pico. Open The System Monitor Tabs that can be used in a Pico (EC, Platform, or SC) For detailed information about all Tabs, see the subsequent sections. The information about all fields is already explained in chapter 7. Monitoring . This section contains the following subsections: Virtual Machine Tab Application Tab Operating System Tab

---

# Document 119: wfstart - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204612674/wfstart
**Categories:** chunks_index.json

usage: wfstart <pattern match expression for workflow names>... [-w <timeout s>] [-b] This command executes one or more workflows. Note! If the workflow(s) is/are in a building state when running the wfstart command, "Configuration is building." will be displayed and the workflow(s) will not start unless you have used any of the -w or -b options described below. With this command, you compare a single pattern match expression, or several, with the full workflow name, <folder>.<workflowconfigurationname>.<workflowname> , of all the workflows. The command accepts standard wild cards, such as '*' and '?'. For further information see Textual Pattern Matches . Example - Activate all workflows in the folder myFolder starting with the letter D. mzsh <username>/<password> wfstart myFolder.D* Only workflows in Idle or Waiting state will be started. If the workflow is in another state, an error message will be shown stating why it did not start. Option Description [-w] Use this option to wait for workflow completion, that is wait for whichever comes first of either a timeout or received exit code declaring the status of the workflow; completed, aborted etc. For further information about exit codes, see Appendix 1 . If the workflow is in building state, "Configuration is building." will be displayed, and the workflow will not be started until finished building. A timeout may then occur if the building takes too long. Note! The [-w] option does only allow one workflow to be started at the time. [-b] Use this option (block) to wait for the return code that indicates that workflow has for example completed, aborted or another code. For further information about exit codes, see Appendix 1 . If the workflow is in building state, "Configuration is building." will be displayed, and the workflow will not be started until finished building. Note! The [-b] option only allows one workflow to be started at the time. The [-w] option has precedence over the [-b] option. If both are used at the same time the [-w] will be active. Note! If the connection to the Platform is down the mzsh command will continue to run. The command will however not receive any exit codes until the Platform is up again. Timeouts will still occur. If the workflow is aborted or finished while the Platform was down, the correct exit code will be returned as soon as the Platform is up again. If a connection problem with the EC occurs during the workflow execution causing the workflow to become unreachable the mzsh command will wait for the workflow to either complete or abort. If workflows do not reconnect and are automatically reachable again the workflow must be handled manually. The standard alarm functionality can be used to detect unreachable workflows. Return Codes Listed below are the different return codes for the wfstart command: Code Description 0 Will be returned if the command was successful. 50 Will be returned if the argument count is incorrect. 51 Will be returned if the argument parse fails. 70 Will be returned if the workflow is not found.* 80 Will be returned if no user is logged in. 90 Will be returned if an unexpected error occurred. 230 Will be returned if the workflow is already running. 231 Will be returned if permission is denied (no execute permission). 232 Will be returned if the workflow does not exist.* 240 Will be returned if the workflow is invalid * The difference between return code 70 and 232 is that 70 is returned if a workflow is not found during validation of parameters, and 232 is returned if a workflow is not found when trying to start the workflow. In theory, the workflow could be deleted during the extremely short time between the validation and the start, but in practice it will happen very rarely.

---

# Document 120: system - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204678049/system
**Categories:** chunks_index.json

usage: system <subcommand> <options> This command starts the Platform if it is not running, and then starts/stops pico instances on containers that have been set up for remote execution. Note! This command is valid only for the MZ_HOME owner. You can specify which pico instances that are to be started, stopped, or restarted by adding a target path to the subcommands. The target path is specified as follows: container:<container>/pico:<pico> or container:<container> Note! Set your desired environment variables in $MZ_HOME/bin/mzshr.env as this file will be loaded with local variables. Add the desired profiles, such as ". /home/mzadmin/.profile_mz". You can specify both the container and pico instance as a regular expression. Example - Regular expression in target paths container:.*/pico:.* By adding tag attributes you can perform additional filtering of the pico instances: Example - Adding tags to pico instances $ mzsh topo set -l pico:ec1 'settings.tags=[tag1,tag2]' $ mzsh topo set -l pico:ec2 'settings.tags=[tag1]' Run the following command to start the pico instances with the tag tag1 . $ mzsh system start -t tag1 The following subcommands are available with mzsh system : help restart start stop help Usage: system help [<subcommand>] Use system help to retrieve a description of the help command or its subcommands. Run the following command for an overview of the various subcommands: $ mzsh system help Run the following command for a description of a specific subcommand: $ mzsh system help <command> restart Usage: system restart [--dry-run] [-l, --local] [-services] [-t, --tag <tag>] [--timeout-seconds] [-v, --verbose] [<target path>] Use system restart to stop and start pico instances in one or more containers. The Platform will be started if it is not already running. However, the command does not stop the Platform. Option Description Option Description [--dry-run] Lists the picos instances that are addressed by the command, but the command is not executed. [-l, --local] Use this option to select the local container, unless another container is specified in the target path. [-t, --tag <tag>] Filter that excludes all pico instances that do not contain the specified tag. [--timeout-seconds] Sets the maximum allowed time for all calls to complete. The default value is 300 seconds. [-v, --verbose] Use this option for detailed output from the command. start Usage: system start [--dry-run] [-l, --local] [-t, --tag <tag>] [--timeout-seconds] [-v, --verbose] Use system start to start pico instances in one or more containers. The Platform will be started if it is not already running. Option Description Option Description [--dry-run] Lists the picos instances that are addressed by the command, but the command is not executed. [-l, --local] Use this option to select the local container, unless another container is specified in the target path. [-t, --tag <tag>] Includes pico instances in the target path that contain the specified tag. [--timeout-seconds] Sets the maximum allowed time for all calls to complete. The default value is 300 seconds. [-v, --verbose] Use this option for detailed output from the command. stop Usage: system stop [--dry-run] [-t, --tag <tag>] [--timeout-seconds] [-v, --verbose] [<target path>] Use system stop to stop pico instances in one or more containers. Option Description Option Description [--dry-run] Lists the picos instances that are addressed by the command, but the command is not executed. [-l, --local] Use this option to select the local container, unless another container is specified in the target path. -t, --tag <tag>] Includes pico instances in the target path that contain the specified tag. [--timeout-seconds] Sets the maximum allowed time for all calls to complete. The default value is 300 seconds. [-v, --verbose] Use this option for detailed output from the command. Return Codes Listed below are the different return codes for the system command: Code Description Code Description -1 Will be returned if there is an old process running or if the remote (../temp/.remote) file cannot be deleted. 0 Will be returned if the command was successful, or if there are no startable processes defined. 1 Will be returned if the JVM fails to start. (The JVM has logged too much on stderr.) 102 Will be returned if the JVM fails to start. (The timeout on the callback from the JVM was exceeded.) 103 Will be returned if the command has been interrupted with CTRL-C. 104 Will be returned if the JVM fails to start. (The JVM started with one or more critical errors.)

---

# Document 121: Textual Pattern Matches - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204678113/Textual+Pattern+Matches
**Categories:** chunks_index.json

In resemblance to Regular Expressions, when searching through text strings of names and other textual patterns in mzsh, there are two characters that help you filter text according to certain criteria: The asterisk '*' is a wildcard for one or more characters. The question mark '?' is a wildcard for any single character. Note! If you want to use the '*' and '?' wildcards when you are not logged in, the wildcards have to either be enclosed with single or double quotation marks or preceded with a backslash ''. For example: mzsh mzadmin/dr wfgrouplist * will work. mzsh mzadmin/dr wfgrouplist "*" will work. mzsh mzadmin/dr wfgrouplist * -mode D will not work. The period '.' punctuation mark is not a wildcard and is treated as normal punctuation mark character.

---

# Document 122: Right to Use Documentation - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204648020
**Categories:** chunks_index.json

Billing Mediation Charging Function (CHF) Charging Gateway Function (CGF) 3G/4G Charging Gateway Function (CGF) 5G Offline Charging (OFCS) Online Charging Function (OCF) OSS Mediation 3G/4G OSS Mediation 5G Policy Control (PCRF) 4G Policy Control (PCF) 5G Routing Control (DRA) 3G/4G

---

# Document 123: mzcli - wfgroupaddwfgroup - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/547980007/mzcli+-+wfgroupaddwfgroup
**Categories:** chunks_index.json

Usage usage: wfgroupaddwfgroup <workflow group name> <regexp for workflow group name(s)> This command adds one or more workflow groups to an existing workflow group. Note! Workflow groups that are already members of the workflow group are skipped by the command. Similarly, you can not add a workflow group to itself. Return Codes Listed below are the different return codes for the wfgroupaddwfgroup command: Code Description 0 Will be returned if the command was successful. 1 Will be returned if the number of arguments is incorrect. 2 Will be returned if the group is not found. 3 Will be returned if the workflow(s) cannot be found. 4 Will be returned if there is no connection to Mgmt_Utils. 5 Will be returned if the group is locked. 6 Will be returned if the updating of group data failed. 7 Will be returned if the workflow type is not supported. 8 Will be returned if the configuration lock could not be released.

---

# Document 124: System Requirements - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204736060
**Categories:** chunks_index.json

The MediationZone system is divided into three different zones: The Control Zone, which includes the Platform and the database, the Execution Zone, which contains the host(s) responsible for executing and supervising workflows, and the Access Zone, which contains the MediationZone Desktop user interface, the Web Interfaces, and the Command Line Tool interface. The minimum MediationZone system installation comprises a single Platform container. The Platform and any other available pico processes such as Execution Contexts, Service Contexts, and Desktops may run in the Platform container. To scale out the system, you may install additional Execution Containers for your ECs, and SCs. Other Platform Containers may exist in a system, for high availability, but only one can be active at a time. Many operations in MediationZone can be performed via the Command Line Tool or the Web Interface. However, some operations can only be performed from the Desktop user interface installed as a local Windows. The Web Interface and Command Line Tool are automatically installed with the Platform Containers and Executions Containers. The MediationZone Platform container host needs to have the Java Development Kit installed before the installation. The Java Runtime Environment is sufficient for Desktops and Execution Containers. Network It is common that the MediationZone hosts are protected by one or more firewalls. For the communication between the various components of the system to work, you may need to update your firewall settings. For further information, about firewall settings, see https://infozone.atlassian.net/wiki/x/vyc0D in the https://infozone.atlassian.net/wiki/x/W4BED . Deployment on Hyperscalers MediationZone supports being deployed on hyper-scalers considered that the supported system requirements are met. Operating System Java For OpenJDK binaries, ensure that it is Java Technology Compatibility Kit (TCK) certified to comply with Java SE standards. Please refer to the link below for details. https://openjdk.org/groups/conformance/JckAccess/jck-access.html Platform Databases Other Third Party Software Web Browsers for Desktop Legacy Desktop and Desktop Launcher

---

# Document 125: MediationZone 9.3.1 Released! - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/blog/2024/11/29/404259389/MediationZone+9.3.1+Released
**Categories:** chunks_index.json

This release contains the following enhancements: Additional security HTTP response headers for the desktop. Full feature parity for the Web API between MediationZone 8 and MediationZone 9. Support for execution time threshold for SAP RFC Processing Agent. Support for Host and Pico for Operations REST API. Enhanced Log Forwarding Documentation and a number of bug fixes for: Desktop MZSH Documentation Installation SAF RFC Liquibase Audit Conditional Trace Pico Compression/Decompression Collection Strategies JSON Decoder Ultra among others. See Bug Fixes for more details. Information about where the release can be accessed is available here: Release Information . Overall user documentation is available at: MediationZone Documentation 9.3 . Enjoy!

---

# Document 126: FTP DX200 Agent Input/Output Data and MIM - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204641387/FTP+DX200+Agent+Input+Output+Data+and+MIM
**Categories:** chunks_index.json

Input/Output Data The Input/Output data is the type of data an agent expects and delivers. The agents consume bytearray types. MIM For information about the MIM and a list of the general MIM parameters, see Administration and Management in Legacy Desktop . Publishes MIM Parameter Description Connection Retries This MIM parameter contains the number of re-connections, resulting from connection problems, since the last Workflow activation. Connection Retries is of the integer type and is defined as a batch MIM context type. File Creation Timestamp This MIM parameter contains a time stamp, that indicates when the file has been created. The value originates from the Data Storage Control File and is expressed in local time. File Creation Timestamp is of the date type and is defined as a header MIM context type. File Retrieval Timestamp This MIM parameter contains a time stamp, that indicates when the file transfer starts. File Retrieval Timestamp is of the date type and is defined as a header MIM context type. Source Filename This MIM parameter contains the name of the file that is currently being processed, as defined at the source. Source Filename is of the string type and is defined as a header MIM context type. Source File Count This MIM parameter contains the number of files that were available to this instance for collection at startup. The value is static throughout the execution of the workflow, even if more files arrive during the execution. The new files will not be collected until the next execution. Source File Count is of the long type and is defined as a global MIM context type. Source Host This MIM parameter contains the IP address or hostname of the switch. Source Host is of the string type and is defined as a global MIM context type. Source Username This MIM parameter contains the login name. Source Username is of the string type and is defined as a global MIM context type. Source Pathname This MIM parameter contains the value of the directory where the control files will be read. Source Pathname is of the string type and is defined as a global MIM context type. Storage Status Byte This MIM parameter contains the value of the last byte in the TTSCOF re- cord. Storage Status Byte is of the int type and is de fi ned as a header MIM context type. Accesses The agent itself does not access any MIM resources.

---

# Document 127: SampleUDR and FlatSampleUDR - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204740668/SampleUDR+and+FlatSampleUDR
**Categories:** chunks_index.json

Open The UDR structure is wrapped in a UDR called SampleUDR . Apart from the generated structure, the SampleUDR also holds an instance of a SampleMetaData UDR, holding meta data about the performed request. There is also a special kind of SampleUDR called FlatSampleUDR used for unresolved requests. SampleUDR The type of the input generated for responses that are mapped to the generated UDR structure. Field Description Field Description metadata (SampleMetaData) Meta information associated with the request. FlatSampleUDR A special kind of SampleUDR used in responses to unresolved requests. That is, requests triggered by an SnmpRequestUDR with the unresolved field set to true. The fields are the same as for a SampleUDR , but the data field is now a flat structure. Field Description Field Description data (FlatSampleData) A flat, unresolved OID -> Value mapping metadata (SampleMetaData) Meta information associated with the request. SampleData Contains data of a received SNMP response. For resolved requests, this is the generated UDR structure, compiled from the MIB files. The fields selected for polling in the SNMP Request agent are populated, unless the corresponding request times out or fails. FlatSampleData Contains SNMP response data for unresolved requests. Field Description Field Description isScalar (boolean) This is a flag that indicates if the value is a scalar field value or a map structure. oid (string) This is the OID string. For scalar data, it is the full OID pointing to the scalar value. For tree data, it is the root of the flattened tree. oidFieldMap (map<string.any>) A map that contains the OIDs and values for them. value (any) The scalar value or a map of scalar values. If isScalar is false, it means the data in the field value is a map representing a flattened tree structure. Each key - value pair in the map represents a node in the tree where key is an OID string and value is the scalar value. SampleMetaData Contains meta information for a request or response. Field Description Field Description timestamp (long) The timestamp when the response was completely received or timed out by the collection agent. The timestamp is specific to the network element. agent (string) The name of the collection agent that received the response. context (any) The context of the meta data. pollingIntervalStartedTimestamp (long) The time when the polling interval started. pollingStartedTimestamp (long) The time when the polling started. The timestamp is specific to the network element. remotehost (string) The address of the remote, polled host. remoteport (int) The port of the remote, polled host. community (string) The community string used in the request. samplestate (int) This is the state of the sample. 0 = Complete, 1 = Incomplete (no or partial result).

---

# Document 128: Working with STR - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204647090
**Categories:** chunks_index.json

A principle behind the configuration representation used in the STR, is to support both manual configuration, i e editing configuration files in a text editor, and scripted configuration using the mzsh topo command. Most changes to the files can be done in either way. The figure below illustrates how you can edit a particular system property, either using a command or a text editor. Open Updating a system property in STR Manual Configuration There are three methods of manually editing configurations in STR. Method 1 Open a configuration file under MZ_HOME/common/config/cell/default/master . Edit the file and save. Run the mzsh command topo activate . This is required in order for the changes to become effective. $ mzsh topo activate Method 2 Open a configuration by running the mzsh command topo open. The configuration opens in vi or the editor specified by the environment variable EDITOR. Example - Opening a Cell Configuration $ mzsh topo open cell:default Example - Opening a Container Configuration $ mzsh topo open main1 Example - Opening a Pico Configuration $ mzsh topo open ec1 If the pico name is not unique in the system, you will be prompted to specify the container. Example - Multiple Pico Configurations Sharing the Same Name $ mzsh topo open ec2 (/home/main1/common/config/cell/default/master/containers/main1/picos/ec2.conf,ec2,topo://container:main1/pico:ec2) (/home/main1/common/config/cell/default/master/containers/exec1/picos/ec2.conf,ec2,topo://container:exec1/pico:ec2) Multiple entries, select one: (1) topo://container:main1/pico:ec2 (2) topo://container:exec1/pico:ec2 [1] : Edit the configuration and save. The mzsh command topo activate will be called with the --verbose option and the saved changes are displayed in a scripted syntax. Method 3 As an alternative to the command line tool, you can manage pico configurations and start/stop pico instances from the System Administration GUI. For further information, see Managing Picos in Desktop . Activation and Validation When you use the mzsh commands topo set or topo open , changes are automatically validated before they are copied to the active registry. If the command and its arguments can be parsed but fails the validation, you can update the configuration or use a reset command to undo the changes. You can disable the validation by using the option --no-activation . Changes performed by the mzsh topo will then remain in the master registry until you submit a separate activate command. $ mzsh topo set --no-activation Hint! The options --dry-run and --verbose are useful to learn the mzsh topo syntax. When you have edited the configuration manually, use the following command, to view the corresponding edits in a scripted syntax: $ mzsh topo activate --dry-run --verbose Example - Output from activate with verbose Option $ mzsh topo activate -v --dry-run mzsh topo set topo://container:main1/pico:ec1/val:config.properties.ec.httpd.port 9096 # (was: 9092) Dry-run: Validation successful Dry-run: Stopping without performing activation Dry-run: Active registry not changed You can then restore the master registry with the command mzsh topo reset . Example - Restart the Picos to Apply the Changes Changes to the STR are not applied on running pico instances or services. If you, for example, have updated the properties of the Platform and an EC, both must be restarted after activation. Example, after an mzsh topo activate of ec5, mzsh shutdown and startup needs to be done to apply the changes. $ mzsh shutdown ec5 $ mzsh startup ec5 Note! The sorting and layout of the configuration files may change when it is updated both using manual editing and the commands. That means that the exact ordering of keys, and layout of the file could change. However: this will not affect how the system interprets the configuration at runtime. It is not supported to edit the configuration files using command line utilities (such as sed or awk), all scripted changes must be done via the mzsh topo command, to minimize the risk of invalid assumptions regarding the exact layout of the configuration files. For further information about the various sub-commands that are available in the mzsh topo command, see topo . For further information about how to manage pico- and service configurations, see Managing Picos with Topo and Managing Service Configurations .

---

# Document 129: Tools & Monitoring - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204605336
**Categories:** chunks_index.json

MediationZone provides different tools and monitoring services to, for example, view logs, statistics, and pico instance information, and to import and export configurations. The section describes all Tools & Monitoring services. For further information about the Ultra specific tools, see the Ultra Reference Guide . To access Tools & Monitoring, go to Manage  Tools & Monitoring . This chapter includes the following sections: Access Controller Alarms and Events Conditional Trace EC Groups Encrypt Password Execution Manager Log Files Log Filter Pico Management Python Manager System Exporter System Importer System Log System Statistics UDR File Editor and Ultra Format Converter Operations REST Interface

---

# Document 130: Installer Properties for Platform - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204637818/Installer+Properties+for+Platform
**Categories:** chunks_index.json

Set the installer properties described below in the install.xml file. The properties are described in the order they appear in the install.xml file. Property Description Property Description mz.container Default value: " " Example value: platform1 This property specifies an identifier for the installed container. Each container in the system must have a unique identifier. Typical values for mz.container is the hostname, or a descriptive value for the purpose of the container. The permitted characters for the container identifier are 'a-z','0-9' and '-'. Note! It is mandatory to specify this property. mz.home Default value: /opt/mz This property specifies the target directory for the installed container and is automatically set to the environment variable you specified for MZ_HOME when Setting Environment Variables for Platform . install.types Default value: platform,ui,ec This property specifies which parts of Core you want to install. If you keep the default value you install the platform , ui , and ec . If you only need to install the Platform container, select only the platform. Note! If you wish to install ECs separately in an Execution Context Only Installation, you can remove ec from the value of the property. Or, if you wish to install the ui separately then you can remove those from the default value. install.admin.password Default value: dr This property specifies the password for the administrative user mzadmin . install.silent.enabled Default value: false This property enables or disables silent installation. When set to true , the installation proceeds without prompting for user input. If set to false , user interaction will be required. Note! If the keystore location, password, or admin password is invalid or do not meet the required criteria, the installation will be aborted. install.keystore.location Default value: "" This property specifies the path to an existing keystore file. If not provided, a self-signed keystore will be automatically generated in $MZ_HOME/keys using the configured keystore password ( install.keystore.password ). install.keystore.password Default value: "" This property specifies the password for the keystore. When silent installation is enabled, a valid keystore password is required , regardless of whether a self-signed keystore is generated or an existing keystore is used. install.keystore.alias Default value: "" This property specifies the alias for the keystore entry. It is optional for self-signed keystore generation. However, if install.silent.enabled is set to true and install.keystore.location is specified, an alias must be provided. install.security Default value: true This property specifies if the password of the mzadmin user must be changed during the installation and if enhanced security user control will be used. A valid certificate in a keystore is required for the installation. If it is not already prepared, the installation process will create a new one when prompted. See Network Security for more information on network security. install.str.remote.enabled Default value: true This property enables remote execution. For example you can use the mzsh command system to start and stop pico instances on remote container hosts. By default, this will perform the following steps: Add the Platform's public key to ~/.ssh/authorized_keys Add SSH connection information for this host to the STR, including: ssh-address: The hostname of this host (for example, $(hostname)) ssh-port: 22: Default SSH port hostkeys: Discovered SSH public keys for this host in known file locations Note! This allows the holder of the platform key to log in to this host via SSH. If this is not desired, or if the default values are not suitable, set this value to false . It is still possible to enable remote execution after the installation by using the mzsh command topo setupremote.

---

# Document 131: Handling Erroneous UDRs - Real-Time - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205654192/Handling+Erroneous+UDRs+-+Real-Time
**Categories:** chunks_index.json

The SQL forwarding agent encapsulates an erroneous UDR along with the error message that describes the error, in a new UDR. This in turn, enables you to process the faulty UDR, adjust the processing according to the error type, and prevent the workflow from aborting due to selected errors types. If Retry Commit for every UDR in batch is enabled, an errorUDR is routed out. If this option is not selected, an errorUDRList containing all the UDRs for that batch is routed out. Example - Handling erroneous UDRs in a real-time workflow Consider the following workflow: Open Example of a real-time workflow with an SQL forwarding agent The SQL forwarding agent identifies the asciiSEQ_TI UDR as erroneous, creates an errorUDR UDR that wraps together the original UDR with the error message that was generated. The erroneous UDR before and after SQL forwarding If you have selected the option Retry Commit for every UDR in batch , an errorUDRList UDR is routed instead. Open The ErrorUDRList UDR

---

# Document 132: Data Model for PCC Rules - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204742989/Data+Model+for+PCC+Rules
**Categories:** chunks_index.json

In order to make full use of PCC Rules and create the needed business logic, it is important to understand the underlying data model for Rules. Rules have their own data model but also use the shared data model for periods. This chapter outlines the structure and underlying fields of each object in the data model. This section includes the following subsections: Rules Data Model Periods Data Model Rules

---

# Document 133: ECS Forwarding Workflow (UDR) - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204641170/ECS+Forwarding+Workflow+UDR
**Categories:** chunks_index.json

In order to send a UDR to the ECS, a workflow must contain an ECS forwarding agent. To perform a table lookup for all UDRs, an Analysis agent is used. If the lookup succeeded, the UDR is sent on the OK route to be saved on disk, while failing UDRs are sent to the ECS forwarding agent. Open A workflow sending UDRs to ECS UDRs may be sent to the ECS without any Error Code or MIM values associated with it. However, this will make browsing the ECS Inspector more difficult, and no auto-assignment to reprocessing groups using the Error Code is possible. ECS Inspector Error Codes can be associated with reprocessing groups via the ECS Inspector dialog ( Reprocessing Groups button). In this way, UDRs with an Error Code are automatically assigned to the respective reprocessing group. Otherwise, the UDRs have to be assigned manually to be available for collection. Open Add Error Code dialog - where a reprocessing group can be selected Analysis Agent The Analysis agent is used to validate and route UDRs, and to associate to a valid (existing) Error Code. The following example appends an Error Code and an Error Case to the UDR prior to sending it to the ECS forwarding agent. Example - appending an error code and an error case to the UDR prior to sending udrAddError( input, "AreaCode_ERROR", "Complete anumber: " + input.anum); udrRoute( input, "error" ); ECS Forwarding Agent In the ECS forwarding agent, the MIM values you want to associate with the UDR are appended. This is optional, however, it makes it easier to search for data and get additional information about the UDR from the ECS Inspector. Open The ECS forwarding agent

---

# Document 134: New Kafka Agents - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/301137944/New+Kafka+Agents
**Categories:** chunks_index.json

The Kafka Agents differ significantly from other agents in their design, as the workflow transactions are stored in the Kafka cluster and not in the platform database as for other agents. Therefore, you can only configure one Kafka cluster per workflow for batch workflows. The transactions are synchronized per workflow and stored in the associated cluster when the workflow contains a Kafka agent. If you want to collect messages from one Kafka cluster and forward them to another cluster using batch workflows, you must configure two workflows. Another difference for the batch agents is that you select the Kafka profile in the Execution Tab of the Workflow Properties dialog rather than in the agent configuration as you do for the new real-time, and old legacy agents. Note! This is a new set of Kafka agents that will replace the previous agents in a future major version. In Desktop Online, the previous agents and profile are marked as deprecated and have the following names: Kafka Profile Deprecated Batch collection agent: Kafka Deprecated Realtime collection agent: Kafka Deprecated Realtime forwarding agent: Kafka Deprecated The main differences between the versions are that the new version: Includes a batch forwarding agent. Stores transactions in the Kafka cluster (transactions are only tracked for batch workflows). Stores offset in the Kafka cluster only. One consumer can collect from several topics, and one producer can forward to several topics. Includes automatic rebalancing for collection of messages. Several workflows can collect messages in parallel from the same topics, provided that there are several partitions. When you start a new workflow, the running workflows will automatically be rebalanced, see Automatic Scale Out and Rebalancing . Batch collection workflows will remain in running state, even when all data has been collected. Uses only two UDR types: kafkaRecord for both collection and forwarding agents. kafkaOffset for resetting of offset. As the UDR types differ between the deprecated and new agents, you have to rewrite workflows with Legacy Kafka agents after having upgraded to this version. Mandatory Topics When using Kafka agents in batch workflows, transactions are stored in two Kafka topics: wf_txn and txn_status . When the workflow starts, the system checks whether these topics exist. If they do not, it attempts to create them. However, if the SASL user lacks permission to create topicssuch as when restricted by Kafka ACLsthey must be created beforehand. Warning! Do not modify the wf_txn or txn_status topics after they have been created. This includes adding partitions, changing properties, or altering definitions. Doing so may result in unexpected behavior. Topic requirements: The topics must be named wf_txn and txn_status . They must have the property cleanup.policy=compact . Each topic should have only one partition. Example - creating Kafka topics kafka-topics.sh --create  --bootstrap-server <HOST>:<PORT>  --config cleanup.policy=compact  --partitions 1  --topic <TOPIC_NAME>

---

# Document 135: Amazon S3 Forwarding MultiForwardingUDR Input - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204999009/Amazon+S3+Forwarding+MultiForwardingUDR+Input
**Categories:** chunks_index.json

When the agent is set to use MultiForwardingUDR input, it accepts input of the UDR type MultiForwardingUDR declared in the package FNT. The declaration follows: internal MultiForwardingUDR { // Entire file content byte[] content; // Target filename and directory FNTUDR fntSpecification; }; The content of the MultiForwardingUDR will be stored at the path that you have set in the fntSpecification field. Use the APL functions fntAddString and fntAddDirDelimiter to set the value of this field. For further information about these functions, see FNTUDR Functions in APL Reference Guide . When the files are received they are written to temp files in the DR_TMP_DIR directory situated in the root output folder. The files are moved to their final destination when an end batch message is received. A runtime error will occur if any of the fields have a null value or if the path is invalid on the target file system. A UDR of the type MultiForwardingUDR which has a target filename that is not identical to its precedent and is saved in a new output file. Note! After a target filename that is not identical to its precedent is saved, you cannot use the first filename again. For example: Saving filename B after saving filename A, prevents you from using A again. Instead, you should first save all the A filenames, then all the B filenames, and so forth. Non-existing directories will be created if the Create Non-Existing Directories check box under the Filename Template tab is checked. If not checked, a runtime error will occur if a previously unknown directory exists in the FNTUDR of an incoming MultiForwardingUDR . Every configuration option referring to bytearray input is ignored when MultiForwardingUDR s are expected. Example - APL code to send MultiForwardingUDRs This example shows the APL code used in an Analysis agent connected to a forwarding agent expecting input of type MultiForwardingUDR s. import ultra.FNT; MultiForwardingUDR createMultiForwardingUDR (string dir, string file, bytearray fileContent){ //Create the FNTUDR FNTUDR fntudr = udrCreate(FNTUDR); fntAddString(fntudr, dir); fntAddDirDelimiter(fntudr);//Add a directory fntAddString(fntudr, file);//Add a file MultiForwardingUDR multiForwardingUDR = udrCreate(MultiForwardingUDR); multiForwardingUDR.fntSpecification = fntudr; multiForwardingUDR.content = fileContent; return multiForwardingUDR; } consume { bytearray file1Content; strToBA (file1Content, "file nr 1 content"); bytearray file2Content; strToBA (file2Content, "file nr 2 content"); //Send MultiForwardingUDRs to the forwarding agent udrRoute(createMultiForwardingUDR ("dir1", "file1", file1Content)); udrRoute(createMultiForwardingUDR ("dir2", "file2", file2Content)); } The Analysis agent mentioned previous in the example will send two MultiForwardingUDR s to the forwarding agent. Two files with different contents will be placed in two separate subfolders in the root directory. The Create Non-Existing Directories check box under the Filename Template tab in the configuration of the forwarding agent must be checked if the directories do not previously exist.

---

# Document 136: Notifier Plugins - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204645236
**Categories:** chunks_index.json

All MediationZone events and user-defined events may be selected, filtered, and routed to notifiers in the Event Notification configuration. The system supplies a few standard notifiers where event information may be directed to a Log File, a database table, by e-mail, by SNMP or to the System Log. If required, new notifiers can be developed and introduced into the system using the DTK. Notifier-related classes are located in the package com.digitalroute.devkit.event where the class DRNotifierTarget and possibly DRNotifierTargetUI and DRAbstractStorable can be extended. Example For a notifier plugin example, see: com.digitalroute.devkit.examples.event.DynamicLogFile* DRNotifierTarget A new notifier plugin is defined by extending DRNotifierTarget . The Code Server will locate all such classes and make them available for configuration in the Event Notification Editor. The configuration of a notifier can be obtained in two ways (or through a combination of both): Static User Interface - This is configuration entered in a user-defined user interface, introduced by extending the DRNotifierTargetUI class. If available, it will appear in the Base Configuration frame of the Notifier Setup in the Event Notification configuration. Dynamic Fields - These are input fields that the Event Notification configuration automatically displays in the Target Field Configuration frame in the Notifier Setup tab. Such fields do not require a user-defined interface and are also possible to populate using formatted input, where values from the incoming events may be picked. The getName method will return that will be displayed in the Notification Type combo box in the Event Notification configuration. If a static user interface is desired, then the getUIClassName method must return the full class name of a class that extends DRNotifierTargetUI . If dynamic fields are desired, then getDynamicFields must return an array of DRUDRField s. The name of the DRUDR field will be displayed as the label and the data type ( DRUDRType ) will determine what input component to use, what validation rules will apply, and how the field will be populated. Valid data types are: DRUDRType.PT_SHORT DRUDRType.PT_INT DRUDRType.PT_LONG DRUDRType.PT_FLOAT DRUDRType.PT_DOUBLE DRUDRType.PT_CHAR DRUDRType.PT_STRING DRUDRType.PT_BOOLEAN DRUDRType.PT_DATE DRUDRType.PT_IPADDRESS For all data types, apart from PT_STRING, the only population options will be manual input and direct mapping from an event field, whose data type must correspond. In addition, the PT_STRING offers formatted input where many event fields may be mapped into the value. The methods isDynamicFieldMandatory will, for each field, determine if it will validate that input is entered, and isDynamicFieldMultiline will determine if the input component will be a single or a multi-line field. When a notifier configuration is saved, the initialize method is called. If the notifier was previously saved, the deinitialize method is called first. When the Event Notification configuration receives an event that the notifier subscribes for, the notify method is called. The method is handed the event itself, and if dynamic fields are used, a hash map is keyed by the dynamic field name and a corresponding object as well. The corresponding object will hold the assigned field value. If the value has been manually entered or assigned directly from an event field, then the object will have the same data type as the dynamic field. If the value used formatted input (PT_STRING only) then this value will contain the formatted string, which means any variables will have been substituted by an event field value. DRNotifierTargetUI If the notifier requires a static user interface for user configuration, the DRNotifierTargetUI class must be extended. The class extends the Java JPanel which is the main container for the configuration components. When a notifier is selected in the user interface, this panel will be displayed in the Base Configuration frame. When the panel is displayed, the method reset is called to reset all components, immediately followed by displayConfig . The latter hands over a previously configured configuration object that has to implement DRStorable , and has to be cast into the appropriate type. Unless this data is null , the data will be displayed. When a notifier is saved in the Event Notification configuration, the validateInput method is called. If the method returns a string, it is displayed as an error message. If it returns null , the collectConfig method is called to create and populate a configuration object. The Platform takes care of storing the configuration.

---

# Document 137: Creating External Reference Files - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204605894/Creating+External+Reference+Files
**Categories:** chunks_index.json

In the External Reference Profile, you may specify a properties file that contains the External Reference values. Note! The Properties file should reside on the MediationZone Platform Container host. If you are using characters encoded with something other than iso-8859-1 in your property file for External References, the property file has to be converted to ASCII by using the Java tool native2ascii. For further information about using native2ascii, see the JDK product documentation. If you have a large number of external references, this may impact the workflow startup time. It is therefore recommended that you do not exceed 1000 external references per file. If you require a number greater than 1000, split the references across multiple files and profiles. Typical Format A properties file contains key-value pairs. The typical format of a properties file is: Key1=Value1 Key2=Value2 Key3=Value3 The Value data type can be a string, a boolean, a password, or a numeric value. Boolean values can be represented by true , false , yes , or no , and are not case-sensitive. Password values must be represented by a string that has been encrypted by the command mzsh encryptpassword . If the file contains two or more identical keys with different values, the last value is the one that is applied. Add a slash ("") to continue the value on the next line. If the value is a multi-line string use ("n") to separate the rows. key1=PrettyLongValueThat ContinuesOneTheSecondLine key2=northn centern south Note! When creating an External Reference File, it is important to keep in mind the format of the data you wish to specify. For example, consider an External Reference file (ExtRef.txt) below containing the following data with the value types list, map, and string. MY_STRING=A string value MY_LIST=["Value 1","Value 2"] MY_MAP={"Key 1":"Value 1","Key 2":"Value 2","Key 3":"Value 3"} When this ExtRef.txt file is imported into the External Reference Profile, it will be displayed as shown below. As you can see, the Value Type for all keys is set as String by default. Open External Reference Profile  Properties File View Screen To fix this, you will need to double-click on each Value Type and use the Edit External Reference Definition window to set the correct Value Type . Now you can observe that the Value is displayed correctly for all the Keys in your External Reference File. Open External Reference Profile  Properties File View Screen with Keys added

---

# Document 138: Function Blocks for the Python Processing Agent - Batch - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204674300/Function+Blocks+for+the+Python+Processing+Agent+-+Batch
**Categories:** chunks_index.json

When writing code for the Python processing agent for batch, the function blocks in this section apply. For examples and further information on writing code in the Python processing agent, see Python Writer's Guide . The following function blocks are supported by the Python processing agent: Function Block Description def initialize() This function block initializes resources and state. def beginBatch() This function block is executed at the beginning of each batch. def consume(input) This function block consumes and processes UDRs. def drain() This function block is called before the current batch ends. The agent must flush all internal buffers to make sure all pending data has been processed before the transaction is ended. This method is the last point in the batch processing where the agent is permitted to route data. def endBatch() This function block is executed at the end of each batch. def commit() This function block is executed for each batch when the transaction is successful. def rollback() This function block is executed for each batch when a transaction fails. def stop() This function block is called when the workflow is about to stop. def deinitialize() This function block will cleanup resources and state. def cancelBatch() This function block is executed if a Cancel Batch is emitted anywhere in the workflow. def splittingBatch() This function block is called when the collection agent has split the input batch. If the agent keeps internal buffers to be flushed differently depending on the nature of the transaction, this method serves as a hint to the drain call.

---

# Document 139: SFTP Forwarding Agent Input/Output Data and MIM - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204609405/SFTP+Forwarding+Agent+Input+Output+Data+and+MIM
**Categories:** chunks_index.json

Input/Output Data The agent consumes bytearray or MultiForwardingUDR types. MIM For information about the MIM and a list of the general MIM parameters, see Administration and Management in Legacy Desktop . Publishes MIM Value Description MultiForwardingUDR's FNTUDR The MIM resource is only set when the agent expects input of MultiForwardingUDR type. The MIM value is a string representing the sub path from the output root directory on the target file system. The path is specified by the fntSpecification field of the last received MultiForwardingUDR. For further information about using input of MultiForwardingUDR type, see SFTP Forwarding Agent MultiForwardingUDR Input . This parameter is of the string type and is defined as a batch MIM context type. File Transfer Timestamp This MIM parameter contains a timestamp, indicating when the target file is created in the temporary directory. File Transfer Timestamp is of the date type and is defined as a trailer MIM context type. Target Filename This MIM parameter contains the target filename, as defined in Filename Template . Target Filename is of the string type and is defined as a trailer MIM context type. Target File Size This MIM parameter contains the size of the file that has been written. The file is located on the server. Target File Size is of the long type and is defined as a trailer MIM context type. Target Hostname This MIM parameter contains the name of the target host, as defined in the Target or Advanced tab of the agent. Target Hostname is of the string type and is defined as a global MIM context type. Target Pathname This MIM parameter contains the path to the target file, as defined in the SFTP tab of the agent. Target Pathname is of the string type and is defined as a global MIM context type. Target Username This MIM parameter contains the login name of the user connecting to the remote host, as defined in the SFTP tab of the agent. Target Username is of the string type and is defined as a global MIM context type. Accesses Various resources from the Filename Template configuration to construct the target filename.

---

# Document 140: Encryption Agent - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204641042/Encryption+Agent
**Categories:** chunks_index.json



---
**End of Part 6** - Continue to next part for more content.
