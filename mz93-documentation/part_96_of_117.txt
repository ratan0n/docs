# RATANON/MZ93-DOCUMENTATION - Part 96/112

---
**Dataset:** ratanon/mz93-documentation
**Part:** 96 of 112
**GitHub:** https://github.com/ratan0n/docs/tree/main/mz93-documentation
**Size:** ~69.3 KB
---

Meta Information Model For information about the MIM and a list of the general MIM parameters, see Administration and Management in Legacy Desktop . Publishes The agent does not publish any MIM resources. Accesses MIM Parameter Description User selected This MIM parameter contains values from selected MIM resources in the Logged MIMs and Named MIM lists. Read at Start Batch. Agent Message Events An information message from the agent, stated according to the configuration done in the Event Notification dialog. For further information about the agent message event type, see Agent Event . Duplicate batch detected Reported when a duplicate batch is identified. Debug Events There are no Debug Events for this agent. Loading

---

# Document 2243: Best Practices for External Version Control - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204611236/Best+Practices+for+External+Version+Control
**Categories:** chunks_index.json

When upgrading the system the systemexport and systemimport commands should be used. It is important to understand that the vcexport / vcimport commands only handles configurations visible in the Configurations Browser pane. For any other configurations, such as users, picos, etc, the systemexport/systemimport command is required for making complete exports and imports. Upgrade Previous Version Controlled Export When the system has been upgraded, it is recommended to upgrade the configurations stored in the Version Control System and check in the new versions to avoid users running into problems when importing old configurations. Note! The format of the schema files may change between MediationZone versions, which may cause errors when trying to import exports made in previous versions. To avoid this kind of problem, an upgraded version of MediationZone should be used for making new exports of all configurations when an upgrade has been performed. Keep Track of Versions Since configuration schema files may change between MediationZone versions, it is recommended to somehow keep track of which exports belong to which version, by using tags/branches or similar in the Version Control System.

---

# Document 2244: Platform Software Installation - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204736151
**Categories:** chunks_index.json

The final step in the Platform Container installation must be executed as the mzadmin UNIX user. The following command session sets up the directory structure and installs all the software. The release content directory is the working directory for the installation. To install the software: Enter the release content directory: $ cd ./<staging directory>/<release content directory> Pre-installation validations are performed to verify the environment and configuration, ensuring a seamless installation experience. To perform validation without starting the installation, run the following command: $ ./setup.sh install -validate-only Run the following command to initiate the installation process. $ ./setup.sh install The Platform is automatically started and shut down during the installation. Note! If the Platform failed to start, check the platform.log file in $MZ_HOME/log for details. If validation fails but you choose to proceed, you can run the following command: $ ./setup.sh install -skip-validate Caution! You can choose to skip validation, but be aware that this bypasses checks for potential issues in your environment and configuration. If there are undetected problems, the installation may fail or cause unexpected behavior. Proceed with caution and ensure you have backups before continuing. Start the Platform: $ mzsh startup platform The installation of the Platform Container is now complete.

---

# Document 2245: Platform Properties - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205657584/Platform+Properties
**Categories:** chunks_index.json

This section describes the different properties that you can use in the STR to configure the Platform. Property Description Property Description auth.oidc.rp.client.id Default value: "" Client ID provided by Identity Provider. If it is not present, the SSO functionality is disabled. auth.oidc.rp.provider.url Default value: "" Provide the Base URL to the associated Identity Provider. Read access is required for the / .well-known/openid-configuration file to acquire the relevant Provider Configurations. auth.oidc.rp.provider.name Default value: "" The name of the provider needs to be Azure if it is used and groups are returned as uids. auth.oidc.rp.groupPath Default value "roles" Path in ID Token or UserInfo object to find an array of users Access groups as defined by the Access Controller , separated with a dot (.). The groups should be an array of Strings. Example: Here the groups array is inside and object . { myObject : { myGroups : [ "myGroup1", "mygroup2" ] } } The path should then be: groupPath: myObject.myGroups When the group's array is direct under UserInfo then groupPath is just the name of the group's array. auth.oidc.rp.auth.method Default value: "CLIENT_SECRET_BASIC" Available authentication methods are CLIENT_SECRET_BASIC and PRIVATE_KEY_JWT auth.oidc.rp.client.secret Default value: "" This is mandatory when CLIENT_SECRET_BASIC is used as an authentication method. This property sets the relevant Client Secret. auth.oidc.rp.auth.jwt.keystorePath Default value: "" Path to JKS keystore when PRIVATE_KEY_JWT is used auth.oidc.rp.auth.jwt.alias Default value: "" Alias for key in keystore when PRIVATE_KEY_JWT is used auth.oidc.rp.auth.jwt.keystorePassword Default value: "" Keystore password when PRIVATE_KEY_JWT is used, needs to be Encrypted by MediationZone. auth.oidc.rp.auth.jwt.keyPassword Default value: "" Key password when PRIVATE_KEY_JWT is used, needs to be Encrypted by MediationZone. auth.oidc.rp.scopes Default value: "" Optional additional scopes. Default scopes are openid, profile, and email. auth.oidc.rp.claims.username Default value: "" Claim to use as the user name, if not specify sub will be used. This value should be unique. auth.oidc.rp.auth.jwt.keyId Default value: "" Optional Key ID for JWT header when PRIVATE_KEY_JWT is used auth.oidc.rp.group.syncDisabled Default value false. When the value is set to true, the group synchronization from the Identity Provider is disabled, and the groups are set manually on each SSO User. auth.oidc.rp.group.default Default value "" When Group Sync is disabled, the value of this property will be assigned to the user's default group when the user logs in for the first time . auth.oidc.rp.multigroupsync.defaultGroup Default value "" This property assigns a default group to the user who is a member of multiple groups when the user logs in for the first time . It takes effect only when the group synchronization is enabled. The default group can be changed after logging in and must be one of the member groups. Changes made to the default group after logging in will persist in the next login. auth.oidc.rp.auth.debug Default value false. Set this to true during the implementation of SSO Access to get more information. cts.source.systems This parameter (of type list) is valid only for integrations with SAP CTS+. It enables you to restrict the source systems from which exports (regular configuration and Workflow Package)can originate. If the parameter is left empty, exports from any system will be allowed. Things to note: This parameter is only effective when an import is triggered via the CTS+ API. Imports initiated through the System Import UI or the command line interface are not impacted. The value of this parameter must exactly (case-sensitive) match the value specified in the mz.name system parameter of the source system. ( mz.name can be changed at any time in the source system but changes will only take effect after the system is restarted. mz.name corresponds to mzexport.mz.name in an export file. This parameter is used to determine if an import should be permitted) Example - System Parameter use cts.source.systems ="dev1,test,staging" mail.smtp.ssl.protocols Default value: "TLSv1.2" Specifies the SSL protocols that will be enabled for SSL connections. The property value is a whitespace separated list of tokens, with possible values "TLSv1, TLSv1.1, TLSv1.2, TLSv1.3". TLSv1 is not recommended. mz.codeserver.saveStateInterval Default value: 10 Whenever an update to the Codeserver state is made, such as when saving a workflow with a change in its APL code, the Codeserver state will have to be saved. Using this property allows you to set the minimum interval (in seconds)for how often the Codeserver saves its state to the disk. mz.crypto.hash.algorithm Default value: SHA-256 This property is to use the crypto algorithm for hashing data, for example, files. mz.crypto.key.crypt Default value: AES This property is to use the crypto algorithm to encrypt and decrypt sensitive data within communications, for example, passwords. The value can be set to AES/GCM/NoPadding for a higher level of security. Note! If you have set the value to AES/GCM/NoPadding, and you try to decrypt data, and it does not succeed on the first attempt, the property value reverts to AES. mz.crypto.key.stream Default value: PBKDF2WithHmacSHA256 This property is to encrypt configurations when you have a user password for the encryption. The value can be set to PBEWithMD5AndDES . Note! If the decryption fails when using the selected algorithm, it will try to use the other algorithm. mz.cryptoservice.keystore.path Default value: "" This property specifies the full path to the crypto service keystore file. This keystore file is used for encrypting/decrypting passwords with specific keys stored in the keystore, and needs to be of JCEKS type. See the JDK product documentation for further information about using keytool in different scenarios. See also the sections describing the mzsh encryptpassword in the https://infozone.atlassian.net/wiki/x/wacyD for further information. mz.cryptoservice.keystore.password Default value: "" This property specifies the password for the crypto service keystore file specified by the mz.cryptoservice.keystore.path property. This keystore is used for encrypting/decrypting passwords with specific keys stored in the keystore. See the sections describing the mzsh encryptpassword in the Command Line Tool Reference Guide for further information. mz.database.profile.validation.skip Default value: false Set this property to true if you want to bypass the remote database validation in the Database profile. Validation requires that the configured database, tables and columns are available, and if they are unavailable when the validation is performed, the configuration and all its dependents can be marked as invalid. You can set this property if you require to validate your configuration when, or in an environment where, the database or its tables are unavailable. mz.desktop.accelerators Default value: "/path/to/accelerators.properties" Set this property with the default value to set your own key bindings. You require to unpack a properties file from devkit.jar , and go to com/digitalroute/devkit/ui/accelerators/accelerators.properties . Save the accelerators.properties file to disk, and set this property to enable the accelerators.properties file. mz.dynamicconnections Default value: true This property specifies if the pico instances for Desktop, mzsh, and Service Contexts must be registered on pico hosts for access: true - Instances always have access. false - Instances must be registered on pico hosts for access. mz.httpd.security.disabled.cipher Default value: " .*_anon_.*$, SSL_.*$, (.*(3DES)).*$, .*_DHE_.*$ " This property allows you to use regex to manually disable the Java security cipher suite when using any picos to connect to the Platform with SSL enabled. This property is used when the Platform uses a different Java version than the rest of the picos. As there may be differences in the security ciphers between versions, the property aims to disable these ciphers to allow the picos to communicate with the Platform. mz.httpd.security.redirect Default value: false If TLS is enabled and this property is set to true , any attempt to access the webserver using HTTP will cause a redirect to HTTPS. The default behavior is just to return an error. mz.javac.source Default value: "default" If the compilation of the system is slow after you import a new configuration, set this property to determine the javac version to be used. The possible values are 7, 8 or default. Setting this value to "7" may improve the compilation time. mz.license.file Default value: $MZ_HOME/etc This property specifies the directory that contains the installation license file, i.e. mz.license . mz.mailserver Default value: "" This property specifies the name or IP address of the mail server to be used for event generated e-mails. Note! The use of this property has been deprecated and will removed in future releases. Use the property mz.mailserver.host instead. mz.mailserver.auth Default value: false Enables SMTP authentication. Note! The use of this property has been deprecated and will removed in future releases. Use the property mz.mailserver.auth.enabled instead. mz.mailserver.auth.user Default value: "" Set the SMTP user to be used for login when having enabled SMTP authentication with the mz.mailserver.auth property. mz.mailserver.auth.enabled Default value: false Set this property to true if you want to enable SMTP authentication. If set to true , you also need to add the properties mz.mailserver.auth.user and mz.mailserver.auth.password . mz.mailserver.host Default value: "" This property specifies the name or IP address of the mail server to be used for event generated e-mails. mz.mailserver.auth.password Default value: "" Set the encrypted password to be used for the SMTP user stated in the mz.mailserver.auth.user property when having enabled SMTP authentication with the mz.mailserver.auth property. To encrypt the password, use the mzsh encryptpassword command, and enter the result in this field. See the Command Line user documentation for further information on how to use this command. mz.mailserver.port Default value: 25/587 Use this property to configure which port you want to used for sending event generated e-mails. When the mz.mailserver.auth property is not used, i e set to false , the default value is 25 . When the mz.mailserver.auth is set to true , the default value is 587 . mz.notifier.mailfrom Default value: "" This property specifies the sending e-mail address to be used for event generated e-mails. You must enter an e-mail address for an event notification to be sent by e-mail. mz.picostorage.usecache Default value: true This property enables the cache during a system import. mz.platform.extref.ttl Default value: 5 Use this property to configure a cache for the external references by entering the number of seconds you want the cache to live. If you require to disable the cache, for example in a development enviroment, set the value to 0. mz.platform.s3.extref.ttl Default value: 5 Use this property to configure a cache for the external references stored on an S3 Container by entering the number of seconds you want the cache to live. This will only work when you have S3 Properties File selected in your external reference profile. If you require to disable the cache, for example in a development environment, set the value to 0. mz.platform.wf.max.concurrent.starts This property decides how many workflows that can start loading at the same time. No limit is set for actual running workflows. Warning! Only change the property if support has expressly recommended it. It is normally not recommend to change this property since it can introduce some instability. mz.platform.wf.threadpool Default value: 10 This is a platform property that controls the number of threads used for the thread pool used by the workflow and group servers. If you have a very large batch system with a lot of scheduling and workflows that are starting and stopping frequently, this property might need to be increased to get more threads. mz.security.user.restricted.login Default value: false Use this property to restrict user login to one instance for each interface type, i e Desktop and Command Line Tool mzsh. mz.servicehost.port.range This property determines the port range used by services. The system will bind to ports in the provided ranges. The values must not overlap with the ports used by SCs that are running on the same host. mz.servicehost.natures This property contains one or more service specific identifiers that sets behaviors, that are required by services that run on the Platform. mz.statistics.collect.all Default value: true This property enables or disables collection of all statistics on the Platform. When you set this property to false , it overrides mz.statistics.collect.pico and mz.statistics.collect.workflow . mz.statistics.collect.pico Default value: true This property enables or disables collection of pico statistics on the Platform. mz.statistics.collect.workflow Default value: true This property enables or disables collection of workflow statistics on the Platform. mz.subfolder.enabled Default value: false This property determines if the subfolder feature in Desktop is enabled or disabled. If you want to enable the subfolder feature in Desktop, set the value to true . mz.subfolder.separator Default value: "_" This property determines the separator you can use when naming folders in the Desktop so that the subfolder feature is enabled. The valid values are "-" or "_" . mz.systemlog.maxresults Default value: 500000 This property determines the maximum number of search results when you run a search in the System Log. mz.ultra.bitfield.codec Default value: "false" This property selects the implementation that is to be used for ultra bit_block . If set to true, the newly selected implementation will be used. Values that are not set using this property will use the old implementation. mz.ultra.xml.handle_as_string Default value: "" If you want to set any XML data type to be converted into string, you must set the value of this property to the data type you intend to convert. For example, if you wish to have all decimal data type be handled as string, set the value of this property to decimal . For further information on XML schema support, see https://infozone.atlassian.net/wiki/x/WSY0D mz.ultra.xml.restrictions Default value: off If you want to use XML union element type, you must enable this property . If you want to use unions and restrictions inside unions, set this property to union . If you want to use restrictions everywhere, including inside union type, set this property to on . For further information on XML schema support, see XML Schema Support . mz.use.date.timezone Default value: false Setting this property to true will instruct the system to use the attached time zone when SQL input originates from a date object. In most cases, the property should be set in the pico configuration of ECs . However, in case of audit processing, the property should also be set in the pico configuration of the Platform. Note that if the mz.use.date.timezone property is used for setting dates with another time zone, there will be no way of keeping track of the actual time zone in the database, and you may have to manually convert the date during selection. To keep track of the time zone in an Oracle database, use the data type TIMESTAMP WITH TIME ZONE. mz.user.emergency.unlock Default value: "" Setting this property with an encrypted password will change the mzadmin password at platform startup. For information about how to reset the mzadmin password, see https://infozone.atlassian.net/wiki/x/AqsyD Note! This property should always be removed when not being used. Otherwise the mzadmin password will be reset at every platform startup. mz.use.prefixfilter Default value: false If you add this property with the value true , files or configurations with more than one underscore at the beginning of the name are not visible from the Desktop after you restart the Platform. mz.webserver.host Default value: Taken from the common property pico.rcp.server.host . This is the host IP address or hostname used to communicate with the Platform Web Interface. mz.webserver.port Default value: 9000 This is the port used to communicate with the Platform Web Interface. Note! This is the port that you use to launch the Desktop. mz.osgi.bootdelegation.ext Default value: "" This property adds extra value to Felix Osgi boot delegation. Note! The value of this parameter should be a string with a extra boot delegation for Felix osgi. The value should not include a space and should not start or end with a comma. For AppDynamic monitoring tool the value should always be com.singularity.* . pico.rcp.codeserver.deregister.timeout Default value: 2700 This property specifies the time (in seconds) to wait before de-registering an unreachable EC from the Platform. Once de-registered, another EC can be brought up to replace it. An EC is considered to be unreachable when the last known state was that it was running, but has since lost contact with the Platform. pico.rcp.tls.keystore Default value: "" Set this property to enable the system to use TLS for all RCP connections that are not from the local host. If this property is not set, TLS will not be used at all. pico.tmpdir Default value: MZ_HOME/tmp This property specifies the pico temp directory you want the Platform to use. snmp.trap.format.b Default value: "" Add this property and set it to true if you want to activate the new format for SNMP events corresponding to the latest MIB definitions. If this property is not included, or if it is set to false, the previous invalid format will apply, which may be useful for backwards compatibility reasons. Enhanced User Security Platform Properties The properties below are applicable when the property mz.security.user.control.enabled is set to true in the Platform: Property Description Property Description mz.security.user.control.enabled Default value: true This property enables or disables enhanced user security. If set to true , several rules regarding the passwords apply as soon as the platform is restarted. For information about enhanced user security, see https://infozone.atlassian.net/wiki/x/LyYyD All users are required to change the password during their first login after this property has set to true . If an administrator user should reset a user's password, the user must also change it when they login. mz.security.max.password.age.enabled Default value: false Enables or disables the password expiration check. If the mz.security.user.control.enabled and mz.security.max.password.age.enabled properties are set to true, the user is required to change the password every certain number of days that is set in the mz.security.max.password.age.admin and mz.security.max.password.age.user properties . mz.security.max.password.age.admin Default value: 30 This property specifies the maximum password age for administrator users in days. Please refer mz.security.max.password.age.enabled column. mz.security.max.password.age.user Default value: 90 This property specifies the maximum password age for users in days. Please refer mz.security.max.password.age.enabled column. mz.security.max.password.history Default value: 12 This property specifies how many passwords back that are required to be unique before reusing an old password. mz.security.user.control.password.numcaps.count Default value: 1 The minimum number of upper case characters or number of numerical characters, in a password. mz.security.user.control.password.numcaps.message Default value: The password needs at least one capital letter or a number in it. The message to be displayed for the user when they have not met the condition for the minimum number of upper case or numerical characters in the password. mz.security.user.control.password.numcaps.pattern Default value: [A-Z0-9] The pattern of the permitted values in regular expression. The password will be matched to the pattern to determine if the condition is met. mz.security.user.control.password.length.count Default value: 8 The minimum total number of characters in a password. mz.security.user.control.password.length.message Default value: The password needs to be at least 8 characters. The message to be displayed for the user when they have not met the condition for the minimum length of the password. mz.security.user.control.password.lowercase.count Default value: "" The minimum total number of lowercase characters in a password. mz.security.user.control.password.uppercase.count Default value: "" The minimum total number of uppercase characters in a password. mz.security.user.control.password.number.count Default value: "" The minimum total number of numeric characters in a password. mz.security.user.control.password.special.count Default value: 1 The minimum number of special characters, in a password. mz.security.user.control.password.special.message Default value: The password needs to contain at least 1 special character(s). The message to be displayed for the user when they have not met the condition for the minimum number of special characters in the password. mz.security.user.control.password.special.pattern Default value: [W_] The pattern of the permitted values in regular expression. The password will be matched to the pattern to determine if the condition is met. mz.security.user.control.password.repetition.message Default value: The password contains too many consecutive identical characters. The message to be displayed for the user when they have not met the condition for the password having the least amount of multiple repeated characters in a sequence. mz.security.user.control.password.username.message Default value: The username may not be a part of the password. The message to be displayed for the user when they have the username contained within the password. mz.security.user.control.password.history.message Default value: The password may not be a recently used password. The message to be displayed for the user when they are reusing a password that they have used before. mz.security.user.control.password.extra.count Default value: "" The minimum number of characters for the extra user policy. mz.security.user.control.password.extra.message Default value: "" The message to be displayed for the user when they did not meet the requirements of the extra user policy. mz.security.user.control.password.extra.pattern Default value: "" The pattern of the permitted values. The password will be matched to the pattern to determine if the condition is met. mz.security.user.control.password.extra.type Default value: "" The type that determines what the extra pattern will be. The value of this property can be set to regexp or none. Setting it to regexp ensures that the pattern has to conform to regular expressions. mz.user.account.change.password.limit Default value: false Setting this property to true will limit the password change to only once per day. This property does not restrict users from the Administrator Group. mz.user.account.inactivity Default value: false Setting this property to true will disable user accounts with inactivity exceeding 90 days. However, system accounts (admin accounts) are not affected by this.

---

# Document 2246: Streaming Telemetry Input/Output Data and MIM - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204643341/Streaming+Telemetry+Input+Output+Data+and+MIM
**Categories:** chunks_index.json

Input/Output Data The Input/Output data is the type of data an agent expects and delivers. The agent consumes and produces UDR types extended with the built-in HTTP format. MIM The agent does not publish nor access any MIM parameters.

---

# Document 2247: Websocket Client Agent - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204741297/Websocket+Client+Agent
**Categories:** chunks_index.json

The WebSocket Client agent can be used for communicating with a WebSocket server, using either binary data or text frames, once a WebSocket connection has been established. The agent can be used independently and does not require the use of the WebSocket Server agent. The section contains the following subsections: Websocket Client Agent Configuration Websocket Client Agent Input/Output Data, Meta Information Model and Events

---

# Document 2248: SAP RFC Processor Agent Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205034531
**Categories:** chunks_index.json

The SAP RFC Processor agent is a realtime processing agent, which obtains the UDR generated from the selected SAP RFC profile. The UDR type for the RFC function selected, is determined according to the structure in SAP. The agent sends the populated UDR to the SAP system with the connection details configured in the SAP RFC profile. To open the SAP RFC agent configuration, click Build  New Configuration . Select Workflow from the Configurations dialog. When prompted to Select workflow type , select Realtime . Click Add agent and select SAP RFC in the Processing tab in the Agent Selection dialog. Double-click the agent icon or right-click the icon and select Edit agent , to display the Agent Configuration dialog. Open SAP RFC Processor agent configuration dialog Setting Description Setting Description Connection Details Settings Profile Click Browse to select the SAP RFC profile you want to use. Performance Settings Enable Connection Pool Select this check box to use a connection pool to communicate with the SAP Java Connector. Max Idle Connections Enter the maximum number of idle connections kept open by the destination. A value of 0 means there is no connection pooling. The default value is 2. Max Active Connection Enter the maximum number of active connections that can be created for a destination simultaneously. The default value is 10. Max Queue Size Enter the maximum number of records waiting to be processed in the queue. This prevents an out of memory error from occurring if the SAP System is too slow to consume the records. The default value is 1000. Number of Threads Enter the number of threads simultaneously uploading into the SAP System. The minimum value is 1. The default value is 5. Cache Size Enter the cache size for the SAP FunctionTemplate in the agent. The minimum value is 10. The default value is 1000. Cache Expiry (min) Enter the cache expiry in minutes. The minimum value is 1. The default value is 30. Enable Immediate Stop Select this check box to enable the agent to stop immediately and ignore pending items in the queue. Enable Logging for Execution Exceeding Time Threshold Select this check box to enable the System Log notification when an RFC Function execution has exceeded the configured time threshold. Execution Threshold Time (min) This field determines the execution time threshold before the System Log notification event is sent.

---

# Document 2249: Field Declarations - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204612829/Field+Declarations
**Categories:** chunks_index.json

The syntax for fields of a sequential record, record field declarations , are declared as follows: <field_type> <field_name> : <field options> ; Primitive Field Types The following primitive types are supported: Primitive Field Type Description Primitive Field Type Description ascii ASCII encoded string. This type may also be used for other types of string encodings with the character_encoding option. The default encoding used is ISO8859-1 . asn_length This is a special type used to encode a BER encoded size specification. It decodes to the BER length specification as well as the length of the length specification itself. The type makes it possible to decode special cases of BER-encoded data without using ASN.1 format specifications. The special option content_only can also be used to only get the BER length specification. bcd Array of digits encoded in BCD. Nibble order can be specified as bcd(msn_fd) or bcd(lsn_fd) . The msn_fd means that the most significant nibble is the first digit, while lsn_fd uses the least significant nibble as first digit. The msn_fd is default. bytearray The bytearray type is supported. ebcdic A special case of ascii type, equivalent to ascii: character_encoding("Cp1047") . All options available for ascii fields are also available for ebcdic fields. float types ( float , double ) Binary encoded float value. This type supports IEEE754 standard 32-bit and 64-bit data encodings. The only difference between float and double is that the field is automatically mapped to its corresponding internal type. integer types ( byte , short , int , long , bigint ) Binary coded integer value. The first byte is the most significant (that is, big endian order). The field can be used with the field options unsigned or signed to specify if the data is decoded unsigned (which is the default) or two-complement signed. The byte order can also be explicitly specified by, for instance, using int(little_endian) or int(big_endian) as the type name. The only difference between the types, when using an automatic in_map , is that the field is automatically mapped to its corresponding internal type. Note! Since the integer types are handled internally as fixed-length signed integers (except for bigint), there can be overflows in both decoding and encoding. If this occurs the integer values are truncated. msp_length This is a special type used to decode the length field in a Siemens MSP billing event. The length field specifies the event length excluding the length field itself. external MSP_BILLING_EVENT { msp_length l : external_only; ascii v : dynamic_size(l); }; list Type that can be used to decode a list of elements. external MySubUDR { int dataLength : static_size(1); ascii secretData : dynamic_size(dataLength); }; external MyUDR { int elementCount : terminated_by(":"); list<MySubUDR> myList : element_count(elementCount); int userType : terminated_by(0xA); }; The list can have any of the following field size options static_size , dynamic_size , terminated_by , or element_count . For further information, see the section below, Field Size Specifications Primitive Field Options Primitive Field Option Description Primitive Field Option Description character_encoding(<encoding_name>) Specifies that the field is encoded with the encoding named <encoding_name> , using the standard Java encoding support. encode_value(<expr>) Specifies that the encoded value of the field is always <expr> , regardless of whether decoded or set value is chosen during the processing. This is used for encoding only. float , double Informs the decoder that the value is a float value specified as a string and that the automatic mapping of the field is the internal type float or double . Only applicable for ascii fields. int(base10) , int(base16) Informs the decoder that the value is an integer of decimal or hexadecimal base and that the automatic mapping of the field is of the internal type int . The integer types ( byte , short , long , bigint ) can be used instead of int , in which case automatic mapping is done to the specified type. Only applicable for ascii and bcd fields. lsb(<int_constant>) The least significant bit of the field is <int_constant> . Its value range is zero (0) to seven (7) (both inclusive). Only applicable for size one (1) integer type fields. This option is typically used together with the lsb option. msb(<int_constant>) The most significant bit of the field is <int_constant> . Its value range is zero (0) to seven (7) (both inclusive). Only applicable for size one (1) integer type fields. This option is typically used together with the lsb option. native_size(<expr>) Specifies the number of BCD digits for a bcd declared field. This size does not cover field size calculation and dynamic_size must generally also be specified. byte_alignment(<int_constant>) Specifies that a field begins at the next even multiple of an alignment byte size. The value must be an even power of 2 (for example 1, 2, 4, or 8). This field option can also be used in a bit_block or repeat_block . For an example of how this option can be used, see the section below, Bit Blocks. Note! The byte_alignment field option is used for decoding only, and counts from the start of the UDR. Field Size Specifications Field Size Specification Description Field Size Specification Description static_size(<constant>) Used to specify a static size of a field (in bytes). dynamic_size(<expr>) Used to specify a dynamic size of a field (in bytes). element_count(<expr>) Used to specify the size of a list field (in number of elements). terminated_by(<constant>) Used to specify a dynamic field terminated by a specific constant. bit_size(<expr>) Used to specify a size of a field (in bits). This size specification can only be used inside a bit_block . padded_with(<constant>) Used to specify padding character. align(left) Specifies that the field is left-aligned, default. align(right) Specifies that the field is right-aligned. When decoding a field, the size calculation is done in two steps. First the occupying size is calculated. This is the required field size in the record. After that the core size and offset are calculated, which comprise the part of the field actually decoded into the internal field. The occupying size is calculated as follows: If static_size is speci fi ed, this one is used. If dynamic_size is speci fi ed, then this one is used. If element_count is speci fi ed, then this one is used. If terminated_by is speci fi ed, then this one is used. The fi eld size includes the termination character but never takes up more than the total remaining size in the UDR. (The reason that this is not considered as a decoding error is to support the trailing_optional fi eld option). Otherwise (if the fi eld type supports it) the fi eld size is deduced directly from the type. This is supported by constructed types (sub-records) and the asn_length primitive type. The core field data always has the full occupying size for constructed fields (record fields). For primitive fields the size is specified as follows: For a BCD field, with native_size specified, this along with the alignment specification is used. If terminated_by is used to find the occupying size, this terminator char (or nibble for BCD) is removed. Any padding is removed (while considering the alignment specification). The padding is either specified with padded_with or with terminated_by providing the occupying size is not calculated using the terminator (this case is present for historical reasons and in current versions padded_with should be used instead). If the field is an ASCII field, space is used as default padding. Field Options for Optional Fields The following field options are used to specify when a field is present. Field Option Description Field Option Description present if(<condition>) The field is present if the <condition> evaluates to true . trailing_optional The field is present unless the end of the UDR data has been reached. This is a convenient option equivalent to present if(remaining_size >0) . Other Field Options Field Option Description Field Option Description external_only The field is not automatically created in the target_internal when performing automatic mapping. This is useful for fields containing decoding logic and provide no useful information after decoding. Typical examples could be recordLength and recordType fields. udr_size and remaining_size Fields may need to use the size of the containing record in expressions. This is done by using the udr_size keyword. Example - udr_size external SimpleSequential { int recordType : static_size(1); ascii secretData : dynamic_size(udr_size-1); }; In the previous example, the size of SimpleSequential is unknown at declaration time. However, when a size is provided (specified in a parent record type), the secretData field occupies this entire space minus one byte (which is used by the recordType field in this example). Note! If the size is not supplied by a parent record, the record size calculation rules results in an undefined size since the udr_size value is unavailable before the size has been calculated, causing a decoding error. The other special value that depends on the record size is remaining_size , which is the size remaining until the end of the record. The previous example could have been written using remaining_size instead of udr_size , and is shown in the following example. Example - remaining_size external SimpleSequential { int recordType : static_size(1); ascii secretData : dynamic_size(remaining_size); }; Bit Blocks Bit blocks are used when the data record contains fields that are not byte aligned. When declaring fields in bit blocks there are two ways to specify which bits to use for the field content. When using a bit_block of a single byte, it is possible to specify the most and least significant bit of the field using msb and lsb , as previously described. The alternative is to use the bit_size option to specify the number of bits spanned by the field. You can also use the byte_alignment field option if you need to specify from which byte a field begins. This field option can only be used for decoding. For further information on byte_alignment , see the section above, Primitive Field Types. The general syntax of the bit blocks is as follows: bit_block : <size specification> [, present if(<cond>) ] { <bit_block contents> }; Example - bit_block with msb and lsb bit_block : static_size(1) { int LACLength : msb(7), lsb(4); int OwnerIDLength : msb(3), lsb(0); }; Example - bit_block with bit_size bit_block int hour : bit_size(5); int minute: bit_size(6); int second: bit_size(6); int eventId: bit_size(3); }; Example - bit_block with byte_alignment This example shows how the byte_alignment field option can be used in a bit_block , in which the secondBit field begins in the last byte in a bit_block of five bytes: external BitBlock_ByteAlignment { bit_block : static_size(5) { byte firstBit: bit_size(1); byte secondBit: bit_size(1), byte_alignment(4); }; }; Except for simple fields, a bit_block can contain repeat_block constructs in the contents part. For a description of repeat_block see the section below, Repeat Blocks. Repeat Blocks A repeat_block can be used to specify that a group of fields is to be repeated a specified number of times. Currently this construct can only be used inside bit_block structures or another repeat_block structure. However this is restricted to a maximum of two levels of repeat_block. See the example below. You can also use the byte_alignment field option if you need to specify from which byte a field begins. This field option can only be used for decoding. For further information on byte_alignment , see the Primitive Field Types section above. The general syntax of the repeat blocks is as follows: repeat_block ( <repeat count> ) { <repeat_block fields> }; Example - repeat_block external BitBlockTest { bit_block : dynamic_size(remaining_size){ int string_count: bit_size(8); repeat_block(string_count) { int string_length: bit_size(8); repeat_block(string_length) { int character: bit_size(8); }; }; }; }; Note! It is not possible to encode to a structure containing a repeat_block . Constructed Types A sequential field can be a type that is an instance of another external format. Example - Constructed types external MyParentFormat { int field1 : static_size(4); MyEnclosedFormat field1; }; Here MyEnclosedFormat can be any external format. set Construct The set construct is used for decoding formats containing optional blocks of additional data. The syntax of the set Construct is declared as follows: Example - set Construct external MyFormat: dynamic_size(recordSize) { int recordSize: static_size(4); set : dynamic_size( remaining_size ) { MyPackage1 package1: optional; MyPackage2 package2: optional; list<MyPackage3> package3; }; }; All the formats, MyPackage1-3 , must be declared with the identified_by option. The optional packages may appear in any order in the input file, however it is confirmed they do not appear more than once. Currently all fields in a set construct must be declared optional. If the field type in the set is a list type, the set may contain multiple records of the list element type. The list type fields are not optional. Instead, when no matching records are found, the list is empty. If a size is not specified on the set level, Ultra cannot validate that all the data in the UDR has been decoded. The user is therefore recommended to specify the size, unless the set size in advance is unknown (for instance if the record is terminated by a terminator package or the set size calculation is needed for the record size calculation). The dynamic_size(remaining_size) specification used in the previous example is often correct. switched_set Construct The switched_set construct can often be used instead of the set construct. It has advantages (in performance and in ease of usage) especially when the separate sub-packages are simple. The syntax is however more complex compared to the basic set construct. The syntax of the switched_set construct is declared as follows: switched_set( <switch field> ) [: <size specification> ] { <prefix fields> <switch cases> [<default case>] }; The size specification is allowed to contain normal size options. The other parts of the declaration are the prefix fields, decoded for each package in the set and the prefix fields. All the prefixes must have static sizes. The switch field must be one of the prefix fields.The syntax of the switch case is declared as follows: case( <case value> ) [: include_prefix] { <case fields> }; The case fields are normal field specifications with the additional possibility of declaring list fields for the case where a package can be present repeatedly. If include_prefix is specified, then the case body is decoded including the prefix fields. The syntax of the default case is declared as follows: default [: include_prefix] { <case fields> }; The decoding of a switched_set is performed according to the following steps: Decode the prefix fields. Decode the case matching the value of the switch field. If no case matches, decode the default case. If there is no default case, end the switched_set decoding. Repeat steps 1-2 until the switched_set size (or the end of the UDR) is reached. Example - Format with a switched_set: external SwitchedSetExample: terminated_by(0xA) { // Size is remaining_size -1 (minus the terminator linefeed) switched_set( packageId ): dynamic_size( remaining_size - 1 ) { ascii packageId: int(base10), static_size(1); ascii packageLength: static_size(1), int(base10), encode_value( case_size - 2 ); case(1) { list<ascii> list1: dynamic_size( packageLength ); }; case(2): include_prefix { ascii packageId_3: int(base10), static_size(1), encode_value(3), external_only; ascii packageLength_3: int(base10), static_size(1), encode_value(case_size - 2), external_only; ascii body_3: dynamic_size( packageLength_3 ); }; default: include_prefix { list<ascii> defaultContent: dynamic_size( packageLength + 2 ); }; }; }; Encoding Specifications and Expressions To support encoding to binary formats, it is often necessary to explicitly specify which value to be encoded in the external fields. Normally the value is taken from the corresponding internal field, however there are cases when this is not desirable. For instance, if there is no mapped internal field (because the external_only option has been used), or the value must be calculated from information about the encoding (for instance, udr_size ). This is done through the encode_value option and there are several special constructs that may be used in the value expression (see the section above, Primitive Field Types). udr_size - evaluates to the encoded size of the UDR. This is not necessarily the same value as during decoding. field_size(fieldName) - evaluates to the encoded size of the named field. field_present(fieldName) - evaluates to true if the named field is present in the encoding. It is always true for non-optional external fields. case_size - this is only usable within switched_set blocks and evaluates to the encoded size of the current case (including prefix fields). If the size expressions are used, the field encoding has to be postponed until the size is known. To be able to do this, Ultra requires that any such fields are static_size . An example of these concepts is presented next. Example - Encoding specifications and expressions external Ext: dynamic_size( udrSize ) { ascii udrSize: int(base10), static_size(3), align(right), padded_with("0"), encode_value( udr_size ); ascii fieldSize: int(base10), static_size(3), align(right), padded_with("0"), encode_value( field_present( strField ) ? field_size( strField ):0 ); ascii strField: dynamic_size( fieldSize ), present if( fieldSize > 0 ); }; When processing an encode_value instruction, Ultra automatically decides how to convert the value depending on the result type of the expression. When deciding this, Ultra starts with the default internal type of the external field. In this case, the type is called defaultType and the expression type is encodeType , the encoding rules are: If the defaultType is assignable from encodeType , use the default mapping. If the defaultType is string or bytearray and the encodeType is numeric, encode it as a simple ascii value (one byte). If the defaultType is bytearray and the encodeType is string , do standard encoding ( ISO-8859-1 ) of the string. If the encodeType is string and the external base type is ascii (for example using int(base10) ), use direct string encoding. If none of these rules apply, the format will not compile. To understand what this means, consider the following field definitions. Example - Field definitions ascii strField1: static_size(1), encode_value("10"); ascii strField2: static_size(1), encode_value(10); ascii intField1: static_size(1), int(base10), encode_value("10"); ascii intField2: static_size(1), int(base10), encode_value(10); Expected encoded results for these fields: Field Expected encoded result Field Expected encoded result strField1 Both defaultType and encodeType are strings . The normal encoding is used to get the result "1" (since static_size(1) is used, the result "10" is truncated to one byte). strField2 defaultType is string and encodeType is byte (numeric). This means that the second rule is applied, and the result is ascii 10 (newline). intField1 defaultType is int and encodeType is string . There is no mapping between these types, however, since the external base type is ascii , the string is mapped out as for strField1 , and the result is "1". intField2 defaultType is int and encodeType is byte . Since encodeType is directly assignable to defaultType , it is mapped out as normal, and the output is again "1".

---

# Document 2250: Elasticsearch Profile - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204639581
**Categories:** chunks_index.json

An Elasticsearch profile is used to read and write data in an Elasticsearch Service in AWS and can be accessed by batch workflows using Aggregation agents. Elasticsearch is supported to provide a scalable distributed storage option. It is a search and analytics engine that provides high scalability on a cloud infrastructure with cluster scaling options and replication across several domains, and the capacity to query large amounts of data. Compared with storing to disk, Elasticsearch provides greater capacity, however, you must bear in mind that heap and execution time are increased, by what percentage depending on the amount of data being processed. Note! You cannot run more than one batch workflow to use the same aggregation profile, configured to use Elasticsearch, at the same time. The Elasticsearch profile is loaded when you start a workflow that depends on it. Changes to the profile become effective when you restart the workflow. The profile has been verified on Elasticsearch version 6.0. For further information on the use of Elasticsearch, see https://www.elastic.co/guide/en/elasticsearch/reference/6.0/index.html . Configuration To create a new Elasticsearch profile, click the New Configuration button from the Configuration dialog available from Build View , and then select Elasticsearch Profile from the menu. The contents of the menus in the menu bar may change depending on which configuration type has been opened in the currently displayed tab. The Elasticsearch profile uses the standard menu items and buttons that are visible for all configurations, and these are described in Common Configuration Buttons . The Edit menu is specific for the Elasticsearch profile configurations. Item Description Item Description External Re fer ences Select this menu item to Enable External References in an agent profile field. This can be used to configure the use of the following fields, and the respective external reference keys available: Index Node Config Note! The Node Config must be entered in the form of a comma-separated list of <host:port> values, for example, 127.0.0.1:8990, 123.0.0.1:9000. For further information, see Using External Reference in Agent Profile Fields and External Reference Profile . The Elasticsearch profile configuration consists of two tabs: Connectivity and Advanced . Connectivity Tab The Connectivity tab is displa yed by default. Open Elasticsearch profile - Connectivity tab The following settings are available in the Elasticsearch profile: Setting Description Setting Description Index Enter the index that you want to use. For further information on the use of an index in Elasticsearch, see https://www.elastic.co/guide/en/elasticsearch/reference/6.0/_basic_concepts.html . Note! When you name your index, bear in mind that two indices are created in the background for a workflow, which are named <index name>_committed and <index name>_deleted. It is therefore important to avoid naming an index that would duplicate these index names. For example, if you name the index "customer_index", the indices "customer_index_committed" and "customer_index_deleted" are automatically created. These two additional indices are removed after the workflow has been run. Host Enter the hostname or IP address of the host on which the Elasticsearch service is running. Port Enter the port of the Elasticsearch service. Test Connection Click to test the connection to the service, using the configured values. Advanced Tab The Advanced tab contains additional properties that you can use for performance tuning for the Elasticsearch service. Open Elasticsearch profile - Advanced tab For the Elasticsearch service, you can only modify the properties listed as shown above in the Advanced tab.

---

# Document 2251: Google Protocol Buffer Formats - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204613603/Google+Protocol+Buffer+Formats
**Categories:** chunks_index.json

MediationZone includes direct support for Protocol buffer format specifications. The Protocol buffer specification can be directly imported into the system and corresponding UDRs and encoder/decoders are generated.

---

# Document 2252: Data That Can be Exported with vcexport/vcimport - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204742572/Data+That+Can+be+Exported+with+vcexport+vcimport
**Categories:** chunks_index.json

You can use the vcexport / vcimport commands to export/import configurations. To make a complete export/import of the entire system, e.g. when upgrading to a new version of MediationZone, the systemexport and systemimport commands should be used. See the Command Line Tool User's Guide for further information about these commands.

---

# Document 2253: Data Veracity - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205651997/Data+Veracity
**Categories:** chunks_index.json

Data Veracity is used when UDRs fail validation and manual intervention is needed before they can be successfully processed. Erroneous UDRs are sent to their respective database tables that are formatted to the structure of the UDRs, the sending of the data requires the Data Veracity Forwarding agent. To collect data from the respective database tables, the Data Veracity Collection agent is used. Using the Data Veracity Web UI Editor, UDRs may be examined, marked for deletion, force deleted or updated. Data Veracity currently supports the following databases: Oracle Database 19c PostgreSQL 13 PostgreSQL 14 PostgreSQL 15 SAP HANA 2.0 SP 7 Prerequisites The reader of this information should be familiar with: The MediationZone Platform Database Administrations The section contains the following subsections: Data Veracity Profile Data Veracity Collection Agent Data Veracity Maintenance System Task Data Veracity Forwarding Agent Data Veracity Task Agent Data Veracity in Data Management Data Veracity Performance Tuning Managing Data Veracity Access Permission

---

# Document 2254: Upgrade Platform Container - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204996952/Upgrade+Platform+Container
**Categories:** chunks_index.json

Important! It is essential to review and potentially adjust your Java memory settings, especially prior to an upgrade process as it demands additional resources for memory heap, pico timeout and Metaspace size. See Java Configuration and Managing Picos with Topo . Important! When upgrading to this release, the install.admin.password must be set according to your current admin password before proceeding with the ./setup.sh upgrade step. Important! If the existing installation has additional JVM arguments configured which are obsolete in Java 17, remove them and update to use supported options. Please refer to https://docs.oracle.com/en/java/javase/17/docs/specs/man/java.html#obsolete-java-options for details on  Obsolete  and  Removed  Java options since Java 8. See Managing Picos with Topo for JVM Arguments configuration. Enter the release content directory that was created when you extracted the delivered *.tgz file during the Upgrade Preparations . Pre-upgrade validations are performed to verify the environment and configuration, ensuring a seamless upgrade experience. To perform validation without starting the upgrade, run the following command: ./setup.sh upgrade -validate-only Run the following command to initiate the upgrade process: ./setup.sh upgrade When using the ./setup.sh upgrade command, setup log file will be generated in the $MZ_HOME/log directory. Hint! It may be a good idea to open a new command line window in order to keep track of the log files. Note! If the upgrade validation fails, there is no need to perform a rollback or restore, as the upgrade process has not yet begun. If validation fails but you choose to proceed, you can run the following command: ./setup.sh upgrade -skip-validate Caution! You can choose to skip validation, but be aware that this bypasses checks for potential issues in your environment and configuration. If there are undetected problems, the upgrade may fail or cause unexpected behavior. Proceed with caution and ensure you have backups before continuing. Startup the platform. mzsh startup platform Start the pico for the User Interface. mzsh startup ui If you wish to change the port number, execute the following command: mzsh topo set topo://container:<platform-container>/pico:ui/val:config.properties.ui.webserver.port <port-number> Note! If your upgrade fails, you can perform a rollback using the MZ_HOME backup, see Simplified Downgrade Procedure . Hint! If any configurations have become invalid due to the upgrade, these will be listed in the log file. Search for the string "Regenerating configs" in the log file to find information about any invalid configurations. Example - Output in the upgrade_<timestamp>.log file with invalid configurations. Mon Nov 19 10:52:10 CET 2013 Regenerating configs The following configurations changed status and may require manual attention: Workflow Test.WF1 became invalid, Workflow Test.WF2 became invalid, APL Code Test.apl_profile became invalid,

---

# Document 2255: Diameter Stack Agent Input/Output Data and MIM - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204999675/Diameter+Stack+Agent+Input+Output+Data+and+MIM
**Categories:** chunks_index.json

Input/Output Data The input/output data is the type of data an agent expects and delivers. The agent emits and receives UDRs of the type RequestCycleUDR . When you have configured an error route, the agent also emits UDRs of the type DiameterErrorUDR . MIM For information about the MIM and a list of the general MIM parameters, see Administration and Management in Legacy Desktop . Publishes MIM Value Description Bytes Received This MIM parameter contains the number of received bytes from each peer in the selected Diameter Routing profile. Bytes Received is of the map<string>, long> type and is defined as a global MIM context type. The string values in the map contain the host-names of the peers. Bytes Transmitted This MIM parameter contains the number of transmitted bytes to each peer in the selected Diameter Routing profile. Bytes Transmitted is of the map<string, long> type and is defined as a global MIM context type. The string values in the map contain the host-names of the peers. CEA Count This MIM parameter contains the number of sent and received CEA (Capabilities-Exchange-Answer) commands for each peer in the selected Diameter Routing profile. CEA Count is of the map<string, long> type and is defined as a global MIM context type. The string values in the map contain the hostnames of the peers. CER Count This MIM parameter contains the number of sent and received CER (Capabilities-Exchange-Request) commands for each peer in the selected Diameter Routing profile. CER Count is of the map<string, long> type and is defined as a global MIM context type. The string values in the map contain the hostnames of the peers. Communication Failure Network Layer This MIM parameter contains the number of connection problems detected on network level. Communication Failure Network Layer is of the long type and is defined as a global MIM context type. Communication Failure Protocol Layer This MIM parameter contains the number of connection problems detected on protocol level. Communication Failure Protocol Layer is of the long type and is defined as a global MIM context type. Diameter Too Busy Count This MIM parameter contains the number of sent Diameter Too Busy responses. The MIM value is reset each time the MIM is read. Diameter Too Busy Count is of the long type and is defined as a global MIM context type. Diameter Too Busy Total Count This MIM parameter contains the number of Diameter Too Busy responses sent, since Workflow start. Diameter Too Busy Total Count is of the long type and is defined as a global MIM context type. DPA Count This MIM parameter contains the number of sent and received DPA (Disconnect-Peer-Answer) commands for each peer in the selected Diameter Routing profile. DPA Count is of the map<string, long> type and is defined as a global MIM context type. The string values in the map contain the hostnames of the peers. DPR Count This MIM parameter contains the number of sent and received DPR (Disconnect-Peer-Request) commands for each peer in the selected Diameter Routing profile. DPR Count is of the map<string, long> type and is defined as a global MIM context type. The string values in the map contain the hostnames of the peers. DWA Count This MIM parameter contains the number of sent and received DWA (Device-Watchdog-Answer) commands for each peer in the selected Diameter Routing profile. DWA Count is of the map<string, long> type and is defined as a global MIM context type. The string values in the map contain the hostnames of the peers. DWR Count This MIM parameter contains the number of sent and received DWR (Device-Watchdog-Request) commands for each peer in the selected Diameter Routing profile. DWR Count is of the map<string, long> type and is defined as a global MIM context type. The string values in the map contain the hostnames of the peers. Incoming Messages This MIM parameter contains the number of received messages. Incoming Messages is of the long type and is defined as a global MIM context type. Origin State Id This MIM parameter contains a value that is incremented in the initialize workflow execution state. It is used for populating the AVP Origin-State-Id. Origin State Id is of the int type and is defined as a global MIM context type. To amend this counter, see Diameter Functions in the APL Reference Guide . Outgoing Messages This MIM parameter contains the number of sent messages. Outgoing Messages is of the long type and is defined as a global MIM context type. Peer Status This MIM parameter contains the status of a Peer. The first string is the hostname and the second string is the status for that peer. Status can be any of the following: OKAY, SUSPECT, DOWN, REOPEN, or INITIAL. These are the watchdog states as de fi ned in RFC3539. The value of Peer Status is always INITIAL in the initialize work fl ow execution state. Peer Status is of the >map<string,string> type and is defined as a global MIM context type. Peer Round Trip Latency Avg This MIM parameter contains the average round trip latency to peer, calculated (in milliseconds) over the last 1000 received records. Workflow Round Trip Latency Avg is of the long type and is defined as a global MIM context type. Peer Round Trip Latency Max This MIM parameter contains the maximum round trip latency to peer since Workflow start. Workflow Round Trip Latency Max is of the long type and is defined as a global MIM context type. Peer Round Trip Latency Min This MIM parameter contains the minimum round trip latency to peer since Workflow start. Workflow Round Trip Latency Min is of the long type and is defined as a global MIM context type. Peer Status This MIM parameter contains the state of a peer connection. The first string is the hostname and the second string is the state. The state can be any of the following: OKAY, SUSPECT, DOWN, REOPEN, or INITIAL. These are described in RFC 3539. The value of Peer Status is always INITIAL in the initialize workflow execution state. Peer Status is of the map<string,string> type and is defined as a global MIM context type. Realm Routing Table This MIM parameter contains the realm routing table of the Diameter Stack agent. Realm Routing Table is of the map<string,map<string, list<string>>> type and is defined as a global MIM context type. The string values in the outer map contain the realm names (primary key). The string values of the inner map contain the applications (secondary key). The lists in the map contain the hostnames of the peers in the realm. Note! This MIM value only contains realms that have static peers, i e not dynamically discovered via DNS lookups. For an example of how to use this MIM value, see the section, To Read the Realm Routing Table in APL, in Diameter Routing Profile . Records in decoder queue This MIM parameter contains the current number of records in the queue for decoding. Records in decoder queue is of the long type and is defined as a global MIM context type. Rejected Messages This MIM parameter contains the number of rejected messages. Rejected Messages is of the long type and is defined as a global MIM context type. Workflow Round Trip Latency Avg This MIM parameter contains the average workflow processing latency, calculated (in milliseconds) over the last 1000 processed records. Workflow Round Trip Latency Avg is of the long type and is defined as a global MIM context type. Workflow Round Trip Latency Max This MIM parameter contains the minimum workflow processing latency, since Workflow start. Workflow Round Trip Latency Max is of the long type and is defined as a global MIM context type. Workflow Round Trip Latency Min This MIM parameter contains the maximum workflow processing latency, since Workflow start. Workflow Round Trip Latency Min is of the long type and is defined as a global MIM context type. Accesses The agent does not access any MIM parameters.

---

# Document 2256: SNMP Trap Agent Input/Output Data, MIM and Events - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205002093/SNMP+Trap+Agent+Input+Output+Data+MIM+and+Events
**Categories:** chunks_index.json

Open Input/Output Data Input Data SnmpTrapUDR Output Data SnmpTrapUDR Meta Information Model For information about the MIM and a list of the general MIM parameters, see Administration and Management in Legacy Desktop . The agent does not publish nor access any MIM parameters. SNMP Trap Agent Event Agent Message Events The agent does not produce any message events. However, you can configure the Analysis agent with APL code to produce message events. See the APL Reference Guide for further information about available functions. Debug Events The agent does not itself produce any debug events. However, you can configure the Analysis agent with APL code to produce debug events. See the APL Reference Guide for further information about available functions.

---

# Document 2257: Execution Context Properties - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205816064/Execution+Context+Properties
**Categories:** chunks_index.json



---
**End of Part 96** - Continue to next part for more content.
