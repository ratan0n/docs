# RATANON/MZ93-DOCUMENTATION - Part 28/112

---
**Dataset:** ratanon/mz93-documentation
**Part:** 28 of 112
**GitHub:** https://github.com/ratan0n/docs/tree/main/mz93-documentation
**Size:** ~60.4 KB
---

To open the Build screen , click the Build button on the top menu bar. This is the interface where you create and manage configurations. Open Build screen This view has two sections: Display List  The left side of the Build screen shows the Main option that displays all available configurations in the system, and the existing, committed workflow packages in the Workflow Packages section. If you select a workflow package, the Browser displays the content of the selected package and if you want to display all configurations regardless of workflow package, click the Main menu item. At the bottom of this section you can click the Create package button to create workflow packages. For more information, see Workflow Packages . Configurations Navigator  In the Configuration Browser you can create, manage, delete, and rename the configurations in the system if you have selected Main in the Display List . Configuration Browser The configurations can be either profiles that belong to specific agents, common profiles, or other types such as Event Notification or APL Collection Strategies. For more information, see Configuration Types . Option/Value Description Option/Value Description Open Selection Checkbox Select the checkbox for those configurations that you want to perform actions for. See section Table Action Bar with Configuration(s) Selected below for more information. Name Displays the name of the configuration. Valid Displays the validity of the configurations. Fields are automatically validated in agents and other core functionality. Encrypted Displays the encryption status of the configuration. Locked Shows if the configuration is locked or not. Permission Displays the permissions granted to the current user of the configuration. Permissions are shown as R (Read), W (Write), and X (eXecute). If the configuration is encrypted, an E is also added. Owner Displays the username of the user that created the configuration. The owner can: Read, modify (write), and execute the configuration Modify the permissions of user groups to read, modify, and execute the configuration. Modified date Displays the date when the configuration was last modified. Subfolders in the Configuration Browser Note! Subfolders in this context are visual representations of areas that you have partitioned to keep your configurations. They are meant to make your configuration browser look neat and tidy. They do not represent actual subfolders. You can enable subfolders to allow you to sort your configurations within your folders, making it easier to maintain larger implementations. To enable subfolders, you must set the property mz.subfolder.enabled to true in the platform.conf file . Refer to Platform (in the System Properties section) for more information on how to set the property. To create subfolders, you must use the valid separators in the folder name when creating a new folder, like the folder names "sftp_coll" and "cipher_sftp_coll shown on the image above. When subfolders are created, configurations are sorted into subfolders determined by the separator used in the folder name. The only valid separators in a folder name are "_" or "-". If any other character is used as a separator the folder will not appear with subfolders. Table Action Bar The table action bar is located on top of the Browser . The actions available change depending on if you have selected the checkbox for any configuration(s) or not. Open Table Action Bar with no configurations selected Open Table Action Bar with configuration(s) selected Table Actions with No Configurations Selected When no configurations are selected, the table action bar contains the following actions: Action Description Action Description Filter Click this button to open the Filter dialog where you can select which configuration types you want to view. Search This is a free text search box that you can use to search for specific workflow configurations that match the entered text. New Configuration Click this button to open the Configurations dialog where you can select which type of configuration you want to create. The configurations have a common set of buttons, see Common Configuration Buttons , and some have specific buttons that are described in the documentation for each configuration. New Folder Click this button to create a new folder to save your configurations in. Open The New Folder dialog Note! The maximum allowed length for a folders name is 40 characters. Refresh Click this button to refresh the list of configurations. Table Actions with Configuration(s) Selected When selecting the checkbox for one or more configurations, the table action bar is populated with different actions you can do for the configuration(s). The available actions are: Action Description Action Description Clear selection(s) Click this button to clear the selection of configurations. The table action bar shows the default actions. Delete Click this button to delete the selected configuration(s). You will be asked if you are sure you want to delete before deletion is done. Rename Click this button to open the Rename configuration or Rename folder dialog where a new name for the configuration can be entered. Open Encrypt Click this button to open the Encrypt configurations dialog where a password can be provided thus securing the configuration from unauthorized access. This button is disabled if you have selected a checkbox for a folder. Open Decrypt Click this button to open the Decrypt configurations dialog where the encryption password can be provided giving access to the configuration. This button is disabled if the selected configuration is not encrypted. Open Open Properties Click this button and select the option Properties to open the Properties dialog where you can configure the properties for the selected configuration. This button is disabled if you have selected a folder or multiple configurations. See the section Configuration Properties below for more information. Open Keyboard shortcuts Click this button to open the Configurations - Keyboard shortcuts dialog. Click anywhere outside the dialog to close it. Open Configuration Properties To open the Configuration Properties dialog, select the checkbox for the configuration you want to set properties for and click on the button with three dots in the table action bar and select Properties . This dialog has four different tabs; Basic , Permission , Reference , and History . The Basic Tab The Basic tab is the default tab in the Properties dialog. Open The Basic tab It contains the following information: Configuration Information Description Configuration Information Description Name Displays the name of the configuration. Type Displays the type of configuration. Key Displays the internal key used to identify the configuration. Folder Displays the name of the folder in which the configuration is located. Version Displays the version number of the configuration, see the History tab for further information about the different versions. Permissions Displays the permissions granted to the current user of the configuration. Permissions are shown as R (Read), W (Write), and X (eXecute). If the configuration is encrypted, an E is also added. For further information about permissions, see the Permissions Tab section. Owner Displays the username of the user that created the configuration. The owner can: Read, modify (write), and execute the configuration Modify the permissions of user groups to read, modify, and execute the configuration. Modified by Displays the user name of the user that made the last modifications to the configuration. Modified Displays the date when the configuration was last modified. If you want to use the information somewhere else you can highlight the information and press CTRL-C to copy the information to the clipboard. The Permission Tab The Permission tab contains settings for what different user groups are allowed to do with the configuration. Open The Permission tab As access permissions are assigned to user groups, and not individual users, it is important to make sure that the users are included in the correct user groups to allow access to different configurations. R W X E Permission Description R W X E Permission Description R - - - Allowed only to view the Configuration, given that the user is granted access to the application. - W - - Allowed to edit and delete the Configuration. - - X - Allowed only to execute the Configuration. R W - - Allowed to view, edit, and delete the Configuration, given that the user is granted access to the application. - W X - Allowed to edit, delete, and execute the Configuration. R - X - Allowed to view and execute the Configuration, given that the user is granted access to the application. R W X - Full access. - - - E Encrypted. The Reference Tab The Reference tab contains information about which other configurations that the current configuration refers to, and which other configurations that the current configuration is referenced by. Open The Reference tab The Reference tab contains two sub-tabs: Used By , which displays all the configurations that use the current configuration, and Uses , which displays all the configurations that the current configuration uses. If you want to edit any of the configurations, you can double-click the configuration to open it for editing. The History Tab The History tab contains version information for the configuration. Open The History tab In the table, the following columns are included: Column Description Column Description Version Displays the version number. Modified Date Displays the date and time when the version was saved. Modified By Displays the user name of the user that saved the version. Comment Displays any comments for the version. If you want to clear the configurations history, click the Clear Configuration History button. The version number is not affected by this.

---

# Document 593: REST Server_Deprecated Agent UDR Types - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204740335/REST+Server_Deprecated+Agent+UDR+Types
**Categories:** chunks_index.json

The REST type is used to pass data between the workflow and REST Server_Deprecated agent. Field Description Field Description error (Error(REST)) This field contains information related to internal processing errors. request (Request(REST)) This field contains the request from the client application to the REST Server_Deprecated agent. response(Response(REST)) This field contains the response from the REST Server_Deprecated agent to the client application. In the event of an internal error scenario, this field may contain the suggested response from the REST Server_Deprecated agent to the client application. The nested UDR types of REST are described below. Request Field Description Field Description authentication (Authentication (REST)) This field contains the OAuth 2.0 access token details and the basic authentication credentials. Includes the accessToken (AccessToken(REST)) and basicAuth (BasicAuth(REST)) udrs. body (bytearray) This field contains the HTTP message body. clientHost (string) This field contains the client IP. clientPort (int) This field contains the client port. contextID (long) This field contains the context ID headerFields (map<string,list<string>>) This field may contain an HTTP header. The header fields are stored as key-value pairs. httpMethod (string) This field must contain the HTTP method. pathParams (list<string>) This field may contain HTTP path parameters. Example Example URI: /registered/endpoint/foo/bar?k1=v1&k1=v11&k2=v2 Registered endpoint URI in the REST Server_Deprecated Profile is: /registered/endpoint It will appear in pathParams as: List[0]: foo and List[1]: bar Note! If there is a trailing slash at the end of the URI there will be no empty string segment in pathParams representing the string after slash (e.g. URI /test/ contains only one segment: "test"). This is how it appears: pathParams: List of 1 element [0]: test requestedUri: /test/ queryParams (map<string,list<string>>) This field may contain HTTP query parameters. requestedUri (string) This field contains a requested URI. Response Field Description Field Description body (bytearray) This field contains the HTTP message body. headerFields (map<string,list<string>>) This field may contain an HTTP header. The header is stored as key-value pairs. httpResponseCode (int) This field contains the response code from the server. Hint! When the body field contains a JSON formatted string, you can use the APL function jsonDecode to decode the contents. For further information about this function, see 21. JSON Functions in the APL Reference Guide . When the body field contains XML data, you can use the XML schema support in Ultra to decode the contents. For further information about XML and Ultra, see 18. XML Schema Support in the Ultra Reference Guide . AccessToken Field Description Field Description clientname (string) This field contains the name of the client provisioned for the access token by the authentication server. expirationTime (long) This field contains the expiration time of the access token. jwtRawData (string) This field contains the raw data, including the access token. scope (list<string>) This field contains a list of scopes authorized for the client to use. username (string) This field contains the username of the client. BasicAuth Field Description Field Description password (string) This field contains the password of the client. username (string) This field contains the username of the client. Error Field Description Field Description code (int) This field contains an internal error code. 200 - Ok 400 - Bad Request 401 - Unauthorised 404 - Not Found 408 - Request Timeout 500 - Internal Server Error description (string) This field contains the description of the error code.

---

# Document 594: FTPS Forwarding Agent Transaction Behavior - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204607689
**Categories:** chunks_index.json

The transaction behavior of the FTPS forwarding agent is presented here. For further information about the general transaction behavior, see Transactions in Workflow Monitor . Emits The agent emits nothing. Retrieves The agent retrieves commands from other agents and generates a state change of the file currently processed based on the commands. Command Description Begin Batch When a Begin Batch message is received, the temporary directory DR_TMP_DIR is created in the target directory, if not already created. Then, a target file is created and opened in the temporary directory. End Batch When an End Batch message is received, the target file in DR_TMP_DIR is closed and the file is moved from the temporary directory to the target directory. Cancel Batch If a Cancel Batch message is received, the target file is removed from the DR_TMP_DIR directory.

---

# Document 595: Parquet Examples - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205653401/Parquet+Examples
**Categories:** chunks_index.json

This example is simple, but will help you understand the basic functionality of Apache Parquet. Apache Parquet support is in the form of a pair of agents: The Parquet Decoder processes data from incoming Parquet documents, and the Parquet Encoder creates outgoing Parquet documents. The Parquet Encoder  and optionally the Decoder  makes use of a Parquet Profile that encapsulates the schema as well as encoding options. The Parquet Decoder agent receives Parquet data from file collectors in bytearray format, converts the data into ParquetDecoderUDRs (one UDR per record), and routes those UDRs forward into the workflow. The Parquet Encoder agent receives ParquetEncoderUDRs, converts the data into Parquet, and forwards bytearray data to a forwarder to (eventually) be written to a Parquet document. Example workflow with Parquet Decoder and Encoder Note! These Parquet agents are batch agents. Given that Parquet is a file-oriented encoding scheme that includes metadata about the entire document, batch agents  which natively support the processing of entire files  provide a tasteful lifecycle for Parquet. This section provides examples of how to use the Parquet agents in batch workflows. The examples are simple and intended to be used as a base for further development. The section contains the following subsections: Parquet Decoder Example Parquet Encoder Example

---

# Document 596: sldreg - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204646550/sldreg
**Categories:** chunks_index.json

usage: sldreg [topologyFilePath] [outputFilePath] This command allows you to generate the SLD (System Landscape Directory) configuration data for registration in the SAP Solution Manager. It is optional to enter the sld.conf file as an argument, but if you do not enter the sld.conf file, it is assumed that the relevant file is the default, namely MZ_HOME/etc/sld.conf . If you want to use another directory and another filename, you have the option to enter one or two different directories/file names. Example - sldreg Using No Arguments $ mzsh sldreg The file cluster-sld.conf will be generated in the directory $MZ_HOME/sap-sldreg/ . Using Directory Arguments $ mzsh sldreg mydirectory/1.conf mydirectory/2.conf The files 1.conf and 2.conf will be generated in the directory $MZ_HOME/mydirectory/ . The sld.conf file provides the static information for the output generated. You must run this command from the machine where the Platform is running. Return Codes The different return codes for the sldreg command are listed below: Code Description Code Description 0 Will be returned if the command is successful. 1 Will be returned if writing the temporary topology file fails. 2 Will be returned if converting to the sld topology file fails. 7 Will be returned if the the command is not executed on the machine where the Platform is running.

---

# Document 597: Legacy Desktop Properties - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204613093
**Categories:** chunks_index.json

This section describes the properties related to the Legacy Desktop that you can set in the STR. A subset of the properties below are explicitly set in the file default.conf during installation. This file must not be updated. If you want to set or override properties, you should update client.conf instead. Note! You can override properties in the STR using the Desktop Launcher. For more information, see Desktop Launcher . Advanced Properties java.library.path Default value: ${mz.home}/common/lib/native This property must be set to ${mz.home}/common/lib/native . mz.crypto.hash.algorithm Default value: SHA-256 This property is to use the crypto algorithm for hashing data, for example, files. mz.crypto.key.crypt Default value: AES This property is to use the crypto algorithm to encrypt and decrypt sensitive data within communications, for example, passwords. The value can be set to AES/GCM/NoPadding for a higher level of security. Note! If you have set the value to AES/GCM/NoPadding, and you try to decrypt data, and it does not succeed on the first attempt, the property value reverts to AES. mz.crypto.key.stream Default value: PBKDF2WithHmacSHA256 This property is to encrypt configurations when you have a user password for the encryption. The value can be set to PBEWithMD5AndDES . Note! If the decryption fails when using the selected algorithm, it will try to use the other algorithm. mz.editor.use.bold.italic Default value: true If the cursor is out of position in the APL or Ultra Editor in the Desktop, this may be due to problems with bold and italic fonts. To fix this issue, add this property and set the value to false . mz.gui.apl.color.comments Default value: #b22222 With this property you can specify the color you want to use for comments in the APL code. Colors are entered in hex format, e g "#666666". mz.gui.apl.color.constants Default value: # add8e6 With this property you can specify the color you want to use for constants in the APL code. Colors are entered in hex format, e g "#666666". mz.gui.apl.color.error Default value: #ff0000 With this property you can specify the color you want to use for errors in the APL code. Colors are entered in hex format, e g "#666666". mz.gui.apl.color.functions Default value: #0000ff With this property you can specify the color you want to use for functions in the APL code. Colors are entered in hex format, e g "#666666". mz.gui.apl.color.keywords Default value: #a020f0 With this property you can specify the color you want to use for keywords in the APL code. Colors are entered in hex format, e g "#666666". mz.gui.apl.color.normal Default value: #000000 With this property you can specify the color you want to use on your regular APL code. Colors are entered in hex format, e g "#666666". mz.gui.apl.color.owntypes Default value: #b8860b With this property you can specify the color you want to use for user defined types in the APL code. Colors are entered in hex format, e g "#666666". mz.gui.apl.color.strings Default value: #bc8f8f With this property you can specify the color you want to use for strings in the APL code. Colors are entered in hex format, e g "#666666". mz.gui.apl.color.types Default value: #228b22 With this property you can specify the color you want to use for types in the APL code. Colors are entered in hex format, e g "#666666". mz.gui.apl.syntaxfile Default value: "" With this property you can specify a file that contains further components within the APL code that you want to be able to highlight. The value should contain path and file name to the syntax file. mz.gui.apl.syntaxhighlighting Default value: yes This property specifies whether you want the text in your APL code to be color coded according to code definitions or not. The text is color coded according to the following definitions; brown = strings, dark blue = functions, light blue = constants, green = types, orange = user defined types, purple = key words, red = comments mz.gui.color.space.active Default value: "" This property can be added in order to change the background color of the Desktop. Possible values are: blue, green , yellow , orange , red , darkblue , darkgreen , magenta , or darkred . mz.gui.editor.autocomplete Default value: true This property specifies whether you want the editor to automatically close brackets, parentheses, and quotation marks. Disable it by specifying "false". mz.gui.editor.command Default value: notepad.exe This property specifies the command used for starting the editor you want to use for editing APL code or Ultra Formats. If you, for example, want to use Emacs the command should be emacs.exe . mz.gui.editor.menufontsizes Default value: 8,10,12,14,18,20,24,36 This property specifies the font sizes you want to be able to choose from when editing APL code or Ultra Formats in the APL Code Editor and the Ultra Format Editor. The current value is displayed between the "-" and "+" magnifying glasses to the left in the button list in the editors and can be changed by clicking on the magnifying glasses, or using the key combinations CTRL+ and CTRL- The current value can also be changed by opening the right-click popup menu and selecting Font Size . mz.gui.editor.name Default value: Notepad This property specifies the editor display name in menus. mz.gui.restart.tabs Default value: false This property determines whether the tabs that are open when exiting Desktop should be remembered or not. The default behavior is that the tabs will not be remembered, but setting this property to true will restore the open tabs the next time Desktop is opened. Note! Setting this property to true may cause the startup of Desktop to be bit slower. mz.gui.systemexport.default.dir Default value: "" This property can be added in order to configure the default directory you want to use when clicking on the Browse... button when doing a system export. The value must be the full path to an existing directory, e g /home/mz . mz.gui.systemimport.default.dir Default value: "" This property can be added in order to configure the default directory you want to use when clicking on the Browse... button when doing a system import. The value must be the full path to an existing directory, e g /home/mz . mz.gui.udreditor.limit Default value: yes This property can be used to support decoding of files that are larger than 3MB. When set to yes the UDR File Editor will only read up to 3MB and then stop, when set to no the UDR File Editor will continue to read until the end of the file is reached. mz.gui.ufl.color.comments Default value: #b22222 With this property you can specify the color you want to use for comments in the Ultra formats. Colors are entered in hex format, e g "#666666". mz.gui.ufl.color.constants Default value: # add8e6 With this property you can specify the color you want to use for constants in the Ultra formats. Colors are entered in hex format, e g "#666666". mz.gui.ufl.color.error Default value: #ff0000 With this property you can specify the color you want to use for errors in the Ultra formats. Colors are entered in hex format, e g "#666666". mz.gui.ufl.color.functions Default value: #0000ff With this property you can specify the color you want to use for functions in the Ultra formats. Colors are entered in hex format, e g "#666666". mz.gui.ufl.color.keywords Default value: #a020f0 With this property you can specify the color you want to use for keywords in the Ultra formats. Colors are entered in hex format, e g "#666666". mz.gui.ufl.color.normal Default value: #000000 With this property you can specify the color you want to use on your regular Ultra format text. Colors are entered in hex format, e g "#666666". mz.gui.ufl.color.owntypes Default value: #b8860b With this property you can specify the color you want to use for user defined types in the Ultra formats. Colors are entered in hex format, e g "#666666". mz.gui.ufl.color.strings Default value: #bc8f8f With this property you can specify the color you want to use for strings in the Ultra formats. Colors are entered in hex format, e g "#666666". mz.gui.ufl.color.types Default value: #228b22 With this property you can specify the color you want to use for types in the Ultra formats. Colors are entered in hex format, e g "#666666". mz.gui.ufl.syntaxfile Default value: "" With this property you can specify a file that contains further components within the Ultra formats that you want to be able to highlight. The value should contain path and file name to the syntax file. mz.gui.ufl.syntaxhighlighting Default value: yes This property specifies whether you want the text in your Ultra Formats to be color coded according to code definitions or not. The text is color coded according to the following definitions; brown = strings, dark blue = functions, light blue = constants, green = types, orange = user defined types, purple = key words, red = comments mz.gui.wfeditor.maxrows Default value: 500 This property can be added to change the maximum number of allowed rows in the workflow table. If this property has not been added, the default value of 500 rows will apply. mz.ultra.bitfield.codec Default value: "false" This property selects the implementation that is to be used for ultra bit_block . If set to true, the newly selected implementation will be used. Values that are not set using this property will use the old implementation. pico.bootstrapclass Default value: com.digitalroute.ui.MZDesktopMain This property specifies the bootstrap classes used by the Desktop. pico.cache.basedir Default: ${mz.home}/pico-cache This property must be set to ${mz.home}/pico-cache . pico.tmpdir Default: ${mz.home}/tmp This property must be set to ${mz.home}/tmp . pico.inhibit.startmessage Default value: "false" This property determines if the start message, generated when starting the Desktop client, should be logged or not. The default value is false , which means that the start message will be logged. Excluding the property entirely will have the same effect. Setting the property to false will result in no logging of the start message. pico.logdateformat Default value: "YYYY-MM-DD" This property specifies the date format to be used in the log files. See SimpleDateFormat (Java Platform SE 8 ) for further information. pico.name Default value: "<pico instance type>" This property specifies the name of the pico instance used for the Desktop. pico.pid Default value: $MZ_HOME/core/log This property specifies the directory you want the Desktop to write process ID (PID) file to. pico.stderr Default value: $MZ_HOME/core/log This property specifies the directory you want the Desktop to write standard errors to. pico.stdout Default value: $MZ_HOME/core/log This property specifies the directory you want the Desktop to write standard output to. pico.swing Default value: yes This property specifies how you want notifications to be made for this pico. For Desktops you usually want notifications to be made in the GUI, and in that case this property should be set to yes , meaning that Swing will be used. For other picos, such as the Platform and the Execution Context, this property will usually be excluded, which will result in notifications being sent to the console instead. pico.tmpdir Default value: ${mz.home}/tmp This property specifies the pico temp directory you want the Desktop to use. pico.type Default value: desktop This property specifies the type of pico instance used for the Desktop. swing.aatext Default value: true This property specifies that Java anti-aliasing should be used, which will improve the display of graphical elements in the user interface.

---

# Document 598: Workflow Bridge Real-time Forwarding Agent - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205002805/Workflow+Bridge+Real-time+Forwarding+Agent
**Categories:** chunks_index.json

The Workflow Bridge forwarding agent is responsible for sending data to a Workflow Bridge collection agent. The section contains the following subsections: Workflow Bridge Real-time Forwarding Agent Configuration Workflow Bridge Real-time Forwarding Agent Defining Forwarding Host Workflow Bridge Real-time Forwarding Agent Events Workflow Bridge Real-time Forwarding Agent Transaction Behavior, Input/Output Data and MIM

---

# Document 599: mzcli - wfstart - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/547980233/mzcli+-+wfstart
**Categories:** chunks_index.json

Usage usage: wfstart <pattern matching expression for workflow names> ... [-w <timeout s>] [-b] -w <timeout> = await workflow completion, times out after <timeout> seconds if wf is not completed -b = blocks until wf is completed This command executes one or more workflows. Example - Run wfstart Example interactive mode: $ java -jar mzcli.jar wfstart MyFolder.MyConfiguration.MyWorkflow --password MyPassword --port MyPortNumber Note that you must specify the location of the workflow to be started in the format <folder name>.<workflow configuration name>.<workflow name> Example non-interactive mode: $ mzcli wfstart MyFolder.MyConfiguration.MyWorkflow --password MyPassword --port MyPortNumber Note! If the workflow(s) is/are in a building state when running the wfstart command, "Configuration is building." will be displayed and the workflow(s) will not start unless you have used any of the -w or -b options described below. Example - Activate Multiple Workflows In this example, we activate all workflows in the folder myFolder starting with the letter 'D'. mzcli wfstart myFolder.D* Only workflows in Idle or Waiting state will be started. If the workflow is in another state, an error message will be shown stating why it did not start. Options Option Description Option Description [-w] Use this option to wait for workflow completion, that is wait for whichever comes first of either a timeout or received exit code declaring the status of the workflow; completed, aborted etc. For further information about exit codes, see mzcli Exit Codes . If the workflow is in building state, "Configuration is building." will be displayed, and the workflow will not be started until finished building. A timeout may then occur if the building takes too long. Note! The [-w] option does only allow one workflow to be started at the time. [-b] Use this option (block) to wait for the return code that indicates that workflow has for example completed, aborted or another code. For further information about exit codes, see the link above. If the workflow is in building state, "Configuration is building." will be displayed, and the workflow will not be started until finished building. Note! The [-b] option only allows one workflow to be started at the time. The [-w] option has precedence over the [-b] option. If both are used at the same time the [-w] will be active. Note! If the connection to the Platform is down the mzcli command will continue to run. The command will however not receive any exit codes until the Platform is up again. Timeouts will still occur. If the workflow is aborted or finished while the Platform was down, the correct exit code will be returned as soon as the Platform is up again. If a connection problem with the EC occurs during the workflow execution causing the workflow to become unreachable the mzcli command will wait for the workflow to either complete or abort. If workflows do not reconnect and are automatically reachable again the workflow must be handled manually. The standard alarm functionality can be used to detect unreachable workflows. Return Codes Listed below are the different return codes for the wfstart command: Code Description Code Description 0 Will be returned if the command was successful. 50 Will be returned if the argument count is incorrect. 51 Will be returned if the argument parse fails. 70 Will be returned if the workflow is not found.* 80 Will be returned if no user is logged in. 90 Will be returned if an unexpected error occurred. 230 Will be returned if the workflow is already running. 231 Will be returned if permission is denied (no execute permission). 232 Will be returned if the workflow does not exist.* 240 Will be returned if the workflow is invalid

---

# Document 600: HTTP Standard Setup - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204744666/HTTP+Standard+Setup
**Categories:** chunks_index.json

TLS is configured with properties that are typically set on the container level. Note! Quotes and double quotes surrounding the target path and property names are required to prevent overwriting of properties. For further information, see Working with STR . The available properties are: mz.httpd.security Set the value of this to property to true (default value is false ) to enable encryption. $ mzsh topo set 'topo://container:<container>/val:common."mz.httpd.security"' true mz.httpd.security.keystore Use this property to set the keystore path, which must be absolute. $ mzsh topo set 'topo://container:<container>/val:common."mz.httpd.security.keystore"' <keystore path> mz.httpd.security.keystore.password Use this property to set the password for the keystore, as selected in keytool . $ mzsh topo set 'topo://container:<container>/val:common."mz.httpd.security.keystore.password"'  `mzsh encryptpassword <password>` mz.httpd.security.key.password Use this property to set the password for the key, as chosen in keytool . By default, this is the same as the keystore password. (This is the default for keytool ). $ mzsh topo set topo://container:<container>/val:common.mz.httpd.security.key.password  `mzsh encryptpassword <password>` Note! After having configured the properties, this section: # Http url to platform, e.g http://localhost:9000 if [ -z "${MZ_PLATFORM+x}" ]; then MZ_PLATFORM="http://localhost:9000" export MZ_PLATFORM in the $MZ_HOME/bin/mzsh file needs to be updated to state https instead of http for both the Platform and the ECs.

---

# Document 601: Oracle Database - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205783135/Oracle+Database
**Categories:** chunks_index.json

Data that is persisted by the Platform is partially stored in the file system and partially in one or more databases. For installations where Oracle or PostgreSQL is used, two users are created: O wner of database objects (default: mzowner) Runtime user (default: mzadmin ) The passwords for those two users are set in the file install.xml file at installation: Property Description install.ora.jdbc.password Password for runtime user (Oracle) install.ora.password Password for owner of database objects (Oracle). install.pg.jdbc.password Password for owner of database objects (PostgreSQL). install.ora.password Password for runtime user (PostgreSQL) It is recommended that the passwords in install.xml are removed after the installation. For information about how to change the password of the runtime user, see Changing Database Password .

---

# Document 602: General Preparations Platform - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204604175/General+Preparations+Platform
**Categories:** chunks_index.json

A UNIX user must be created to execute the installation and run the MediationZone instance. Preferably create the user mzadmin , which is referenced throughout this document. Important! The mzadmin user must have read/write permissions for all the directories stated in the Environment Variables. To avoid security risks, do not use the root user in place of the mzadmin user for the application. For security reasons, ensure that the read/write/execute permissions for $MZ_HOME directory and sub-folders are given only to authorized users or user groups to prevent unauthorized access to any of the system files. During the installation procedure, the default application user , mzadmin , is automatically created - note that this is not related to the OS user or the DB user. You cannot create or use other application users than this default user until after the installation is complete. MediationZone should always be administrated by users belonging to the access groups created in MediationZone. See Access Controller for more information on how to create users and access groups. The final part of the general preparations is to ensure that the necessary third party products are installed, which are the required Java version, the platform database to be used (Oracle, PostgreSQL, SAP HANA, or Derby) and any additional software required by various parts of the system. See System Requirements for more information. This section includes the following subsections: Setting Environment Variables for Platform Preparing the Installer File for Platform Updating the Installation Properties for Platform Extracting Files for Platform

---

# Document 603: Policy Control (PCRF) 4G - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205658491/Policy+Control+PCRF+4G
**Categories:** chunks_index.json

Policy and Charging Control Function (PCRF) is defined using the policy and charging protocol architecture as outlined by 3GPP TS23.203 as the baseline. The purpose of the function is to act as Quality of Service (QoS) coordinator between the external PDN (Public Data Network) and the EPC (Evolved Packet Core), managing: Verification and enforcement of QoS parameters. Facilitate usage charging in accordance with QoS parameters. This Right to Use (RTU) grants the licensee the right to use DigitalRoutes MediationZone software in accordance with this definition.

---

# Document 604: User Settings - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204997359/User+Settings
**Categories:** chunks_index.json

Click the User icon on the top right side of the Desktop Online User Interface to open the User Settings menu. Open User Settings menu The menu contains the following options: Option Description Option Description Profile Click the Profile option to open the User profile dialog. Open User profile dialog The following settings are available: Username - Displays your username. Name - Displays your full name as registered in the system. Email - Displays your email address as registered in the system. Enable High Contrast Mode - You can enable the High Contrast mode to make texts across the system easier to read in case of visual impairment problems. Theme - You can select between Light or Dark mode. You can also choose to follow the mode set by the Operating System by selecting System . About Click on the About option to display information about your installation. Open About dialog Installed packages Click the Installed packages option to display information about all the installed packages in the system. The same information can be obtained by using the mzsh https://infozone.atlassian.net/wiki/x/tSMyD command. You can use the Search field to search for any specific package. Open Installed packages dialog Downloads Click the Downloads option to open the Downloads dialog. Open Downloads dialog From this dialog you can download Desktop Launcher and Devkit. Click on the respective file names and they will be downloaded. Change password Click the Change password option to change your password. Open Change password dialog Enter your Current password, enter a New password , and then reenter the new password in the Confirm password field. Click Submit to apply. Log out Click this option to log out of Desktop.

---

# Document 605: mzcli - ultra - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/547979822/mzcli+-+ultra
**Categories:** chunks_index.json

Usage ultra <command> [options] Commands: export <target-jar-file> Export ultra classes to given jar file import <source-jar-file> Import ultra classes from given jar file list List all ultra classes in the system Options: -v --verbose Output verbose -h --historic-only Filter out only historic ultra classes When you make changes to an ultra format, historic formats are stored on the system. However, these are not included when you perform a system export. You can use the ultra command to export both current and historic ultra formats from one system and import them as historic formats in another. This is useful when the target system must be able to handle, for example, persisted runtime data that is consistent with a previous version of an Ultra format. Commands Command Description Command Description export Use the export command to write Ultra formats on the system to disk. These will be stored in a JAR file that contains the Ultra class definitions. Example - Exporting Ultra formats ultra export /home/user/mz/ultra/ultraexport.jar Note! The export command cannot overwrite an existing export file. import Use the import command to import Ultra formats from disk. For each Ultra format (class) in the specified JAR file, the command will perform the import if the format is not already present in the Code Server. If a format in the JAR file is historic or not does not matter during import, since it will be considered historic in the target system. Example - Importing Ultra formats ultra import /home/user/mz/ultra/ultraexport.jar list Use the list command to list Ultra formats on the system. Example. Listing Ultra formats $ ultra list Note! If an empty list field disappears when the ascii encodes, you need to set a system property called mz.ultra.terminator.backcomp . If set to true, empty list fields do not disappear and backward compatibility is preserved if needed. To set this up, do the following: Set the config property mz.ultra.terminator.backcomp to true in platform.xml. R estart the platform. R egenerate Ultra formats - for more information see mzcli - regenerateconfigs . R e-run the workflow. Options Option Description Option Description [ -v --verbose ] Use this option for detailed output from the ultra command. [ -h --historic-only ] Use this option to only include historic formats in the export. Note! This option is not applicable for the import command. Return Codes Listed below are the different return codes for the ultra command: Code Description Code Description 0 Will be returned if the command was successful. 1 Will be returned if the command could not be interpreted, e g if a option that does not exist has been entered. 2 Will be returned if the input file is not found or if the output file already exists.

---

# Document 606: Unit Test - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204741593/Unit+Test
**Categories:** chunks_index.json

This page describes the Unit Test configuration. Prerequisites The reader of this information should be familiar with: UDR structure and contents Analysis Programming Language Python Programming Language Unit Test Configuration Use the Unit Test configuration to write unit tests for APL code in Python code language. Use the Unit Test Runner Task Agent to run the unit tests. The agent is described in Appendix 3 - Task Workflow Agents . Open Unit Test configuration Enter code in the code area. Below the text area there are line, column and position indicators to help you find syntax errors. For information on how to import code into the code editor, see Importing Code . Function blocks Unit Test code is divided into different function blocks that serve as execution entry-points. The Unit Test contains initialize , denitialize , and test function blocks. If a function block begins with " test " it is a test function block. A simple test to illustrate how it works below. We create a en error in the initialize block, then we have the actual test where we find the log id from the log, and at last we remove the log entry in the deinitialize block. Example from time import sleep logid = None def initialize(): print('test starting') logError('Something bad has happened') def test_find_new_log(): global logid sleep(5) myit = logSearch(toDate=drdate.now(), fromDate=drdate(drdate.now().timestamp - 60), severities=['Error']) for x in myit: logid= x['Id'] print(x) def deinitialize(): print('Removing the new log entry') logRemove(logid) myit = logSearch(toDate=drdate.now(), fromDate=drdate(drdate.now().timestamp - 60), severities=['Error']) for x in myit: print(x) Internal Unit Test Functions For the internal Unit Test functions see Unit Test Functions . Toolbar The toolbar includes the following options: Option Description Option Description New Creates a new Unit Test configuration in a new tab. You can only create a configuration of the same kind as the one in the tab you are working in. Open Opens a saved configuration that is visible in a new tab. You can only open a configuration of the same kind as the one in the tab you are working in. Save Saves the configuration. After you click Save, a dialog box opens. In the Version Comment text box, you can enter a description of the changes that you have made, then click OK . Save As Select to save the configuration with a new name. You can only use a-z, A-Z, 0-9, "-" and "_" to name a configuration. After you click Save As, a dialog box opens. Select in which folder to save the configuration. In the Version Comment text box, you can enter a description of the changes that you have made, then click OK . Permissions Set the owner of the configuration as well as Read, Write and Execute permissions for the groups accessing the configuration. Validate Validates the current Unit Test code. The status of the validation is displayed in a dialog. Upon failure, the erroneous line is highlighted and a message, including the line number, is displayed. References Select to see the Reference Viewer listing references to and from the active configuration. The Reference Viewer includes the following tabs: Used By : Displays a list of other configurations that refer to the configuration. For example: a workflow group that refers to a workflow. Uses : Displays a list of other configurations that the configuration refers to. For example: a workflow configuration that refers to a specific profile. Access: Displays the group of users that may access the configuration, and the user that created (owns) the configuration. History Displays a drop-down list with file changes in the lower section of the window. If a file is selected, comments related to the file change are displayed. Undo Select this option to undo your last action. Redo Select this option to redo the last action you "undid" with the Undo option. Cut Cuts your selection and copies it to the clipboard. Copy Copies selection to the clipboard. Paste Pastes the clipboard contents. Find Displays a dialog where you can search for text and, if required, replace it. Find Again Repeats the search for the last string entered in the Find dialog. Unit Test Code Editor Assistance To provide assistance when writing code in the Unit Test code area, there are several features in place: Syntax Highlighting - Different parts of the code are color coded according to type Right-Click Menu - A menu which provides editor options Code Completion - Code Completion which helps you to write Unit Test code in the Code Editor by providing context-sensitive proposals. Code Editor Outline - An outline navigation panel to make it easier to navigate in a Unit Test code configuration For further information, see Python Code Editor Assistance . Code Editor Outline To make it easier to navigate in a Unit Test code configuration, there is an Outline navigation panel to the right of the Code Editor. The Code Editor Outline provides a view of all the blocks, variables and methods in a Unit Test code configuration and makes it possible to easily navigate between different types in the Unit Test code. The entries in the navigation panel are automatically updated as you make valid entries in the Code Editor. You can also filter what you want to display in the Outline navigation panel. You can search for a specific block, variable, or method using the free text field, or by selecting one of the quick filter buttons: b Click to display or hide the blocks within the Unit Test code configuration displayed in the Code Editor. v Click to display or hide the variables within the Unit Test code configuration displayed in the Code Editor. m Click to display or hide the methods within the Unit Test code configuration displayed in the Code Editor. The Outline navigation panel can be hidden or visible. By default, it is visible and all the elements are displayed. To hide or display the navigation panel, click the vertical Outline button to the right of the Code Editor. Configuration Diff Panel To compare the current version of a Unit Test configuration that is displayed with a previous version of the same configuration, use Configuration Diff to compare the two versions side by side. To hide or display the Configuration Diff panel, click the Diff button to the right of the Code Editor. The panel can be hidden or visible. By default, it is hidden. Navigate through the differences by scrolling both panes in parallel using the scroll bar to the right of either pane. To scroll through each pane separately, hover over the pane to scroll through, and use the scroll wheel on your mouse. To skip through each difference in the panes, use the navigation buttons, Previous, Next, and Refresh, which are described below. Item Description Item Description History Click the History drop-down box to select the version to compare. You can also display and view encrypted configurations. If you select an encrypted configuration, you are prompted to enter the relevant password to decrypt the configuration. Previous Click this button to skip to the previous difference in the configurations. The previous difference is highlighted in green. Next Click this button to skip to the next difference in the configurations. The next difference is highlighted in green. Refresh Click this button to display the updated version of the configuration. Configurations are not locked when displayed in Configuration Diff. If another user has modified and saved a configuration that you are viewing in this tool, click this button to view the latest updated version.

---

# Document 607: SFTP Collection Agent Events - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204740545/SFTP+Collection+Agent+Events
**Categories:** chunks_index.json

Agent Message Events An information message from the agent, stated according to the configuration done in the Event Notification Editor . For further information about the agent message event type, see Agent Event . Ready with file: filename Reported along with the name of the source file that has been collected and inserted into the workflow. File cancelled: filename Reported along with the name of the current file, each time a Cancel Batch message is received. This assumes the workflow is not aborted. For further information, see Retrieves in SFTP Collection Agent Transaction Behavior . Debug Events Debug messages are dispatched when debug is used. During execution, the messages are shown in the Workflow Monitor and can also be stated according to the configuration done in the Event Notification Editor . For further information about the debug event type, see Debug Event .

---

# Document 608: Oracle RAC - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204637891/Oracle+RAC
**Categories:** chunks_index.json

With Oracle Real Application Clusters (RAC) it is possible to use two database instances at the same time, when extracting data from the database. The settings assume that an existing Oracle Instance is ready for MediationZone use. Install Oracle RAC, create a database with shared storage on the cluster nodes and listeners according to normal Oracle RAC procedures. Modify the install.xml file to include the SID of one of the instances of the RAC cluster and modify other obvious information (such as the location of the shared storage place of the database files and the Oracle installation). Modify and run MediationZone Oracle scripts. Modify the oracle_create_instance.sh file. The following passage in the oracle_create_instance.sh file should be commented out. It is, however, important to make sure that listeners are running correctly for RAC instances/services since modification of the script causes it to not check for the presence of running listeners. # Make sure that the listener is up for our instance. # It is not really needed in this script but it will be # necessary in the installer. # lsnrctl status | grep "Instance "${ORACLE_SID}"" > /dev/null # # if [ $? -ne 0 ] ; then # echo "The listener for $ORACLE_SID is not running, abort!" 1>&2 # exit 1 # fi Modify oracle_create.sql . The following passage should be commented out. This makes the script create tables and users in the RAC instances, rather than create a new database/instance. -- Create the database -- prompt Creating database -- CREATE DATABASE orac1 -- DATAFILE '/opt/oradata/orac/mz/ts_orac1_system.dbf' -- SIZE 250M REUSE AUTOEXTEND OFF -- sysaux datafile '/opt/oradata/orac/mz/ts_orac1_sysaux.dbf' -- size 100M autoextend off -- UNDO TABLESPACE MZ_UNDO_TS_01 -- DATAFILE '/opt/oradata/orac/mz/ts_orac1_undo01.dbf' -- SIZE 125m REUSE AUTOEXTEND OFF -- LOGFILE -- group 1 ('/opt/oradata/orac/mz/ts_orac1_log01.log') size 15M, -- group 2 ('/opt/oradata/orac/mz/ts_orac1_log02.log') size 15M, -- group 3 ('/opt/oradata/orac/mz/ts_orac1_log03.log') size 15M, -- group 4 ('/opt/oradata/orac/mz/ts_orac1_log04.log') size 15M; When running the MediationZone *.sql scripts, the original file $ORACLE_HOME/dbs/init*.ora (* = instance name) is replaced with a new .ora file. The original file has to be restored, hence the file created by MediationZone should not be used. The easiest way to restore the init<instance>.ora file is to copy it from the second node, since they should be identical on both hosts. An example of an init<instance>.ora is shown next: oracga1.local_listener="(address=(protocol=tcp) (host=10.0.0.111)(port=1521))" oracga2.local_listener="(address=(protocol=tcp) (host=10.0.0.112)(port=1521))" SPFILE='+ORAC50/oracga/spfileoracga.ora' The three occurrences of create tablespace should also be changed. Remove the path after DATAFILE and remove REUSE before AUTOEXTEND , so it looks like this: create tablespace ts_mz_tab datafile size 200m autoextend off extent management local uniform size 250k SEGMENT SPACE MANAGEMENT AUTO; Run oracle_create_instance.sh

---

# Document 609: Diameter Request Agent - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204738524/Diameter+Request+Agent
**Categories:** chunks_index.json

By including both the Diameter Stack and the Diameter Request agents in a workflow you enable MediationZone to act as a Diameter client. You apply a Diameter Request agent to your workflow in order to transmit requests from the w orkfl ow. The section contains the following subsections: Diameter Request Agent Configuration Diameter Request Agent Events Diameter Request Agent Input/Output Data and MIM

---

# Document 610: GTP' LGU Collection Agent - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204739123/GTP+LGU+Collection+Agent
**Categories:** chunks_index.json

This section describes the GTP' LGU Collection agent. This is a collection agent for real-time workflow configurations. The GTP' LGU Collection agent collects messages and datagrams of charging protocol of type GTP' from GSM agents. By collecting this information the GTP' LGU Collection agent lets the platform act as a Charging Gateway device, providing Charging Gateway Functionality (CGF) within UMTS/GPRS networks. Open UMTS/GPRS Charging Gateway Functionality The GTP' LGU Collection agent awaits initialization from the GSN nodes of types SGSN and GGSN. When initiated, the agent interacts with the nodes over Datagram Protocol (UDP). In case of failure, the GTP' LGU Collection agent can be configured to notify the GSN nodes to route the incoming data to another host. An alternative configuration is to set up a second and identical workflow, on a separate Execution Context (EC). The agent counts the received requests and publishes those values as MIM values. Those MIM values can also be viewed from the command line tool with the wfcommand printcounters command. The GTP' LGU Collection agent supports IPv4 and IPv6 environments. Interaction Scenario The following scheme demonstrates the message and data transfer between the GSN nodes and the GTP' LGU Collection agent: When started, the GTP' LGU Collection agent sends a Node Alive Request message to all configured GSN nodes. The GTP' LGU Collection agent awaits a Node Alive Response and transmits Node Alive Request repeatedly, according to the Advanced tab settings. For further information, see Advanced Tab in GTP' LGU Collection Agent Configuration . After a successful Node Alive Response the GSN node starts to transmit Data Record Transfer Requests to the agent. When a request is collected, the agent replies with a Data Record Transfer Response message. When the GTP' LGU Collection agent receives an Echo Request message from a GSN node, it emits a GTPEchoRequestUDR to the workflow. The UDR contains the IP address, port of the connected GSN node, and timestamp (sent time) of the Echo Request message. When the workflow is stopped, it stops immediately by default. However, if you want Redirection Request messages to be sent to all configured GSN nodes when stopping the workflow, you can select the Redirection Request checkbox in the Miscellaneous tab in the Configuration dialog of the GTP' LGU Collection agent. The workflow then waits for a Redirection Response message from each of the GSN nodes before stopping. If the Max Wait for a Response (sec) value is exceeded, the workflow stops, regardless of whether Redirection Response messages from the GSN nodes have been received or not. The section contains the following subsections: GTP' LGU Collection Agent Configuration GTP' LGU Collection Agent Input/Output Data and MIM GTP' LGU Collection Agent MZSH Commands, Events and Limitations GTP' LGU Collection Agent UDR

---

# Document 611: Workflow Monitor - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204604893/Workflow+Monitor
**Categories:** chunks_index.json



---
**End of Part 28** - Continue to next part for more content.
