# RATANON/MZ93-DOCUMENTATION - Part 66/112

---
**Dataset:** ratanon/mz93-documentation
**Part:** 66 of 112
**GitHub:** https://github.com/ratan0n/docs/tree/main/mz93-documentation
**Size:** ~69.2 KB
---

The DRAgentInspectable class is used both by the Workflow Editor and by the workflow engine to obtain information about the agent and its configuration status. Inspectable classes must extend DRAgentInspectable . The Workflow Editor queries the code server for such instances in order to determine which agents are available. Open Inspectable Agent Details To obtain the user interface configuration panel, the agent name and its representing icon, the Workflow Template uses the methods: getUIClassName getConfigClassName getCommandUIClassName getName getIconName The workflow engine uses the getExecClassName method to obtain the executable class. The class names and icon name must contain the full package name. If the agent publishes any MIM resources, these will be returned by the getMIMEntries method. If so, the Workflow Template will publish them for use by other agents. If the agent supports update of configurations, the method supportsUpdate must be implemented and return true. Incoming and Outgoing Data Types The Workflow Template automatically compares and validates output types from one agent with the input types on a target agent by querying the methods getInputTypes and getOutputTypes . For some agents these types may be static, while for others they depend on the configuration. Since different output types may be distributed on different outgoing routes, the name of each outgoing route is sent along as a parameter. Collection agents never have any input types. If a processing agent has no output types, it is classified as a forwarding agent in the Workflow Template. Validation A user interface dialog validates according to the validation rules specified in the configuration contract. However, some items referred to, such as route names, might have changed since the dialog was confirmed. The Inspectable class also has methods for validation. The purpose of the validate method, is to catch things that may have changed after the dialog was confirmed. For a workflow configuration with multiple workflows, each workflow might need to be validated against the template, then the validateFields method is used. If the agent has any configuration data, the validate and validateFields methods are called every time a workflow is saved and every time the Validate... option is selected from the Edit menu of the Workflow Template. A workflow configuration is considered valid if it contains at least one valid workflow and at least one input agent, if all the agents are properly connected, if all the agents have a valid configuration, if there are no data type compatibility problems between connections and if all the agents return null from their validate and validateFields methods. Note! The Workflow Template handles validation of the incoming and outgoing data type compatibility, meaning this does not have to be done using the validate or validateFields methods. The default implementation of the validate method calls: getExpectedMIMNamedEntries getExpectedRouteNames getExpectedExecutionContextName getInputTypes getOutputTypes and checks that the expected MIMs and routes really exist, and that input and output types match the workflow configuration. If used in standalone workflows, agents that depend on storage can override the getExpectedExecutionContextName method to return the location where their storage is configured. This allows the validate method to ensure that the location of the storage matches the scheduling of the workflow, thus preserving the workflow's standalone integrity. Best Practices Help the user to configure your agent: Try to make faulty configurations impossible in the GUI. Display information about problems as soon as possible. When designing your agent: Using the right GUI components, such as check boxes with valid options instead of a text box input, makes it impossible to enter invalid input. If the validateInput callback in the UI returns a string that is not null, this text will be displayed as a validation error to the user. If your checks are correct, return the value from the superclass' validateInput method. The configuration will be validated against the configuration contract's validation rules for each field. The validationErrorFound callback allows you to configure the GUI to display invalid fields directly to the user, which is useful if multiple tabs or other complex GUI elements have been included. The validate callback in the Inspectable class is intended for checking agent external dependencies, such as availability of MIMs published by other agents, or that selected profiles exist. Ensure that the superclass' validation method is used. The validateFields callback is given an actual workflow, i e the merge of the workflow configuration with values from the workflow table. This callback can be used to validate field values against each other. For example if you have a min and max range, the validateFields callback can be used for checking that max value is larger than or equal to the min value. Tooltip When the mouse pointer rests on a agent, the Workflow Template displays a tooltip text, aiming to contain a subset of the most important configuration values and, optionally, the current transaction data of the agent. The latter is only necessary if it is useful to the user. The involved method is getConfigTooltip . This must be implemented either in the Inspectable class, or be defined in the configuration contract file. Otherwise the tooltip displays Not Configured in the tooltip, although it may be configured. The Java class generated from the contract file will also contain a getConfigTooltip method. Both methods return an array list containing string pairs as label, value, label, value, etc.

---

# Document 1556: Event Category - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205030622/Event+Category
**Categories:** chunks_index.json

An Event Category is defined in the Event Notification configuration. The Event Category is used to send any kind of information to a Column, as opposed to a direct mapping of a MIM resource. The Event Category name is a string which is used as an argument in the dispatchMessage APL function to route messages to a Column. Open The Event Category dialog, where a user-defined string is specified to be used as the Name for the Category field in an event When the Event Category is defined it is mapped against a Match Value in the Event setup tab. Then the defined Event Category is used as a parameter in the APL code with the dispatchMessage function. Break

---

# Document 1557: CCBatchCycleUDR - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205653831/CCBatchCycleUDR
**Categories:** chunks_index.json

The CCBatchCycleUDR is a container used to correlate a charging request with the corresponding charging answer received from SAP Convergent Charging. The following fields are included in the CCBatchCycleUDR : Field Description Field Description answer (AbstractCCUDR) One of the Batch Answer UDRs defined in Batch Answer . freeField (any) This free field can be used to store contextual information regarding the request. For example it can be used to store the diameter request context associated with a charging request which is required to push the answer back on the diameter stack. Latency (long) This read only field will only be populated when the agent emits the answer in the workflow. It contains the latency introduced by the processing of this UDR. request (AbstractCCUDR) One of the Batch Request UDRs defined in Batch Request . requestId (string) A free field which is intended to contain the requestId provided by the external system StartProcessingTime (long) This read only field will only be populated when the agent emits the answer in the workflow. It contains a timestamp which corresponds to the time when the UDR has been submitted to SAP Convergent Charging.

---

# Document 1558: Reference Data Management Dashboard - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204743416/Reference+Data+Management+Dashboard
**Categories:** chunks_index.json

This section will refer to the Reference Data Management dashboard found on the Desktop and all relevant materials and functions associated with the dashboard. The Reference Data Management dashboard will allow you to do the following: Query the results from a table based on the Reference Data Management profiles in the system Filter certain results by using expressions in your query Insert new rows in your table Edit existing fields in your query results Import data from a CSV file Export the entire table or queried result into a CSV file You can access the dashboard from the Manage View. Go to Manage  Data Management and then select Reference Data Management . Note! Temporary files are created on the Platform host when the user executes queries via Reference Data Management. These temporary files, stored in $MZ_HOME/tmp/rowset , are removed automatically when the user session expires. Users sessions expire automatically after six (6) hours. For Oracle Database Users! For Oracle database, the CLOB datatype is not supported by the Reference Data Management. You will be unable to view the contents of a CLOB datatype. When you click on the Reference Data Management button a page will appear that looks like this. Open Initial Reference Data Management Dashboard page Click on Get Started to begin querying. You can refer to the Steps to query a result for more information. Furthermore, you can use these links to navigate to the information you need when working with the dashboard: Querying A Table In Reference Data Management Manipulating The Data In Reference Data Management Importing Or Exporting Data In Reference Data Management Query Result View Once you have gotten a query result, the status bar above the toolbar will display query configuration information. The status bar summary will contain selected Reference Data Profile and Table, and if Last Update feature is enabled, the most recent Last Update user and datetime. Click on the status bar to reveal the list of query expressions applied for the query result. Subject to user permission settings that is configured via the Reference Data Profile and Access Controller, appropriate table toolbar buttons will be enabled above the query result view. This bar allows you to select from the operations that you will want to use Reference Data Management for, such as Query , searching for specific data in the columns, Insert Row , Refresh , Export , Import and Delete . At the bottom of the view, you get the Previous Data Set and Next Data Set buttons at the footer bar to switch between data sets. The footer also displays data set information and the total of rows for the entire query result. The data set buttons and information are only available if the query result total rows exceeds the Data Set Size (configurable in the Query dialog). Open Sample query result in the query result view Status Bar Status Description Status Description Current Profile Reference Data Profile selected in the Query dialog. Current Table Table selected in the Query dialog. Last Update User If Last Update feature is enabled for this table in the Reference Data Profile, the name of the most recent user to perform an operation on a record is displayed. Last Update Datetime If Last Update feature is enabled for this table in the Reference Data Profile, the most recent datetime an operation is performed on a record is displayed. Query Expressions Click on the status bar to reveal the list of query expressions configured in Query dialog if any. Table Toolbar Options Options Description Options Description Query Opens the Query dialog, allowing you to tweak with the expressions or query configurations. Refer to Querying A Table In Reference Data Management for more information. Search Bar Filter the current data set to display rows that have any column values that is matching the search bar input. The matched row count is displayed on the right within the search bar. Insert Row Opens the Insert Row dialog for you to add more rows of data into your table. Refer to Inserting rows for more information. Note! This is only applicable to Standard Search Type . Refresh Triggers a query from the Database with the current query configurations and refreshes the query result view with the retrieved updates if any. Note! This is only applicable to Join Table Search Type . Export Exports the query result view or the entire table into a file. Refer to Exporting data for more information. Note! This is only applicable to both Search and Join Table Search Type . Import Imports bulk data from a file into the table. Refer to Importing data for more information. Note! This is only applicable to Standard Search Type . Delete Marks all rows in the data set for deletion. Refer to Removing rows for more information. Note! This is only applicable to Standard Search Type . Footer Bar Options Description Options Description Previous Data Set Switches to the previous data set of the query result. Next Data Set Switches to the next data set of the query result. Data Set Information Shows the current data set number, the data set count and the value of Data Set Size configured in Query dialog. Total Row Count Shows the number of rows that are in the query result. Note! When switching between data sets, any uncommitted changes will be discarded.

---

# Document 1559: Removing Runtime Data - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204645729/Removing+Runtime+Data
**Categories:** chunks_index.json

After running a KPI Management system, you may have temporary runtime data at different processing stages in Kafka and in Spark. In some cases you may to remove this data, for example: To process KDR UDRs with timestamps that belong to a closed period. These will normally be discarded. To perform multiple test runs that should generetate identical results. To immediately remove data from Kafka topics that cannot be processed, e g after restart of the Spark cluster. Note! As prerequisite, the scripts must be prepared according to Preparing and Creating Scripts for KPI Management The following steps are required to remove all existing runtime data: Stop the KPI Management workflows. Stop the Spark cluster. $ stop.sh Stop the kpi-app and run: clean rm -fr $SPARK_APP_CHECKPOINT_DIR Remove data stored by Kafka, Zookeeper, and Spark. Note! Calculated KPIs for the current periods will be lost. $ rm -rf $MZ_HOME/storage/kafka/* $ rm -rf $MZ_HOME/storage/zookeeper/* $ rm -rf <checkpoint directory>/* The default checkpoint directory is mz_kpi app/data/spark-checkpoint-dir/<spark application name> . Start Kafka and Zookeeper. bin/zookeeper-server-start.sh config/zookeeper.properties & bin/kafka-server-start.sh config/server.properties Start Spark $ start_master_workers.sh Recreate the Kafka topics that are specified in the service configuration. For further information, see Spark, kafka and zookeeper . Run submit.sh kpiapp to submit the Spark application(s). See Submitting a Spark Application . Start the KPI Management workflows.

---

# Document 1560: Extract Database Definition Files for PostgreSQL - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204604207
**Categories:** chunks_index.json

When PostgreSQL and MediationZone are not installed on the same machine (the database may be installed on any machine within the network), the database definition files need to be transferred to the PostgreSQL machine before the database can be created. On the PostgreSQL machine (as postgres UNIX user): transfer the database-setup.tar file from the MediationZone machine and extract the files: $ tar -xvf ./database-setup.tar Enter the database directory $ cd database

---

# Document 1561: SCP Agents Server Identification - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205653924/SCP+Agents+Server+Identification
**Categories:** chunks_index.json

The SCP agent uses a file with known host keys to validate the server identity during connection setup. The location and naming of this file is managed through the property: mz.ssh.known_hosts_file It is set in the <pico name> .conf file of the relevant EC to manage where the file is saved. The default value is ${mz.home}/etc/ssh/known_hosts . The SSH implementation uses JCE (Java Cryptography Extension), which means that there may be limitations on key sizes for your Java distribution. This is usually not a problem. However, there may be some cases where the unlimited strength cryptography policy is needed. For instance, if the host RSA keys are larger than 2048 bits (depending on the SSH server con fi guration). This may require that you update the Java Platform that runs the EC. For unlimited strength cryptography on the Oracle JRE, download the JCE Unlimited Strength Jurisdiction Policy Files from http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html . Replace the jar fi les in $JAVA_HOME/jre/lib/security with the fil es in this package. The OpenJDK JRE does not require special handling of the JCE policy fi les for unlimited strength cryptography.

---

# Document 1562: Elasticsearch Profile - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204639581/Elasticsearch+Profile
**Categories:** chunks_index.json

An Elasticsearch profile is used to read and write data in an Elasticsearch Service in AWS and can be accessed by batch workflows using Aggregation agents. Elasticsearch is supported to provide a scalable distributed storage option. It is a search and analytics engine that provides high scalability on a cloud infrastructure with cluster scaling options and replication across several domains, and the capacity to query large amounts of data. Compared with storing to disk, Elasticsearch provides greater capacity, however, you must bear in mind that heap and execution time are increased, by what percentage depending on the amount of data being processed. Note! You cannot run more than one batch workflow to use the same aggregation profile, configured to use Elasticsearch, at the same time. The Elasticsearch profile is loaded when you start a workflow that depends on it. Changes to the profile become effective when you restart the workflow. The profile has been verified on Elasticsearch version 6.0. For further information on the use of Elasticsearch, see https://www.elastic.co/guide/en/elasticsearch/reference/6.0/index.html . Configuration To create a new Elasticsearch profile, click the New Configuration button from the Configuration dialog available from Build View , and then select Elasticsearch Profile from the menu. The contents of the menus in the menu bar may change depending on which configuration type has been opened in the currently displayed tab. The Elasticsearch profile uses the standard menu items and buttons that are visible for all configurations, and these are described in Common Configuration Buttons . The Edit menu is specific for the Elasticsearch profile configurations. Item Description Item Description External Re fer ences Select this menu item to Enable External References in an agent profile field. This can be used to configure the use of the following fields, and the respective external reference keys available: Index Node Config Note! The Node Config must be entered in the form of a comma-separated list of <host:port> values, for example, 127.0.0.1:8990, 123.0.0.1:9000. For further information, see Using External Reference in Agent Profile Fields and External Reference Profile . The Elasticsearch profile configuration consists of two tabs: Connectivity and Advanced . Connectivity Tab The Connectivity tab is displa yed by default. Open Elasticsearch profile - Connectivity tab The following settings are available in the Elasticsearch profile: Setting Description Setting Description Index Enter the index that you want to use. For further information on the use of an index in Elasticsearch, see https://www.elastic.co/guide/en/elasticsearch/reference/6.0/_basic_concepts.html . Note! When you name your index, bear in mind that two indices are created in the background for a workflow, which are named <index name>_committed and <index name>_deleted. It is therefore important to avoid naming an index that would duplicate these index names. For example, if you name the index "customer_index", the indices "customer_index_committed" and "customer_index_deleted" are automatically created. These two additional indices are removed after the workflow has been run. Host Enter the hostname or IP address of the host on which the Elasticsearch service is running. Port Enter the port of the Elasticsearch service. Test Connection Click to test the connection to the service, using the configured values. Advanced Tab The Advanced tab contains additional properties that you can use for performance tuning for the Elasticsearch service. Open Elasticsearch profile - Advanced tab For the Elasticsearch service, you can only modify the properties listed as shown above in the Advanced tab.

---

# Document 1563: Data Hub Task Agent - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205655539
**Categories:** chunks_index.json

The Data Hub task agent is used to remove old partitions from the database. This agent must be used in a Task workflow. Configuration Open Data Hub Task agent configuration Field Description Field Description Profile Click Browse to select a predefined Data Hub profile. The profile contains the settings required to connect to the database. Table Select the database table from the drop-down list. Partition Column Select a partition column in the table that is of integer type. The column should indicate the age of the inserted row. Remove Older Than Enter the maximum number of hours, days, months, or years that Data Hub should retain data. Note! The displayed time unit depends on the selected value in the Type Hint column in the Data Hub profile. For instance, if you have selected YYYYMM the time unit will be months. For further information, see Data Hub Profile .

---

# Document 1564: Diameter Application Profile - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205685017
**Categories:** chunks_index.json

The D iamete r Application profile captures a set of AVP and command code definitions that are recognized by the Diameter Stack agent during runtime. The profile is loaded when you start a workflow that depends on it. Changes to the profile become effective when you restart the workflow. To open the configuration, click the New Configuration button and then select Diameter Application Profile from the menu. Open The Diameter Application profile Import Options Click on the Import button to open the Import Specifications dialog box. Open Import Specifications Dialog box To Import ABNF Specifications From the profile screen select Import and select Import ABNF Specifications . Select an ABNF file and click Upload to import the ABNF file to your application profile configuration. To Import XML Specifications From the profile screen select Import and select Import XML Specifications. Select an XML file and click Upload . The XML file is imported to your application profile configuration. Export Options Open Export Specifications Dialog box To Export ABNF Specifications From the profile select Export and the Export ABNF Specifications. Select an ABNF file and click Upload . The ABNF file (both AVPs and commands) is saved as an export file. To Export XML Specifications From the profile select Export and Export XML Specifications . Select an XML file and click Upload . The XML file (both AVPs and commands) is saved as an export file. Commands Tab The commands that you use in the Diameter Application profile are predefined command sets of specific solutions. The Commands tab in the Diameter Application profile enables you to create and edit command sets that are customized according to your needs. Open The Diameter Application profile dialog - Commands Tab Setting Description Setting Description Name The command name. For example Credit-Control-Request. Code The unique numeric command code. For example, 272. For further information, see Show Base Commands . Application ID The numeric representation of the Diameter Application that this command belongs to. For example, 4 - Diameter Credit-Control. Show Base Commands Select this check box to view predefined commands, their numeric code, and the Application ID. These are the commands specified in Diameter Base Protocol (RFC 6733). To Add a Diameter Command Specification The Add Diameter Command Specification a dialog box is displayed when clicking the Add button in the Commands tab. Open The Diameter Commands tab - Add Diameter Command Specification Setting Description Setting Description Command Name Enter a unique command name. When you save the configuration, a UDR type with the specified name will be generated. Command Code Enter a numeric command code. Each command that belongs to the same Diameter Application must have a unique code. Application ID The numeric representation of the Diameter Application that the command belongs to. Flags Select the Request check box to mark the command as a request message (r-bit is set in the Diameter message header); clear the Request check box to mark the command as an answer message. Select Proxiable to enable the command to support proxy, relay, or redirection (p-bit is set in the Diameter message header). For more information about the Proxiable flag, see the Diameter Base Protocol (RFC 6733). This flag is set by default when a new command is added. Select Error to mark that the message contains a protocol error (e-bit is set in the Diameter message header) so that the message will not conform to the ABNF described for this command. This flag is typically used for test purposes. If you want to send an error message answer from APL, it is recommended that you use the UDR Diameter.Base.Error_Answer_Message . Auto-Populate Click on this button to automatically fill out the AVP Layout table with data, based on your Flags selection. The Category of the AVP data is set to Required . Note! To manually modify the data in the table cells double-click a cell. Setting Flags to Request and Proxiable , auto-populates the AVP Layout table with the following AVPs: Origin-Realm Origin-Host Destination-Realm Setting Flags to Proxiable only, auto-populates the AVP Layout table with the following AVPs: Origin-Realm Origin-Host Result-Code Setting Flags to Error , prevents the AVP Layout table from being auto-populated. AVP Layout Table This table includes a list of all the AVPs in a specific command. From the table, you can add, edit, and remove AVPs. To manually modify the data in the table cells double-click a cell; either a drop-down list button appears and enables you to select a different content, or the cell becomes editable. Item Description Item Description Category There are three different AVP categories: A Fixed AVP must be included in its predefined space in the command. A Required AVP must be included but may appear anywhere in the message. An Optional AVP can appear anywhere in the message. AVP Enter or modify an AVP name. Min Enter the lowest number of AVPs that the command should contain. Max Enter the highest number of AVPs that the command should contain. UDR types are generated for the Diameter Application profile based on the command configuration. When Max is set to 2 or <unbounded> the data type of the UDR field for the AVP will be list<data type> . AVPs Tab AVPs carry the data payload in all Diameter messages. While the system recognizes all the AVPs that are defined in the Diameter Base Protocol, it also recognizes your customized AVPs. In the AVPs tab you can define your customized AVPs. Open The Diameter Application profile dialog - Diameter AVPs tab Setting Description Setting Description Auto-Populate Click this button to enter missing table entries in all the user-defined AVPs of a command in the table. Note! Does not apply to base AVPs. Clear Clear this button to clear the list of entries. Name The AVP name Code The numeric code that represents the AVP. This number is unique and fixed for every AVP. For further information, see the AVP specifications. For example RFCs. Type The AVP data format is specified in the Diameter Base Protocol (RFC 6733). UDR types are generated for the Diameter application profile based on the AVP configuration. The AVP data formats are mapped to the UDR data types as follows: Address - IP address DiameterIdentity - string Enumerated - int Grouped - list<type> Float32 - float Float64 - double IPFilterRule - IPFilterRuleUDR(Diameter) OctetString - bytearray Signed32 - int Signed64 - long Time - date Unsigned32 - int Unsigned64 - long UTF8String - string Vendor The numeric Vendor ID of the AVP. The vendor ID of all the IETF standard Diameter applications is 0 (zero). Show Base AVPs To display all predefined AVP types, check Show Base AVPs. These are the AVPs specified in Diameter Base Protocol (RFC 6733). To Add an AVP To open the Add Diameter AVP Specification configuration, click the Add button at the bottom of the AVP tab. Open The Add Diameter AVP Specification dialog Setting Description Setting Description AVP Name The name of the AVP. AVP Code The numeric id of the AVP. Vendor ID The number that represents the vendor. The default value is 0 (zero). AVP Type The data type of the AVP. Selecting Enumeration or Grouped reveals configuration options in the Enumeration/Group Properties table. Mandatory ('M') Bit The M-bit allows the sender to indicate to the receiver whether or not understanding the semantics of an AVP and its content is mandatory. If the M-bit is set by the sender and the receiver does not understand the AVP or the values carried within that AVP, then a failure is generated. For further information about the M-bit, see the Diameter Base Protocol (RFC 6733). The following applies to incoming and outgoing messages that contain the configured AVP: MUST : The M-bit is set to 1 in outgoing messages and must be set to 1 in incoming messages. MAY : The M-bit is set to 0 or 1 (configurable in the Advanced tab) in outgoing messages and may be set to 0 or 1 in incoming messages. SHOULD : The M-bit is set to 0 in outgoing messages and may be set to 0 or 1 in incoming messages. MUST NOT : The M-bit is set to 0 in outgoing messages and must be set to 0 in incoming messages. You can change the value of the M-bit from APL if Mandatory ('M') Bit is set to MAY or SHOULD . Protection ('P') Bit The P-bit bit is reserved for future usage of end-to-end security. Enumeration/Group Properties This table is accessible for editing only when AVP Type is configured as Enumerated or as Grouped. This table enables you to Add , Edit , or Remove AVPs or enumeration values. For further information about the tables columns and entries, see the section above, To Add a Diameter Command Specification. To Edit an AVP To open the Edit Diameter AVP Specification configuration, click the Edit button at the bottom of the AVP's tab. The Edit Diameter AVP dialog is identical to the Add Diameter AVP Specification dialog. The same description applies to editing an AVP specification. CER/CEA Tab The identifiers in this tab define the advertised applications for the capabilities handshake. They are used whenever the Diameter Stack agent initiates or responds to a new transport connection, to negotiate the compatible applications for the link. For further information about Authentication and Accounting Applications, see Diameter Base Protocol (RFC 6733). Open The Diameter Application Profile Editor - CER/CEA Tab Auto-Populate Click this button to add Application IDs, that are used in any of the commands, to the Application ID table. In the Vendor Specific Applications table, available Vendor IDs are extracted from the AVP's tab into the Vendor ID column. Note! Auto-Populate cannot populate Vendor ID and Application ID into a Vendor-Specific Applications table if a vendor-specific application command is configured in the command tab. This means that the command includes a Vendor-Specific-Application-Id AVP. Application IDs Table Item Description Item Description Application ID Numeric codes of the supported applications. Authentication Select and check to flag an application with Authentication. Accounting Select and check to flag an application with Accounting. Vendor-Specific Applications Table Item Description Item Description Vendor ID Enter the numeric code of the vendor Auth App ID Enter the vendor-specific authentication application ID. Acct App ID Enter the vendor-specific accounting application ID. Advanced Tab The Advanced tab contains additional settings. Open The Diameter Application profile - Advanced tab Setting Description Setting Description Default Outgoing 'M' Bit Set to 1 When Flag Rule MAY Is Selected When this check box is selected and Mandatory ('M') Bit is set to MAY in the AVPs tab, the M-bit will be set to 1 in outgoing messages.

---

# Document 1565: Removing Instances and Runtime Data - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204610348/Removing+Instances+and+Runtime+Data
**Categories:** chunks_index.json

To remove an instance, right-click on the name and select Delete from the pop-up menu . In rare cases, locally stored runtime data may prevent the Desktop from starting correctly. To remove such data, right-click on the name and select Delete Runtime Data from the pop-up menu.

---

# Document 1566: The UDP Format - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204740964/The+UDP+Format
**Categories:** chunks_index.json

If UDRs are expected as reply back to the collector from the APL agent, extend the internal format to contain the built-in UDP format. external my_ext { // field definitions int type : static_size(1); ascii Anum : static_size(8); ascii Bnum : terminated_by(0xA); }; internal UDP_Int : extends_class( "com.digitalroute.udp.agent.UDPPacketUDR" ) { }; in_map UDP_InMap : external( my_ext ), internal( UDP_Int ), target_internal( my_UDP_TI ) { automatic; }; decoder myDecoder : in_map( UDP_InMap );

---

# Document 1567: Routing Control Data Model - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204677437
**Categories:** chunks_index.json

The UDRs in PCC.Routing store information about destinations, routing attributes, and use cases. The main objects of PCC Routing are: Object Description Object Description Routing_Details Contains the name of the workflow route to a specific Diameter Request Agent. It also contains the routing use cases to execute. Routing_Destination Contains the available routes for the incoming UDRs. Each route corresponds to a Hostname or Realm defined in the Diameter Routing Profile used by the Diameter Requested agent specified by the Routing_Details. RouteMapping Maps message attributes to an entry in Routing_Details . If a match is found by the routing logic, it will be used to retrieve a set of destinations from Routing_Destination . Use_Case A use case triggers additional routing functions. Overview of the Routing Data Model The different UDRs within the Routing Control data model are connected as follows: Open Overview of the Routing Data Model RouteMapping UDR In the RouteMapping UDR (PCC.Routing.RouteMapping) you set the arguments that are used by the routing logic to map incoming UDRs to entries in the Routing_Details. This makes it possible to route e g Diameter messages to specific destinations based on a custom set of attributes associated with the session or the subscriber. Field (name and type) Description Field (name and type) Description Arguments (list<string>) The name of the attributes to map. For information about the attributes that are used by the default workflow configurations, see the section below, RouteMapping Arguments. ID (int) The unique id of the RouteMapping entry. Priority (int) The priority of the RouteMapping entry, a low value indicates a high priority. Determines the order in which the matched entries are returned. StopFallThrough (boolean) The routing logic will match the attributes of incoming UDRs against RouteMapping entries in priority order. If StopFallThrough is set to true the routing logic will not iterate through all matching entries. Targets (list<Routing_Details>) The Routing_Details to be mapped against the message attributes. Below is a screenshot of the UDR Assistance displaying the RouteMapping UDR: Open RouteMapping UDR RouteMapping Arguments The RouteMapping arguments are implementation specific and are typically adapted to meet specific customer requirements. The following attributes are used as arguments in default workflow configurations: Argument Description Argument Description Group Id The group of a subscriber-identifier. The default workflow configuration extracts the value from an external database. Origin Source The value of the Origin-Host AVP. Origin Destination The value of the Destination-Host AVP. Protocol Set to diameter in the workflow. Application The value of the Auth-Application-Id AVP. Routing_Details UDR In the Routing_Details UDR (PCC.Routing.Routing_Details) you set the workflow route that is to be used by the routing logic. The UDR contains one or several instances of Routing_Destination , which holds information about the destination hosts or realms. Field (name and type) Description Field (name and type) Description Active (int) Indicates if the Routing_Details entry is active. ID (int) The unique id of the Routing Details entry. Misc (map<string, any>) See the section below, Misc Field, for more information. Route_Name (string) The name of the workflow route to a specific Diameter Request Agent. Routing_Destination (list<Routing_Destinations>) The Routing_Destinations associated with the Route_Name. Routing_Type (string) Indicates session-based or subscriber based routing. Use_Cases (list<Use_Case>) A list of use cases to be executed. Open Route_Name Below is a screenshot of the UDR Assistance displaying the Routing_Details UDR: Open Routing_Details UDR Routing_Destination UDR In the Routing_Destination UDR (PCC.Routing.Routing_Destination) you set the peer, realms and weights that is to be used by the routing logic. Field (name and type) Description Field (name and type) Description Active (int) Indicates if the Routing_Destination is active. Routing_Destination (string) The host or realm name. ID (int) The unique id of the Routing Destination. Misc (map<string, any>) See the section below, Misc Field, for more information. Weight (int) Used to achieve load balancing when routing UDRs to a list of destinations. The weight indicates the probability for a message to be routed to a specific destination relative to other destinations in the same list. The weight is expressed as a percentage and the sum of the weights in a list of destinations should be 0% or 100%. When the sum of the weights are not 100%, the individual weights are normalized. For instance, the weights 1, 3, and 5 approximately corresponds to 11% 33%, and 56%. Below is a screenshot of the UDR Assistance displaying the Routing_Destination UDR: Open Routing_Destination UDR Use Case UDR In the Use Case UDR (PCC.Routing.Use_Case) you set the use cases that trigger the workflow logic to perform additional routing functions. Field (name and type) Description Field (name and type) Description ID (int) The unique id of the use case. Misc (map<string, any>) See the section below, Misc Field, for more information. Use_Case (string) The name of the use case. Acceptable values in the default workflow configurations are: NULL for no additional functions wfb for routing via Back-End Workflow realm for realm-based routing. For information about realm-based routing see 9.17 Diameter Agents in the Desktop User's Guide. The default workflow configurations can be extended to handle additional use cases. Below is a screenshot of the UDR Assistance displaying the Use_Case UDR: Open Use Case UDR Misc Field Some objects in the PCC Routing Control data model include a field for storing miscellaneous data. The field is called Misc and has the type map<string, any> . Even though the Misc field is stated to support storing values of type any there are some limitations to what type the values can have. The following types can be used: bigint bitset boolean byte bytearray char date float/ double int ipaddress long short string

---

# Document 1568: APL - PCC Runtime Support - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204611740
**Categories:** chunks_index.json

The runtime support is used for looking up the actual rules based on the references received with the mapper support. The runtime support functions include: pccCreate pccGetUdr pccGetUdrList pccCreate This function creates a data set object that can be used with the pccGetUdr and pccGetUdrList functions described below. any pccCreate ( string area ) Parameters Parameter Description Parameter Description area The name of the area which the function is operating against. Returns: A data set object that can be used with the pccGetUdr or pccGetUdrList functions. Example pccCreate("PROD"); will create a data set object that can be used with the pccGetUdr and pccGetUdrList functions against the PROD area. pccGetUdr Retrieves a specific UDR based on the stated UDR type and key. drudr pccGetUdr ( string typename, any key [, any dataset] ) Parameters Parameter Description Parameter Description typename The fully qualified typename of the requested UDR. key The reference to the requested UDR dataset The data set object that you want to use for retrieving the UDR. This field is optional, and if it is not used, the data set that was used last will be used for the retrieval. Returns: The matching UDR or null if no matching UDR was found. Example pccGetUdr("PCRF.Rules.Provisioning.Static_Rule", 333); will retrieve a UDR of the type PCRF.Rules.Provisioning.Static_Rule with the key 333 . pccGetUdrList Retrieves a list with all the UDRs with the stated UDR type. list <drudr> pccGetUdrList ( string typename [, any dataset] ) Parameters Parameter Description Parameter Description typename The fully qualified UDR typename of the requested UDRs. dataset The data set object that you want to use for retrieving the UDRs. This field is optional, and if it is not used, the data set that was used last will be used for the retrieval. Returns: A list containing all the UDRs of the requested type. Example list<drudr> rulesList = pccGetUdrList(ruleType); will return a list named rulesList with all the UDRs that have the type ruleType .

---

# Document 1569: Charging Answer UDRs - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204642846/Charging+Answer+UDRs
**Categories:** chunks_index.json

PurchaseOrderUDR This UDR represents the charging answer which could be received from the SAP Convergent Charging Core server in response to a ChargeUDR , a BlankChargeUDR or an EstimateChargeUDR . Field Description Field Description allNotifications (list<NotificationUDR>) Usually, the Notifications are enclosed in the transactions. This list offers a shortcut to the generated Notification independently of the transaction. For further information, see Notification UDRs . chargingResults (list<ChargingResultUDR>) A list of charging results that contain details about the charging operation. For further information, refer to the section below, ChargingResultUDR. currency (string) The currency value respects the SAP Convergent Charging Currency.getAlphaCode() format. For example: EUR , or USD moneyAmount (string) A string representation of the charged amount. The moneyAmount value respects the SAP Convergent Charging Money.toString() . format. For example: EUR 12.15 , or USD 0.123456 status (OrderStateUDR) FREE PAID transactionList (list<TransactionUDR>) Depending on the ResultType defined on the Request, it will contain the generated transaction (i.e. the detail generated by the pricing logic). For further information, see Common SAP CC UDRs . snapshotId (int) The snapshot identifier used to rate event CheckLimitResultUDR This UDR represents the charging answer which could be received from the SAP Convergent Charging Core server in response to a CheckLimitUDR . Field Description Field Description allNotifications (list<NotificactionUDR>) Usually, the Notifications are enclosed in the transactions. This list offers a shortcut to the generated Notification independently of the transaction. For further information, see Notification UDRs . iterations (int) Represents the number of iterations, necessary to get the result limit (string) The limit maxLimitReached (boolean) Is true if the limit is the maximum, otherwise false . The maximum corresponds to the propertyToInverse value set in the chargeableItem passed in the request. precision (string) The precision of the request propertyToInverse (string) The property to inverse transactionList (list<TransactionUDR>) Depending on the ResultType defined on the Request, it will contain the generated transaction (i.e. the detail generated by the pricing logic). For further information, see Common SAP CC UDRs . SessionResultUDR This UDR represents the charging answer which could be received from the SAP Convergent Charging Core server in response to a SessionStartUDR , SessionUpdateUDR , SessionStopUDR . Field Description Field Description accumulatedAmount (list <MoneyUDR>) Contains the accumulated reserved amount serviceSessionResults (list <ServiceSessionResultUDR>) Contains the the charging answer for start, stop and update of a session For further information, see the section below, ServiceSessionResultUDR. transacSetsToCleanup (list <TransactionSetUDR>) Depending on the CleanupResultType defined on the Request, it will contain the generated transaction (i.e. the detail generated by the pricing logic). For further information, see Common SAP CC UDRs . ServiceSessionResultUDR This UDR contains information associated with Service Session. Field Description Field Description exception (CCExceptionUDR) Is set if the charging operation failed reservationId (string) The unique identifier for the service startRateResult (StartSessionResultUDR) This field is populated if a Service Session contains a Reservation Item. For further information, see the section below, StartSessionResultUDR. stopRateResult (StopSessionResultUDR) This field is populated if a Service Session contains a Confirmation Item or has Cancellation set to true. For further information, see the section below, StopSessionResultUDR. updateRateResult (UpdateSessionResultUDR) This field is populated if a Service Session contains a Confirmation Item and a Reservation Item. For further information, see the section below, UpdateSessionResultUDR. StartSessionResultUDR This UDR represents the charging answer which could be received from the SAP Convergent Charging Core server in response to a StartSessionUDR. Field Description Field Description allNotifications (list<NotificationUDR>) The aggregation of the three above notification lists. For further information, see Notification UDRs . currency (string) A string representation of the currency. The currency value respects the SAP Convergent Charging Currency.getAlphaCode() format. For example: EUR , or USD limit (string) The limit name (string) The name toConfirmMoneyAmount (string) A string representation of the amount to confirm. The toConfirmMoneyAmount value respects the SAP Convergent Charging Money.toString() format. For example: EUR 12.15 , or USD 0.123456 toReserveMoneyAmount (string) A string representation of the charged amount to reserve. The toConfirmMoneyAmount value respects the SAP Convergent Charging Money.toString() format. For example: EUR 12.15 , or USD 0.123456 transactionSetsToCleanup (list<TransactionSetUDR>) Depending on the CleanupResultType defined on the Request, it will contain the generated transaction (i.e. the detail generated by the pricing logic). For further information, see Common SAP CC UDRs . transactionSetsToConfirm (list<TransactionSetUDR>) Depending on the ResultType defined on the Request, it will contain the generated transaction set (i.e. the detail generated by the pricing logic). This transaction set corresponds to the amount to confirm. For further information, see Common SAP CC UDRs . transactionSetsToReserve (list<TransactionSetUDR>) Depending on the ResultType defined on the Request, it will contain the generated transaction set (i.e. the detail generated by the pricing logic). This transaction set corresponds to the amount to reserve. For further information, see Common SAP CC UDRs . transactionCleanedupNotifications (list<NotificationUDR>) This list offers a shortcut to the generated Notification present in the cleaned-up transactions For further information, see Notification UDRs . transactionConfirmedNotifications (list<NotificationUDR>) This list offers a shortcut to the generated Notification present in the confirmed transactions. For further information, see Notification UDRs . transactionReservedNotifications (list<NotificationUDR>) This list offers a shortcut to the generated Notification present in the reserved transactions. For further information, see Notification UDRs . transactionSetId (long) The transaction set id of the answer UpdateSessionResultUDR This UDR represents the charging answer which could be received from the SAP Convergent Charging Core server in response to a UpdateSessionUDR . Field Description Field Description accumulatedMoneyAmount (string) A string representation of the total amount confirmed since the beginning of the session. The accumulatedMoneyAmount value respects the SAP Convergent Charging Money.toString() format. For example: EUR 12.15 , or USD 0.123456 allNotifications (list<NotificationUDR>) The aggregation of the three above notification lists. For further information, see Notification UDRs . currency (string) A string representation of the currency. The currency value respects the SAP Convergent Charging Currency.getAlphaCode() format. For example: EUR , or USD limit (string) The limit name (string) The name toCancelMoneyAmount (string) A string representation of the amount to cancel for this update. The toCancelMoneyAmount value respects the SAP Convergent Charging Money.toString() format. For example: EUR 12.15 , or USD 0.123456 toConfirmMoneyAmount (string) A string representation of the amount to confirm for this update. The toConfirmMoneyAmount value respects the SAP Convergent Charging Money.toString() format. For example: EUR 12.15 , or USD 0.123456 toReserveMoneyAmount (string) A string representation of the charged amount to reserve for this update. The toReserveMoneyAmount value respects the SAP Convergent Charging Money.toString() format. For example: EUR 12.15 , or USD 0.123456 transactionSetsToCancel (list<TransactionSetUDR>) Depending on the ResultType defined in the request, it will contain the generated transaction (i.e. the detail generated by the pricing logic). This transaction set corresponds to the amount to cancel. For further information, see Common SAP CC UDRs . transactionSetsToCleanup (list<TransactionSetUDR>) Depending on the CleanupResultType defined in the request, it will contain the generated transaction set (i.e. the detail generated by the pricing logic). For further information, see Common SAP CC UDRs . transactionSetsToConfirm (list<TransactionSetUDR>) Depending on the ResultType defined in the request, it will contain the generated transaction (i.e. the detail generated by the pricing logic). This transaction set corresponds to the amount to confirm. For further information, see Common SAP CC UDRs . transactionSetsToReserve (list<TransactionSetUDR>) Depending on the ResultType defined in the request, it will contain the generated transaction (i.e. the detail generated by the pricing logic). This transaction set corresponds to the amount to reserve. For further information, see Common SAP CC UDRs . transactionCanceledNotifications (list<NotificationUDR>) This list offers a shortcut to the generated Notification present in the cancelled transactions. For further information, see Notification UDRs . transactionCleanedupNotifications (list<NotificationUDR>) This list offers a shortcut to the generated Notification present in the cleaned up transactions. For further information, see Notification UDRs . transactionConfirmedNotifications (list<NotificationUDR>) This list offers a shortcut to the generated Notification present in the confirmed transactions. For further information, see Notification UDRs . transactionReservedNotifications (list<NotificationUDR>) This list offers a shortcut to the generated Notification present in the reserved transactions. For further information, see Notification UDRs . StopSessionResultUDR This UDR represents the charging answer which could be received from the SAP Convergent Charging Core server in response to a StopSessionUDR . Field Description Field Description accumulatedMoneyAmount (string) A string representation of the total amount confirmed since the beginning of the session. The accumulatedMoneyAmount value respects the SAP Convergent Charging Money.toString() format. For example: EUR 12.15 , or USD 0.123456 toConfirmMoneyAmount (string) A string representation of the amount to confirm for this stop. The toConfirmMoneyAmount value respects the SAP Convergent Charging Money.toString() format. For example: EUR 12.15 , or USD 0.123456 toCancelMoneyAmount (string) A string representation of the amount to cancel for this stop. The toCancelMoneyAmount value respects the SAP Convergent Charging Money.toString() format. For example: EUR 12.15 , or USD 0.123456 currency (string) A string representation of the currency. The currency value respects the SAP Convergent Charging Currency.getAlphaCode() format. For example: EUR , or USD transactionSetsToCleanup (list<TransactionSetUDR>) Depending on the CleanupResultType defined on the Request, it will contain the generated transaction (i.e. the detail generated by the pricing logic). For further information, see Common SAP CC UDRs . transactionSetsToConfirm (list<TransactionSetUDR>) Depending on the ResultType defined on the Request, it will contain the generated transaction (i.e. the detail generated by the pricing logic). This transaction set corresponds to the amount to confirm. For further information, see Common SAP CC UDRs . transactionSetsToCancel (list<TransactionSetUDR>) Depending on the ResultType defined on the Request, it will contain the generated transaction (i.e. the detail generated by the pricing logic). This transaction set corresponds to the amount to cancel. For further information, see Common SAP CC UDRs . transactionCleanedupNotifications (list<NotificationUDR>) This list offers a shortcut to the generated Notification present in the cleaned-up transactions ( list<TransactionSetUDR> ) For further information, see Notification UDRs . transactionConfirmedNotifications (list<NotificationUDR>) This list offers a shortcut to the generated Notification present in the confirmed transactions. For further information, see Notification UDRs . transactionCanceledNotifications (list<NotificationUDR>) This list offers a shortcut to the generated Notification present in the cancelled transactions. For further information, see Notification UDRs . allNotifications (list<NotificationUDR>) The aggregation of the three above notification lists. For further information, see Notification UDRs . CCExceptionUDR This UDR represents a charging error that may be received from the SAP Convergent Charging Core server when charging fails, or as a result of failed validation of UDR field values ( BadUDRFormatException ) before the request is sent to the server. Every charging request could result in a CCExceptionUDR . Field Description Field Description cause (string) The stack trace of the exception message (string) A string description of the error message reason (string) A string description of the error reasonCode (int) A specific code for this error type (string) The type of the Exception. Can be: CommunicationFailureException IllegalArgumentException ServerFailureException InvalidItemException ForbiddenChargeException TransactionClearingException StartRateException StopRateException UpdateRateException DoesNotExistException CannotInverseException BadUDRFormatException TranslateResultUDR This UDR represents the result of a successful translate operation. Field Description Field Description translatedValues (string) A list of strings, including translated values ChargingResultUDR The result of a charge or blank charge operation when the chargeExecutionContext is set in the request. Field Description Field Description chargedItems (list<ChargedItemUDR>) This is the charged items returned as output from the charge operation. responseItems (list<ResponseItemUDR>) This is the response items that were generated from the charge operations. notifications(list<NotificationUDR>) This list contains the notifications produced during the price plan execution. AccountOperationTypeUDR This UDR represents the account operation type for a charge or blank charge operation when the chargeExecutionContext is set in the request. Field Description Field Description CREDIT (AccountOperationTypeUDR (sapcc.accountOperation)) The account operation is a credit operation. DEBIT (AccountOperationTypeUDR (sapcc.accountOperation)) The account operation is a debit operation. AccountOperationUDR This UDR represents the details of an account operation for a charge or blank charge operation when the chargeExecutionContext is set in the request. Field Description Field Description amount (MoneyUDR sapcc) A string representation of the price amount and currency. The currency value respects the SAP Convergent Charging Currency.getAlphaCode() format. For example: EUR , or USD amountAssignments (list <AmountAssignmentUDR (sapcc.accountOperation)>) The list of amount assignments for the account operation. For more details on the possible values, see the field definitions in the section below, AmountAssignmentUDR. dependentAccountOperationKey (int) The numeric key of the account operation that it depends on, if applicable key (int) The numeric key of the account operation mainAccountReference (AccountReferenceUDR (sapcc.accountOperation)) The main account reference to the account impacted by the charging operation. For more details on the possible values, see the field definitions in the section below, AccountReferenceUDR. netAmount (MoneyUDR (sapcc)) A string representation of the net amount and currency. The currency value respects the SAP Convergent Charging Currency.getAlphaCode() format. For example: EUR , or USD taxAmount (MoneyUDR (sapcc)) A string representation of the tax amount and currency. The currency value respects the SAP Convergent Charging Currency.getAlphaCode() format. For example: EUR , or USD type (AccountOperationTypeUDR (sapcc.AccountOperation)) The type of account operation. For more details on the possible values, see the field definitions in the section above, AccountOperationTypeUDR. AccountReferenceTypeUDR This UDR represents the account reference type for a charge or blank charge operation when the chargeExecutionContext is set in the request. Field Description Field Description EXTERNAL (AccountReferenceTypeUDR (sapcc.accountOperation)) The account reference is an external account. PREPAID (AccountReferenceTypeUDR (sapcc.accountOperation)) The account reference is a prepaid account. AccountReferenceUDR This UDR represents the reference to an account impacted by a charge or blank charge operation when the chargeExecutionContext is set in the request. Field Description Field Description id (string) The identifier of the account impacted by a charging operation. type (AccountReferenceTypeUDR (sapcc.accountOperation)) The type of account impacted by a charging operation. For details on the possible values, see the field definitions in the section above, AccountReferenceTypeUDR. AccountTypeUDR This UDR represents the account type for a charge or blank charge operation when the chargeExecutionContext is set in the request. Field Description Field Description EXTERNAL (AccountTypeUDR sapcc) The account type is a postpaid account that is managed in a third-party accounting system. PREPAID (AccountTypeUDR sapcc) The count type is a prepaid account that is managed in the SAP CC system. UNDEFINED (AccountTypeUDR sapcc) The account type is not defined as external or prepaid. AmountAlertModelUDR This UDR represents the alert that could be received when the balance reaches a certain amount for a charge or blank charge operation when the chargeExecutionContext is set in the request. Field Description Field Description amount (string) The amount that triggers an alert code (string) The code of the amount alert AmountAssignmentUDR This UDR represents the assignment of part of the amount of an amount operation to an account for a charge or blank charge operation when the chargeExecutionContext is set in the request. Field Description Field Description accountReference (AccountReferenceTypeUDR (sapcc.accountOperation)) The reference to the account impacted by a charging operation. For more details, see the field definitions in the section above, AccountReferenceTypeUDR. amount (MoneyUDR (sapcc)) A string representation of the amount and currency of the assignment amount. The currency value respects the SAP Convergent Charging Currency.getAlphaCode() format For example: EUR , or USD chargedItemKey (int) The numeric key of the charged item ChargeableItemInfoUDR This UDR inherits all fields from UniqueIdentifierUDR . ChargeableItemInfoUDR represents the details of the chargeable item associated to a charging result. ChargingContractInfoUDR This UDR represents the details of the charging contract associated to a charging result for a charge or blank charge operation when the chargeExecutionContext is set in the request. Field Description Field Description chargingContractId (string) The identifier of the charging contract chargingContractItemId (string) The external identifier of the charging contract item subscriberAccountId (string) The identifier of the subscriber account associated to the charging contract. ChargingProcessInfoUDR This UDR represents the details of the charging process for a charge or blank charge operation when the chargeExecutionContext is set in the request. Field Description Field Description chargedItemSetUniqueId (UniqueIdentifierUDR (sapcc)) The unique identifier of the charged item set generated by the charging process. For more details on the possible values, see the field definitions in the section below, UniqueIdentifierUDR. eventProcessingDate (date) The date when the event was processed ExpirationAlertModelUDR This UDR represents the alert that could be received before or after a reference date when the state of a prepaid account has changed for a charge or blank charge operation when the chargeExecutionContext is set in the request. Field Description Field Description dayCount (int) The number of days before or after the reference state date of the prepaid account that this alert must be thrown refStateDate (ReferenceStateDateUDR (sapcc)) The reference state of the expiration alert. For more details on the possible values, see the the field definitions in the section below, ReferenceStateDateUDR. ExternalAccountModelUDR This UDR represents the external account defined in a subscriber account for a charge or blank charge operation when the chargeExecutionContext is set in the request. Field Description Field Description code (string) The code of the external account currencyCode (string) The currency code of the external account description (string) The description of the external account externalAccountCode (string) The external code of the external account systemCode (string) The system code of the external account type (ExternalAccountTypeUDR (sapcc)) The type of external account. For more details on the possible values, see the field definitions in the section below, ExternalAccountTypeUDR. ExternalAccountTypeUDR This UDR represents the type of external account for a charge or blank charge operation when the chargeExecutionContext is set in the request. Field Description Field Description PAYABLE (ExternalAccountTypeUDR (sapcc)) The external account type is payable. RECEIVABLE (ExternalAccountTypeUDR (sapcc)) The external account type is receivable. UNDEFINED (ExternalAccountTypeUDR (sapcc)) The external account is not defined as payable or receivable. PrepaidAccountModelUDR This UDR represents the details of a prepaid account for a charge or blank charge operation when the chargeExecutionContext is set in the request. The prepaid account is a balance defined by a minimal value that can be zero, but cannot be less than zero, unless overspending is granted. Field Description Field Description amount (string) A string representation of the amount of the prepaid account amountAlerts (list<AmountAlertModelUDR (sapcc)>) The list of amount alerts in the prepaid account. For more details on the possible values, see the field definitions in the section above, AmountAlertModelUDR. blockedStateDate (date) The blocked state date of the prepaid account closedStateDate (date) The closed state date of the prepaid account code (string) The code of the prepaid account currencyCode (string) The currency code of the prepaid account description (string) The description of the prepaid account emptyLimit (string) The minimal amount (empty limit) of the prepaid account. expirationAlerts (list<expirationAlertModelUDR (sapcc)>) The list of expiration alerts for the prepaid account. For more details on the possible values, see the field definitions in the section above, ExpirationAlertModelUDR. lockedStateDate (date) The locked state date of the prepaid account overrunAccountCode (string) The overrun account code of the prepaid account overrunAccountType (AccountTypeUDR (sapcc)) The overrun account type of the prepaid account. This field is optional. For more details on the possible values, see the field definitions in the section above AccountTypeUDR. ReferenceStateDateUDR This UDR represents the reference state date of the prepaid account for a charge or blank charge operation when the chargeExecutionContext is set in the request. Field Description Field Description ACTIVE (ReferenceStateDateUDR (sapcc)) The alert must be thrown when the state of the prepaid account becomes active after it has been blocked or locked. In this case, the dayCount does not apply. BLOCKED (ReferenceStateDateUDR (sapcc)) The reference date of the alert is the blocked state date of the prepaid account. CLOSED (ReferenceStateDateUDR (sapcc)) The reference date of the alert is the closed state date of the prepaid account. LOCKED (ReferenceStateDateUDR (sapcc)) The reference date of the alert is the locked state date of the prepaid account. UniqueIdentifierUDR This UDR represents the unique identifier for a charge or blank charge operation when the chargeExecutionContext is set in the request. Field Description Field Description type (string) The type of unique identifier

---

# Document 1570: ECS Forwarding Agent - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204641071/ECS+Forwarding+Agent
**Categories:** chunks_index.json

To send UDRs to the ECS, a workflow must contain an ECS forwarding agent and invalid UDRs have to be routed to it. It is recommended to use a preceding Analysis (or Aggregation) agent to associate an Error Code with the UDR. The ECS forwarding agent is applicable for UDRs only. Batches are handled through the cancelBatch functionality. Note! From the ECS forwarding agent, it is possible to pass on MIM values to be associated with the UDRs in the ECS Inspector. This section contains the following subsections: ECS Forwarding Agent Transaction Behavior, Input/Output Data, MIM, and Events ECS Forwarding Agent Configuration

---

# Document 1571: Generating and Using Java Code from the Configuration Contract - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204645328/Generating+and+Using+Java+Code+from+the+Configuration+Contract
**Categories:** chunks_index.json

DTK provides a tool for generating Java code from the configuration contract XML file. The tool is included in the devkit.jar file. Example - Tool to generate Java code The tool is executed using the following command: java -cp devkit.jar com.digitalroute.tools.ContractGen  -d <output dir> -f <configuration contract file> For each field in the configuration contract, a corresponding inner class is generated. This class should not be used by the agent, instead, the field is accessed through public accessor (get and set) methods. Each field also has an active flag which is used when a field gets enabled/disabled from the agent's user interface.

---

# Document 1572: Disk Collection Agent Input/Output Data and MIM  - Batch - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204607118
**Categories:** chunks_index.json



---
**End of Part 66** - Continue to next part for more content.
