# RATANON/MZ93-DOCUMENTATION - Part 97/112

---
**Dataset:** ratanon/mz93-documentation
**Part:** 97 of 112
**GitHub:** https://github.com/ratan0n/docs/tree/main/mz93-documentation
**Size:** ~69.9 KB
---

This section describes the different properties that you can use in the STR to configure ECs. Aggregation Properties You can set the properties listed in the Advanced tab of the Aggregation profile in the STR. This will override the values that are set in the profile, including default values. The following properties are applicable when using file storage for aggregation. Property Description Property Description mz.aggregation.storage.maxneedssync Default value: 5000 This property defines when updated aggregation sessions shall be moved from the cache to the file system. When the number of cached aggregation sessions reaches this value, the sessions are written to disk. This property shall be set to a value lower than "Max Cached Sessions", configured in the Aggregation agent. If the property is set to a higher value, the used value will be "Max Cached Sessions" minus 1. For example, if "Max Cached Sessions" is "6000" and this property is set to "6500", the value "5999" will be used instead. For performance reasons, this property should be given a reasonably high value, but consider the risk of a server restart. If this happens, the cached data might be lost. mz.aggregation.storage.profile_session_cache Default value: false This property is used to speed up the start of workflows that run locally (on the EC). Set the property to true to keep the aggregation cache in memory for up to 10 minutes after a workflow has stopped. mz.aggregation.timeout.threads Default value: 0 This property is used to enable Multithreading in Aggregation workflows, that is, to use a thread pool for the timeout function block in the Aggregation agent. Use a value larger than 0, for example, 4 to use four threads in the thread pool. For more information about how to use these properties to tune the performance of the Aggregation agent, see Aggregation Agent in the Desktop User's Guide . EC Web Interface Properties Property Description Property Description ec.webserver.enabled Default value: true This property specifies if the Web Interface for ECs should be active. ec.webserver.host Default value: Taken from the value of the common property pico.rcp.server.host . This property specifies the host used to communicate with an EC Web Interface. Set it to 0.0.0.0 to bind all addresses on the currently used host. This is done to access the Web Interface by both virtual and logical IP addresses or hostnames. ec.webserver.port Default value: 9090 This property specifies the TCP port of the EC Web Interface. Note! Each EC that is located in the same container must have a unique port. mz.wi.cross-origin.allowedOrigins Default value: "*" This property allows you to use RESTful Web Services across different origins. The possible value is a comma-separated list of the hosts:ports that are permitted to use the RESTful Web Services, e.g. 192.168.170.12:6790,10.46.9.26:9000 Couchbase Properties Property Description Property Description mz.cb.statistics.flush.period.in.seconds Default value: 60 If you have enabled the log-to-file functionality in the Advanced tab of the Couchbase profile, you can determine how often in seconds you want to flush this file by modifying the value. Database Properties Property Description Property Description max.cached.prepared.statements Default value: 15 If you want to change the number of preparedStatements that are cached between connections, you can use this property to specify a different number than the default. Note! If you are using SAP HANA as a database type in a Database profile, used by Database agents, this value has to be set to 0. connectionpool.strict.pool.size Default value: false If you enable this property, the database pool enables the Blocking Queue implementation where there is a strict restriction to the maximum number of connections. Note! When the property is set to false , then the database connection pool will create additional temporary connections. When the pool is full, these connections are closed as soon as the workflow thread returns the connection to the pool. This property is general for all supported databases. It is enabled per each EC separately. If enabled the connection pool for the particular EC have a strict maximum limit. The maximum limit can be set in the Database profile agents Properties tab. For more information on this tab, refer to the Database Profile . connectionpool.wait.timeout.milliseconds Default value: 5000 Note! This property can only be used if the connectionpool.strict.pool.size property is set to true . This property is used to configure the amount of time a thread should remain in the blocked queue until it tries for a new connection. If a connection is made available before this time, the thread's waiting time is interrupted. Diameter Properties Property Description Property Description mz.diameter.tls.accept_all Default value: false If the property is set to false (default), the Diameter Stack agent does not accept any non-trusted certificates. If it is set to true, the Diameter Stack agent accepts any certificate. In either case any unrecognized certificate will be logged in an entry in the System Log (in PEM format). mz.workflow.decoderqueue.max_threads Default value: 10 This property specifies the maximum number of threads used by the Diameter Stack agent for decoding messages. Setting a lower value than the default may enhance performance if the host machine has a low number of CPU cores and the active workflows are complex. On the other hand, the decoding may constitute a bottleneck when performing simple processing on a host machine with a high number of CPU cores. In this case, setting a higher value may provide better performance. ECS Properties Property Description Property Description mz.ecs.bulk.transfer.size Default value: 10485760 This property defines the maximum size (in Bytes) of a bulk transfer for the ECS collection agent. FTP/DX200 Properties Property Description Property Description mz.dx200.acceptsequentiallost Default value: "" The default behaviour for the FTP/DX200 collection agent is to skip files if the sequential order of the files has been lost. Add this property and set it to true if you want to continue collecting files even if the sequential order has been lost. mz.dx200.acceptoverwritten Default value: "" The default behaviour for the FTP/DX200 collection agent is to not collect files that have been in FULL state before being set to OPEN, and untransferred data has been overwritten. Add this property and set it to true if you want to collect files that have been overwritten. Proxy Properties Property Description Property Description http.proxyHost The proxy host that routes HTTP traffic http.proxyPort The proxy port for routing HTTP traffic. Default value: 80 http.proxyUser The username, if Basic Authentication is required for proxy handling HTTP traffic http.proxyPassword The password, if Basic authentication is required for proxy handling HTTP traffic. The password can be plain-text or encrypted using the mzsh encryptpassword <password> command. https.proxyHost The proxy host that routes HTTPS traffic https.proxyPort The proxy port for routing HTTPS traffic. Default value: 443 https.proxyUser The username, if Basic Authentication is required for proxy handling HTTPS traffic https.proxyPassword The password, if Basic authentication is required for proxy handling HTTPS traffic. The password can be plain-text or encrypted using the mzsh encryptpassword <password> command. http.nonProxyHosts Indicates the hosts that should be accessed without going through the proxy. Typically, this defines internal hosts. The value of this property is a list of hosts, separated by the '|' character. Additionally, the wildcard character '*' can be used for pattern matching. For example, http.nonProxyHosts="*. foo.com |localhost" will indicate that every host in the http://foo.com domain and the localhost should be accessed directly even when a proxy server is already specified. Rest Client Properties Property Description Property Description rest.client.idleTimeout Default value: "200s" This property specifies the time a connection stays idle before it is eligible to be disconnected. If there is no traffic during the specified time, the REST Client agent will remove the session once the timeout is reached. You can also set this property on the container level, where the value is only applied to all ECs under a particular container. You can refer to Container Properties for more information. rest.client.max.chunk.size Default value: "8m" This property specifies the maximum chunk size of the HTTP response that the REST Client agent should receive from the server. The agent will reject data with sizes that are larger than the value defined by this property. You can also set this property on the container level, where the value is only applied to all ECs under a particular container. You can refer to Container Properties for more information. rest.client.max.content.length Default value: "64m" This property specifies the maximum length of the HTTP content received by the REST Client agent. The agent will reject content that is longer than the specified value defined by this property. Although it is also possible to set the value of this property to infinite, there will be a possibility that the EC will crash from an out-of-memory error. So do consider setting the memory size of the EC to be higher than the expected size of the HTTP content that the agent will be receiving. You can also set this property on the container level, where the value is only applied to all ECs under a particular container. You can refer to Container Properties for more information. SAP RFC Property Property Description Property Description saprfc.bcd.double Default value: false This property determines whether the double data type is used when converting for mapping to SAP JCo ABAP Type P (Binary Coded Decimal). The possible values are: true : Uses the double data type for conversion. false : Uses the BigDecimal data type for conversion. SNMP Properties Property Description Property Description snmp.auth.proto.maxCompatibility Default value: false Due to security risks, SHA-1 and MD5 are by default disabled for SNMPv3. To enable them, set this property to true. This allows compatibility for all authentication algorithms, including SHA-1 and MD5. Note! We do not recommend setting this to true. Only use this property when you have no other options regarding authentication algorithms for your devices. Inter Workflow Properties Property Description Property Description mz.iwf.max_size_block Default value: "" By setting this property (in Bytes) on the EC that runs the Inter Workflow storage, it is possible to restrict memory consumption. If the agent wants to allocate more memory than the given property value during collection, the collection will abort instead of suffering a possible "out of memory". Note that the minimum value is 32000 bytes, and even if a lower value is configured, 32000 will be used. Table Lookup Service Properties Property Description Property Description mz.inmemory_table.table_strategy Default value: Object This property defines how shared tables are kept in memory. The possible values are: Object - The shared tables are stored as Java objects on the JVM heap. If this value is chosen the mz.inmemory_table.index_strategy property will have no effect. On-heap - The shared tables are stored in a compact format on the JVM heap. Unsafe - The shared tables are stored in a compact format outside the JVM heap. The API java.misc.Unsafe is used for the format and is only supported on Oracles JVM. mz.inmemory_table.index_strategy Default value: Object This property defines how the index for shared tables are kept in memory. The possible values are: Object - The index is stored as Java objects on the JVM heap. Pointer - The index is stored as pointers to the table data. mz.inmemory_table.fixed_width Default value: true This property defines if the varchar data fields are stored with a fixed or variable width. The possible values are: true - The varchar data fields will have a fixed width. false - The varchar data fields will have a variable width which will reduce the memory usage for large columns. Additional Properties Property Description Property Description ec.backlog.dir Default value: $MZ_HOME/tmp This property is applicable for ECs and determines whether you want events and error messages occurring when the contact is lost to be logged in a backlog or not. If the property is not present, events and messages will not be logged. The value of this property specifies where the backlog resides. ec.excel.dateformat Default value: "dd/MM/yyyy" This property will define the format of the date to be decoded for the ExcelCellUDR. For the date to be parsed successfully, you will have to provide the format of the date received by the ExcelCellUDR. The values in this property conforms to the standards of the SimpleDateFormat java class. If the date is not parsed successfully, the data type of the date field will be treated as a string. ec.shutdown.time Default value: 60000 This property specifies the maximum time (in milliseconds) the EC will wait before a real-time workflow stops after a shutdown has been initiated. This is to enable the workflow to stop all input and drain all UDRs in the workflow before shutting down. The wait time is initially set to 60 seconds. If this value is set to 0 all draining is ignored and the workflow will stop immediately. pico.bootstrapclass Default value: "" This property specifies the bootstrap classes that are required by some components. pico.ec.do_graceful_shutdown Default value: true This property determines the behavior of the mzsh command shutdown. When you have set the value of this property to false and run the command, it will cause ECs to shut down without forcing the workflows to stop first. pico.rcp.server.port Default value: "" This property specifies the port that is used for EC to EC communication. If no port is set, a dynamic port will be used and the port number will change each time an EC is restarted. mz.use.drdateformat Default value: true The date syntax used in the APL functions dateToString and strToDate conforms to the Java class SimpleDateFormat in Java 6. Even though the syntax conforms to SimpleDateFormat , it is not directly based on this class. You can enable date format handling based on the SimpleDateFormat class in the installed Java version by setting this property to false . This enables use of additional patterns that are available in the installed Java version. For more information about the functions dateToString and strToDate , see the APL Reference Guide. mz.use.date.timezone Default value: false Setting this property to true will instruct the system to use the attached time zone when SQL input originates from a date object. In most cases, the property should be set in the pico configuration of ECs. However, in case of audit processing, the property should also be set in the pico configuration of the Platform. Note that if the mz.use.date.timezone property is used for setting dates with another time zone, there will be no way of keeping track of the actual time zone in the database, and you may have to manually convert the date during selection. To keep track of the time zone in an Oracle database, use the data type TIMESTAMP WITH TIME ZONE. pico.type Default value: "" This property specifies the type of pico instance used for the EC. The possible values are EC and SC.

---

# Document 2258: JMS Request Agent Events - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205000872/JMS+Request+Agent+Events
**Categories:** chunks_index.json

Agent Message Events There are no agent message events for this agent. Debug Events There are no debug events for this agent.

---

# Document 2259: General Preparations Execution Context - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204996876/General+Preparations+Execution+Context
**Categories:** chunks_index.json

Initially, you must create the UNIX user (preferably mzadmin ) that executes the installation and later on runs pico processes in the Execution Container. This is the user that is referenced throughout this document. During the installation procedure, the default application user , mzadmin , is automatically created. Note that this is not related to the OS user or the DB user. You cannot create or use other application users than this default user until after the installation is complete. Note! The mzadmin user must have read/write permissions for all the directories stated in the Environment Variables. It is not recommended to use root as mzadmin , since this makes troubleshooting difficult. MediationZone should always be administrated by users belonging to the access groups created in MediationZone. See the Desktop documentation for further information on how to create users and access groups. The next step is to install the necessary third-party products, that is, Java. For further information, see System Requirements . This section includes the following subsections: Setting Environment Variables for Execution Container Preparing the Installer File for the Execution Container Updating the Installation Properties for Execution Container Extracting Files for Execution Container

---

# Document 2260: HTTP Client Functions - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204743727/HTTP+Client+Functions
**Categories:** chunks_index.json

The client functions are used to exchange data with a HTTP/HTTPS server. There are specific functions for GET and POST as well as functions for general HTTP requests. Either plain text or encrypted communication can be used. Basic authentication is supported, as well as the use of a keystore, and if required a truststore, for the functions with an encrypted communication channel. The HTTP client functions also support the use of proxy, see HTTP Proxy Support for information on how to setup HTTP proxy support. Before using APL functions with TLS/SSL Encryption , refer to configuration required in HTTP Client Functions | TLS/SSL Encryption The following functions for HTTP Client described here are: 1 httpGetURL 2 httpBinaryGetURL 3 httpGetSecureURL 4 httpBinaryGetSecureURL 5 httpPostURL 6 httpBinaryPostURL 7 httpPostSecureURL 8 httpBinaryPostSecureURL 9 httpRequest 10 httpRequestBasicAuth 11 httpRequestSecureBasicAuth 12 httpRequestSecure 13 httpRequestDigestAuth 14 httpCreateMultipartBody 15 httpAddMultipartSegment 16 httpAddMultipartSegmentWithMapping 17 httpMultipartPostURL 18 httpMultipartPostSecureURL 19 TLS/SSL Encryption httpGetURL This function uses the GET method to retrieve content from an HTTP server. string httpGetURL ( string query, string host, int timeout, int port, //Optional string username, //Optional string password, //Optional map<string, string> headers, //Optional int connectTimeout) //Optional Parameter Description Parameter Description query The query including path Example - query /api/v2/doc/1 /api/v2/doc?id=1 host The name or IP address where the HTTP server is running timeout The number of seconds to wait for a response. If the value is set to 0 (zero), the default timeout will be used. The default value is 15 seconds. port The port number to contact the HTTP server on. Port 80 is used by default. username A username for an account on the HTTP server password Password associated with the username headers Custom HTTP request headers. connectTimeout The number of seconds to wait for a connection to be established. If the value is set to 0 (zero), the default timeout will be used. The default value is 15 seconds. Returns Content from the HTTP server. It will be null if any part of the communication fails. httpBinaryGetURL This function uses the GET method to retrieve binary content from an HTTP server. bytearray httpBinaryGetURL ( string query, string host, int timeout, int port, //Optional string username, //Optional string password, //Optional map<string, string> headers, //Optional int connectTimeout) //Optional Parameter Description Parameter Description query The query including path Example - query /api/v2/img/1 /api/v2/img?id=1 host The name or IP address where the HTTP server is running timeout The number of seconds to wait for a response. If the value is set to 0 (zero), the default timeout will be used. The default value is 15 seconds. port The port number to contact the HTTP server on. Port 80 is used by default. username A username for an account on the HTTP server password Password associated with the username headers Custom HTTP request headers. connectTimeout The number of seconds to wait for a connection to be established. If the value is set to 0 (zero), the default timeout will be used. The default value is 15 seconds. Returns A bytearray from the HTTP server. It will be null if any part of the communication fails. httpGetSecureURL This function uses the GET method to retrieve content from an HTTPS server. The communication channel is encrypted. string httpGetSecureURL ( string query, string host, int timeout, int port, //Optional string username //Optional string password, //Optional map<string, string> headers, //Optional int connectTimeout) //Optional Parameter Description Parameter Description query The query including path Example - query /api/v2/doc/1 /api/v2/doc?id=1 host The name or IP address where the HTTPS server is running timeout The number of seconds to wait for a response. If the value is set to 0 (zero), the default timeout will be used. The default value is 15 seconds. port The port number to contact the HTTPS server on. Port 443 is used by default. username A username for an account on the HTTP server password Password associated with the username headers Custom HTTP request headers. connectTimeout The number of seconds to wait for a connection to be established. If the value is set to 0 (zero), the default timeout will be used. The default value is 15 seconds. Returns Content from the HTTPS server. It will be null if any part of the communication fails. See the section below, TLS/SSL Encryption. httpBinaryGetSecureURL This function uses the GET method to retrieve binary content from an HTTPS server. The communication channel is encrypted. bytearray httpBinaryGetSecureURL ( string query, string host, int timeout, int port, //Optional string username //Optional string password, //Optional map<string, string> headers, //Optional int connectTimeout) //Optional Parameter Description Parameter Description query The query including path Example - query /api/v2/img/1 /api/v2/img?id=1 host The name or IP address where the HTTPS server is running timeout The number of seconds to wait for a response. If the value is set to 0 (zero), the default timeout will be used. The default value is 15 seconds. port The port number to contact the HTTPS server on. Port 443 is used by default. username A username for an account on the HTTP server password Password associated with the username headers Custom HTTP request headers. connectTimeout The number of seconds to wait for a connection to be established. If the value is set to 0 (zero), the default timeout will be used. The default value is 15 seconds. Returns A bytearray from the HTTPS server. It will be null if any part of the communication fails. See the section below, TLS/SSL Encryption. httpPostURL This function uses the POST method to send content to an HTTP server and receives the response. string httpPostURL ( string path, string contentType, string content, string host, int timeout, int port, //Optional string username, //Optional string password, //Optional map<string, string> headers, //Optional int connectTimeout) //Optional Parameter Description Parameter Description path The path Example - path /api/v2/doc contentType The MIME type of the content Example - contentType /application/json content The body of the request host The name or IP address where the HTTP server is running timeout The number of seconds to wait for a response. If the value is set to 0 (zero), the default timeout will be used. The default value is 15 seconds. port The port number to contact the HTTP server on. Port 80 is used by default. username A username for an account on the HTTP server password Password associated with the username headers Custom HTTP request headers. connectTimeout The number of seconds to wait for a connection to be established. If the value is set to 0 (zero), the default timeout will be used. The default value is 15 seconds. Returns Content from the HTTP server. It will be null if any part of the communication fails. httpBinaryPostURL This function uses the POST method to send binary content to an HTTP server and receives the response. bytearray httpBinaryPostURL ( string path, string contentType, bytearray content, string host, int timeout, int port, //Optional string username, //Optional string password, //Optional map<string, string> headers, //Optional int connectTimeout) //Optional Parameter Description Parameter Description path The path Example - path /api/v2/img contentType The MIME type of the content Example - contentType /application/octet-stream content The body of the request host The name or IP address where the HTTP server is running timeout The number of seconds to wait for a response. If the value is set to 0 (zero), the default timeout will be used. Default value is 15 seconds. port The port number to contact the HTTP server on. Port 80 is used by default. username A username for an account on the HTTP server password Password associated with the username headers Custom HTTP request headers. connectTimeout The number of seconds to wait for a connection to be established. If the value is set to 0 (zero), the default timeout will be used. The default value is 15 seconds. Returns A bytearray from the HTTP server. It will be null if any part of the communication fails. httpPostSecureURL This function uses the POST method to send content to an HTTPS server and receives the response. The communication channel is encrypted. string httpPostSecureURL ( string path, string contentType, string content, string host, int timeout, int port, //Optional string username, //Optional string password, //Optional map<string, string> headers, //Optional int connectTimeout) //Optional Parameter Description Parameter Description path The path Example - path /api/v2/doc contentType The MIME type of the content Example - contentType /application/json content The body of the request host The name or IP address where the HTTPS server is running timeout The number of seconds to wait for a response. If the value is set to 0 (zero), the default timeout will be used. Default value is 15 seconds. port The port number to contact the HTTPS server on. Port 443 is used by default. username A username for an account on the HTTP server password Password associated with the username headers Custom HTTP request headers. connectTimeout The number of seconds to wait for a connection to be established. If the value is set to 0 (zero), the default timeout will be used. The default value is 15 seconds. Returns A document from the HTTP server. It will be null if any part of the communication fails. See the section below, TLS/SSL Encryption. httpBinaryPostSecureURL This function uses the POST method to send binary content to an HTTP server and receives the response. The communication channel is encrypted. bytearray httpBinaryPostSecureURL ( string path, string contentType, bytearray content, string host, int timeout, int port, //Optional string username, //Optional string password, //Optional map<string, string> headers, //Optional int connectTimeout) //Optional Parameter Description Parameter Description path The path Example - path /api/v2/img contentType The MIME type of the content Example - contentType /application/octet-stream content The body of the request host The name or IP address where the HTTPS server is running timeout The number of seconds to wait for a response. If the value is set to 0 (zero), the default timeout will be used. Default value is 15 seconds. port The port number to contact the HTTPS server on. Port 443 is used by default. username A username for an account on the HTTP server password Password associated with the username headers Custom HTTP request headers. connectTimeout The number of seconds to wait for a connection to be established. If the value is set to 0 (zero), the default timeout will be used. The default value is 15 seconds. Returns A bytearray from the HTTP server. It will be null if any part of the communication fails. See the section below, TLS/SSL Encryption. httpRequest This function makes an HTTP request and uses the specified method, e g GET, POST, PUT etc. string httpRequest ( string method, string url, string path, string content, string contentType, list dynamicArgs) //Opt Parameter Description Parameter Description method The HTTP method url The host and port of the HTTP server, e g http://host :port header Key-value pairs containing request header fields path The path Example - path /api content The body of the request. contentType The MIME type of the content Example - contentType /application/json dynamicArgs The body of the request httpRequestBasicAuth This function makes an HTTP request with basic authentication and uses the specified method, e g GET, POST, PUT etc. string httpRequestBasicAuth ( string method, string url, map<string,string> header, string contentType, string content, int timeout, string username string password, int connectTimeout) //Optional Parameter Description Parameter Description method The HTTP method url The URL of the HTTP server header Key-value pairs containing request header fields contentType The MIME type of the content Example - contentType /application/json content The body of the request timeout The number of milliseconds to wait for a response. A timeout of 0 (zero) is interpreted as an infinite timeout. username A username for an account on the HTTP server password Password associated with the username connectTimeout The number of seconds to wait for a connection to be established. If the value is set to 0 (zero), the default timeout will be used. The default value is 15 seconds. Returns A response from the HTTP server. It will be null if any part of the communication fails. httpRequestSecureBasicAuth This function makes an HTTPS request with basic authentication and uses the specified method, e g GET, POST, PUT etc. string httpRequestSecureBasicAuth ( string method, string url, map<string,string> header, string contentType, string content, int timeout, string username, string password, int connectTimeout) //Optional Parameter Description Parameter Description method The HTTP method url The URL of the HTTPS server header Key-value pairs containing request header fields contentType The MIME type of the content Example - contentType /application/json content The body of the request timeout The number of milliseconds to wait for a response. A timeout of 0 (zero) is interpreted as an infinite timeout. username A username for an account on the HTTP server password Password associated with the username connectTimeout The number of seconds to wait for a connection to be established. If the value is set to 0 (zero), the default timeout will be used. The default value is 15 seconds. Returns A response from the HTTPS server. It will be null if any part of the communication fails. See the section below, TLS/SSL Encryption. httpRequestSecure This function makes an HTTPS request and uses the specified method, e g GET, POST, PUT etc string httpRequestSecure ( string method, string url, map<string,string> header, string contentType, string content, int timeout, int connectTimeout) //Optional Parameter Description Parameter Description method The method to be performed on the HTTPS server identified by the URL url The URL of the HTTPS server header Key-value pairs containing request header fields contentType The MIME type of the content Example - contentType /application/json content The body of the request timeout The number of milliseconds to wait for a response. A timeout of 0 (zero) is interpreted as an infinite timeout. connectTimeout The number of seconds to wait for a connection to be established. If the value is set to 0 (zero), the default timeout will be used. The default value is 15 seconds. Returns A response from the HTTPS server. It will be null if any part of the communication fails. See the section below, TLS/SSL Encryption. httpRequestDigestAuth This function sends a request to the server using Digest Authentication. string httpRequestDigestAuth ( string method, string url, map<string,string> header, string contentType, string content, int timeout, string username, string password, int connectTimeout, //Optional string realm) //Optional Parameter Description Parameter Description method The HTTP method url The URL of the HTTP server header Key-value pairs containing request header fields contentType The MIME type of the content Example - contentType /application/json content The body of the request username The username required for authentication password The password required for authentication timeout The number of seconds to wait for a response. If the value is set to 0 (zero), the default timeout will be used. The default value is 15 seconds. connectTimeout The number of seconds to wait for a connection to be established. If the value is set to 0 (zero), the default timeout will be used. The default value is 15 seconds. realm The name of the realm Returns A response from the HTTP server. It will be null if any part of the communication fails. httpCreateMultipartBody This function creates a multipart body that can be used in HTTP requests that accept a body. any httpCreateMultipartBody ( ) Parameter Description Parameter Description Returns A multipart body for HTTP requests to which typed binary segments can be added. httpAddMultipartSegment This function adds a typed binary segment to a multipart body that has been created using httpAddMultipartBody function. void httpAddMultipartSegment ( any body, string filename, string contentType, bytearray content ) Parameter Description Parameter Description body A multipart body created by using the httpAddMultipartBody function. filename The filename to be associated with the segment. contentType The MIME type of the content (according to RFC1341). content The binary content of the request. Returns Nothing httpAddMultipartSegmentWithMapping This function adds a typed binary segment to a multipart body that has been created using httpAddMultipartBody function and allows to specify a custom key name. void httpAddMultipartSegmentWithMapping ( any body, string keyName string filename, string contentType, bytearray content ) Parameter Description Parameter Description body A multipart body created by using the httpAddMultipartBody function. keyName A custom key name that will be used for the fragment filename The filename to be associated with the segment. contentType The MIME type of the content (according to RFC1341). content The binary content of the request. Returns Nothing httpMultipartPostURL This function uses the POST method to send multipart binary contents to an HTTP server and receives the response. bytearray httpMultipartPostURL ( string path, any body, string host, int timeout, int port, //Optional string username, //Optional string password, //Optional map<string, string> headers) //Optional Parameter Description Parameter Description path The path on the server to which we should do the POST. body A multipart body created by using the httpCreateMultipartBody function and populated using the httpAddMultipartSegment function. host The name or IP address of the HTTPS server. timeout The number of seconds to wait for a response. If the value is set to 0 (zero), the default timeout will be used. Default value is 15 seconds. port The port to be used for the HTTPS server. Port 80 is used by default. username Username for the account to be used on the HTTPS server. password Password for the account to be used on the HTTPS server. headers Custom HTTP request headers. Returns A bytearray from the HTTPS server. It will be null if any part of the communication fails. Note! For optional parameters, you need to state null in case you state subsequent optional parameters. If there are no subsequent parameters, you do not have to state anything. httpMultipartPostSecureURL This function uses the POST method to send multipart binary content to an HTTPS server and receive the response. bytearray httpMultipartPostSecureURL ( string path, any body, string host, int timeout, int port, //Optional string username, //Optional string password, //Optional map<string, string> headers) //Optional Parameter Description Parameter Description path The path on the server to which we should do the POST. body A multipart body created by using the httpCreateMultipartBody function and populated using the httpAddMultipartSegment function. host The name or IP address of the HTTPS server. timeout The number of seconds to wait for a response. If the value is set to 0 (zero), the default timeout will be used. Default value is 15 seconds. port The port to be used for the HTTPS server. Port 80 is used by default. username Username for the account to be used on the HTTPS server.

---

# Document 2261: ADLS2 File Agents - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205031419/ADLS2+File+Agents
**Categories:** chunks_index.json

This section describes the ADLS (Azure Data Lake Storage) Gen2 File collection and forwarding agents. The ADLS2 File agents collect and forward batches of files from Azure Data Lake Storage Gen2 in your Azure environment and are available in batch workflow configurations. Open Open These agents are available in batch workflow configurations. Info! Currently ADLS File agents support the use of ADLS Gen2. If you have been using the ADLS Gen1, you are required to upgrade to ADLS Gen2 through the Azure portal by 29 February 2024 to avoid any service disruption. For more information, refer to Azure updates | Microsoft Azure . ADLS2 File Collection Agent ADLS2 File Forwarding Agent

---

# Document 2262: MultiForwardingUDR - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204678250/MultiForwardingUDR
**Categories:** chunks_index.json

The MultiForwardingUDR is used by file based forwarding agents to dynamically define the output file names . When a MultiForwardingUDR is used, the Filename Template (FNT) is replaced as Input Type . See for example Disk Forwarding Agent Configuration - Batch for how to define Input Type . See also the Filename Template Tab section in Workflow Template(old) . This functionality is the same for several batch-forwarding agents, such as FTP, HDFS, Archiving, and Amazon S3 . Usually, binary data is sent to the agent and an output file is specified in the Input Type field of the Filename Template tab of the agent. However, filename information can also be selected from a MultiForwardingUDR, which contains both data and name.

---

# Document 2263: The Radius Format - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205034362/The+Radius+Format
**Categories:** chunks_index.json

Each Radius UDR will be packed containing both the request and response UDRs for each case, along side the general NAS information, such as port and IP address. Included with the Radius bundle is a general Radius format, containing all possible record types valid for Radius. The Radius agent will use this format for recognising the type of data. The actual decoding of the contents ( requestMessage ), and the encoding of the reply ( responseMessage ) must be handled through a user defined format. Note! Never change or reuse Radius output UDR from the Radius server. Field Description Field Description attributeType (int) If the packetType is either ACCOUNTINT_REQUEST, DISCONNECT_REQUEST, or CHANGE_OF_AUTHORIZATION_REQUEST, this field will contain the value of the Acct-Status-Type attribute, otherwise it will have the value 0. context (any) This field stores information about the context in which the operation has been invoked. hashKey (string) Provided that duplicate checking is enabled, and CRC32 is selected as method, this field will contain the calculated check sum for the packet. For all other cases it will be set to NULL . packetType (int) This field indicates the type of Radius request, ACCESS_REQUEST, ACCOUNTING_REQUEST, DISCONNECT_REQUEST, or CHANGE_OF_AUTHORIZATION_REQUEST. remoteIP (ipaddress) The IP address of the NAS. remotePort (int) The port used for communication with the NAS. requestMessage (bytearray) This field contains a request UDR. Depending on the settings on the NAS, it can be any of the following packet types : ACCESS_REQUEST ACCOUNTING_REQUEST DISCONNECT_REQUEST CHANGE_OF_AUTHORIZATION_REQUEST In terms of authentication, CHAP is supported. PAP, MSCHAP and EAP are not fully supported. To use these protocols, you must configure the APL code as required. See the example below, APL code to configure authentication using CHAP. For details on these standards, see RFC 2865 ( http://www.ietf.org/rfc/rfc2865.txt ), RFC 2866 ( http://www.ietf.org/rfc/rfc2866.txt ) and RFC 5176 ( http://www.ietf.org/rfc/rfc5176.txt ). An Ultra Format Definition must be designed to handle decoding of this field. responseMessage (bytearray) The field containing a response UDR. Depending on the settings on the NAS, it can be any of the following packet types : ACCESS_ACCEPT ACCESS_REJECT ACCOUNTING_RESPONSE DISCONNECT_ACK DISCONNECT_NAK CHANGE_OF_AUTHORIZATION_ACK CHANGE_OF_AUTHORIZATION_NAK In terms of authentication, CHAP is supported. PAP, MSCHAP and EAP are not fully supported. To use these protocols, you must configure the APL code as required. See the example below, APL code to configure authentication using CHAP. For details on these standards, see RFC 2865 ( http://www.ietf.org/rfc/rfc2865.txt ), RFC 2866 ( http://www.ietf.org/rfc/rfc2866.txt ) and RFC 5176 ( http://www.ietf.org/rfc/rfc5176.txt ). An Ultra Format Definition must be designed to handle decoding of this field. sourceIP (ipaddress) The source IP address. sourcePort (int) The source port. statusMessage (string) The status message field is set to communicate status while a message is being sent or received. throttled (boolean) This fl ag indicates whether the UDR has been throttled or not. Default is false , and if the UDR has been throttled, it will be set to yes . Example - APL code to configure authentication using CHAP import ultra.Default.rad_def; initialize { hashSetAlgorithm("MD5"); } boolean isValidCHAP_Passwd(byte chap_iden, bytearray chap_passwd, bytearray password, bytearray authenticator) { bytearray calc1 = baCreate(1); baSet(calc1,0, chap_iden); bytearray calc2 = baAppend(calc1, password); bytearray calc3 = baAppend(calc2, authenticator); hashReset(); hashUpdate(calc3); bytearray res = hashDigest(); if (baSize(res) != baSize(chap_passwd)) { return false; } int len = baSize(res); int cnt = 0; while (cnt < len) { if (baGet(res,cnt) != baGet(chap_passwd, cnt)) { return false; } cnt = cnt + 1; } // debug ("CHAP OK !!!!!!!!!!!!"); return true; } consume { Radius r = (Radius)input; string result; list<drudr> UDRlist = listCreate(drudr); if (r.requestMessage == null) { debug("Error???!!"); return; } result = udrDecode( "Request_Dec", // Decoder Name UDRlist, r.requestMessage, true); if (null != result) { debug("udrDecode FAILED: "+result); return; } int i; int antObjects = listSize(UDRlist); drudr aReq; while (i < antObjects) { aReq = listGet(UDRlist, i); if (instanceOf(aReq, Accounting_Request_Int)) { // debug("Accounting Request from: "+r.remoteIP+":"+r.remotePort); Accounting_Request_Int req = (Accounting_Request_Int)aReq; Accounting_Response_Int resp = udrCreate(Accounting_Response_Int); resp.Code = 5; resp.Identifier = req.Identifier; resp.Authenticator = req.Authenticator; resp.NAS_Port = req.Identifier; r.responseMessage = udrEncode("Response_Enc", resp); debug("Accounting Request: "+req.Identifier); udrRoute(r, "Responses"); } else if (instanceOf(aReq, Access_Request_Int)) { boolean shouldReject = false; string s_passwd = "hemligt"; // Lookup based on User-Name bytearray b_passwd; strToBA (b_passwd, s_passwd); debug("Access Request from: "+r.remoteIP+":"+r.remotePort); Access_Request_Int req = (Access_Request_Int)aReq; Access_Accept_Int resp = udrCreate(Access_Accept_Int); Access_Reject_Int rej = udrCreate(Access_Reject_Int); rej.Code = 3; rej.Identifier = req.Identifier; rej.Authenticator = req.Authenticator; resp.Code = 2; resp.Identifier = req.Identifier; resp.Authenticator = req.Authenticator; resp.Login_TCP_Port = 6789; // Dummy for my tests ONLY resp.NAS_Port = req.Identifier; // Dummy for my tests ONLY if (udrIsPresent(req.CHAP_Password)) { if (udrIsPresent(req.CHAP_Challenge)) { // debug("CHAP Challenge based: "+req.CHAP_Challenge); if (!isValidCHAP_Passwd(req.CHAP_Iden,req.CHAP_Password, b_passwd, req.CHAP_Challenge)) { list<string> msg = listCreate(string, "CHAP failure: CHAP_Challenge based."); shouldReject = true; rej.Reply_Message = msg; } } else { string auth = baToStr(req.Authenticator); // debug("Authenticator based: "+auth); if (!isValidCHAP_Passwd(req.CHAP_Iden,req.CHAP_Password, b_passwd, req.Authenticator)) { list<string> msg = listCreate(string, "CHAP failure: Authenticator based."); shouldReject = true; rej.Reply_Message = msg; } } if (udrIsPresent(req.User_Password)) { list<string> msg = listCreate(string, "Protocol ERROR: Both User_Password and CHAP_Password is present."); shouldReject = true; rej.Reply_Message = msg; } } else if (udrIsPresent(req.User_Password)) { // debug("User_Password: "+req.User_Password); if ( (! strStartsWith(req.User_Password, s_passwd)) || (strLength(s_passwd) != strLength(req.User_Password))) { list<string> msg = listCreate(string, "Invalid user name/password."); shouldReject = true; rej.Reply_Message = msg; } } else { list<string> msg = listCreate(string, "STATE NOT SUPPORTED YET!"); shouldReject = true; rej.Reply_Message = msg; } if (shouldReject) { r.responseMessage = udrEncode("Response_Enc", rej); } else { r.responseMessage = udrEncode("Response_Enc", resp); } debug(r.responseMessage); udrRoute(r, "Responses"); } else { debug("*** Invalid radius request from "+r.remoteIP+":"+r.remotePort+" ***"); } i = i + 1; } }

---

# Document 2264: Introduction to the Ultra Format Definition Language - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204678205
**Categories:** chunks_index.json

Ultra Format Definition Language (UFDL) is the language used to configure the MediationZone format handling subsystem. It describes the physical structure of incoming and outgoing (external) data, internal (working) formats, as well as decoding and encoding rules. The agents responsible for translations are the Decoder and Encoder agents. The Decoder converts external raw data (byte arrays) into internal data (UDRs). The Encoder works the other way around, converting internal formats into raw output data for the forwarding agents. Open Decoders and Encoders processing data UFDL syntax is entered in the Ultra Format Configuration . This chapter includes the following sections: Building Blocks The Ultra Module

---

# Document 2265: Aggregation Agent Configuration - Real-Time - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204639887/Aggregation+Agent+Configuration+-+Real-Time
**Categories:** chunks_index.json

The real-time Aggregation agent's configuration dialog includes the following tabs: General APL Code Storage General Tab The General tab enables you to assign an Aggregation profile to the agent and to define error handling. With the Error Handling settings, you can decide what you want to do if no timeout has been set in the code or if there are unmatched UDRs. Open The Aggregation agent configuration dialog - General tab Setting Description Setting Description Profile Click Browse... and select an Aggregation profile. All the workflows in the same workflow configuration can use different Aggregation profiles. For this to work, the profile has to be set to Default in the Field settings tab in the Workflow Properties dialog. After this, each workflow in the Workflow Table can be assigned with the correct profile. Force Read Only Select this check box to only use the aggregation storage for reading aggregation session data. If you enable the read only mode, timeout handling is also disabled. When using file storage and sharing an Aggregation profile across several workflow configurations, the read and write lock mechanisms that are applied to the stored sessions must be considered: There can only be one write lock at a time in a profile. This means that all but one Aggregation agent must have the Force Read Only setting enabled. If all of the Aggregation agents are configured with Force Read Only , any number of read locks can be granted in the profile. If one write lock or more is set, a read lock cannot be granted. If Timeout is Missing Select the action to take if timeout for sessions is not set in the APL code using sessionTimeout . The setting is evaluated after each consume or timeout function block has been called (assuming the session has not been removed). The available options are: Ignore - Do nothing. This may leave sessions forever in the system if the closing UDR does not arrive. Abort - Abort the agent execution. This option is used if timeout must be set at all times. Hence, a missing timeout is considered being a configuration error. Use Default Timeout - Allow the session timeout to be set here instead of within the code. If enabled, a field becomes available. In this field, enter the timeout, in seconds. If No UDR Match is Found Select the action that the agent should take when a UDR that arrives does not match any session, and Create Session on Failure is disabled: Ignore - Discard the UDR. Log Event - Discard the UDR and generate a message in the System Log. Route - Send the UDR on the route selected from the on list. This is a list of output routes through which the UDR can be sent. The list is only activated if Route is selected. APL Code Tab Storage The Storage tab contains settings that are specific for the selected storage in the Aggregation profile. Different settings are available in batch and real-time workflows. File Storage When using file storage for sessions in a batch workflow, the Storage tab contains a setting to control how often the timeout block should be executed. In this tab, it is also specified when the changes to the aggregation data is written to file. Open The Aggregation agent configuration dialog - Storage tab for File Storage Setting Description Setting Description Session Timeout Interval (seconds) Determines how often, in seconds, the timeout block is invoked for outdated sessions. Storage Commit Interval (seconds) Determines how often, in seconds, the in-memory data is saved to files on disk. Storage Commit Interval (#Processing Calls) Determines the number of Processing Calls before the in memory data is saved to files on disk. A 'Processing Call' is an execution of any of the blocks consume , command or timeout . If both this option and the Storage Commit Interval (seconds) are configured, commits are made when any of them are fulfilled. Note! If Storage Commit Interval (seconds) and/or Storage Commit Interval (#Processing Calls) are configured, data left in memory when the workflow stops will be saved to file. If Storage Commit Interval (seconds) and Storage Commit Interval (#Processing Calls) are not configured, none of the sessions in-memory are stored on disk. The session count displayed in the Aggregation Inspector will not include these sessions. When the Max Cached Sessions in the Aggregation profile is exceeded, and Storage Commit Interval (seconds) and Storage Commit Interval (#Processing Calls) are not configured, the agent deletes the oldest session. This is done in order to allocate space for the new session while still staying within the limit. Couchbase Storage Open The Aggregation agent configuration dialog - Storage tab for Couchbase Setting Description Setting Description If Error Occurs in Storage Select the action that the agent should take when an error occurs in the storage: Ignore - Discard the UDR. Log Event - Discard the UDR and generate a message in the System Log. Route - Send the UDR on the route selected from the on list. This is a list of output routes on which the UDR can be sent. The list is only activated only if Route is selected. Disable Timeout Select this check box to disable the timeout handling. Redis Storage Open The Aggregation agent configuration dialog - Storage tab for Redis Setting Description Setting Description If Error Occurs in Storage Select the action that the agent should take when an error occurs in the storage: Ignore - Discard the UDR. Log Event - Discard the UDR and generate a message in the System Log. Route - Send the UDR on the route selected from the on list. This is a list of output routes on which the UDR can be sent. The list is only activated if Route is selected. Disable Timeout Select this check box to disable the timeout handling.

---

# Document 2266: Creating a Profile and Provisioning via REST - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204677009/Creating+a+Profile+and+Provisioning+via+REST
**Categories:** chunks_index.json

The URI for the REST interface is http://<SC host>:<port>/api/v1/kpi and the resource path is /model . The SC host and port are specified in the kpi-model service configuration. For further information, see KPI Management - External Software . You provision a service model by sending a single POST method request. This will create a new KPI profile configuration or update an existing one. The request must contain all the required objects in a JSON representation of the data model. You can retrieve the configuration by using the GET method. Basic authentication is used and you must pass user credentials for each REST call. POST Follow this procedure to provision a service model: Stop all KPI Management workflows. Use the HTTP POST method to provision the model. You must specify the name of the KPI profile that will contain the service model using the config parameter. If the specified KPI profile does not exist, it will be created automatically. The hostname and port in the URL should match the properties in the kpi-model service configuration. If the hostname and port are not specified in the service configuration localhost:8095 will be used. Example - POST with curl command $ curl -X POST -T "example.json" http://username:passw@myhostname:8095/api/v1/kpi/model?config=<model name> The model is now ready for deployment. GET Use HTTP GET to retrieve a provisioned service model. You must specify the name of the KPI profile that contains the service model using the config parameter. Example - GET with curl command $ curl http://username:passw@myhostname:8095/api/v1/kpi/model?config=KPI.model1

---

# Document 2267: configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204646504/configuration
**Categories:** chunks_index.json

usage: configuration [options] This command enables you to handle your configurations in various ways, such as enabling, disabling, checking status, etc. Option Description Option Description [-de, --decrypt <passphrase>] Use this option to decrypt all configurations of the default configuration type, or configurations matching the regular expression stated with the -n option. You must enter the passphrase that you used to encrypt the configuration(s). [-d, --disable] Use this option to disable all enabled configurations of the default configuration type, or configurations matching the regular expression stated with the -n option and of the type stated with the -t option. The default value is false . [-e, --enable] Use this option to enable all disabled configurations of the default configuration type, or configurations matching the regular expression stated with the -n option and of the type stated with the -t option. The default value is false . [-en, --encrypt <passphrase>] Use this option to encrypt all configurations of the default configuration type, or configurations matching the regular expression stated with the -n option. You must enter a passphrase. [-l, --list] Use this option to list all configurations of the default type, or of the type stated with the -t option. The default value is false . [ -o, --locked ] Use this option to list only locked configurations. The default value is false . [-n, --name] Use this option to indicate which configurations you want to perform an action on. Only configurations matching the regular expression stated with the -n option will be affected. The default value is .* . [-s, --status] Use this option to display the status of all configurations of the default type, or configurations matching the regular expression stated with the -n option and of the type stated with the -t option. The default value is false . [-t, --type] Use this option to indicate the type of configuration you want to perform an action on. Only configurations matching the stated type will be affected. Note! Currently, Event Notification and Alarm Detection are the only type of configuration supported. When used in combination with - -decrypt or --encrypt , the -t option is ignored. Note! The options -d, -e, -l and -s are mutually exclusive, meaning that only one of the options will be applied even if you have stated several. Examples - Using the configuration command To list all the configurations in the Default folder: $ mzsh <username>/<password> configuration -l -n "Default..*" To list all the configurations in the Default folder with their status: $ mzsh <username>/<password> configuration -s -n "Default..*" To list all Alarm Detection configurations with their status: $ mzsh <username>/<password> configuration -s -t "Alarm Detection" To enable all Event Notification configurations in all folders beginning with name event: $ mzsh <username>/<password> configuration -e -t "Event Notification" -n "event.*" To list all locked Event Notification configurations: $ mzsh <username>/<password> configuration -l -o -t "Event Notification" To encrypt all configurations in the Default folder which have a name that begins with test: $ mzsh <username>/<password> configuration -en "passphrase123" -n "Default.test.*" Return Codes Listed below are the different return codes for the configuration command: Code Description Code Description 0 Will be returned if the command was executed successfully. 1 Will be returned if the input could not be processed. 2 Will be returned if the input did not generate any action. 3 Will be returned if something unexpected happened. 4 Will be returned if one or more configurations were locked, or if the user does not have access to one or more of the configurations.

---

# Document 2268: Diameter Agents - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204606955/Diameter+Agents
**Categories:** chunks_index.json

This section describes the Diameter profiles and the Diameter agents. The agents are processing agent for real-time workflow configurations. Prerequisites The user of this information should be familiar with the Diameter Base Protocol, RFC 6733 ( http://www.faqs.org/rfcs/rfc6733.html ), which obsoletes RF C 35 88 The section contains the following subsections: Diameter Configuration and Design Considerations Diameter Profiles Diameter Stack Agent Diameter Request Agent Diameter Syntax Description A Diameter Example

---

# Document 2269: Charging Gateway Function (CGF) 5G - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205849478/Charging+Gateway+Function+CGF+5G
**Categories:** chunks_index.json

Version Date Version Editor Comments 2022-09-05 1.0 Patrik Bruce First version Definition Charging Gateway Function (CGF) is defined using the Charging architecture and principles outlined by 3GPP TS32.240 (Ref 1), and 3GPP TS32.295 (Ref 2) as the baseline. It is constructed as a set of capabilities to facilitate charging for telecom network connectivity services delivered by the CSP using 5G stand-alone networks (5GC), characterized by, and limited to: CGF Architecture options Charging Function (CHF) interfacing the CGF using the Ga interface (GTP), or using an alternate supported interface Output Data Targets Billing Domain (BD) functions via the Bx, Bd, and/or vendor proprietary, interfaces Interconnect billing platforms Roaming settlement platforms Revenue Assurance systems Fraud Management systems Analytics and reporting platforms Data warehouse and data lake systems Commercial Models and purposes Direct B2C connectivity Direct B2B connectivity Telecom network inbound roaming Telecom network outbound roaming This Right to Use (RTU) grants the licensee the right to use DigitalRoutes MediationZone software in accordance with this definition.

---

# Document 2270: Database Table Functions - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204612323/Database+Table+Functions
**Categories:** chunks_index.json

A special table type is used to handle database table lookups with optional caching in memory. All of the following column references may be either numeric (column index, starting at 0) or string (column name). The table lookup only supports int, string, and date types. Note! For MS SQL, the column type timestamp is not supported in tables accessed by MediationZone. Use column type datetime instead. Please refer to the Notes section in the Database Functions page for details on the allowed database data types. The following functions for the Database Table are described here: 1 sqlExec 2 tableCreate 3 kustoTableCreate 4 tableCreateIndex 5 tableGet 6 tableLookup 7 tableRowCount 8 tableGetMetaInfo sqlExec The sqlExec function is used when updating and inserting data into tables. It returns an integer value stating how many rows were updated/inserted. SQL errors will cause runtime errors (the workflow aborts). int sqlExec ( string dbProfile, string sqlQuery ) Parameter Description Parameter Description dbProfile Name of the database where the table resides, including folder name. sqlQuery SQL query to send to the database. Note that SQL statements must not end with ';'. Calls to stored procedures must be embedded in blocks. Examples - Valid for Oracle databases "<SQL query>" "BEGIN <procedure>; END;" Returns An integer equaling the number of rows updated or inserted. tableCreate Returns a table that holds the result of a database query. SQL errors in the table lookup will cause runtime errors (workflow aborts). table tableCreate ( string dbProfile, string sqlQuery ) Parameter Description Parameter Description dbProfile Name of the database where the table resides. sqlQuery SQL query to send to the database. Note that SQL statements must not end with ';'. Only columns of type number, date and string are supported. disableCommit (Removed from MediationZone 9.3.0.1) An optional parameter to disable the commit statement from being performed at the end of every SQL transaction for this particular function. Setting this parameter to false will result in the commit statement to be performed at the end of every SQL transaction for this particular function. By default, the system has the disableCommit set to true unless otherwise changed via this parameter. Note! It should be noted that on recent Oracle versions, the DBLink SQL transaction behaviour has changed, where every single SQL statement for remote database transaction requires a commit or rollback statement in order to close a connection. In addition, Redshift users should set this to false as every statement needs to be committed. Returns A table Example - Using tableCreate To avoid performance problems, the table must be read from the database as seldom as possible. For instance, once for each workflow invocation. initialize { table myTab = tableCreate("myFolder.myProfile", "select user from subscribers" ); } kustoTableCreate The kustoTableCreate function looks up information in Kusto databases. The resulting table is of the same type as that resulting from tableCreate, meaning that it can be used together with functions such as tableLookup, tableGet etc. The format of this function is the following: table kustoTableCreate(string profileName, string, databaseName, string query) Parameter Description Parameter Description profileName The name of the profile used. This should be an Azure Profile of the type Azure Data Explorer. databaseName The name of the database in Azure. The cluster name is specified in the Azure profile. query The query to apply to the database in question. This is written in the Kusto Query Language, see example below. Example - Using kustoTableCreate table result = kustoTableCreate("Default.AZDLookupDb", "lookupdb", "test | where isnotnull(BeginLocation) | project EpisodeNarrative, EventNarrative | limit 5000"); The Kusto data types will be interpreted as the following types in the resulting table object: Azure Type APL Type Azure Type APL Type bool boolean datetime date dynamic string int int long long real bigdec string string decimal bigdec timespan string tableCreateIndex Creates an index for one or several columns of a table. This will greatly increase the efficiency of subsequent tableLookup calls on these columns using the equality operator. If the column already has an index, this function has no effect. Note! An index will not be created unless there are at least five rows in the table. void tableCreateIndex ( table tableValue, int|string column1, ... int|string columnN ) Parameter Description Parameter Description tableValue A table object columnN A column index (starting with 0 for the first column), or name for which to create an index. At least one column must be specified. Returns Nothing Example - Using tableCreateIndex initialize { table myTab = tableCreate("myFolder.myProfile", "select id, user from anum" ); tableCreateIndex( myTab, "id" ); } tableGet The tableGet function returns the value of a table entry. The value is returned as an any object, which means the returned value is of the same type as the value extracted. any tableGet ( table tableValue, int row, int|string column) Parameter Description Parameter Description tableValue A table object row The row index. The first row is indexed 0 (zero). column Column index or name. The first column is indexed 0 (zero). Returns Any depending on the column type tableLookup The tableLookup function returns a table containing all the rows of the original table matching the specified column value(s). At least one pair of (column, operator, value) group must be specified. table tableLookup ( table tableValue, int|string column1, string operator1, string|date|int value1, any value1a, //Optional (used only for "between" and "not between") ... int|column columnN, string operatorN, any valueN, any valueNa ) //Optional (used only for "between" and "not between") Parameter Description Parameter Description tableValue A table object columnN Column index or name. The first column is indexed 0 (zero). operatorN Operator specifying the range of the requested values. Possible operators are: = != > < <= >= between - Requires two operands, ( valueN, valueNa ). not between - Requires two operands, ( valueN, valueNa ). starts with - The operator can only be applied to string columns. valueN/ValueNa Value(s) matching columnN and operatorN Returns A table matching the query Example - Using tableLookup The following example looks for a specific entry in the in-memory table returned by the preceding tableCreate command. table myTab; // To avoid performance problems, the table is read // from the database once for each time the // workflow is activated. initialize { myTab = tableCreate( "myFolder.myProfile", "select user from subscribers" ); } consume { table user = tableLookup( myTab, "user", "=", input.anum ); if ( tableRowCount( user ) > 0) { // At least one entry found. } else { // No entry found. } } Note! When a column is of date type, the matching values must contain date, time, and timezone, as demonstrated in the example below. Example - Using tableLookup when a column is of date type table myTab; initialize { myTab = tableCreate("myFolder.myProfile","select date_field from all_dates"); } consume { date dateFilter; //The matching value must contain date, time, and timezone. strToDate(dateFilter,"01/05/2016 00:00:00","dd/MM/yyyy HH:mm:ss","CET"); table myLookup = tableLookup(myTab,"date_field","=",dateFilter); if ( tableRowCount( myLookup ) > 0) { // At least one entry found. } else { // No entry found. } } tableRowCount The tableRowCount function returns the number of rows in a table. int tableRowCount (table tableValue ) Parameter Description Parameter Description tableValue A table object Returns An integer stating the number of rows found. tableGetMetaInfo The tableGetMetaInfo function returns the column name, column type and index status. tableGetMetaInfo(table tableValue); Parameter Description Parameter Description tableValue A table object Returns A list where each element is of type ColumnMetaInfoUDR . Note! For Oracle db, tableName and isIndex functions are not supported. Example - Using tableGetMetaInfo table myTab = tableCreate("Default.MySql", "select id, name, remark from test" ); list<ColumnMetaInfoUDR> columnInfoList = tableGetMetaInfo(myTab); // Display the number of columns. int columnCount = listSize(columnInfoList); // Get the meta info of the first column ColumnMetaInfoUDR firstColInfo = listGet(columnInfoList, 0); firstColInfo.columnName // get column name firstColInfo.columnType // get column type firstColInfo.isIndex // get index status (boolean type) firstColInfo.tableName // get table name Note! ColumnType format follows Data types format.

---

# Document 2271: MIM (MIM) - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205849077/MIM+MIM
**Categories:** chunks_index.json



---
**End of Part 97** - Continue to next part for more content.
