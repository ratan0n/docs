# RATANON/MZ93-DOCUMENTATION - Part 77/112

---
**Dataset:** ratanon/mz93-documentation
**Part:** 77 of 112
**GitHub:** https://github.com/ratan0n/docs/tree/main/mz93-documentation
**Size:** ~69.2 KB
---

The Data Veracity Profile is used to select the particular database that Data Veracity will be connected. The profile can also generate the SQL scripts to be used for creating the database tables where the erroneous UDRs will be stored in. The Data Veracity profile is loaded when you start a workflow that depends on it. Changes to the profile become effective when you restart the workflow. Configuration To create a new Data Veracity profile, click the New Configuration button from the Configuration dialog available from Build View , and then select Data Veracity Profile from the menu. The contents of the menus in the menu bar may change depending on which configuration type has been opened in the currently active tab. The Data Veracity profile uses the standard menu items and buttons that are visible for all configurations, and these are described in Common Configuration Buttons . UDR Tab Open Data Veracity profile - UDR Tab The following settings are available in the UDR Tab of the Data Veracity profile: Setting Description Setting Description Database Profile This is the database the agent will connect and send data to. Click the Browse... button to get a list of all the database profiles that are available. For further information see Database Profile . Data Veracity is supported for use with the following databases: PostgreSQL 13 PostgreSQL 14 PostgreSQL 15 Oracle Database 19c SAP HANA 2.0 SP 7 UDR Type Mapping UDR Type Mapping UDRs to be used by the Data Veracity Profile are listed here MIM Mapping Use MIM Select this check box to allow the use MIMs listed under the Named MIMs table. Named MIMs This list will display the user-defined MIMs that can be made available for use by the Data Veracity Forwarding Agent. Generate SQL This text box will generate the SQL statements for the selected UDRs' table schema and indexes for the TXN_ID, ERROR_CODE, INSERT_TIME and STATE field. The schema will be generated based on the number of UDRs in the UDR Type Mapping table. Click the SQL button to generate the SQL statements. Warning! Users will have to copy the SQL script generated in the text box to create the Data Veracity tables on their own in the database listed in the Database profile. The Data Veracity profile will not automatically create the tables for you. PostgreSQL Schema Name There will not be a schema name included with the SQL command generated for PostgreSQL. Info! The user should create adequate indexes along with the indexes already provided by the script, in order to achieve the best performance for Data Veracity. Note! The name of the column constraints will be based on the Internal UDR name. An example would be, if an Internal UDR is named customerTI, the name of the column constraints will be prefixed with customerTI. When there are multiple Internal UDRs with identical names but present in different folders in your configuration, the names of the column constraints will be the same as well. This will cause a conflict error to occur when creating the table in your Database. It is highly recommended to have proper naming conventions for Internal UDRs, to prevent any conflicts. Batch Tab Open Data Veracity profile - Batch Tab The following settings are available in the Batch Tab of the Data Veracity profile: Setting Description Setting Description Database Profile This is the database the agent will connect and send data to. Click the Browse... button to get a list of all the database profiles that are available. For further information see Database Profile . Data Veracity is supported for use with the following databases: PostgreSQL 13 PostgreSQL 14 PostgreSQL 15 Oracle Database 19c SAP HANA 2.0 SP 7 Enabled This checkbox enables the batch mode configuration. Table Name Enter the table name that is to be used with this profile. MIM Mapping Use MIM Select this check box to allow the use MIMs listed under the Named MIMs table. Named MIMs This list will display the user-defined MIMs that can be made available for use by the Data Veracity Forwarding Agent. Generate SQL This text box will generate the SQL statements for the selected UDRs' table schema and indexes for the TXN_ID, ERROR_CODE, INSERT_TIME and STATE fields. The schema will be generated based on the number of UDRs in the UDR Type Mapping table. Click the SQL button to generate the SQL statements. Warning! Users will have to copy the SQL script generated in the text box to create the Data Veracity tables on their own in the database listed in the Database profile. The Data Veracity profile will not automatically create the tables for you. PostgreSQL Schema Name There will not be a schema name included with the SQL command generated for PostgreSQL. Info! The user should create adequate indexes along with the indexes already provided by the script, in order to achieve the best performance for Data Veracity. Note! The name of the column constraints will be based on the Internal UDR name. An example would be, if an Internal UDR is named customerTI, the name of the column constraints will be prefixed with customerTI. When there are multiple Internal UDRs with identical names but present in different folders in your configuration, the names of the column constraints will be the same as well. This will cause a conflict error to occur when creating the table in your Database. It is highly recommended to have proper naming conventions for Internal UDRs, to prevent any conflicts. Generate SQL Dialog Box When a user clicks on the Generate SQL button in either tab, the associated dialog box will open. Here the generated SQL statement can be viewed. Open Results of a Tables SQL Script

---

# Document 1820: Example - ECS handling of UDRs - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205032920/Example+-+ECS+handling+of+UDRs
**Categories:** chunks_index.json

This example shows the necessary configurations for a workflow that sends UDRs to the ECS, and for a workflow configured to collect this data. The UDRs sent to the ECS have an Error Case, that is, a string associated with the Error Code. Typically, a UDR is sent to the ECS as a result of a failing table lookup evaluation. To make sure that the error is not temporary and that the tables did not simply need to be updated first, the UDRs are recycled. A new workflow is created, collecting them from the ECS and reevaluating the same table lookup. If the problem still exists, the UDR is sent back to the ECS. The section contains the following subsections: ECS Forwarding Workflow (UDR) ECS Collection Workflow (UDR)

---

# Document 1821: Real-Time Disk_Deprecated Collection Agent UDR Types - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204610682/Real-Time+Disk_Deprecated+Collection+Agent+UDR+Types
**Categories:** chunks_index.json

This section describes the UDR types that are used with the Disk_Deprecated collection agent. FileBegin The FileBegin UDR type is used to indicate that collection of a file has begun. This UDR type does not contain any data from the collected file. Field Description Field Description FileName (string) This field contains the name of the processed UDR. IsRecovery (boolean) This field is set to true if the collected file was recovered from DR_TMP_DIR after a workflow restart. FileEnd The FileEnd UDR type is used to indicate that the Disk_Deprecated collection agent has routed the final or complete data set to the workflow. This UDR type does not contain any data from the collected file. When the workflow receives an FileEnd UDR type, it must acknowledge the reception by routing it back to the Disk_Deprecated collection agent. If the workflow fails to acknowledge the reception of the UDR within the time specified in Timeout (ms) , a timeout occurs. The collected file is then handled according to the Timeout Handling settings. Field Description Field Description RecordCount (int) This field contains the total number of partial data sets in the collected file. FileName (string) This field contains the name of the processed file. IsRecovery (boolean) This field is set to true if the collected file was recovered from DR_TMP_DIR after a workflow restart. FileError The FileError UDR type is used to indicate errors that occur during the collection of a file. If the agent fails to read, move, or decode the file, this UDR type is routed to the workflow. Field Description Field Description ErrorMessage (string) This field contains a description of the error. Filename (string) This field contains the name of the erroneous file. IsRecovery (boolean) This field is set to true if the collected file was recovered from DR_TMP_DIR after a workflow restart. FileSend The FileSend UDR type is used for routing data from the collected file to the workflow. Depending on the value of the Read Size (b) setting and the actual size of a collected file, the agent produces one or more UDRs that contain a partial or complete data set. Field Description Field Description Counter (int) This field contains a sequence number that identifies the partial data set in the collected file. Data (any) This field contains the output data (payload) from the agent. FileName (string) This field contains the name of the processed UDR. IsRecovery (boolean) This field is set to true if the collected file was recovered from DR_TMP_DIR after a workflow restart.

---

# Document 1822: Kafka Real-Time Collection Agent Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/301138396
**Categories:** chunks_index.json

You open the Kafka collection agent configuration dialog from a workflow configuration. Click Build  New Configuration. Select Workflow from the Configurations dialog. When prompted to Select workflow type , select Realtime. Click Add agent and select Kafka from the Collection tab in the Agent Selection dialog Open Kafka real-time collection agent configuration. Setting Description Setting Description Profile Select the Kafka profile you want the agent to use in this drop-down list. The Kafka profile defines from which Kafka broker the agent collects data. Consumer Group The consumer group to collect data from. Maximum poll size The number of messages to request at a time. A low value will affect performance negatively. Offset management At Least Once When you select this option, a message is guaranteed to be collected at least once. This setting may sometimes result in duplicates. At Most Once When you select this option, a message is guaranteed to be collected at most once. This setting may sometimes result in data being lost. Start At Requested When you select this option you must determine from which offset you want to start collecting data and add an incoming route for the UDRs. When a UDR arrives on that route, the collection of data will start from the given offset. You set the offset using the KafkaOffset UDR in an Analysis agent, see KafkaOffset . This setting reduces the risk of data loss, and prevents messages from being processed multiple times after a restart. See the example in Legacy KafkaOffsetUDR . Start At Beginning When you select this option you must determine from which offset you want to start collecting data. Messages are then collected from the first offset. With this setting there is a risk that messages will be processed multiple times after a restart. Start At End When you select this option you must determine from which offset you want to start collecting data. Messages are then selected from the last offset from when the workflow was started. With this setting there is a risk that data can be lost after a restart. Assignment When you select this option, messages can be collected from one or several topics. The topics can be identified in two different ways: Topic Pattern Enter a regular expression that the names of the topics you want to collect from must match, see Java Platform, Standard Edition Java API Reference . Topic Names This option displays a list and an Add button. Add one or several topic names to collect from. The exact names must be entered. Regular expressions cannot be used. Topic Partitions This option will display a list and an Add button. Add one or several topic names and partitions to collect from. The exact names must be entered. Regular expressions cannot be used. Below are a few examples of valid partition declarations: Example of collection from partition 0: Partitions: 0 Example of collection from the three partitions 0, 8 and 12: Partitions: 0,8,12 Example of collection from the six partitions 0, 3, 4, 5, 6, and 7: Partitions: 0,3-7 Note! If you select Topic Partitions , automatic rebalancing will not take place, and you will have to handle potential rebalancing manually if needed.

---

# Document 1823: Expressions - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204744241/Expressions
**Categories:** chunks_index.json

UFDL may use APL in order to introduce expressions to validate the incoming data. Basically, all APL functions are available, except for plug-ins. Example - Using expressions external myRecord : identified_by( !strStartsWith( myField, "0201" ) ) { ascii myField : terminated_by(0xA); };

---

# Document 1824: Request UDR - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204643542
**Categories:** chunks_index.json

The Request UDR is used to send requests from the UI Builder Agent. The following fields are included in the Request UDR : Field Description Field Description body (bytearray) This field contains the HTTP message body. clientHost (string) This field contains the client IP. clientPort (int) This field contains the client port. contextID (long) This field contains the context ID files (map<string,bytearray>) This field may contain files sent in a POST request with Encoding as MULTIPART. It will consist of a key-value pair, where the key is the file name and the value is the byte array of the file. headerFields (map<string,list<string>>) This field may contain an HTTP header. The header fields are stored as key-value pairs. httpMethod (string) This field must contain the HTTP method. requestedUri (string) This field contains a requested URI. params (map<string,list<string>>) This field may contain HTTP query parameters and/or POST parameters parsed from request body. username (string) This field contains username of logged in user.

---

# Document 1825: mzcli - wfgroupaddwf - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/547979986/mzcli+-+wfgroupaddwf
**Categories:** chunks_index.json

Usage usage: wfgroupaddwf <workflow group name> <regexp for workflow name(s)> This command adds one or more workflows to an existing workflow group. Workflows that are already members of the workflow group are skipped by the command. Return Codes Listed below are the different return codes for the wfgroupaddwf command: Code Description 0 Will be returned if the command was successful. 1 Will be returned if the number of arguments is incorrect. 2 Will be returned if the group is not found. 3 Will be returned if the workflow(s) cannot be found. 4 Will be returned if there is no connection to Mgmt_Utils. 5 Will be returned if the group is locked. 6 Will be returned if the updating of group data failed. 7 Will be returned if the workflow type is not supported. 8 Will be returned if the configuration lock could not be released.

---

# Document 1826: mzcli - user - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/547979866/mzcli+-+user
**Categories:** chunks_index.json

Usage usage: user enable <name> usage: user disable <name> This command is used for the scripted management of users. For instance, at systemimport that imports all users as disabled, you need this command to enable the users again. Return Codes Listed below are the different return codes for the user command: Code Description Code Description 0 Will be returned if the command was successful. 1 Will be returned if the argument count is incorrect.

---

# Document 1827: shutdown - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205657036/shutdown
**Categories:** chunks_index.json

usage: shutdown [ -q ] [ -f ] <running server process> ... This command is used to stop pico instances. Note! This command is valid only for the MZ_HOME owner. If you have specified more than one pico instance, the command will close down the processes in the order specified by the arguments. If the pico instance is an EC, the command will first close down running workflows and then it shuts down the specified running server processes. Each pico instance will be shut down in an orderly fashion, that is, it will do the required cleanup before terminating. The last thing that the pico instance does is to report back to mzsh that it is about to terminate. When this is done mzsh will continue with the next pico instance. In rare occasions the shutdown command is not forceful enough. In these cases, the kill command can work. For further information, see kill . Options The command accepts the following option: Option Description [-q] Generates less or no information messages. [-r<#>] Number of retries to check for process shutdown. Default: -r20 [-f] Forces workflow stop when shutting down the EC regardless of system configuration This is the default behavior, When the Execution Context property pico.ec.do_graceful_shutdown has been set to false , you can use this option for graceful shutdown of ECs. Return Codes Listed below are the different return codes for the shutdown command: Code Description 0 Will be returned if the command was successful, or if the pico instances are not running. 1 Will be returned if no pico instance can be found. 3 Will be returned if the shutdown is interrupted 4 Will be returned if the shutdown fails.

---

# Document 1828: Duplicate Detection - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205816704/Duplicate+Detection
**Categories:** chunks_index.json

MediationZone supports duplicate detection both on Batch and UDR level. All configurations of the Duplicate Detection function parameters are configured and editable by the administrators/operators through the user interface. The Duplicate Batch Detection Agent allows the user to configure which parameters should be used to check for duplication. These include: the size of the batch, a checksum value calculated on the batch contents, and any data related to the batch such as a file name. When a duplicate batch/UDR is detected it can be routed to the Error Correction System for further analysis or discarded. An alarm can also be generated and mapped to any type of action, e.g. SMS, Email, Log file, and System Log. The Duplicate UDR Detection Agent also allows the user to configure which attributes from a UDR that should be stored and used for duplication control. Open Duplicate UDR Detection configuration

---

# Document 1829: Provisioning of PCC Rules - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204743052/Provisioning+of+PCC+Rules
**Categories:** chunks_index.json

Provisioning of rules is either done via a batch workflow, using APL functions, via a REST web interface, or via the Web UI. The APL functions are described in APL - PCC Rules Provisioning Plugin, the REST web service in REST HTTP Interface, and the Web UI. Provisioning of rules always targets a specific, internally predefined, area. Changes in one area are not reflected in the other. There are two different areas, TEST and PROD, that the provisioning can target. A typical way of using the areas would be to provision rules data to the TEST area and, when considered ready, copy the content of the TEST area to the PROD area, where a workflow can access them. Using two different areas - one for testing and one for production - makes it possible to test the rules before moving them into production. This chapter includes the following sections: APL - PCC Rules Provisioning Plugin REST HTTP Interface Provisioning PCC Rules in Desktop

---

# Document 1830: Dynamic Fields Tab - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204997586/Dynamic+Fields+Tab
**Categories:** chunks_index.json

In the Dynamic Fields tab you can configure fields that you may retrieve data from in the APL code. These fields can then be updated from the workflow table. The fields can be of either boolean , int , or string type. Open Example, The Dynamic Fields tab, using the APL function dynamicFieldGet Item Description Item Description Fields The Fields table displays all the dynamic fields that have been created. Name This column shows the name of the field. Description This column will show any description of the field that has been added. Type This column shows the type of the field. Default Value This column will show any default value that has been set for the field. To add a dynamic field: In the Dynamic Fields tab click the Add button. The Add new dynamic field definition dialog opens. Open Add new dynamic field definition dialog Select an existing category, or enter a new category in the Category field. If there is no existing category, you have to enter a new one. Enter a name for the field in the Name field. If you want, you can enter a brief description of the field in the Description field. Select what type the field should have; boolean , int , or string in the Type field. Enter/select a default value for the field in the Default Value field. This is mandatory for boolean and int fields, but optional for string fields. Click the Add button to add the field to the table in the Dynamic Fields tab. Repeat the steps above for all the fields you want add and then click the Close button. Your new fields are now added, and you can configure them to be either Final , Default , or Per Workflow in the Workflow Table tab.

---

# Document 1831: Types of Workflows - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205848974
**Categories:** chunks_index.json

There are three different types of workflows: batch, real-time and tasks. Each have a slightly different execution behavior, but their modeling and configuration structure is the same. Batch Workflow Batch workflows are used to collect process and distribute file-based data, also referred to as an offline model. These workflows can be configured for multi-threaded execution, enforcing a first-in-first-out processing order, and a strict transaction boundary based on each batch processed. Batch workflows are transaction safe as data processing can be rolled back and reprocessed if required. This since the file currently being collected and forwarded is saved as temporary files during processing. Only when the file is fully processed, all data is transaction saved. Should the workflow be interrupted, the temporary files are removed. When the workflow is restarted, it will restart from the beginning with the file it was previously processing. Open Batch workflow example. Real-Time Workflow Real-time workflows enable online processing of requests/answers with other systems. These workflows enable execution of large numbers of independent execution paths simultaneously using a multi-threading execution model. The order of the processing of records hence varies. Open Real-time workflow example Task Workflow Task workflows are used to execute common activities such as test, cleanup or maintenance tasks. A number of System Tasks are pre-configured in MediationZone and can be complemented with any user-defined activity. List of available Task Agents: Data Hub  Removes old partitions from a database. Data Veracity  Executes repair configurations to manage faulty UDRs extracted from workflows to a database. SQL Agent  Executes SQL statements on a database. Script  Executes a shell script with optional parameters. Unit Test Runner  Runs a unit test. Open Open Executing an SQL script using an SQL agent in a Task workflow

---

# Document 1832: Data Hub Task Agent - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205655539/Data+Hub+Task+Agent
**Categories:** chunks_index.json

The Data Hub task agent is used to remove old partitions from the database. This agent must be used in a Task workflow. Configuration Open Data Hub Task agent configuration Field Description Field Description Profile Click Browse to select a predefined Data Hub profile. The profile contains the settings required to connect to the database. Table Select the database table from the drop-down list. Partition Column Select a partition column in the table that is of integer type. The column should indicate the age of the inserted row. Remove Older Than Enter the maximum number of hours, days, months, or years that Data Hub should retain data. Note! The displayed time unit depends on the selected value in the Type Hint column in the Data Hub profile. For instance, if you have selected YYYYMM the time unit will be months. For further information, see Data Hub Profile .

---

# Document 1833: Analysis Agent Events - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204606355/Analysis+Agent+Events
**Categories:** chunks_index.json

Agent Message Events The agent does not produce any message events. However, by configuring the Analysis agent with a suitable APL code there are possibilities of producing message events. See Log and Notification Functions in the APL Reference Guide for further information about available functions. Debug Events The agent does not produce any debug events. However, by configuring the Analysis agent with suitable APL code there are possibilities of producing debug events. See Log and Notification Functions in the APL Reference Guide for further information about available functions.

---

# Document 1834: Derby Database Backup and Restore - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204613231/Derby+Database+Backup+and+Restore
**Categories:** chunks_index.json

To produce a full online backup of the Platform databases when running Derby, use the following mzsh command: mzsh mzadmin/<password> derbybackup <backup directory> To restore the database: Shut down MediationZone. Move all directories and files from the backup directory to the Derby restore directory. Use the following command to retrieve the restore directory: mzsh topo get --format data-only topo://container:<container name>/pico:platform/val:config.properties.derby.restore.path Startup MediationZone. After a restore has been performed, the directory defined in derby.restore.path will be renamed upon the next startup, in order to prevent another restore from being made. The new name consists of the old name with the _USED suffix attached. The startup procedure also creates an entry in the System Log, showing the outcome of the restore. Note! In the event where the derby data was not restored, the restoration process can be repeated again by either removing the _USED suffix from the directory name and its content, or repeating the steps above again. Hint! One way of performing regular backups is to create a script that runs the derbybackup command and includes a date as part of the directory name. The script may be called at a regular interval, for instance, once a day, by adding and scheduling a script executor in a Task Workflow in the Workflow Editor.

---

# Document 1835: SQL Loader Agent Events - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204740831/SQL+Loader+Agent+Events
**Categories:** chunks_index.json

Debug Events Debug messages are dispatched when debug is used. During execution, the messages are shown in the Workflow Monitor and can also be stated according to the conguration done in the Event Notification Editor. The agent does not itself produce any debug events. However, APL offers the possibility of producing events.

---

# Document 1836: Workflow Event - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204670835
**Categories:** chunks_index.json

This is the parent for all Workflow events. The following fields are included: workflowKey - The name of the internal workflow key. workflowName - A list indicating what workflow(s) information to select. workflowGroupName - The name of the workflow group. The following fields are inherited from the Base event, and described in more detail in Base Event : category contents - Workflow: <Workflow name> eventName origin receiveTimeStamp severity timeStamp

---

# Document 1837: RCP Encryption - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205783296
**Categories:** chunks_index.json

The RCP (MediationZone internal protocol) communication can be protected by using TLS (Transport Layer Security). To enable TLS, various configurations need to be made in the Platform and pico-instance settings. Furthermore, TLS can be used with or without authentication. The TLS support uses a keystore file, generated by using the Java standard tool keytool . For further information about keytool , see the JDK product documentation. Crypto algorithms are in place in the system to ensure secure data communication. The default crypto algorithms used are AES. If you require to modify the default crypto algorithms, see Platform Properties (to be removed) or Desktop Properties . This chapter includes the following sections: TLS Configuration Properties TLS Standard Setup Enabling Client Authentication

---

# Document 1838: External References Functions - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204677926/External+References+Functions
**Categories:** chunks_index.json

externalReferenceGet This function fetches an External Reference value from an external source. For information about External References, see External Reference Profile in the Desktop user's guide. string externalReferenceGet (< ext ref profile >, < ext ref key >) Warning! If you have a large number of external references, for example, greater than 1000, this may impact the workflow startup and processing. It is therefore recommended that extraction is done using an APL configuration in multiple functions and that extraction is executed in the initialize block of an Analysis agent. Example - With a large number of external references If you have a large number of external references, the APL configuration may look as shown below: final string EXT_REF = "Default.PRF_ExtRef"; map<string, string> keyValueMap; void loadStrings1(){ keyValueMap = mapCreate(string, string); mapSet(keyValueMap, "EXT_VAL1", externalReferenceGet(EXT_REF, "EXT_VAL1")); mapSet(keyValueMap, "EXT_VAL2", externalReferenceGet(EXT_REF, "EXT_VAL2")); mapSet(keyValueMap, "EXT_VAL3", externalReferenceGet(EXT_REF, "EXT_VAL3")); mapSet(keyValueMap, "EXT_VAL4", externalReferenceGet(EXT_REF, "EXT_VAL4")); mapSet(keyValueMap, "EXT_VAL5", externalReferenceGet(EXT_REF, "EXT_VAL5")); ... } void loadStrings1000(){ keyValueMap = mapCreate(string, string); mapSet(keyValueMap, "EXT_VAL1001", externalReferenceGet(EXT_REF, "EXT_VAL1001")); mapSet(keyValueMap, "EXT_VAL1002", externalReferenceGet(EXT_REF, "EXT_VAL1002")); mapSet(keyValueMap, "EXT_VAL1003", externalReferenceGet(EXT_REF, "EXT_VAL1003")); mapSet(keyValueMap, "EXT_VAL1004", externalReferenceGet(EXT_REF, "EXT_VAL1004")); mapSet(keyValueMap, "EXT_VAL1005", externalReferenceGet(EXT_REF, "EXT_VAL1005")); ... } It is recommended that you configure an Analysis agent so that extraction is done in the initialize block only extracting the required references for the specific agent, as shown below: import apl.Default.extreflib1; initialize{ loadStrings1(); } consume { ... } Parameter Description Parameter Description ext ref profile : The External Reference Profile ext ref key : The External Reference key Returns The External Reference value Note! To convert the returned value type from string to another data type, use one of the APL string conversion commands. For further information see Type Conversion Functions externalReferenceGetList This function fetches an External Reference value (with value type as List) from an external source. See External Reference Profile in the Desktop user's guide. list<any> externalReferenceGetList (< ext ref profile >, < ext ref key >) Parameter Description Parameter Description ext ref profile : The External Reference profile ext ref key : The External Reference key Note! The key must have the Value type as List in the profile Returns A list of External Reference values externalReferenceGetMap This function fetches an External Reference value (with value type as Map) from an external source. See External Reference Profile in the Desktop user's guide. map<string, any> externalReferenceGetMap (< ext ref profile >, < ext ref key >) Parameter Description Parameter Description ext ref profile : The External Reference profile ext ref key : The External Reference key Note! The key must have the Value type as Map in the profile. Returns A map of External Reference key/value pairs

---

# Document 1839: SMPolicy Data Model - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204645975/SMPolicy+Data+Model
**Categories:** chunks_index.json

The UDRs in the PCF.SMPolicy data model store information about different rules regarding the session management in 5G networks. The main objects of PCF.SMPolicy are: Object Description Object Description RulesMapping A flexible mapping table used to map from an external representation to a list of rules. The mapping should not include any information related to a specific subscriber. Target The different rules used by the mapping object, see the sections PCCRule UDR and SessionRule UDR below. PCCRule Rules contains the rule settings regarding session management that should be applied for the subscribers. SessionRule A session rule consists of policy information elements associated with PDU session. A session rule is dynamically provisioned by the PCF to the SMF (i.e., there are only dynamic session rules). This page contains the following sections: 1 Overview of the SMPolicy Data Model 2 RulesMapping UDR 3 Target UDR 4 SessionRule UDR 4.1 Ambr UDR 4.2 AuthorizedDefaultQos UDR 4.2.1 Arp UDR 5 PCCRule UDR 5.1 FlowInformation UDR 5.1.1 EthFlowDescription UDR 5.2 TscaiInputContainer UDR 5.3 DownlinkDataNotificationControl UDR 6 QosData UDR 7 ChargingData UDR 8 TrafficControlData UDR 8.1 RedirectInformation UDR 8.2 UpPathChgEvent UDR 8.3 SteeringMode UDR 9 UsageMonitoringData UDR 10 QosCharacteristics UDR 11 QosMonitoringData UDR 12 ConditionData UDR Overview of the SMPolicy Data Model The different UDRs within the SMPolicy data model are connected as follows: Open Overview of the PCF Rules Data Model RulesMapping UDR In the RulesMapping UDR you set up the priority for the rules mapping, the PCF rules to be applied, products to connect to, etc that the RulesMapping should use. Field Description Field Description ID (int) The unique ID of the RulesMapping UDR. Priority (int) The priority of the mapping item. A low value indicates a high priority. The priority determines the order in which the matched mapping objects are returned. Arguments (list<string>) The arguments of a mapping object, for example the product. The arguments are stated with regular expressions, which means that entering "Products [2-5]" will match Products 2, 3, 4, or 5. Targets (list<Target>) A list of Target UDR(s) which represent different SMPolicyDecisions used by the mapping object. The Target UDRs reference the different rules that should be applied. A rule is a set of policy information elements associated with a PDU session, or with service data flows (i.e., with a PCC rule). Two types of rules are defined: Session rule PCC rule Both Session rules and PCC rules are composed of embedded information elements as well as information elements that are part of the referenced objects, for example condition data, or usage monitoring policy data. StopFallthrough (boolean) Used in the rules selection process. If several rules apply, but the one with highest priority has been configured with StopFallthrough set to Yes , only this rule will be returned if it is active. If it is not active, all other active rules that apply will be returned. Below is a screenshot of the UDR Assistance displaying the RulesMapping UDR: Open RulesMapping UDR Target UDR With the Target UDR you define different SMPolicyDecisions, according to 3GPP specification TS 29.512 v. 16.8.0 . Descriptions from this specification are in quotation marks. Field Description Field Description ID (int) The unique ID of the Target UDR. Name (string) The name of the target. Period (Period (PCF.Common)) The Period UDR that should be used. sessRules (list<SessionRule (PCF.SMPolicy)>) A list of SessionRule UDR(s) that should be used. This attribute shall not be removed if it was provisioned. pccRules (list<PccRule (PCF.SMPolicy)>) A list of PccRule UDRs that should be used. qosDecs (list<QosData (PCF.SMPolicy)> A list of of QosData UDRs with policy decisions that should be used. This attribute shall not be removed if it was provisioned. chgDecs (list<ChargingData (PCF.SMPolicy)> A list of ChargingData UDRs that should be used. traffContDecs (list<TrafficControlData (PCF.SMPolicy)>) A list of TrafficControlData UDRs with policy decisions that should be used. This attribute shall not be removed if it was provisioned. umDecs (list<UsageMonitoringData (PCF.SMPolicy)>) A list of UsageMonitoringData UDRs that should be used. qosChars (list<QosCharacteristics (PCF.SMPolicy)>) A list of QosCharacteristics UDRs, for non- standard 5QIs and non-preconfigured 5QIs, that should be used. qosMonDecs (list>QosMonitoringData (PCF.SMPolicy)>) A list of QosMonitoringData UDRs with policy decisions that should be used. offline (boolean) "Indicates if the offline charging is applicable to the PDU session when it is included and set to true. This attribute may only be supplied by the PCF in the response to the POST request that requested the creation of an individual SM policy resource. If both the "offline" attribute and the "online" attribute is omitted by the PCF, the default charging method pre-configured at the SMF if available shall be applied to the PDU session. If both offline and online charging methods are pre-configured at the SMF, the SMF shall determine either of them to be applied to the PDU session based on local policy. The offline attribute and the online attribute shall not be simultaneously present with the same value, i.e., both set to true or both set to false." online (boolean) "Indicates the online charging is applicable to the PDU session when it is included and set to true. This attribute may only be supplied by the PCF in the response to the POST request that requested the creation of an individual SM policy resource. If both the "offline" attribute and the "online" attribute is omitted by the PCF, the default charging method pre- configured at the SMF if available shall be applied to the PDU session. If both offline and online charging methods are pre-configured at the SMF, the SMF shall determine either of them to be applied to the PDU session based on local policy. The offline attribute and the online attribute shall not be simultaneously present with the same value, i.e., both set to true or both set to false." conds (list>ConditionData (PCF.SMPolicy)> A list of ConditionData UDRs that should be used. Below is a screenshot of the UDR Assistance displaying the Target UDR: Open Target UDR SessionRule UDR The SessionRule UDR contains session level policy information, according to 3GPP specification TS 29.512 v. 16.8.0 . Descriptions from this specification are in quotation marks. A session rule consists of policy information elements associated with PDU session. A session rule is dynamically provisioned by the PCF to the SMF (i.e., there are only dynamic session rules). Field Description Field Description ID (int) The unique ID of the SessionRule UDR. Name (string) The name of the session rule. authSessAmbr (Ambr (PCF.SMPolicy)) The Ambr UDR to be used. authDefQos (AuthorizedDefaultQos (PCF.SMPolicy) The AuthorizedDefaultQoS UDR to be used. sessRuleID (string) "The identifier for the session rule used within the PDU session." refUmData (string) "A reference to the UsageMonitoringData policy decision type." refUmN3gData (string) "A reference to the UsageMonitoringData policy decision type to apply for Non- 3GPP access. If refUmN3gData is omitted, the the reference in the field refUmData will be used for both, 3GPP and Non-3GPP, accesses." refCondData (string) "A reference to the condition data." Below is a screenshot of the UDR Assistance displaying the SessionRule UDR: Open SessionRule UDR Ambr UDR The Ambr UDR defines the Aggregate Maximum Bit Rate , according to 3GPP specification TS 29.512 v. 16.8.0 and 3GPP specification TS 29.571 v. 15.3.0 . Descriptions from these specifications are in quotation marks. Field Description Field Description ID (int) The unique ID of the Ambr UDR. Name (string) The name of the Ambr UDR. uplink (long) "Defines the AMBR for uplink." downlink (long) "Defines the AMBR for downlink. resourceType (string) "Determines whether the resource type is: NON_GBR  Non-GBR QoS Flow NON_CRITICAL_GBR  Non-delay critical GBR QoS flow CRITICAL_GBR  Delay critical GBR QoS flow" priorityLevel (int) "Unsigned integer indicating the 5QI Priority Level, within a range of 1 to 127." packetDelayBudget (int) "Defines the Packet Delay Budget, expressed in milliseconds. Minimum = 1." packetErrRate (string) "Defines the Packet Error Rate, expressed as a "scalar x 10-k" where the scalar and the exponent k are each encoded as one decimal digit.. Pattern: '([0-9]E-[0-9])$' Examples: Packer Error Rate 4x10-6 shall be encoded as "4E-6". Packer Error Rate 10-2 shall be encoded as "1E2"." averWindow (int) "Defines the Averaging Window, expressed in milliseconds. Minimum = 1. Maximum = 4095. Default = 2000." maxDataBurstVol (int) "Defines the Maximum Data Burst Volume, expressed in Bytes. Minimum = 1. Maximum = 4095." Below is a screenshot of the UDR Assistance displaying the Ambr UDR: Open Ambr UDR AuthorizedDefaultQos UDR In the AuthorizedDefaultQos UDR contains the Authorized Default QoS information according to 3GPP specification TS 29.512 v. 16.8.0 . Descriptions from this specification are in quotation marks. Field Description Field Description ID (int) The unique ID of the AuthorizedDefaultQos UDR. Name (string) The name of the AuthorizedDefaultQos UDR. f5qi (int) "5G QoS Identifier. It shall be included when the Authorized Default QoS is initially provisioned." arp (Arp (PCF.SMPolicy)) "The Arp UDR defining the allocation and retention priority to be used. It shall be included when the Authorized Default QoS is initially provisioned." priorityLevel (int) "Unsigned integer indicating the 5QI Priority Level, within a range of 1 to 127." averWindow (int) "Indicates the averaging window. This IE can be present only for GBR QoS flow or a Delay Critical GBR QoS flow." maxdataBurstVol (int) "Unsigned integer indicating the maximum data burst volume. Either the maxDataBurstVol IE or the extMaxDataBurstVol IE may be present for a Delay Critical GBR QoS flow. If the maximum data burst volume value to be transmitted is lower than or equal to 4095 Bytes, the maxDataBurst Vol IE is used. If the EMDBV feature is supported by both the PCF and the SMF, the extMaxDataBurstVol IE is used to transmit maximum data burst volume values higher than 4095 Bytes." gbrUI (long) "Indicates the guaranteed bandwidth in uplink. This attribute is only applicable to GBR type or delay critical GBR type 5QI." gbrDI (long) "Indicates the guaranteed bandwidth in downlink. This attribute is only applicable to GBR type or delay critical GBR type 5QI." maxbrUI (long) "Indicates the max bandwidth in uplink. This attribute is only applicable to GBR type or delay critical GBR type 5QI." maxbrDI (long) "Indicates the max bandwidth in downlink. This attribute is only applicable to GBR type or delay critical GBR type 5QI." qnc (boolean) "The QNC, QoS Notification Control, according to 3GPP 23.503 v. 15.2.0, indicates whether notifications are requested from 3GPP RAN when the GFBR can no longer (or again) be fulfilled for a QoS Flow during the lifetime of the QoS Flow." extMaxDataBurstVol (int) "Unsigned integer indicating the maximum data burst volume. Either the maxDataBurstVol IE or the extMaxDataBurstVol IE may be present for a Delay Critical GBR QoS flow. If the maximum data burst volume value to be transmitted is lower than or equal to 4095 Bytes, the maxDataBurst Vol IE is used. If the EMDBV feature is supported by both the PCF and the SMF, the extMaxDataBurstVol IE is used to transmit maximum data burst volume values higher than 4095 Bytes. " Below is a screenshot of the UDR Assistance displaying the AuthorizedDefaultQos UDR: Open AuthorizedDefaultQos UDR Arp UDR In the Arp UDR you define the Allocation and Retention Priority, according to 3GPP specification TS 29.571 v. 15.3.0 . Descriptions from this specification are in quotation marks. Field Description Field Description ID (int) The unique ID of the Arp UDR. priorityLevel (int) "Defines the relative importance of a resource request." preemptCap (string) "Defines whether a service data flow may get resources that were already assigned to another service data flow with a lower priority level." preemptVuln (string) "Defines whether a service data flow may lose the resources assigned to it in order to admit a service data flow with higher priority level." Below is a screenshot of the UDR Assistance displaying the Arp UDR: Open Arp UDR PCCRule UDR The PCCRule UDR contains the PCC rule information according to 3GPP specification TS 29.512 v. 16.8.0 . Descriptions from this specification are in quotation marks. "A PCC rule is a set of information elements enabling the detection of a service data flow and providing parameters for policy control and/or charging control. There are two different types of PCC rules as defined in 3GPP TS 23.503: Dynamic PCC rules PCC rules that are dynamically provisioned by the PCF to the SMF. These PCC rules may be either predefined or dynamically generated in the PCF. Dynamic PCC rules can be installed, modified and removed at any time. Predefined PCC rules PCC rules that are preconfigured in the SMF. Predefined PCC rules can be activated or deactivated by the PCF at any time. Predefined PCC rules within the PCF may be grouped allowing the PCF to dynamically activate a set of PCC rules. Additionally, predefined PCC rules may be grouped within the SMF as predefined PCC rule bases which allow the PCF to dynamically activate these sets of rules. In this case, the PCC rule identifier is used to hold the predefined PCC rule base identifier." Field Description Field Description ID (int) The unique ID of the PCC rule. Name (string) The name of the PCC rule. flowInfos (list<FlowInformation (PCF.SMPolicy)>) "A list of FlowInformation UDRs containing IP flow packet filter information to be used. The property is only applicable for the NEF." appId(string) "A reference to the application detection filter configured at the UPF. The property is only applicable for the NEF." appDescriptor (string) "ATSSS rule application descriptor. It shall be present when the PDU session is a MA PDU session and the SDF template contains an Application Identifier (i.e. when the "appId" attribute is present)." contVer (int) "Indicates the content version of the PCC rule." pccRuleId (string) "Univocally identifies the PCC rule within a PDU session. The PCC Rule Id uniquely identifies the PCC rule, within a PDU Session. It is used between PCF and SMF for referencing PCC rules." precedence (long) "Determines the order in which this PCC rule is applied relative to other PCC rules within the same PDU session. It shall be included if the "flowInfos" attribute is included or may be included if the "appId" attribute is included when the PCF initially provisions the PCC rule. One of "ueIpv4Addr", "ueIpv6Addr" or "macAddr" shall be included. If ipv4 or ipv6 address is provided, IP flow information shall be provided. If MAC address is provided and the AppId feature is not supported, Ethernet flow information (either "ethFlowInfo", or if the feature EnEthAsSessionQoS_5G is supported, "enEthFlowInfo")shall be provided. If the AppId feature is supported, one of IP flow information, Ethernet flow information (if EthAsSessionQoS_5G and/or EnEthAsSessionQoS_5G is supported) or External Application Identifier shall be provided." afSigProtocol (string) "Indicates the protocol used for signalling between the UE and the AF. The default value "NO_INFORMATION" shall apply, if the attribute is not present and has not been supplied previously." appReloc (boolean) "It indicates that the application cannot be relocated once a location of the application is selected by the 5GC when it is included and set to "true". Indication of application relocation possibility. The default value "false" shall apply, if the attribute is not present and has not been supplied previously." addrPreserInd (boolean) "Indicates whether UE IP address should be preserved. This attribute shall set to "true" if preserved, otherwise, set to "false". The default value "false" shall apply, if the attribute is not present and has not been supplied previously." refQosData (list<string>) "A reference to the QoSData policy type decision type. Properties marked with a feature are applicable. If no features are indicated, the related property applies for all the features." refAltQosParams (list<string>) "A Reference to the QoS Data policy decision type for the Alternative QoS parameter sets of the service data flow. Only the "qosId" attribute, "5qi" attribute, "maxbrUl" attribute, "maxbrDl" attribute, "gbrUl" attribute and "gbrDl" attribute are applicable within the QosData data type. This data type represents an ordered list, where the lower the index of the array for a given entry, the higher the priority." refTcData (list<string>) "A reference to the TrafficControlData policy decision type. Properties marked with a feature are applicable. If no features are indicated, the related property applies for all the features." refChgData (list<string>) "A reference to the ChargingData policy decision type. Properties marked with a feature are applicable. If no features are indicated, the related property applies for all the features." refchgN3gData (list<string>) "A reference to the ChargingData policy decision type only applicable to Non-3GPP access. Properties marked with a feature are applicable. If no features are indicated, the related property applies for all the features. The attributes "reqGbrDl", "reqGbrUl", "reqMbrDl", "reqMbrUl", "maxTscBurstSize", "req5Gsdelay", "reqPer" (if the ExtQoS_5G feature is supported), and "priority" within the "tscQosReq" attribute may be provided only if the "qosReference" attribute is not provided." refUmData (list<string>) "A reference to UsageMonitoringData policy decision type. Properties marked with a feature are applicable. If no features are indicated, the related property applies for all the features." refUmN3gData (list<string>) "A reference to UsageMonitoringData policy decision type only applicable to Non-3GPP access. When the Ethernet flow information is provided and, the EthAsSessionQoS_5G and EnEthAsSessionQoS_5G features are supported, either the "ethFlowInfo" or the "enEthFlowInfo" shall be provided, but not both simultenously." refCondData (string) "A reference to the condition data." refQoSMon (list<string>) "A reference to QoSMonitoringData policy decision type. Properties marked with a feature are applicable. If no features are indicated, the related property applies for all the features." tscaiInputDI (TscaiInputContainer (PCF.SMPolicy)) "The TscaiInputContainer UDR that transports TSCAI input parameters for TSC traffic at the ingress interface of the DS-TT/UE (uplink flow direction)." tscaiInputUI (TscaiInputContainer (PCF.SMPolicy)) "The TscaiInputContainer UDR that transports TSCAI input parameters for TSC traffic at the ingress of the NW-TT (downlink flow direction)." ddNotifCtrl (DownlinkDataNotificationControl (PCF.SMPolicy)) "The first DownlinkDataNotificationControl UDR to use. See the DownlinkDataNotificationContol section below." ddNotifCtrl2 (DownlinkDataNotificationControl (PCF.SMPolicy)) "The second DownlinkDataNotificationControl UDR to use. See the DownlinkDataNotificationContol section below." disUeNotif (bolean) "Indicates whether to disable QoS flow parameters signalling to the UE when the SMF is notified by the NG-RAN of changes in the fulfilled QoS situation. The fulfilled situation is either the QoS profile or an Alternative QoS Profile. - true: the QoS flow parameters signalling to the UE is disabled; - false (default): the QoS flow parameters signalling to the UE is not disabled." Below is a screenshot of the UDR Assistance displaying the PccRules UDR: Open PccRules UDR FlowInformation UDR The FlowInformation UDR contains the flow information, according to 3GPP specification TS 29.512 v. 16.8.0 and 3GPP TS 24.008 v. 13.7.0 . Descriptions from these specifications are in quotation marks. Field Description Field Description ID (int) The unique ID of the FlowInformation UDR. flowDescription (string) "Contains the packet filters of the IP flow(s)." ethFlowDescription (EthFlowDescription (PCF.SMPolicy)) "Defines the EthFlowDescription UDR, which is a packet filter for an Ethernet flow, to be used. If the "fDir" attribute is included, it shall be set to "DOWNLINK". If the "fDir" attribute is never provided, the address information within the "ethFlowDescription" attribute shall be encoded in downlink direction." packFiltId (string) "An identifier of packet filter." packetFilterUsage (boolean) "The packet shall be sent to the UE. The default value "FALSE" shall apply, if the attribute is not present and has not been supplied previously." tosTrafficClass (string) "2-octet string. The first octet contains the Ipv4 Type-of-Service or the Ipv6 Traffic-Class field and the second octet contains the ToS/Traffic mask field in hexadecimal representation. Each character in the string shall take a value of "0" to "9" or "A" to "F" and shall represent 4 bits. One example is that of a TFT packet filter as defined in 3GPP 3GPP TS 24.008 v. 13.7.0 ." spi (string) "4 octet string, representing the security parameter index of the IPSec packet in hexadecimal representation. Each character in the string shall take a value of "0" to "9" or "A" to "F" and shall represent 4 bits. One example is that of a TFT packet filter as defined in 3GPP TS 24.008 v. 13.7.0 ." flowLabel (string) "3-octet string, representing the Ipv6 flow label header field in hexadecimal representation. Each character in the string shall take a value of "0" to "9" or "A" to "F" and shall represent 4 bits. One example is that of a TFT packet filter as defined in 3GPP 3GPP TS 24.008 v. 13.7.0 ." flowDirection (string) "Indicates the direction/directions that a filter is applicable, downlink only, uplink only or both down- and uplink (bidirectional)." Below is a screenshot of the UDR Assistance displaying the FlowInformation UDR: Open FlowInformation UDR EthFlowDescription UDR The EthFlowDescription UDR defines a packet filter for an Ethernet flow, according to 3GPP specification TS 29.512 v. 16.8.0 . Descriptions from this specification are in quotation marks. Field Description Field Description ID (int) The unique ID of the EthFlowDescription UDR. destMacAddr (string) "Destination MAC address." fDesc (string) "Contains the flow description for the Uplink or Downlink IP flow. It shall be present when the Ethertype is IP." fDir (string) "Contains the packet filter direction. Only the "DOWNLINK" or "UPLINK" value is applicable." sourceMacAddr (string) "Source MAC address." vlanTags (list<string>) "Source MAC address end. If this attribute is present, the sourceMacAddr attribute specifies the source MAC address start. E.g. srcMacAddrEnd with value 00-10-A4-23-3E-FE and sourceMacAddr with value 00-10-A4-23-3E-02 means all MAC addresses from 00-10-A4-23-3E-02 up to and including 00-10-A4-23-3E-FE." srcMacAdrEnd (string) "Customer-VLAN and/or Service-VLAN tags containing the VID, PCP/DEI fields as defined in IEEE 802.1Q [17] and IETF RFC 7042 [18] . The first/lower instance in the array stands for the Customer-VLAN tag and the second/higher instance in the array stands for the Service-VLAN tag. Each field is encoded as a two-octet string in hexadecimal representation. Each character in the string shall take a value of "0" to "9" or "A" to "F" and shall represent 4 bits. The most significant character representing the PCP/DEI field shall appear first in the string, followed by character representing the 4 most significant bits of the VID field, and the character representing the 4 least significant bits of the VID field shall appear last in the string. If only Service-VLAN tag is provided, empty string for Customer-VLAN tag shall be provided." destMaccAddrEnd (string) "Destination MAC address end. If this attribute is present, the destMacAddr attribute specifies the destination MAC address start." Below is a screenshot of the UDR Assistance displaying the EthFlowDescription UDR: Open EthFlowDescription UDR TscaiInputContainer UDR The TscaiInputContainer contains TSCAI (Time Sensitive Communication Assistance Information) input information, according to 3GPP specification TS 29.514 v. 16.6.0 . Descriptions from this specification are in quotation marks. Field Description Field Description ID (int) The unique ID of the TscaiInputContainer UDR. Name (string) The name of the TscaiInputContainer UDR. burstArrivalTime (date) Indicates the arrival time of the data burst in reference to the external GM. periodicity (int) Unsigned 64-bit integer identifying a period of time in units of microseconds, i.e. 0 to (264)-1. Minimum = 0. Maximum = 18446744073709551615. Identifications of the time period between the start of two bursts in reference to the external GM. Below is a screenshot of the UDR Assistance displaying the TscaiInputContainer UDR: Open TascaiInputContainer UDR DownlinkDataNotificationControl UDR In the DowlinkDataNotificationControl UDR you determine whether notification of DDD (Downlink Data Delivery) Status is required with related information as well as whether notification of DDN Failure is requested, according to 3GPP specification TS 29.512 v. 16.8.0 . Descriptions from this specification are in quotation marks. Field Description Field Description ID (int) The unique ID of the DownlinkDataNotificationControl UDR. notifCtrlsInds (list<string>) "Determines the event notification(s) requested. In this release of the specification the maximum number of elements in the array is 2." typesOfNotif (list<string>) "Contains the type of notification of DDD Status. In this release of the specification the maximum number of elements in the array is 2." Below is a screenshot of the UDR Assistance displaying the DownlinkDataNotificationControl UDR: Open DownlinkDataNotificationControl UDR QosData UDR The QosData UDR contains various QoS parameters, according to according to 3GPP specification TS 29.512 v. 16.8.0 . Descriptions from this specification are in quotation marks. Field Description Field Description ID (int) The unique ID of the QosData UDR. qosId (string) "Univocally identifies the QoS control policy data within a PDU session." f5qi (int) "Identifier for the authorized QoS parameters for the service data flow. It shall be included when the QoS data decision is initially provisioned and "defQosFlowIndication" is not included or is included and set to false." maxbrUI (long) "Indicates the max bandwidth in uplink." maxbrDI (long) "Indicates the max bandwidth in downlink." gbrUI (long) "Indicates the guaranteed bandwidth in uplink." gbrDI (long) "Indicates the guaranteed bandwidth in downlink." arp (Arp (PCF.SMPolicy)) "Defines the Arp UDR to be used." qnc (boolean) "Indicates whether notifications are requested from 3GPP NG-RAN when the GFBR can no longer (or again) be guaranteed for a QoS Flow during the lifetime of the QoS Flow. Default value "FALSE" is used, if not present and has not been supplied previously." reflectiveQos (boolean) "Indicates whether the QoS information is reflective for the corresponding non- GBR service data flow. Default value "FALSE" is used, if not present and has not been supplied previously." sharingKeyDI (string) "Indicates, by containing the same value, what PCC rules may share resource in downlink direction." sharingKeyUI (string) "Indicates, by containing the same value, what PCC rules may share resource in uplink direction." priorityLevel (int) "Indicates a priority in scheduling resources among QoS Flows. Applicable only when a value different from the standardized value for this 5QI." averWindow (int) "Represents the duration over which the guaranteed and maximum bitrate shall be calculated. Applicable only when a value different from the standardized value for this 5QI." maxDataBurstVol (int) "Denotes the largest amount of data that is required to be transferred within a period of 5G-AN PDB. Applicable only when a value different from the standardized value for this 5QI. Either the maxDataBurstVol IE or the extMaxDataBurstVol IE may be present. If the maximum data burst volume value to be transmitted is lower than or equal to 4095 Bytes, the maxDataBurst Vol IE is used. If the EMDBV feature is supported by both the PCF and the SMF, the extMaxDataBurstVol IE is used to transmit maximum data burst volume values higher than 4095 Bytes." maxPacketLossRateDI (int) "Indicates the downlink maximum rate for lost packets that can be tolerated for the service data flow." maxPacketLossRateUI (int) "Indicates the uplink maximum rate for lost packets that can be tolerated for the service data flow." defQosFlowIndicaton (boolean) "Indicates that the dynamic PCC rule shall always have its binding with the QoS Flow associated with the default QoS rule. Default value "FALSE" is used, if not present and has not been supplied previously." extMaxDataBurstVol (int) "Denotes the largest amount of data that is required to be transferred within a period of 5G-AN PDB. Applicable only when a value different from the standardized value for this 5QI. Either the maxDataBurstVol IE or the extMaxDataBurstVol IE may be present. If the maximum data burst volume value to be transmitted is lower than or equal to 4095 Bytes, the maxDataBurst Vol IE is used. If the EMDBV feature is supported by both the PCF and the SMF, the extMaxDataBurstVol IE is used to transmit maximum data burst volume values higher than 4095 Bytes." packetDelayBudget (int) "Unsigned integer indicates the packet delay budget. Packet Delay Budget expressed in milliseconds." packetErrorRate (string) "String indicating the packet error rate. Examples: Packet Error Rate 4x10-6 shall be encoded as "4E-6". Packet Error Rate 10-2 shall be encoded as"1E-2"." Below is a screenshot of the UDR Assistance displaying the QosData UDR: Open QosData UDR ChargingData UDR The ChargingData UDR contains charging related parameters, according to 3GPP specification TS 29.512 v. 16.8.0 . Descriptions from this specification are in quotation marks. Field Description Field Description ID (int) The unique ID of the ChargingData UDR. chgId (string) "Univocally identifies the charging control policy data within a PDU session." meteringMethod (string) "Defines what parameters shall be metered for offline charging. If the attribute is not present but it has been supplied previously, the previous information remains valid. If the attribute is not present and it has not been supplied previously or the attribute has been supplied previously but the attribute is set to NULL, the metering method pre-configured at the SMF is applicable as default metering method." offline (boolean) "Indicates the offline charging is applicable to the PCC rule when it is included and set ot true. The absence of both the "offline" attribute and "online" attribute or only one attribute is present and set to false within a Charging Data decision instance indicates that the default charging method of the PDU session is applicable to the PCC rule referring to the Charging Data decision. Either "offline" attribute or "online" attribute set to true shall be provisioned initially if there is no default charging method applied to the PDU session. The offline attribute and the online attribute shall not be simultaneously present with the same value, i.e., both set to true or both set to false." online (boolean) "Indicates the online charging is applicable to the PCC rule when it is included and set ot true. The absence of both the "offline" attribute and "online" attribute or only one attribute is present and set to false within a Charging Data decision instance indicates that the default charging method of the PDU session is applicable to the PCC rule referring to the Charging Data decision. Either "offline" attribute or "online" attribute set to true shall be provisioned initially if there is no default charging method applied to the PDU session. The offline attribute and the online attribute shall not be simultaneously present with the same value, i.e., both set to true or both set to false." sdfHandl (boolean) "Indicates whether the service data flow is allowed to start while the SMF is waiting for the response to the credit request. The default value "FALSE" (blocking) shall apply, if the attribute is not present. The "sdfHandl" attribute shall not be present when the online charging method does not apply for the PCC rule referring to the Charging Data decision (i.e., when the "online" attribute is present and set to false, or is absent and the online default charging method does not apply for the PDU session, or is absent and there is no online default charging method defined)." ratingGroup (int) "The charging key for the PCC rule used for rating purposes." reportingLevel (string) "Defines on what level the SMF reports the usage for the related PCC rule. If the attribute is not present but it has been supplied previously, the previous information remains valid. If the attribute is not present and it has not been supplied previously or the attribute has been supplied previously but it is set to NULL, the reporting level pre-configured at the SMF is applicable as default reporting level." serviceId (int) "Indicates the identifier of the service or service component the service data flow in a PCC rule relates to." sponsorId (string) "Indicates the sponsor identity." appSvcProvId (string) "Indicates the application service provider identity." afChargingIdentifier (int) "An identifier, provided from the AF, correlating the measurement for the Charging key/Service identifier values in this PCC rule with application level reports. The "afChargingIdentifier" attribute shall not be present when the "AF_Charging_Identifier" feature is supported. When the "AF_Charging_Identifier" feature is not supported it is out of the scope of the specification what the behaviour of the PCF is when the AF provides charging identifier values that are out of ChargingId data type value range." afChargId (string) "A character string identifier, provided from the AF, correlating the measurement for the Charging key/Service identifier values in this PCC rule with application level reports. The "afChargId" attribute shall be used instead of the "afChargingIdentifier" attribute when the "AF_Charging_Identifier" feature is supported." Below is a screenshot of the UDR Assistance displaying the ChargingData UDR: Open ChargingData UDR TrafficControlData UDR

---

# Document 1840: Agent Message Event - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204737087/Agent+Message+Event
**Categories:** chunks_index.json

An agent message is of informative type. An example of such message is when a database collection agent starts collecting data, or when a Disk forwarding agent is finished with a batch. Not all agents can issue these sort of events. For further information, see the relevant agent user's guide. The following fields are included: agentMessage - Message issued by the agent. agentName - The name of the agent. Fields inherited from the Base event The following fields are inherited from the Base event, and described in more detail in Base Event : category contents - Workflow: <Workflow name>, Agent: <Agent name>, Message: <message> eventName origin receiveTimeStamp severity timeStamp Fields inherited from the Workflow event The following fields are inherited from the Workflow event, and described in more detail in Workflow Event : workflowKey workflowName workflowGroupName

---

# Document 1841: Secrets Profile - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204737876/Secrets+Profile
**Categories:** chunks_index.json



---
**End of Part 77** - Continue to next part for more content.
