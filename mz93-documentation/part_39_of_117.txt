# RATANON/MZ93-DOCUMENTATION - Part 39/112

---
**Dataset:** ratanon/mz93-documentation
**Part:** 39 of 112
**GitHub:** https://github.com/ratan0n/docs/tree/main/mz93-documentation
**Size:** ~70.0 KB
---

The SAP CC REST UDR types are designed to formalize the exchange between workflows and the SAP Convergent Charging Core Server. The SAP CC REST agent translates the received charging or loading request UDRs into its corresponding SAP Convergent Charging API request and the response from the server is translated into the appropriate UDRs stored in the same request UDR provided, which becomes available in the workflow for subsequent processing. The UDRs were generated from the API specification provided by SAP for both the Charging and Loading services, and the released API version. The REST API version configured on the SAP CC REST agent must be aligned with the REST API version used by the SAP CC server for Charging and Loading services to be sent and received. Prerequisites The reader of this information should be familiar with: SAP Convergent Charging API for Charging and Loading Services ( https://api.sap.com/package/SAPConvergentCharging/rest ) Overview There are two primary request UDRs, the usage being dependent on which REST API service is configured on the agent: SAPCCChargingRequest UDR. The main UDR expected by the SAP CC REST agent when the Charging Service REST API is selected and can be returned to the agent with a response attached. SAPCCLoadingRequest UDR. The main UDR expected by the SAP CC REST agent when the Loading Service REST API is selected and can be returned to the agent with a response attached. Supported Services Within each services provided by SAP Convergent Charging, there are a number of possible APIs to be called. The following table details the currently supported services and APIs, along with the expected UDR to be passed into the primary request UDRs for each. SAP Service SAP Service APIs Request UDR Response UDR SAP Service SAP Service APIs Request UDR Response UDR Charging Service Event Based Rating /chargeableItemProcess ChargingRequest ChargingResponse , OnErrorResponse Session Based Rating (Create session) /chargingSessions ChargingSessionCreateRequest ChargingSessionCreateResponse , OnErrorResponse Session Based Rating (Update or Stop session) /chargingSessions/{sessionId} ChargingSessionUpdateRequest , ChargingSessionStopRequest ChargingSessionUpdateResponse , OnErrorResponse Loading Service Usage Event Loading /chargeableItemsLoad List of ChargeableItem List of LoadingResponse , OnErrorResponse The request UDR needs to be passed into either SAPCCChargingRequest or SAPCCLoadingRequest s request parameter, as shown below, using the above Event Based Rating API as an example. SAPCCChargingRequest requestUdr = udrCreate(SAPCCChargingRequest); ChargingRequest udr = udrCreate(ChargingRequest); ...... requestUdr.request = udr; Response Handling Responses from SAP Convergent Charging are returned under the original request UDR, in the request.response.body parameter. The output will first have to be casted to the correct UDR, then cast the body into the respective UDRs described above, for further processing. An example using the above Event Based Rating API as below. if(instanceOf(input, SAPCCChargingRequest)){ SAPCCChargingRequest resp = (SAPCCChargingRequest) input; if(instanceOf(resp.response.body, ChargingResponse)){ // Logic if response body is ChargingResponse } else{ // Logic if response body is not ChargingResponse } } else if(instanceOf(input, erroUDR)){ // Logic if there are errors when sending request } Error Handling The response HTTP status code can be accessed using input.response.statusCode . For HTTP status code 200, the error will be present in the APIs respective response UDR, as response.error . An example using the Event Based Rating API as below. SAPCCChargingRequest resp = (SAPCCChargingRequest) input; if(instanceOf(resp.response.body, ChargingResponse)){ ChargingResponse response = (ChargingResponse) resp.response.body; if(response.error != null){ // Logic to handle API error } } The response UDR OnErrorResponse from SAP Convergent Charging will be returned in the event of a HTTP status code of 400, 401, 403 or 500. The output UDR errorUDR will only be routed if the Route Error UDR option is enabled in the agent configuration. The UDRs for the use of SAP CC REST agent are generated from the API specifications provided by SAP. For more information on structure of the API requests and responses, you may refer to the following. Charging Service - Event Based Rating: https://api.sap.com/api/REST_Charging/path/chargeEvent Charging Service - Session Based Rating (Create Session): https://api.sap.com/api/REST_Charging/path/startSession Charging Service - Session Based Rating (Updated or Stop Session): https://api.sap.com/api/REST_Charging/path/updateSession Loading Service - Usage Event Loading: https://api.sap.com/api/REST_Loading/path/loadEvents The list of available SAP CC REST UDRs can be viewed in the UDR Internal Format Browser in the sapcc_rest folder. To open the browser, open an APL Editor, and, in the editing area, right-click and select UDR Assistance . SAPCCChargingRequest The following fields are included in the SAPCCChargingRequest UDR: Field Description Field Description request (DRUDR) The following UDRs can be included in this field: ChargingRequest ChargingSessionCreateRequest ChargingSessionStopRequest ChargingSessionUpdateRequest requestUri (string) The request URI included in the response from SAP Convergent Charging. response (Response (http)) This field is populated by the contents of SAP CC REST UDRs | Response . sessionId (string) The sessionId identifier when sending a request to Session Based Rating (Update or Stop session). SAPCCLoadingRequest Field Description Field Description request (list<DRUDR>) The following Loading request item can be included in this field: List of ChargeableItem requestUri (string) Set the URI path to be used for the request. response (Response (http)) This field is populated by the contents of SAP CC REST UDRs | Response . errorUDR Field Description Field Description errorMessage Description of the error. originalUDR The input UDR received by the agent. Cookie The Cookie UDR is used for including cookie information in SAP CC REST UDRs | Response . The following fields are included in the Cookie UDR: Field Description Field Description domain (string) The domain to which the cookie belongs. expires (string) The date and time when the cookie expires. httponly (boolean) If set to true , cookies will not be exposed through channels other than HTTP and HTTPS requests. name (string) The name of the cookie. path (string) The path to the page the cookie belongs to, for example "http://mydomain.com/mypage.html ". secure (boolean) Indicates whether the data is sent in secure mode or not. value (string) The value of the cookie. Response The Response UDR contains the response to the request and is incorporated in the SAP CC REST UDRs | SAPCCChargingRequest and SAP CC REST UDRs | SAPCCLoadingRequest . The following fields are included in the Response UDR: Field Description Field Description body (any) This field contains the message body, that is, the payload, of the response. Responses are present as follows: For Charging Service Requests: ChargingResponse ChargingSessionCreateResponse ChargingSessionUpdateResponse OnErrorResponse For Loading Service Requests: LoadingResponse OnErrorResponse cookies (list<CookieUDR>) This field contains any SAP CC REST UDRs | Cookie UDRs included. headers (map<string,list<string>>) This field is populated by all the headers present in the response. The map keys contain header field names and the content is stored in the corresponding map values. httpVersion (string) This field contains the HTTP version; HTTP/1 or HTTP/2. mimetype (string) The type of the content, for example "text/html", "image/gif", etc. openAPIUDR (DRUDR) Used for custom OpenAPI specification validation, which is currently unavailable. statusCode (int) The HTTP status code, for example: 200 - OK, 404 - Not Found, etc. validationErrors (string) Used for custom OpenAPI specification validation, which is currently unavailable.

---

# Document 868: Base64 Functions - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204646232/Base64+Functions
**Categories:** chunks_index.json

The Based64 functions are used for encoding and decoding of Base64 data. The following functions for Basde64 described here are: 1 base64Encoder 2 base64Decoder 3 base64UrlEncoder 4 base64UrlDecoder base64Encoder This function takes a bytearray and returns a Base64 string representing the data. string base64Encoder ( bytearray data) Parameter Description Parameter Description data The bytearray to encode Returns A Base64 encoded string base64Decoder This function takes a Base 64 encoded string and returns the decoded data. bytearray base64Decoder ( string data) Parameter Description Parameter Description data The string to decode Returns A bytearray containing the decoded data base64UrlEncoder This function takes a bytearray and returns a URL safe Base64 string representing the data. string base64UrlEncoder ( bytearray data) Parameter Description Parameter Description data The bytearray to encode Returns A URL safe Base64 encoded string base64UrlDecoder This function takes a URL safe Base 64 encoded string and returns the decoded data. bytearray base64UrlDecoder ( string data) Parameter Description Parameter Description data The string to decode Returns A bytearray containing the decoded data

---

# Document 869: Database Collection Agent - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204606684/Database+Collection+Agent
**Categories:** chunks_index.json

The Database collection agent collects rows from a database table on a remote or local database and inserts them as UDRs into a workflow. When the workflow is executed the agent will create a query in SQL, based on the user configuration, and retrieve all rows matching the statement. For each row, a UDR is created and populated according to the assignments in the configuration dialog. The agent use and require a transaction ID column to utilize a rollback functionality. Additionally, based on configurations, the agent deletes the data in the table after it has been inserted into the workflow. When all the matching data has been successfully processed, the agent stops to await the next activation, scheduled, or manual initialization. The section contains the following subsections: Database Collection Agent Configuration Database Collection Agent Input/Output Data and MIM Database Collection Agent Events Database Collection Agent Transaction Behavior

---

# Document 870: Simplified Downgrade Procedure - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/550731833/Simplified+Downgrade+Procedure
**Categories:** chunks_index.json

A system downgrade is a user controlled downgrade to an older version of MediationZone. This procedure can be used after a simplified upgrade. To revert to a previously installed version, execute the following procedure: Ensure that the environment variables are set correctly: Variable Description Variable Description MZ_HOME This environment variable specifies where the software is installed. JAVA_HOME This environment variable specifies where the JDK is installed. PATH This environment variable specifies where the search path must contain the following directories: $JAVA_HOME/bin:$MZ_HOME/bin Example - Extracting the Upgrade Software export MZ_HOME=/opt/mz export JAVA_HOME=/opt/jdk/jdk-17.0.2 export PATH=$JAVA_HOME/bin:$MZ_HOME/bin:$PATH Disable all workflow groups, either from the Execution Manager in Desktop, or by entering the following command: mzsh mzadmin/<password> wfgroupdisable * Note! If you use the wfgroupdisable command, make sure that you enable all system tasks again when you are done. Stop all workflows. Shut down all connected Desktops. If you want to see which Desktops that are connected, you can use the following command: mzsh mzadmin/<password> pico -view Note! This command will also display other pico instances, such as ECs.. Shut down the Platform and all ECs. mzsh shutdown platform <ec name> ... Remove MZ_HOME. rm -rf $MZ_HOME Restore the backup of MZ_HOME. cp -r <backup directory> $MZ_HOME If you are downgrading a system not using Derby, restore the database backup. Note! If you are using SAP HANA as the Platform database, you will need to disable TLS/SSL on the SAP HANA database before you downgrade your Platform. Resume Workflow Execution Set the environment variables JAVA_HOME and PATH according to the system requirements of the restored version. Note! You must rollback to Java 8 before you downgrade to MediationZone 8.3 or earlier. Example - Setting Environment Variables export MZ_HOME=/opt/mz export JAVA_HOME=/opt/jdk/jdk1.8.0_121 export PATH=$JAVA_HOME/bin:$MZ_HOME/bin:$PATH Start the Platform and all ECs. mzsh startup platform <ec names> ... Import the configurations that were exported in the old version prior to the upgrade. mzsh mzadmin/<password> systemimport <backup directory>/<filename> Start the real-time workflows. Enable the Workflow Groups. mzsh mzadmin/<password> wfgroupenable *

---

# Document 871: PostgreSQL - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204671626/PostgreSQL
**Categories:** chunks_index.json

This section contains information that is specific to the database type PostgreSQL. Supported Functions The PostgreSQL database can be used with: Audit Profile Callable Statements (APL) Database Bulk Lookup Functions (APL) Database Table Related Functions (APL) Database Collection/Forwarding Agents Data Masking Profile Event Notifications Prepared Statements (APL) Reference Data Management Shared Table Profile SQL Collection/Forwarding Agents SQL Loader Agent Task Workflows Agents (SQL) Supported Types PostgreSQL has many specialized types that may be difficult to translate. The following data types have been verified to perform well with Shared Tables, and other database functions: smallint integer bigint numeric double precision smallserial serial bigserial char(n) varchar(n) timestamp with time zone timestamp without time zone date time with time zone time without time zone Support of data types that are not listed above cannot be guaranteed. Properties When selecting the PostgreSQL database type, you can configure the following property using the Properties tab in the Database profile: postgresql.connectionpool.maxlimit Preparations The drivers that are required to use the PostgreSQL database are bundled with the software and no additional preparations are required.

---

# Document 872: Communication Through Firewalls - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204744639/Communication+Through+Firewalls
**Categories:** chunks_index.json

It is common that the Platform and ECs hosts are protected by one or more firewalls. In order for the communication between the various components of the system to work, you may need to update your firewall settings. Accessing Ports in Pico Instances In MediationZone, it is always the client that establishes a connection to the Platform. Once a connection has been established, it is used as a two-way communication channel; the Platform never needs to open an outgoing connection. Typically, the Platform has the server role in the system, while mzsh , Desktops, ECs and web browsers act as clients. The common property pico.rcp.platform.port specifies a port used by pico instances to communicate with Platform. The default value is 6790 in a standard installation. Use the following command to retrieve the value of this property: mzsh topo get topo://val:common.pico.rcp.platform.port The Platform property mz.webserver.port specifies a port used to communicate with the Platform Web Interface. The default value is 9000 in a standard installation. Use the following command to retrieve the value of this property from the Platform Container: mzsh topo get topo://container:<container>/pico:platform/val:config.properties.mz.webserver.port The property ec.webserver.port specifies a port used to communicate with an EC Web Interface. The default value is 9090 in a standard ec-template . Use the following command to retrieve the value of this property for all ECs in a container: mzsh topo get --format data-only topo://container:<container>/pico:.*/val:config.properties.ec.webserver.port You can manage pico instances in one container from another by enabling remote access, using the mzsh command topo setupremote. SSH is used by the pico instances for remote access and the default port used by this protocol is 22. For further information about setting up remote access and how to configure the SSH port, see Remote Access to Containers . Open Firewall architecture Inter Workflow Communication The server port used for Inter Workflow communication, when one EC contacts another EC, is specified by the EC property pico.rcp.server.port . If no port is set, a dynamic port will be used and the port number will change each time the EC is restarted. To let the firewall allow a connect operation, the property pico.rcp.server.port has to be set to the same port number as the specific port opened by the firewall. Example - Inter Workflow Communication EC1 on Host1 is configured with "RCPPort1" , and EC2 on Host2 with "RCPPort2" . To allow EC1 to open a connection to contact an Inter Workflow storage on EC2, EC1 will make a TCP connect from Host1 to Host2 on port "RCPPort2". In this case, "RCPPort2" has to be allowed by the firewall. Database Communication For performance reasons, Audit information is logged directly from an EC to the database. If the system is unable to log Audit information directly from the EC, Audit will instead be performed through the Platform. This might happen if an external EC is unable to connect to the database in case of, for example, a network failure or if the EC has problems to connect through a firewall. To avoid this, configure the firewall so that the EC can communicate directly with the Audit database. For information on how to setup the Audit Profile, see Audit Profile . Firewall Setup The following lists the actions that should be taken to allow communication between hosts in the system. It is assumed that the standard installation ports are used. If the default ports have been changed, replace the port numbers with the ones you are using. To allow mzsh , Desktops and ECs to communicate with the Platform, incoming data to, and outgoing data from port 6790 in the Platform Container must be allowed. To allow the Platform Web Interface to be accessed from outside the firewall and for STR synchronization, incoming data to, and outgoing data from the Platform's port 9000 must be allowed. To allow the EC Web Interface to be accessed from outside the firewall, incoming data to, and outgoing data from the EC's port 9090 must be allowed. To allow remote access to Execution Containers, outgoing data must be allowed on port 22. Type Port(s) Open Internally Open Externally Type Port(s) Open Internally Open Externally Platform 6790 9000 See Additional Platform Properties in install.xml for more information. Default scenario where MediationZone is only used within an internal network. If it is required to provide platform ports to external scenarios, such as legacy desktop (Java Swing) running on an external network. Web UI 9001 See Desktop UI Properties for more information. If all browser users are on an internal network. Default scenario where Web UI is running on browsers on external network. Execution Context(s) 9090 See Execution Context Properties for more information. Default scenario where services depending on EC is used within an internal network. If it is required to provide access to ECs from an external network. It is required if the Prometheus server is deployed on remote network and needs to work with EC in an internal network, for example. Legacy Java Swing Desktop 6790 9000 Default scenario when the legacy desktop is used within an internal network. If the legacy desktop requires to run from an external network. Operations REST Interface 9000 See Operations REST Interface for more information. Default scenario where services depending on Operations REST Interface is used within an internal network. If it is required to provide access to Operations REST Interface from an external network. Note! It is recommended to enable the client authentication for security. For more information, refer to Enabling Client Authentication . Consider to provide VPN access for services that require access to 6790 and 9000. For example, the access the legacy desktop (Java Swing) remotely.

---

# Document 873: GCP Storage Forwarding MultiForwardingUDR Example - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204607857
**Categories:** chunks_index.json

Example - APL code to send MultiForwardingUDRs This example shows the APL code used in an Analysis agent connected to a forwarding agent expecting input of type MultiForwardingUDR s. import ultra.FNT; MultiForwardingUDR createMultiForwardingUDR (string dir, string file, bytearray fileContent){ //Create the FNTUDR FNTUDR fntudr = udrCreate(FNTUDR); fntAddString(fntudr, dir); fntAddDirDelimiter(fntudr);//Add a directory fntAddString(fntudr, file);//Add a file MultiForwardingUDR multiForwardingUDR = udrCreate(MultiForwardingUDR); multiForwardingUDR.fntSpecification = fntudr; multiForwardingUDR.content = fileContent; return multiForwardingUDR; } consume { bytearray file1Content; strToBA (file1Content, "file nr 1 content"); bytearray file2Content; strToBA (file2Content, "file nr 2 content"); //Send MultiForwardingUDRs to the forwarding agent udrRoute(createMultiForwardingUDR ("dir1", "file1", file1Content)); udrRoute(createMultiForwardingUDR ("dir2", "file2", file2Content)); } The Analysis agent mentioned previously in the example will send two MultiForwardingUDR s to the forwarding agent. Two files with different contents will be placed in two separate sub-folders in the root directory. The Create Non-Existing Directories check box under the Filename Template tab in the configuration of the forwarding agent must be checked if the directories do not previously exist.

---

# Document 874: IPDR SP Template Profile - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204998672
**Categories:** chunks_index.json

An IPDR SP Template profile is used to generate a DOCSIS 2.0 SAMIS, DOCSIS 3.0 SAMIS-TYPE-1 or DOCSIS 3.0 SAMIS-TYPE-2 template accessed by real-time workflows using the IPDR SP agent. The IPDR SP Template profile is loaded when you start a workflow that depends on it. Changes to the profile become effective when you restart the workflow. Configuration To create a new IPDR SP Template profile, click the New Configuration button from the Configuration dialog available from Build View , and then select Profile from the menu. IPDR SP Template profile The following settings are available in the IPDR SP Template profile: Setting Description Setting Description IPDR Service Definition Select the supported definitions from the dropdown to display the relevant template fields for the IPDR SP Template profile. The default selection is DOCSIS 3.0 CMTS-CM-REG-STATUS-TYPE. Template Fields Select the options from the drop down to indicate the fields that will be used in the selected IPDR Service Definition. Different fields will be present in the Template Fields for each of the Service Definition.

---

# Document 875: Data Veracity Maintenance System Task - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204640538/Data+Veracity+Maintenance+System+Task
**Categories:** chunks_index.json

The DataVeracity_Maintenance system task removes outdated Data Veracity data, provided that the state is REPROCESSED or DELETE_APPROVED The number of days to keep data is set in the DataVeracity_Maintenance configuration dialog. It is also possible to fully turn off the cleanup of Reprocessed, Delete_Approved or all of the UDRs. When the DataVeracity_Maintenance System Task is executed, the following event will happen: UDRs will be removed from the various Data Veracity tables according to the configurations in the Cleanup tab. See the Cleanup Tab in Data Veracity Maintenance System Task Configuration for further information. If the number of days after which data should be removed has been configured to 0 (zero) days, data will be removed every time the DataVeracity_Maintenance System Task is executed, with a minimum time interval of one hour. Loading

---

# Document 876: Development Toolkit Overview - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204676454/Development+Toolkit+Overview
**Categories:** chunks_index.json

The Development Toolkit makes it possible to build the following plugins for the standard MediationZone Platform: Agent Plugins - for creating customized agents APL Plugins - for creating customized APL functions Event Plugins - for creating customized events Notifier Plugins - for creating customized notifiers Desktop Plugins - for creating customized menu options and dialogs UDR Plugins - for creating customized UDRs Ultra Plugins - for creating customized decoders Workflow Service Plugins - for creating customized workflow services DTK Contents The Development Toolkit contains: DTK classes in devkit.jar Class documentation in Javadoc Java class documentation for J2SE DTK Example source code DTK user's guide Packages The following packages are available for com.digitalroute.devkit : Package Description Package Description apl Provides support for creating APL plugin functions. drudr Used to create, manipulate and view UDR descriptions within the system. event Provides the definition of an event as well as the event and target used in Event Notification configurations. exception Provides exception classes. ultra Contains Ultra field plugin support classes. wf Contains all workflow-related functionalities, for example, agent development, services, MIM usage, and Swing widget for MIM selection. wf.udr Contains classes for the specific FNTUDR and MultiForwardingUDR. storable Provides interfaces defining a MediationZone storable. storable.upgrade Provides for configuration upgrade. misc Contains miscellaneous classes, for example, environment interfaces that are used by the plugins to call MediationZone. doc Contains classes with support for adding online user documentation. Filesystem Structure When DTK is installed according to the instructions in Installation and Setup , the following files and folders are created in the $MZ_HOME/dtk folder: Item Description Item Description examples Contains source code for the reference implementations shipped with DTK. The examples can be used as a base for developing custom-made plugins. javadoc Contains the DTK JavaDoc including documentation of all DTK classes and interfaces. javadoc-examples Contains the plugin examples available in DTK JavaDoc. lib Contains DTK library file(s) needed for building plugins.

---

# Document 877: discard_output Specification - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204678285/discard_output+Specification
**Categories:** chunks_index.json

Sometimes it is necessary to describe parts of the external format as an in_map , despite the lack of interest in processing the decoded data. That is, when there are more complex types of filler data and this information is to be discarded. Example - discard_output specification in_map FillerInMap: external(FillerRecord), internal(EmptyInternal), discard_output { automatic; }; in_map DataInMap: external(DataRecord), target_internal(DataTarget) { automatic; }; decoder TotalDecoder: in_map(FillerInMap), in_map(DataInMap); This example produces DataTarget UDRs and discards any filler (assuming that the referred formats are properly defined).

---

# Document 878: Batch-Based Real-Time Agents - Transaction Behavior - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204741523
**Categories:** chunks_index.json

This section describes the transaction behavior for the agents. For more information about general transaction behavior, refer to the section Transactions in Workflow Monitor . Transaction behavior for the agents differs from when the batch agents are added to batch workflows. Cancel Batch does not function in the same way in real-time workflows as it does in batch workflows. You configure in the Execution tab of agent configuration if you want Cancel Batch messages to be sent if a decoding error occurs, as described in Batch-Based Real-Time Agents - Agent Configuration . Cancel Batch messages are sent: If a decoding error occurs, and you have selected the Cancel Batch option in the agent configuration If you have selected for files to be decompressed in the Decompression tab of agent configuration and it fails, e g because a file is corrupt or is not compressed. When Cancel Batch is called, the file is handled according to how After Collection behavior has been specified in the agent configuration. Nothing is sent to ECS, and processing skips to the next batch. Publication The agent publishes commands that change the state of the file currently processed. Command Description Command Description Begin Batch Emitted before the first part of each collected file is fed into a workflow. End Batch Emitted after the last part of each collected file has been fed into the system. Acquisition The agent acquires commands from other agents and based on them generates a state change of the file currently processed. Command Description Command Description Cancel Batch If a Cancel Batch message is received, the file is handled according to how After Collection behavior has been specified in the agent configuration. Note! If the Cancel Batch behavior defined in the collection agent dialog is configured to abort the workflow, the agent will never receive the last Cancel Batch message.

---

# Document 879: Python Collection Agent Input/Output Data and MIM - Real-Time - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204674120/Python+Collection+Agent+Input+Output+Data+and+MIM+-+Real-Time
**Categories:** chunks_index.json

Input/Output Data

---

# Document 880: Syslog Collection Agent Events - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205034776/Syslog+Collection+Agent+Events
**Categories:** chunks_index.json

Agent Events There are no message events for this agent. Debug Events There are no debug events for this agent.

---

# Document 881: ADLS2 File Forwarding Agent Transaction Behavior - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205031483/ADLS2+File+Forwarding+Agent+Transaction+Behavior
**Categories:** chunks_index.json

The transaction behavior for the Amazon S3 forwarding agent is presented here. For more information about general transaction behavior please refer to the section, Transactions, in Workflow Monitor . Emits This agent does not emit anything. Retrieves The agent retrieves commands from other agents and based on them generates a state change of the file currently processed. Command Description Begin Batch When a Begin Batch message is received, the temporary directory DR_TMP_DIR is first created in the target directory, if not already created. Then a target file is created and opened in the temporary directory. End Batch When an End Batch message is received, the target file in DR_TMP_DIR is first closed and then the Command , if specified in After Treatment , is executed. Finally, the file is moved from the temporary directory to the target directory. Cancel Batch If a Cancel Batch message is received, the target file is removed from the DR_TMP_DIR directory.

---

# Document 882: Email Agent - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204672859/Email+Agent
**Categories:** chunks_index.json

This section describes the Email Agent. This is a collection agent for batch workflow configurations. The Email Agent is can connect to an existing email server using either the IMAP or POP3 protocols and f etch from emails from them. Open Workflow with Email agent Batch model To make sure that every email gets handled according to the rules set in the configuration we treat each email as a batch. Meaning that if the mail folder where you read the emails from, contains 30 emails that you will process, it will be split into 30 batches. To manage resources better the agent splits a large number of messages into batches internally. Instead of lazy loading each message during processing, which would mean more than one transaction to the email server per message, the agent fetches all content for the specified number of emails at a time and then processes them. Open Pseudocode of b atch model This section contains the following subsections: Email Agent Configuration Email Agent MIM Email Agent UDRs Email Agent Events

---

# Document 883: Inter Workflow Batch Forwarding Agent Transaction Behavior - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204673642/Inter+Workflow+Batch+Forwarding+Agent+Transaction+Behavior
**Categories:** chunks_index.json

Emits The agent does not emit anything. Retrieves Command Description Command Description Begin Batch Creates and opens a target file in a temporary directory. End Batch Moves the file from the temporary directory to the target directory. Cancel Batch Deletes the current file from the temporary directory.

---

# Document 884: Legacy Desktop Properties - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204613093/Legacy+Desktop+Properties
**Categories:** chunks_index.json

This section describes the properties related to the Legacy Desktop that you can set in the STR. A subset of the properties below are explicitly set in the file default.conf during installation. This file must not be updated. If you want to set or override properties, you should update client.conf instead. Note! You can override properties in the STR using the Desktop Launcher. For more information, see https://infozone.atlassian.net/wiki/spaces/MD93/pages/205655011 . Advanced Properties java.library.path Default value: ${mz.home}/common/lib/native This property must be set to ${mz.home}/common/lib/native . mz.crypto.hash.algorithm Default value: SHA-256 This property is to use the crypto algorithm for hashing data, for example, files. mz.crypto.key.crypt Default value: AES This property is to use the crypto algorithm to encrypt and decrypt sensitive data within communications, for example, passwords. The value can be set to AES/GCM/NoPadding for a higher level of security. Note! If you have set the value to AES/GCM/NoPadding, and you try to decrypt data, and it does not succeed on the first attempt, the property value reverts to AES. mz.crypto.key.stream Default value: PBKDF2WithHmacSHA256 This property is to encrypt configurations when you have a user password for the encryption. The value can be set to PBEWithMD5AndDES . Note! If the decryption fails when using the selected algorithm, it will try to use the other algorithm. mz.editor.use.bold.italic Default value: true If the cursor is out of position in the APL or Ultra Editor in the Desktop, this may be due to problems with bold and italic fonts. To fix this issue, add this property and set the value to false . mz.gui.apl.color.comments Default value: #b22222 With this property you can specify the color you want to use for comments in the APL code. Colors are entered in hex format, e g "#666666". mz.gui.apl.color.constants Default value: # add8e6 With this property you can specify the color you want to use for constants in the APL code. Colors are entered in hex format, e g "#666666". mz.gui.apl.color.error Default value: #ff0000 With this property you can specify the color you want to use for errors in the APL code. Colors are entered in hex format, e g "#666666". mz.gui.apl.color.functions Default value: #0000ff With this property you can specify the color you want to use for functions in the APL code. Colors are entered in hex format, e g "#666666". mz.gui.apl.color.keywords Default value: #a020f0 With this property you can specify the color you want to use for keywords in the APL code. Colors are entered in hex format, e g "#666666". mz.gui.apl.color.normal Default value: #000000 With this property you can specify the color you want to use on your regular APL code. Colors are entered in hex format, e g "#666666". mz.gui.apl.color.owntypes Default value: #b8860b With this property you can specify the color you want to use for user defined types in the APL code. Colors are entered in hex format, e g "#666666". mz.gui.apl.color.strings Default value: #bc8f8f With this property you can specify the color you want to use for strings in the APL code. Colors are entered in hex format, e g "#666666". mz.gui.apl.color.types Default value: #228b22 With this property you can specify the color you want to use for types in the APL code. Colors are entered in hex format, e g "#666666". mz.gui.apl.syntaxfile Default value: "" With this property you can specify a file that contains further components within the APL code that you want to be able to highlight. The value should contain path and file name to the syntax file. mz.gui.apl.syntaxhighlighting Default value: yes This property specifies whether you want the text in your APL code to be color coded according to code definitions or not. The text is color coded according to the following definitions; brown = strings, dark blue = functions, light blue = constants, green = types, orange = user defined types, purple = key words, red = comments mz.gui.color.space.active Default value: "" This property can be added in order to change the background color of the Desktop. Possible values are: blue, green , yellow , orange , red , darkblue , darkgreen , magenta , or darkred . mz.gui.editor.autocomplete Default value: true This property specifies whether you want the editor to automatically close brackets, parentheses, and quotation marks. Disable it by specifying "false". mz.gui.editor.command Default value: notepad.exe This property specifies the command used for starting the editor you want to use for editing APL code or Ultra Formats. If you, for example, want to use Emacs the command should be emacs.exe . mz.gui.editor.menufontsizes Default value: 8,10,12,14,18,20,24,36 This property specifies the font sizes you want to be able to choose from when editing APL code or Ultra Formats in the APL Code Editor and the Ultra Format Editor. The current value is displayed between the "-" and "+" magnifying glasses to the left in the button list in the editors and can be changed by clicking on the magnifying glasses, or using the key combinations CTRL+ and CTRL- The current value can also be changed by opening the right-click popup menu and selecting Font Size . mz.gui.editor.name Default value: Notepad This property specifies the editor display name in menus. mz.gui.restart.tabs Default value: false This property determines whether the tabs that are open when exiting Desktop should be remembered or not. The default behavior is that the tabs will not be remembered, but setting this property to true will restore the open tabs the next time Desktop is opened. Note! Setting this property to true may cause the startup of Desktop to be bit slower. mz.gui.systemexport.default.dir Default value: "" This property can be added in order to configure the default directory you want to use when clicking on the Browse... button when doing a system export. The value must be the full path to an existing directory, e g /home/mz . mz.gui.systemimport.default.dir Default value: "" This property can be added in order to configure the default directory you want to use when clicking on the Browse... button when doing a system import. The value must be the full path to an existing directory, e g /home/mz . mz.gui.udreditor.limit Default value: yes This property can be used to support decoding of files that are larger than 3MB. When set to yes the UDR File Editor will only read up to 3MB and then stop, when set to no the UDR File Editor will continue to read until the end of the file is reached. mz.gui.ufl.color.comments Default value: #b22222 With this property you can specify the color you want to use for comments in the Ultra formats. Colors are entered in hex format, e g "#666666". mz.gui.ufl.color.constants Default value: # add8e6 With this property you can specify the color you want to use for constants in the Ultra formats. Colors are entered in hex format, e g "#666666". mz.gui.ufl.color.error Default value: #ff0000 With this property you can specify the color you want to use for errors in the Ultra formats. Colors are entered in hex format, e g "#666666". mz.gui.ufl.color.functions Default value: #0000ff With this property you can specify the color you want to use for functions in the Ultra formats. Colors are entered in hex format, e g "#666666". mz.gui.ufl.color.keywords Default value: #a020f0 With this property you can specify the color you want to use for keywords in the Ultra formats. Colors are entered in hex format, e g "#666666". mz.gui.ufl.color.normal Default value: #000000 With this property you can specify the color you want to use on your regular Ultra format text. Colors are entered in hex format, e g "#666666". mz.gui.ufl.color.owntypes Default value: #b8860b With this property you can specify the color you want to use for user defined types in the Ultra formats. Colors are entered in hex format, e g "#666666". mz.gui.ufl.color.strings Default value: #bc8f8f With this property you can specify the color you want to use for strings in the Ultra formats. Colors are entered in hex format, e g "#666666". mz.gui.ufl.color.types Default value: #228b22 With this property you can specify the color you want to use for types in the Ultra formats. Colors are entered in hex format, e g "#666666". mz.gui.ufl.syntaxfile Default value: "" With this property you can specify a file that contains further components within the Ultra formats that you want to be able to highlight. The value should contain path and file name to the syntax file. mz.gui.ufl.syntaxhighlighting Default value: yes This property specifies whether you want the text in your Ultra Formats to be color coded according to code definitions or not. The text is color coded according to the following definitions; brown = strings, dark blue = functions, light blue = constants, green = types, orange = user defined types, purple = key words, red = comments mz.gui.wfeditor.maxrows Default value: 500 This property can be added to change the maximum number of allowed rows in the workflow table. If this property has not been added, the default value of 500 rows will apply. mz.ultra.bitfield.codec Default value: "false" This property selects the implementation that is to be used for ultra bit_block . If set to true, the newly selected implementation will be used. Values that are not set using this property will use the old implementation. pico.bootstrapclass Default value: com.digitalroute.ui.MZDesktopMain This property specifies the bootstrap classes used by the Desktop. pico.cache.basedir Default: ${mz.home}/pico-cache This property must be set to ${mz.home}/pico-cache . pico.tmpdir Default: ${mz.home}/tmp This property must be set to ${mz.home}/tmp . pico.inhibit.startmessage Default value: "false" This property determines if the start message, generated when starting the Desktop client, should be logged or not. The default value is false , which means that the start message will be logged. Excluding the property entirely will have the same effect. Setting the property to false will result in no logging of the start message. pico.logdateformat Default value: "YYYY-MM-DD" This property specifies the date format to be used in the log files. See http://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html for further information. pico.name Default value: "<pico instance type>" This property specifies the name of the pico instance used for the Desktop. pico.pid Default value: $MZ_HOME/core/log This property specifies the directory you want the Desktop to write process ID (PID) file to. pico.stderr Default value: $MZ_HOME/core/log This property specifies the directory you want the Desktop to write standard errors to. pico.stdout Default value: $MZ_HOME/core/log This property specifies the directory you want the Desktop to write standard output to. pico.swing Default value: yes This property specifies how you want notifications to be made for this pico. For Desktops you usually want notifications to be made in the GUI, and in that case this property should be set to yes , meaning that Swing will be used. For other picos, such as the Platform and the Execution Context, this property will usually be excluded, which will result in notifications being sent to the console instead. pico.tmpdir Default value: ${mz.home}/tmp This property specifies the pico temp directory you want the Desktop to use. pico.type Default value: desktop This property specifies the type of pico instance used for the Desktop. swing.aatext Default value: true This property specifies that Java anti-aliasing should be used, which will improve the display of graphical elements in the user interface.

---

# Document 885: LDAP Agent UDRs - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204739565
**Categories:** chunks_index.json

The LDAP agent contains a number of UDRs. In the UDR Internal Format Browser , a detailed view of the available UDRs and respective fields is displayed. To open the browser, click the Configuration menu and select the option APL Code , and then right-click in the editing area and select the option UDR Assistance... . Open LDAP agent UDRs in the UDR Assistance Note! After receiving an LdapResponseUDR , it is possible to access a context by investigating an included LdapRequestUDR that has triggered an LDAP operation. LdapAbandonRequestUDR The LdapAbandonRequestUDR is used to cancel an operation that was sent to the LDAP server. The following fields are included in the LdapAbandonRequestUDR : Field Description Field Description Context (any) This field is a field of type any (that is, Java Objects) that can be freely used to store information, such as UDRs, int, string, etc. The information stored in this field will be available when a response is received. For example, you can use this field to store what caused the incoming LDAP request and use it to reply to the request after getting the response. request (LdapRequestUDR) This optional field contains the request that was sent to the LDAP server. For further information, see the section below, LdapRequestUDR. requestID (long) This field contains the request ID of the operation request that was sent to the LDAP server. It must be populated using the requestID field of an LdapRequestIDUDR response routed out by the agent. This field is only populated if you have selected the Enable Request ID check box in the Advanced tab of the LDAP agent configuration dialog. For further information, see LDAP Agent Configuration . LdapAbandonResultUDR When an LdapAbandonRequestUDR for an abandon operation is sent to the LDAP agent, the LdapAbandonResultUDR is sent by the LDAP agent to the outgoing routes in the workflow and contains the result information of processing that abandon operation. The following fields are included in the LdapAbandonResultUDR : Field Description Field Description abandonSent (boolean) This field is set to true only if the abandon operation caused the agent to send a corresponding abandon request to the LDAP server. Note that its value does not represent whether or not the operation was actually cancelled on the LDAP server side. request (LdapRequestUDR) This field contains the data from the request field of the abandon operation. LdapAddRequestUDR The LdapAddRequestUDR is used to send data to the LDAP agent for an add operation to be executed in the LDAP server. The following fields are included in the LdapAddRequestUDR : Field Description Field Description attributes (map<string,list<string>>) This field contains the relevant LDAP attributes. This map must include the attribute name and the attribute values. Each attribute may have one or more values. Context (any) This field is a field of type any (that is, Java Objects) that can be freely used to store information, such as UDRs, int, string, etc. The information stored in this field will be available when a response is received. For example, you can use this field to store what caused the incoming LDAP request and use it to reply to the request after getting the response. dn (string) This field contains the Distinguished Name for the add operation. LdapAddResultUDR When an add operation is sent to the LDAP server, the LdapAddResultUDR is sent by the LDAP agent to the outgoing routes in the workflow and contains the result information for the add operation sent. The following fields are included in the LdapAddResultUDR : Field Description Field Description request (LdapAddRequestUDR) This field contains the data from the request field of the add operation. LdapCompareRequestUDR The LdapCompareRequestUDR is used to send data to the LDAP agent for a compare operation to be executed in the LDAP server. The following fields are included in the LdapCompareRequestUDR : Field Description Field Description assertionValue (string) This field contains the assertion value for the compare operation. attributeName (string) This field contains the attribute name. Context (any) This field is a field of type any (that is, Java Objects) that can be freely used to store information, such as UDRs, int, string, etc. The information stored in this field will be available when a response is received. For example, you can use this field to store what caused the incoming LDAP request and use it to reply to the request after getting the response. dn (string) This field contains the Distinguished Name for the compare operation. LdapCompareResultUDR When a compare operation is sent to the LDAP server, the LdapCompareResultUDR is sent by the LDAP agent to outgoing routes in the workflow and contains the result information for the compare operation sent. The following fields are included in the LdapCompareResultUDR : Field Description Field Description compareTrue (boolean) This field determines if a match was found with the data sent in the compare operation. If a match is found the value is set to true . request (LdapCompareRequestUDR) This field contains the data from the request field of the compare operation. LdapDeleteRequestUDR The LdapDeleteRequestUDR is used to send data to the LDAP agent for a delete operation to be executed in the LDAP server. The following fields are included in the LdapDeleteRequestUDR : Field Description Field Description Context (any) This field is a field of type any (that is, Java Objects) that can be freely used to store information, such as UDRs, int, string, etc. The information stored in this field will be available when a response is received. For example, you can use this field to store what caused the incoming LDAP request and use it to reply to the request after getting the response. dn (string) This field contains the Distinguished Name for the delete operation. LdapDeleteResultUDR When a delete operation is sent to the LDAP server, the LdapDeleteResultUDR is sent by the LDAP agent to the outgoing routes in the workflow and contains the result information for the delete operation sent. The following fields are included in the LdapDeleteResultUDR : Field Description Field Description request (LdapDeleteRequestUDR) This field contains the data from the request field of the delete operation. LdapErrorUDR The LdapErrorUDR is sent by the LDAP agent to the outgoing routes in the workflow when an error occurs in a request, and contains the details of the error which has occurred. The following fields are included in the LdapErrorUDR : Field Description Field Description errorCode (int) This field contains the LDAP result code for the operation sent to the LDAP server. For further information on the LDAP result codes, see https://docs.ldap.com/ldap-sdk/docs/javadoc/com/unboundid/ldap/sdk/ResultCode.html . errorMessage (string) This field contains the result message for the operation sent to the LDAP server. request (LdapRequestUDR) This field contains the LdapRequestUDR sent to the LDAP agent for an operation to be executed in the LDAP server. For further information, see the section below, LdapRequestUDR. searchResult (list<LdapSearchResultUDR>) This field contains a list of the search results, listing the LdapSearchResultUDRs . This field is only populated on errors for search operations that either time out or have their results truncated as specified in the timeLimit and sizeLimit search parameters. For further information, see the sections below, LdapSearchRequestUDR and LdapSearchResultUDR. If the operation was not a search, this field is empty. LdapExtendedRequestUDR The LdapExtendedRequestUDR is used to send data to the LDAP agent for the extended request included to be executed on the server. The following fields are included in the LdapExtendedRequestUDR : Field Description Field Description Context (any) This field is a field of type any (that is, Java Objects) that can be freely used to store information, such as UDRs, int, string, etc. The information stored in this field will be available when a response is received. For example, you can use this field to store what caused the incoming LDAP request and use it to reply to the request after getting the response. oid (string) This field contains the object identifier (oid) for the request sent to the LDAP server, which determines the request name for the operation. value (bytearray) This field contains the content of the request sent to the LDAP server. valueBERType (byte) This field contains a byte which determines the format of the request content. LdapExtendedResultUDR When an extended request is sent to the LDAP server, the LdapExtendedResultUDR is sent by the LDAP agent to the outgoing routes in the workflow and contains the result information for the request sent. The following fields are included in the LdapExtendedResultUDR : Field Description Field Description oid (string) This field contains the object identifier (oid) for the extended result, which determines the request name for the operation. request (LdapExtendedRequestUDR) This field contains the data from the request field of the extended request sent. value (bytearray) This field contains the content of the result received. valueBERType (byte) This field contains a byte which determines the format of the request content. LdapModifyDNRequestUDR The LdapModifyDNRequestUDR is used to send data to the LDAP agent for a modify DN (Distinguished Name) operation to be executed in the LDAP server. The following fields are included in the LdapModifyDNRequestUDR : Field Description Field Description Context (any) This field is a field of type any (that is, Java Objects) that can be freely used to store information, such as UDRs, int, string, etc. The information stored in this field will be available when a response is received. For example, you can use this field to store what caused the incoming LDAP request and use it to reply to the request after getting the response. deleteOldRDN (boolean) This field determines whether the previous Distinguished Name is to be removed. dn (string) This field contains the Distinguished Name for the modify DN operation. newSuperiorDN (string) This field contains the Distinguished Name of the new parent DN. If the parent DN is not new, this field is empty. newRDN (string) This field contains the new Distinguished Name. LdapModifyDNResultUDR When a modify DN operation is sent to the LDAP server, the LdapModifyDNResultUDR is sent by the LDAP agent to the outgoing routes in the workflow and contains the result information for the operation sent. The following fields are included in the LdapModifyDNResultUDR : Field Description Field Description request (LdapModifyDNRequestUDR) This field contains the data from the request field of the modify DN operation. LdapModifyRequestUDR The LdapModifyRequestUDR is used to send data to the LDAP agent for a modify operation to be executed in the LDAP server. The following fields are included in the LdapModifyRequestUDR : Field Description Field Description attributes (map<string,list<string>>) This field contains the relevant attributes. This map must include the attribute name and the attribute values. Context (any) This field is a field of type any (that is, Java Objects) that can be freely used to store information, such as UDRs, int, string, etc. The information stored in this field will be available when a response is received. For example, you can use this field to store what caused the incoming LDAP request and use it to reply to the request after getting the response. dn (string) This field contains the Distinguished Name for the modify operation. modificationType (string) This field contains the type of modification operation sent. LdapModifyResultUDR When a modify operation is sent to the LDAP server, the LdapModifyResultUDR is sent by the LDAP agent to the outgoing routes in the workflow and contains the result information for the operation sent. The following fields are included in the LdapModifyResultUDR : Field Description Field Description request (LdapModifyRequestUDR) This field contains the data from the request field of the modify operation. LdapRequestUDR The LdapRequestUDR encompasses all request UDRs that can be sent to the LDAP agent. All request UDRs belong to the LdapRequestUDR type. Field Description Field Description Context (any) This field is a field of type any (that is, Java Objects) that can be freely used to store information, such as UDRs, int, string, etc. The information stored in this field will be available when a response is received. For example, you can use this field to store what caused the incoming LDAP request and use it to reply to the request after getting the response. LdapRequestIDUDR The LdapRequestIDUDR is sent by the LDAP agent to acknowledge that a corresponding operation for an operation request has been sent to the LDAP server. This UDR is sent by the agent for every operation request, except the abandon operation. It can be used to later cancel the operation request using an abandon operation. This UDR is only sent by the agent if you have selected the Enable Request ID check box in the Advanced tab of the LDAP agent configuration dialog. For further information, see LDAP Agent Configuration . The following fields are included in the LdapRequestIDUDR : Field Description Field Description Context (any) This field is a field of type any (that is, Java Objects) that can be freely used to store information, such as UDRs, int, string, etc. The information stored in this field will be available when a response is received. For example, you can use this field to store what caused the incoming LDAP request and use it to reply to the request after getting the response. request (LdapRequestUDR) This field contains the operation request sent to the LDAP server. requestID (long) This field contains an identifier assigned by the LDAP agent to the operation request. LdapResultUDR The LdapResultUDR encompasses all UDRs sent by the LDAP agent to the outgoing routes in the workflow. All result UDRs belong to the LdapResultUDR type. LdapSearchRequestUDR The LdapSearchRequestUDR is used to send data to the LDAP agent for a search operation to be executed in the LDAP server. The following fields are included in the LdapSearchRequestUDR : Field Description Field Description attributesToReturn (list<string>) This field contains a list of the attributes to be returned by a search operation. baseDN (string) This field contains the base Distinguished Name for the operation. Context (any) This field is a field of type any (that is, Java Objects) that can be freely used to store information, such as UDRs, int, string, etc. The information stored in this field will be available when a response is received. For example, you can use this field to store what caused the incoming LDAP request and use it to reply to the request after getting the response. deferencePolicy (string) This field contains the deference policy applied to the search operation. You can choose one of the following values: NEVER ALWAYS FINDING SEARCHING filter (string) This field contains the search filters. scope (string) This field contains the search scope to determine which entry levels you want to search. You can choose one of the following levels: OBJECT_SCOPE - To search the named entry only ONELEVEL_SCOPE - To search the entries immediately below the base DN SUBTREE_SCOPE - To search in the entire subtree sizeLimit (int) This field contains the maximum number of elements that can be returned by the search operation. If the limit is exceeded, the LdapErrorUDR will contain the corresponding error code, and the results returned by the server will be available in the Ldap S earchResultUDR s list. The default value is 0. If the value is set to 0, the number of elements returned is unlimited. timeLimit (int) This field contains the maximum amount of time in seconds that a search operation can take to complete. If the limit is exceeded, the LdapErrorUDR will contain the corresponding error code, and the results returned by the server will be available in the LdapSearchResultUDR s list. The default value is 0 seconds. If the value is set to 0, the search operation continues until performed to completion. typesOnly (boolean) This field determines if the attribute values or descriptions are returned. If set to true , only the attribute descriptions are returned. LdapSearchResultEntryUDR When a search operation is sent to the LDAP server, a LdapSearchResultEntryUDR is included in the LdapSearchResultUDR for each matching entry in the search operation. See the section below, LdapSearchResultUDR. The following fields are included in the LdapSearchRequestUDR : Field Description Field Description attributes (map<string,list<any>>) This field contains a map of the LDAP attributes and values for the corresponding matched entry. Each attribute may have one or more values. dn (string) This field contains the Distinguished Name for the corresponding matched entry. LdapSearchResultUDR When a search operation is sent to the LDAP server, the request field in the LdapSearchResultUDR is populated with the LdapSearchRequestUDR, and the searchEntries field is populated with the search result's entry UDRs. The LdapSearchResultUDR is sent by the LDAP agent to the outgoing routes in the workflow. Field Description Field Description request (LdapSearchRequestUDR) This field contains the data from the LdapSearchRequestUDR sent to the LDAP server for a search operation. For further information, see the section above, LdapSearchRequestUDR. searchEntries (list<LdapSearchEntryResultUDR>) This field contains a list of the search results, listing the LdapSearchEntryResultUDR s. For further information, see the section above, LdapSearchEntryResultUDR.

---

# Document 886: SAP CC Batch Agent Input/Output Data and MIM - Real-Time - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205686885/SAP+CC+Batch+Agent+Input+Output+Data+and+MIM+-+Real-Time
**Categories:** chunks_index.json

Input/Output Data The Input/Output data is the type of data an agent expects and delivers. The SAP Batch agent collects and emits UDRs of the 'sapcc' and 'sapcc.batch' type. For further information, see SAP CC UDRs . MIM For information about the MIM and a list of the general MIM parameters, see Administration and Management in Legacy Desktop . Publishes The SAP CC Batch agent does not publish any MIM resources. Accesses The SAP CC Batch agent does not access any MIM resources.

---

# Document 887: Data Hub Agents - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204644899/Data+Hub+Agents
**Categories:** chunks_index.json

The Data Hub forwarding agent is a batch agent that bulk loads data to an Impala database specified by a Data Hub profile. The Data Hub task agent is used to automatically remove old partitions from the database. This chapter includes the following sections: Data Hub Task Agent Data Hub Forwarding Agent

---

# Document 888: Database Forwarding Agent Events - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204738333/Database+Forwarding+Agent+Events
**Categories:** chunks_index.json

Agent Message Event An information message from the agent, stated according to the configuration done in the Event Notification Editor. For further information about the agent message event type, see Agent Event . Ready with table/SP: tablename Reported when a stored procedure starts running, if Run SP is selected in the Database Forwarding Target tab. Debug Events Debug messages are dispatched in debug mode. During execution, the messages are displayed in the Workflow Monitor. You can configure Event Notifications that are triggered when a debug message is dispatched. For further information about the debug event type, see Debug Event . The agent produces the following debug events: Rollback transaction data Reported when the agent receives a Cancel Batch or when recovering after system abortion. Has deleted n rows in tablename Subevent to the Rollback transaction data event, stating the number of rows removed by each SQL commit command. The maximum number depends on the Commit Window Size . Try to force running Stored Procedure to Stop Reported when stopping a workflow that has a Stored Procedure running.

---

# Document 889: Avro Decoder - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204640758/Avro+Decoder
**Categories:** chunks_index.json

The Desktop supports Avro encoding/decoding using schema fetched from a schema registry. The corresponding schema is retrieved from a schema registry using a schema ID that is passed as a message attribute. The full description of the Avro language can be found at: https://avro.apache.org/docs/current/spec.html . The section contains the following sub-sections: Avro Decoder Example Avro Types and UDRs

---

# Document 890: mzcli - resumeexecution - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/547979707/mzcli+-+resumeexecution
**Categories:** chunks_index.json

Usage resumeexecution (the command takes no parameters) This command enables you to resume the execution of a workflow, or a workflow group, that is stuck in the Hold state. Note! If the workflow, or the workflow group, does not leave the Hold state after running systemimport -holdexecution , either due to a system crash or because you performed Ctrl+C , use this command to resume execution. For further information, see mzcli - systemimport , [ -he|-holdexecution [ r | sr | sir | wr ] ] For information about workflow and workflow group states, see Workflow Group States . Return Codes Listed below are the different return codes for the resumeexecution command: Code Description Code Description 0 Will be returned if all workflows and groups resume execution normally. 1 Will be returned if any errors occur.

---

# Document 891: ECS Error Codes - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204641132/ECS+Error+Codes
**Categories:** chunks_index.json

ECS Error Codes can be specified in the ECS and associated with both UDRs and batches. A reprocessing group can also be assigned an Error Code, so that when an entity is inserted into the ECS it is automatically available for collection by the ECS Collection agent. There are two predefined Error Codes within the system, AGGR_UNMATCHED_UDR and DUPLICATE_UDR , which are automatically set by the Aggregation and Duplicate UDR Detection agents when the corresponding error condition is detected. All other Error Codes are defined by the user. Apart from being accessible in the ECS Inspector, the error codes are also used in the ECS Statistics, see ECS Statistics , and ECS Statistics Event . Note! Several Error Codes can be attached to the same UDR. This affects the ECS Statistics output. For further information, see Error Code Search in ECS Statistics . To create an Error Code, click the Error Codes button in the ECS Inspector. This displays the Error Codes dialog. Open Error Codes dialog Click Add to open the Add Error Codes dialog. This is where assignments of new Error Codes are made. Open Add Error Codes dialog Setting Description Setting Description Error Code Enter the Error Code to be attached to UDRs or batches. Description Enter a description of the error code. RP Group Enter a reprocessing group to assign the Error Code to. You can send optional information to the ECS from an Analysis or Aggregation agent, as long as an Error Code has been defined. To this Error Code, any information may be appended using APL. See the example below. Example - Error case appended using APL An Error Case can be appended using APL code. udrAddError( input, "CALL ID ERROR", "The callId: " + input.callId + ", Calling number: " + input.anum ); In this example the "CALL ID ERROR" is defined in the Error Codes dialog. Note! To clear a UDR's errors, the udrClearErrors function should be used. For further information, see the example Reassigning to a Different Reprocessing Group, in ECS Collection Workflow (UDR) .



---
**End of Part 39** - Continue to next part for more content.
