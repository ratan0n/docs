# RATANON/MZ93-DOCUMENTATION - Part 22/112

---
**Dataset:** ratanon/mz93-documentation
**Part:** 22 of 112
**GitHub:** https://github.com/ratan0n/docs/tree/main/mz93-documentation
**Size:** ~69.4 KB
---

A notifier is defined as the target where event messages are sent. A notifier may output information to Azure Application Insight, any type of database table, log file, SNMP trap, Mail, SNS topic, or the standard System Log. Open Event Notification - Notifier Setup tab Setting Description Setting Description Notification Type Select the output type for the notification in this drop-down list. See the detailed descriptions of the notification types in the section below, Notification Type Configuration . Duplicate Suppression (sec) Enter the number of seconds during which an identical event is suppressed from being logged. The default value is 0. Base Configuration The Base Configuration settings vary depending on the selected notification type and can be the location of a log file, database profile, or credentials, etc. See the respective notification type descriptions below for more information. Target Field Configuration These settings are used for constructing the content of the notification, and they vary depending on which notification type you have selected, see information about each notification type below. Notification Type Configuration The event notification types that you can configure are: Azure Application Insight Database Log File Send Mail Send SNMP Trap Send SNMP Trap, Alarm SNS Topic System Log Azure Application Insight Database When you select the Database notification type, Event fields can be inserted into database tables using either plain SQL statements or calls to stored procedures. Open Event Notification - Notification Type Database Setting Description Setting Description Database Browse and select the database profile defining the database in which the table resides, see Database Profile for information about how to define a Database profile. SQL Statement Type in any SQL statement, using '?' for variables which are to be mapped against event fields in the Event Setup tab. Trailing semicolons are not used. In the case of running several statements, they must be embedded in a block. Log File When you select the Log File notification type, messages can be routed to ordinary text files on the local file system. Event Notification - Notification Type Log File Setting Description Setting Description Directory Enter the path to the directory where the file in which events are to be logged resides. Filename Enter the name of the file in which events are to be logged. In case the file does not exist, it will be created when the first message for the specific event map arrives. New messages are appended. Size Select this check box to define the maximum size of the file. When this parameter is exceeded, the existing file is renamed and a new one is created upon the arrival of the next event. The old file will receive an extension to the file name, according to <date_time_milliseconds_timezone> . Time Select this check box to define the maximum lifetime of a file before it is rotated. When this parameter is exceeded, the existing file is renamed and a new is created upon the arrival of the next event. If the time is set to rotate every: hour, rotation is made at the first full-hour shift which is xx:59. 2 hours, rotation is made in predefined two-hour intervals (0,2,4...22) when turning to the next full hour. For example after 01:59. 3 hours, rotation is made in predefined three-hour intervals (0,3,6, ...21) when turning to the next full hour. For example after 02:59. 4 hours, rotation is made in predefined four-hour intervals (0,4,8, ...20) when turning to the next full hour. For example after 03:59. 6 hours, rotation is made in predefined six-hour intervals (0,6,12 ...21) when turning to the next full hour. For example after 05:59. 8 hours, rotation is made in predefined eight-hour intervals (0,8,16) when turning to the next full hour. For example after 07:59. 12 hours, rotation is made at high noon and at midnight. day, rotation is made at midnight. week, rotation will be done at midnight on the last day of the week. month, the rotation will be done at midnight on the last day of the month. The old file will receive an extension to the file name, according to <date_time_milliseconds_timezone> . If both Size and Time are set, both behaviors apply. Separator Select how to separate logged events from each other. Valid options are: Linefeed CR + LF (Carriage return + Linefeed) Comma Colon (None) Log Line Enter the text to go into the log file. For further information about how to obtain the text, see Target Field Configuration below. Note! Do not configure two different Event Notifiers to log information to the same file. Messages may be lost since only one notifier at a time can write to a file. Define one Event Notifier with several Event Setups instead. Send Mail When you select the Send Mail notification type, emails can be sent to one or several recipients when the specified events occur. Make sure the correct mail parameters have been configured in the platform.conf . You must enter a value for the property mz.notifier.mailfrom , see Platform Properties for more information about the mail properties. Open Event Notification - Notification Type Send Mail Setting Description Setting Description Sender Enter a label or name to be displayed in the Sender of the mail. The text in the Sender field will not replace the value of the platform.conf property that is set in mz.notifier.mailfrom. For further information about how to obtain the text, see Target Field Configuration below. Recipient Enter the mail address(es) to one or several recipients. Use a comma to separate, if several. Click on the Add... button to select mail addresses, configured for available users. For further information about how to obtain the text, see Target Field Configuration below. Subject Enter the subject/heading of the mail. If Event Contents is selected, newlines will be replaced with spaces to make the subject readable. If the string exceeds 100 characters, it is truncated. For further information about how to obtain the text, see Target Field Configuration below. Message Enter the body of the mail message. For further information about how to obtain the text, see Target Field Configuration below. Send SNMP Trap When you select the Send SNMP Trap notification type, events may be sent in the form of SNMP traps to systems configured to receive such information. For the MIB definition, see the $MZ_HOME/etc/mz_trap_mib.txt file. Note! A new SNMP trap format is now available. For backward compatibility purposes, the previous invalid format will still be used by default. However, if you want to use the new format you can add the property snmp.trap.format.b to the platform.conf and set it to true to activate the new values. You can use the topo command to set the property snmp.trap.format.b : $ mzsh topo set topo://container:<container>/pico:platform/val:config.properties.snmp.trap.format.b true The value of the agent Address field will be taken from the Container property pico.rcp.server.host . Event Notification - Notification Type Send SNMP Trap Setting Description Setting Description IP Address Enter the IP address of the target host. Port Enter the port on the target host defined for the SNMP communication. Community Enter the community name string used for the authentication process. Version Select which SNMP version to use in this drop-down list containing all supported versions. User Message Enter a string to be sent out as SNMP traps. For further information about how to obtain the text, see Target Field Configuration below. Send SNMP Trap, Alarm When you select the Send SNMP Trap Alarm notification type, you can create a notification type that is similar to the Send SNMP Trap notification type, with one difference; It is specifically designed to work for Alarm events. Event Notification - Notification Type Send SNMP Trap Alarm Setting Description Setting Description IP Address Enter the IP address of the target host. Port Enter the port on the target host defined for the SNMP communication. Community Enter the community name string used for the authentication process. Version Select which SNMP version to use in this drop-down list containing all supported versions. Target Field Configuration alarm* Configure the content for each field in the alarms. For further information about how to obtain the text, see Target Field Configuration below. SNS Topic When you select the SNS Topic notification type, messages produced by the selected events are routed as SNS topics to the specified Amazon S3 region. Open Event Notification - Notification Type SNS Topic Setting Description Setting Description Access Key Enter the access key for the user who owns the Amazon S3 account in this field. Secret Key Enter the secret key for the stated access key in this field. Region Enter the name of the Amazon S3 region in this field. Topic Configure the SNS topic. For further information about how to obtain the text, see Target Field Configuration below. Message Enter the body of the topic. For further information about how to obtain the text, see Target Field Configuration below. System Log When you select the System Log notification type, messages produced by the selected events are sent to the standard System Log. The Contents field from each event is used as the message in the log. Event Notification - Notification Type System Log Note! Do not route frequent events to the System Log. Purging a large log might turn into a performance issue. If still doing that, keep the log size at a reasonable level by applying the System Task System Log Cleaner. For further details see System Log Cleaner in Workflow Types . Target Field Configuration Some of the notifier types have one or many parameters that may be dynamically populated by data from an event. These parameters are configured in the Target Field Configuration section. Depending on the parameter type, there will be one or several population types available in the list next to it. Manual Select Manual to hard code a value, and thus give no possibility to select any dynamic values to be embedded in the message. The value entered will be assigned to the parameter exactly as typed. Target Field Configuration - Log Line Event Field Select Event Field to assign the value of one specific event field. The event fields for the added events can be viewed in the Event Setup Tab . Open For further information about fields valid for selection, see Event Fields . Event Contents Select Event Contents to add the event value of each event's Contents field. All event types have suitable event content text. For example, in the figure Events can be customized to suit any target , the Event Contents string will be: Username: mzadmin3, Action: Notifier AnumberEvents updated. Another example is that the following string is reported for a User Defined Event : Workflow name: <name>, Agent name: <name>, Message: <string> The Message string originates from the dispatchMessage function. Note that nothing will be logged unless dispatchMessage is used. Also, in this case, the Field Maps in the Event Setup will be disabled. Note! The same result is achieved when selecting Event Field/strong as Log Line , and then selecting Contents as mapping (the Event Setup tab). Formatted Select Formatted to enter text combined with variable names, which are assigned to event field values in the Event Setup Tab tab. Each variable in Notifier Setup has its own Notifier Field in Event Setup - Send Mail For each variable entered in a field with the Formatted option selected, a notifier field will be added in the Event Setup tab where you can then assign event field values. Variable names must be preceded by a $, started with a letter, and be comprised of a sequence of letters, digits, or underscores. Target Field Configuration - Log Line The settings in the screenshot above will be interpreted as containing the variables 'NO' and 'ANUM'.

---

# Document 482: RadioButtonGroup UDR - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204675163/RadioButtonGroup+UDR
**Categories:** chunks_index.json

The RadioButtonGroup UDR is used to create a radio button group. Open To create a radio button group with a default selected radio button as shown above, enter the following code. // Create a radio button group RadioButtonGroup radioButton = udrCreate(RadioButtonGroup); radioButton.name = "color"; radioButton.label = "Select a color"; // Create a ordered map to control the order of the radio button radioButton.buttons = mapCreateOrdered(string, string); mapSet(radioButton.buttons, "Red", "red"); mapSet(radioButton.buttons, "Blue", "blue"); mapSet(radioButton.buttons, "Green", "green"); // The radio button with value red will be default selected radioButton.selected = "red"; The following fields are included in the RadioButtonGroup UDR : Field Description Field Description attributes (map<string,string>) This field may contain extra attributes to be added. buttons (map<string,string>) This field must contain a map of key value pairs. The key will be present on the label next to the radio button and the value will be set on the Value attribute. Meaning the value will be sent if the radio button is submitted in a Form UDR. To get the items in the same order as added the map needs to be created with mapCreateOrdered function. cssClasses (list<string>) This field may contain a list of extra values added to class attribute. This is typically used to style the component. Please read more on Bootstrap . It will be added to each radio div tag. Then it can be used to get a horisontal view by add form-check-inline . disabled (boolean) This field may contain a boolean if the component should be disabled or enabled. id (string) This field may contain the id of the component label (string) This field may contain the label for the radio button group. labelCssClasses (list<string>) This field may contain a list of extra values added to class attribute of the label. This is typically used to style the component. Please read more on Bootstrap . name (string) This field may contain the name of the component. If the component is present in a Form UDR , the name will be submitted with the form as the key in the Params Map in Request UDR . required (boolean) This field may contain a boolean if the component is required. Typically used inside a Form UDR. selected (string) This field may contain a string matching a value in the Buttons map. If a match is found this radio button will be selected.

---

# Document 483: Python Agents Example - Batch - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205001589/Python+Agents+Example+-+Batch
**Categories:** chunks_index.json

This section provides an example of how you can use the Python collection and processing agents for a batch workflow. In this instance the Python collection agent reads an Excel file. Open Workflow example with the Python collection and processing agents for batch Open The Excel file being processed Workflow Configuration The sections below provide descriptions of agent configurations for the example workflow shown above. Read_Excel The Python collection agent is configured to read all the Excel files from the configured directory, process each file in a separate batch and output one UDR per row. General Tab Open Example - Code for Read_Excel import os import pandas from .UFL_Types import ItemCount txn_directory = persistent() txn_filename = persistent() def execute(): # Read all excel files from the configured directory txn_directory.value = dynamicFieldGet("Directory", "Name") xls = [f for f in os.listdir(txn_directory.value) if f.endswith(".xlsx")] # Process each excel file in a separate batch, output one UDR per row for fn in xls: if not isStopped(): txn_filename.value = fn df = pandas.read_excel(os.path.join(txn_directory.value, fn)) mimSet("Filename", fn) beginBatch() debug("Begin batch (txnid=%s, filename=%r)" % (getTransactionId(), fn)) for idx, item, count in df.itertuples(): udr = ItemCount() udr.item = item udr.count = count udrRoute(udr) endBatch() def commit(): # On commit, move the processed file into the "done/" subdirectory debug("Commit (txnid=%s, filename=%r)" % (getTransactionId(), txn_filename.value)) old = os.path.join(txn_directory.value, txn_filename.value) new = os.path.join(os.path.join(txn_directory.value, "done"), txn_filename.value) if os.path.exists(old): os.rename(old, new) MIM Tab The agent publishes Filename as a string. Open Analyse_Rows The Python processing agent processes UDRs by defining a consume block, and uses the selected Interpreter profile that is used to configure the Python executables. Open Example - Code for Analyse_Rows total_count = 0 def beginBatch(): fn = mimGet("Read_Excel", "Filename") debug("Begin batch (txnid=%s, filename=%r)" % (getTransactionId(), fn)) global total_count total_count = 0 def consume(input): debug("%s=%s" % (input.item, input.count)) global total_count total_count += input.count def endBatch(): fn = mimGet("Read_Excel", "Filename") debug("File %r contained %s items" % (fn, total_count)) Workflow Monitor The output is shown step by step in the workflow monitor when you have debug enabled. Open Workflow Monitor showing the output for both agents

---

# Document 484: Product Data Model - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205656232/Product+Data+Model
**Categories:** chunks_index.json

The UDRs in PCC.Products stores product related data. A product controls the behavior of a bucket. See APL - PCC Runtime Support - Buckets for further information about how to use the PCC.Products UDRs with APL and REST HTTP Interface - Products for information on how to access the PCC.Products UDRs from the REST HTTP interface. The main parts of PCC.Products are: Object Description Object Description Product The product holds information about the capacity of the counters, the enforcements and notifications that should be triggered at specific capacity levels, the interval at which the counters should be reset, how many counters to retain at reset, and, if the product stops, fallthrough in the usage recording process. Since a product is used by buckets it is important not to remove products in use. ProductMapping A flexible mapping table used to map from an external representation to a list of products. The external representation can be, for instance, a rating group, or a combination of rating group and time period classification. The mapping should not include any information related to a specific subscriber. SubscriberProfile Subscriber profiles are used for associating different products to different profiles. The subscribers will then have access to the products associated with their subscriber profile. Overview of the Product Data Model The different UDRs within the Product Data Model are connected as follows: Open Overview of the Product Data Model ProductMapping UDR In the ProductMapping UDR you set up the priority for the product mapping, the rating groups, etc that the product mapping should use, and the products that should be applied. Field Description Field Description ID (int) The unique ID of the product mapping table. Priority (int) The priority of the mapping object, a low value indicates a high priority. Determines the order in which the matched mapping objects are returned. Arguments (list<string>) The arguments of a mapping object, e g the rating group. Targets (list<Product>) The different products used by the mapping object. Below is a screenshot of the UDR Assistance displaying the ProductMapping UDR: Open ProductMapping UDR Example - ProductMapping UDR The following values: ID=101 Priority=1 Arguments=[4] Targets=[100,110] ID=102 Priority=3 Arguments=[8] Targets=[100] will give the following setup: The first product mapping, with ID 101, has a higher priority than the second, with ID 102. The first product mapping refers to rating group 4, while the second product mapping refers to rating group 8. The first product mapping references product 100 and 110, while the second product mapping references product 100. Product UDR The Product UDR holds information about the capacity of the counters, the enforcements and notifications that should be triggered at specific capacity levels, the interval at which the counters should be reset, and how many counters to retain at reset. If StopFallthrough is set to yes , counting for this product should prevent counting in buckets connected to lower priority products. Since a product is used by buckets it is important not to remove products in use. Field Description Field Description Id (int) The unique product ID. Name (string) The name of the product. Capacities (list<Capacity>) Defines the capacities for all counter items relevant for this product. A capacity is used to measure threshold values for enforcements and notifications. For unlimited capacity ignore this field. Price (int) Optional price information. Currency (string) Currency of price, e g USD, EUR, etc. Duration (int) When creating a bucket this field can be used to set the value for the bucket stop time. DurationUnit (int) The unit of the duration, for instance day, week, or month. 1 = minute, 2 = hour, 3 = day, 4 = week, 5 = month and 6 =year. ResetType (int) The type of reset, reset from start (1) or reset from date (2). Enforcements (list<Enforcement(PCC. Product)>) Holds a list of enforcement definitions, see the section below, Enforcement UDR. Notifications (list<Notification(PCC.Product)>) Holds a list of notification definitions, see the section below, Notification UDR. ResetType (int) The type of reset; reset from start (1), which means that if the reset interval is set to "Month", for example, then the buckets connected to the product in question will be reset at the start of the month, even if the day and time in the bucket's StartTime is something else, or reset from date (2), which means that the bucket will be reset at StartTime plus ResetInterval . Note! This is just an example configuration which may be changed in the Workflow template. ResetInterval (int) The interval with which this product is reset. Resetting a product involves clearing the bucket associated with this product. If set to 0 the product is never reset. ResetIntervalUnit (int) The unit of the reset interval, for instance day, week, or month. 1 = minute, 2 = hour, 3 = day, 4 = week, 5 = month and 6 =year. RetainedCounters (int) Controls the number of counters that are retained in the bucket counters list at reset. For example, if the product has an hourly reset interval and RetainedCounters is 24 the bucket will hold discrete usage counter statistics for the last 24 hours. Periods (list<Period (PCC.Periods)>) Determines the list of periods during which the product should be active. The periods in the stated list can contain one or several sub periods, which means that you can combine different time settings in one period. See Periods Data Model Buckets for further information. StartTime (date) The start time for the product. StopTime (date) The stop time for the product. StopFallthrough (boolean) Used in the product selection process. When usage is reported, the first step is to determine the products associated with the reported usage. This results in a product priority list. The next step is to iterate the list and report usage in the associated bucket. If StopFallthrough is true on the product then iteration stops with this. StopAtCapacity (boolean) Determines if the counter for a bucket should continue to count or not when 100% capacity for the bucket has been reached. If set to false, the counter will continue counting. If set to true, the counter will stop once 100% capacity for the bucket is reached. Misc (map<string, any>) See Misc Field for more information. Below is a screenshot of the UDR Assistance displaying the Product UDR: Open Product UDR Example - Products UDR The following values: ID=100 Name='GOLD' Capacitites=[101, 102] Duration=7 DurationUnit=3 Enforcements=[605] Notifications=[1,3,5] ResetType=2 ResetInterval=1 ResetIntervalUnit=3 RetainedCounters=10 Periods=[503] StartTime='2011-06-01 00:00:00' StopTime='2011-09-01 00:00:00' StopFallthrough=true StopAtCapacity=true ID=110 Name='SILVER' Capacitites=[101] Duration=24 DurationUnit=2 Enforcements=[605] Notifications=[2,4] ResetType=2 ResetInterval=1 ResetIntervalUnit=4 RetainedCounters=2 Periods=[504] StartTime='2011-01-01 00:00:00' StopTime='2012-01-01 00:00:00' StopFallthrough=true StopAtCapacity=true will give the following setup: The two products have the IDs 100 and 110, which are used by both PCC Rules and PCC Buckets, and have the names Gold and Silver . The Gold product uses capacities 101 and 102, while the Silver product only uses capacity 101. The Gold product will be available for 7 days from the time you start to use it, while the Silver product will be available for 24 hours from the time you start to use it. Both products use the enforcement 605. The Gold product will receive notifications 1, 3 and 5, while the Silver product will receive notifications 2 and 4. The reset and retained counters settings for the Gold product will reset the product once every day, based on date, and discreet usage counter statistics will be kept for 10 days. The reset and retained counters settings for the Silver product will reset the product once every week, based on date, and discreet usage counter statistics will be kept for 2 weeks. The Gold product will be active during the time periods stated in the Periods list 503, while the Silver product will be active during the time periods stated in the Periods list 504. The Gold product will start on the 1st of June and end on the 1st of September, 2011, while the Silver product will start on the 1st of January, 2011 and end on the 1st of January, 2012. For both products, counting will stop once the bucket for the respective product is full. SubscriberProfile UDR In the SubscriberProfile UDR you can configure different subscriber profiles. The profiles associate subscriber types with certain products, and many subscribers can share the same profile. Field Description Field Description ID (int) The unique id of the subscriber profile. Name (string) The name of the subscriber profile. Products (list<Product>) The products that should be associated with the profile. Misc (map<string, any>) See Misc Field for more information. Below is a screenshot of the UDR Assistance displaying the SubscriberProfile UDR: Open SubscriberProfile UDR Example - SubscriberProfile UDR The following values: ID=10 Name='STAR' Products=[100,110,120] ID=20 Name='MEDIUM' Products=[110] will give the following setup: The two subscriber profiles with IDs 10 and 20 has the names Start and Medium . The subscribers belonging to the Start profile will have access to products 100, 110 and 120, while the subscribers belonging to the Medium profile will only have access to product 110. Capacity UDR In the Capacity UDR you define the capacity for counter items. A capacity is used for measuring threshold values for enforcements and notifications. Field Description Field Description ID (int) The unique capacity ID. Name (string) The name of the capacity. Capacity (long) This parameter can be used for specifying the capacity of the counter type. CapacityUnit (int) This parameter can be used for specifying the unit of the capacity; 0 - bytes, 1 - kB, 2 - MB, 3 - GB, 4 - Event, 5 - Hour, 6 - Minute, or 7 - Other. CounterType (byte) This parameter can be used for specifying the type of counter this capacity applies to; 0 - input, 1 - output, or 2 - total. CounterUnit (int) This parameter can be used for specifying the unit of the counter; 0 - bytes, 1 - kB, 2 - MB, 3 - GB, 4 - Event, 5 - Hour, 6 - Minute, or 7 - Other. QuotaDefault (long) This parameter can be used in the APL code for setting a default quota that will be reserved for a request. If this quota is not available, you can configure the minimum amount of quota, specified by the QuotaMinimum field, to be tried instead. QuotaMinimum (long) This parameter can be used in the APL code for specifying the minimum amount of quota that needs to be available to grant a request. If this quota is not available, you can configure the request to be denied. Misc (map<string, any>) See Misc Field for more information. Below is a screenshot of the UDR Assistance displaying the Capacity UDR: Open Capacity UDR Example - Capacity UDR The following values: ID=101 Capacity=400000 CapacityUnit=0 CounterType=2 ID=102 Capacity=100000 CapacityUnit=1 CounterType=1 will give the following setup: The two capacities have the IDs 101 and 102, which are used by the Product UDR. The first capacity refers to the total amount of bytes, while the second capacity refers to the output bytes. The first capacity has a limit of 400000 bytes (unit=0), while the second capacity has a limit of 100000 kB (unit=1). Enforcement UDR The Enforcement UDR sets a threshold for when an enforcement should be triggered, and is used by both the Product UDR and PCC Rules. A Product can use one or several enforcements. When the usage exceeds enforcement threshold, the enforcement will be applied. When a new enforcement is triggered a new PCC rule should be applied. Fi e ld Description Fi e ld Description ID (int) The unique enforcement ID. CounterType (byte) The type of counter this enforcement refers to; input (0), output (1) or total (2). Level (double) The level at which this enforcement is triggered. Can be a percentage or absolute. Levels that are less than, or equal to 1, will be interpreted as a percentage value. Name (string) The name of this enforcement. Misc (map<string, any>) See Misc Field for more information. Below is a screenshot of the UDR Assistance displaying the Enforcement UDR: Open Enforcement UDR Example - Enforcement UDR The following values: ID=605 CounterType=1 Level=0.75 Name='LEVEL_75' ID=607 CounterType=1 Level=0.5 Name='LEVEL_50' will give the following setup: The two enforcements have the IDs 605 and 607, which are used by the Products UDR. Both enforcements refers to output traffic. The first enforcement is triggered at 75 %, while that second enforcement is triggered at 50 %. The name of the first enforcement is LEVEL_75 , while the name of the second enforcement is LEVEL_50 , and these names can be used in attributes in RulesMapping, for example. Notification UDR With the Notification UDR you can configure notifications to be sent out at different usage levels. Each product can use several notifications. Field Description Field Description ID (int) The unique ID for this notification. Name (string) The name of this notification. CounterType (byte) The type of counter this notification refers to; input (0), output (1) or total (2). Level (double) The usage level at which this notification is triggered. Can be a percentage or absolute. Levels that are less than, or equal to 1, will be interpreted as a percentage value. Required (boolean) Indicates whether the notification should be required or not. If this field is set to false , the notification will not be sent unless it has been stated in the Subscriber UDR, see Subscriber UDR in Buckets Data Model . If this field is set to true , the notification will always be sent regardless of what is stated in the Subscriber UDR. Type (string) The type of notification, for instance SMS or email. Address (string) The address the notification should be sent to. Message (string) The message to be sent as part of the notification. Misc (map<string, any>) This field can contain information about product ID or product name, for instance. See Misc Field for more information. Below is a screenshot of the UDR Assistance displaying the Notification UDR: Open Notification UDR Example - Notification UDR The following values: ID=700 Name='FIRST' CounterType=2 Level=0.60 Required=false Type='SMS' Address='10.10.10.700' Message='PCC Notification: 60% reached' ID=702 Name='SECOND' CounterType=2 Level=0.90 Required=true Type='SMS' Address='10.10.10.700' Message='PCC Notification: 90% reached' ID=703 Name='THIRD' CounterType=2 Level=1.00 Required=true Type='SMS' Address='10.10.10.700' Message='PCC Notification: 100% reached' will give the following setup: The three notifications with IDs 700, 702 and 703 have the names First , Second and Third . All three notifications will trigger based on the total number of bytes. The First notification will be triggered at 60 %, the Second at 90%, and the Third at 100 %. The First notification is not required, while the Second and Third> are required. All three notifications will be sent as SMSs. All three notifications will be sent to IP address 10.10.10.700 .

---

# Document 485: IBM MQ Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205033532/IBM+MQ+Configuration
**Categories:** chunks_index.json

You open the IBM MQ Collection agent configuration dialog from a workflow configuration. To open the Compressor processing agent configuration, click Build  New Configuration . Select Workflow from the Configurations dialog. When prompted to Select workflow type, select Realtime . Click Add agent and select IBM MQ from the Collection tab of the Agent Selection dialog. Open Overview The following fields are available for all Connection Modes. Field Description Dynamic Initialization When this option is set, the configuration of the IBM MQ Collection agent will not be made from the configuration window. The agent will instead send a connection UDR to an Analysis agent which will populate the UDR and send it back to the IBM MQ Collection agent. See Connection UDRs in IBM MQ UDRs for more information regarding the connection UDRs. MQ Host The host name of the queue manager host. Port The port for the queue manager. Channel The name of the MQ channel. Queue Manager The name of the queue manager. Connection Mode Select which Connection Mode the agent should use. The possible values are Queues, Topics, and Durable Subscriptions You can add and edit entries, as well as reorder them using the buttons labeled Add , Edit , Remove, Up , and Down .

---

# Document 486: SAP CC REST Agent Input/Output Data and MIM - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/292618335/SAP+CC+REST+Agent+Input+Output+Data+and+MIM
**Categories:** chunks_index.json

Input/Output Data The Input/Output data is the type of data an agent expects and delivers. The SAP CC REST agent utilises the two main UDRs below, based on the selected REST API service. REST API Service Input UDR Output UDR REST API Service Input UDR Output UDR Charging service SAPCCChargingRequest SAPCCChargingRequest OR errorUDR Loading service SAPCCLoadingRequest SAPCCLoadingRequest OR errorUDR For further information, see SAP CC REST UDRs . MIM For information about the MIM and a list of the general MIM parameters, see Administration and Management in Legacy Desktop . This agent does not publish or access any MIM parameters.

---

# Document 487: FTAM EWSD Agent Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205685471/FTAM+EWSD+Agent+Configuration
**Categories:** chunks_index.json

You open the FTAM EWSD collection agent configuration dialog from a workflow configuration. To open the configuration, click Build  New Configuration . Select Workflow from the Configurations dialog. When prompted to Select workflow type, select Batch . Click Add agent and select FTAM EWSD from the Collection tab of the Agent Selection dialog. Switch Tab Open FTAM EWSD agent configuration dialog - Switch tab Setting Description Setting Description Host Name The host alias for the EWSD switch, the alias, which is located in the <ROOT_DIR>/etc/host_def file. The matching entry in the file specify the corresponding ISO address. User Name User name as defined at the EWSD switch. Password Password related to the User Name . Filename Name of the cyclic file into which the EWSD switch stores data, and from which the agent will be collecting. Remote File is Cyclic If disabled, static files will be collected, that is, the switch does not produce a cyclic file. Interface Tab Open FTAM EWSD agent configuration dialog- Interface tab Setting Description Setting Description Host This host name or ip-address of the FTAM Interface. Port Port number on the Host , on which the FTAM Interface service is listening. The default port number is 16702. Advanced Tab Open FTAM EWSD agent configuration dialog - Advanced tab Setting Description Setting Description Account Optional account name, as defined at the EWSD switch, if utilized. File Store Password Optional password for file access, as defined at the EWSD switch, if utilized. Document Type A list from which the data format is selected; unstructured text, record-oriented text, or unstructured binary. Number of Retries The number of times to retry upon failing connection. Delay (sec) The number of seconds between each retry attempt.

---

# Document 488: Application Security Testing - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/449413165/Application+Security+Testing
**Categories:** chunks_index.json

There are certain limitations when it comes to using Static Application Security Testing (SAST) tools on APL code: APL Code: APL (Analysis Programming Language) code is proprietary to MediationZone (MZ) and is tailored to its environment. Due to its specialized nature, Static Application Security Testing (SAST) tools are not equipped to effectively analyze APL code. Sandboxed Design: APL code is designed to operate within a sandboxed environment. It does not create threads or initiate external connections unless explicitly using built-in APL functions to integrate with third-party databases. This architecture minimizes potential security vulnerabilities related to concurrent processing and unauthorized external communications. Recommended Security Measures While SAST tools may not be suitable for scanning APL code directly, we recommend the following security practices: Common Vulnerabilities and Exposures (CVE) Security Scanning Focus on scanning third-party libraries and dependencies that your MediationZone environment uses. Directories to Scan: Navigate to the MZ_HOME directory and target the following sub-directories for your SCA scans: lib Common/lib 3PP pico-cache (Most runtime JARs are located here) By scanning these directories, you can perform checks to identify and mitigate potential risks from third-party components. Dynamic Application Security Testing (DAST) Schedule regular DAST scans to evaluate the runtime behavior of your deployment. This helps in identifying and addressing vulnerabilities that may not be detected through static analysis alone. DAST scans simulate external attacks on your live applications, providing insights into how your system withstands real-world threats. Additional Support Starting with MediationZone version 9, DigitalRoute offers the capability to provide SAST reports upon request. If you require detailed SAST analysis for specific components or have other security-related inquiries, please do not hesitate to contact our support team.

---

# Document 489: FTP EWSD Events - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204641406/FTP+EWSD+Events
**Categories:** chunks_index.json

Agent Event Messages Whenever an agent event occurs the agent generates an information message according to your configuration in the Event Notification Editor . This section includes the event messages that can be configured for the FTP/EWSD agent. For further information about the agent message event type, see Agent Event . Ready with file: filename Reported along with the name of the source file that has been collected and inserted into the workflow. File cancelled: filename Reported together with the name of the current file, each time a Cancel Batch message is received. This assumes the workflow is not aborted; please see, FTP EWSD Transaction Behavior . Debug Events Debug messages are dispatched in debug mode. During execution, the messages are displayed in the Workflow Monitor. You can configure Event Notifications that are triggered when a debug message is dispatched. For further information about the debug event type, see Debug Event . The agent produces the following debug events: Command trace A printout of the control channel trace. This is only valid if FTP command trace in the Advanced tab is selected .

---

# Document 490: Third Party Software Requirements - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204678720/Third+Party+Software+Requirements
**Categories:** chunks_index.json

Search this document: This document lists the valid versions of operating systems, databases, browsers, and other third-party software that is required by MediationZone and its optional components. Chapters The following chapters and sections are included: Operating Systems Java Databases Optional Software Web Browsers for Desktop Legacy Desktop and Desktop Launcher

---

# Document 491: Installation Instructions - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204996705
**Categories:** chunks_index.json

Loading Prerequisites The reader of this document should be familiar with: System Administrator's Guide For information about Terms and Abbreviations used in this document, see the Terminology documentation. Loading

---

# Document 492: Web Service Example - Creating a Web Service Request Workflow - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204644018/Web+Service+Example+-+Creating+a+Web+Service+Request+Workflow
**Categories:** chunks_index.json

This Web Service Requester workflow consists of the following agents: TCP_IP: Collects the input data. Analysis_1: Creates the UDR type WSCycle_charge and routes it to the Web Service Requester Web Service Requester (Processing): Sends a request to a Web Service server. Once the web server replies, Web Service Requester forwards the reply to Analysis_2. Analysis_2: Receives the Web Service reply. In this example we use this agent for output demonstration. Open The Web Service Requester workflow Configuring the Agents In the Workflow Editor open the configuration views of both agents. In the TCP_IP agent configuration view, set Port to 3210. In the Analysis_1 agent configuration view, enter the following APL code into the text pane: import ultra.ws.example.charge.cycles; import ultra.ws.example.charge.x1; consume { // Create a WSCycle_charge UDR WSCycle_charge udr = udrCreate(WSCycle_charge); // Creaete a Charger UDR as parameter udr.param = udrCreate(Charge); // Populate the parameter with data udr.param.chargingEvent = udrCreate(ChargingEvent); udr.param.chargingEvent.amount = 0.50; udr.param.chargingEvent.id = "0123456789"; udr.param.serviceType = "SMS"; // Route the UDR udrRoute(udr); } To enter the UDR type, click on the Set To Input button. The type bytearray appear on the UDR types list. In the Web Service agent Configuration tab, click on the Browse ... button to enter the WS profile. To automatically set the HTTP address click on the Extract Profile Settings button. In the Analysis_2 Configuration view, enter the following APL code into the text pane: consume { debug(input); } Click on the Set To Input button. bytearray will appear on the UDR types list.

---

# Document 493: Workflow Properties - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204604801/Workflow+Properties
**Categories:** chunks_index.json

Workflow specific data is altered in the Workflow properties dialog. To open the Workflow properties dialog, click the Properties button in an existing workflow template or click Build  New Configuration  Workflow  Properties . This section includes the following subsections: Workflow Table Tab Dynamic Fields Tab Error Tab Audit Tab Execution Tab Services Tab

---

# Document 494: Tracing in Desktop - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204611111/Tracing+in+Desktop
**Categories:** chunks_index.json

When a Conditional Trace template has been created, you are ready to do traces in Desktop. To do a trace: Open the Conditional Trace view in Desktop, click Manage and then click on the Conditional Trace button. Open The Conditional Trace view Select which Conditional Trace template you want to use in the Template drop-down list. Enter the maximum number of traces you want to do per EC in the Max Traces Per EC field. Enter the time interval for which you want to run the trace in seconds in the Lifetime (s) field. If a parameter has been defined in the template and mapped to a matcher in the Conditional Trace template, you can enter a regular expression in the <parameter name> field to only get hits where the parameter matches the regular expression. Click on the Start button to initiate the trace.

---

# Document 495: Workflow Bridge Agents - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204675498/Workflow+Bridge+Agents
**Categories:** chunks_index.json

This section describes the Workflow Bridge agents. The agents are used for fast collection and forwarding of data between workflows. The agents can be part of both batch and real-time workflows. The Workflow Bridge forwarding agent is listed among the processing agents in Desktop while the Workflow Bridge collection agent is listed among the collection agents. The Workflow Bridge agents act as a bridge for communication between real-time workflows, or between a batch and a real-time workflow, within the same MediationZone system. The Workflow Bridge agents do not use any storage server to manage the data. Data is instead stored in memory cache when executing on the same EC, or streamed directly from one agent to another, over TCP/IP, when executing on different ECs. This provides efficient transfer of data, especially from batch to real-time workflows. The forwarding and collection workflows communicate by using a dedicated set of UDRs: Data is sent from a forwarding workflow to a collection workflow in a ConsumeCycleUDR . Refer to ConsumeCycleUDR for further information. In the ConsumeCycleUDR there are also fields that enable broadcasting and load balancing. Broadcasting, i e sending the same UDR to several different workflow instances in the collecting workflow, can be made to a configurable number of workflow instances. Load balancing enables you to configure to which workflow instance each UDR should be sent, based on criteria of your choice. Note! If any other UDR than ConsumeCycleUDR is routed to the forwarding agent, the bridge will only support one collector, which means that it will not be possible to broadcast or load balance. Each state of a forwarding workflow is sent in a separate WorkflowState UDR to the real-time collection agent. The batch forwarding workflow sends all states from initialize to deinitialize, while a real-time forwarding workflow only sends the initialize state. The deinitialize state is sent by the real-time collection workflow if the connection goes down between the collection workflow and a forwarding workflow (batch or real-time). For more information regarding the workflow execution states, see Workflow Monitor . User defined action UDRs can be sent from the collection workflow to communicate actions back to the forwarding workflow. For further information, see User Defined Action UDRs . In the collecting workflow, the APL has to be configured to communicate responses for the UDRs to the Workflow Bridge collection agent. When both the forwarding and collecting workflows are real-time workflows, only responses for WorkflowState UDRs have to be configured. However, when the forwarding workflow is a batch workflow, responses for ConsumeCycle UDRs have to be configured as well. Responses for WorkflowState UDRs are always communicated back to the forwarding workflow. If you want to communicate responses for ConsumeCycle UDRs back to the forwarding workflow as well, the Send Reply Over Bridge option has to be selected in the Workflow Bridge profile, see Workflow Bridge Profile for further information. Workflow Bridge has two essential features; Session Context and Bulk Forwarding. Session Context By using a session context, arbitrary data can be stored and managed by the Workflow Bridge real-time collection agent during the whole transaction. This is achieved by populating the SessionContext field in the InitializeCycle UDR or BeginBatchCycleUDR with the data, which is then included in all subsequent UDRs after "initialize" or "begin batch". The field is cleared at "deinitialize", when the connection to the forwarding workflow goes down. Note! The SessionContext field is only writable in the InitializeCycleUDR and BeginBatchUDR and the session context is only available in a collection workflow. Refer to Workflow Bridge UDR Types for more information about the Workflow Bridge UDR types. Bulk Forwarding of Data To enhance performance, it is possible to collect and send data in a bulk from the forwarding agent. When the data bulk has been received by the Workflow Bridge real-time collection agent, it is unpacked and forwarded as separate UDRs by the agent. The bulk is created by the Workflow Bridge forwarding agent after a configured number of UDRs has been reached, or after a configured timeout. This is specified in the Workflow Bridge profile, see Workflow Bridge Profile for more information. Bulking of data can only be performed for data being sent in the ConsumeCycle UDR and not for the states that are sent in the state-specific UDRs. Bulk forwarding is not performed when the Workflow Bridge agents are executing on the same EC. Transaction Safety The Workflow Bridge collection workflow is a real-time workflow and as such, the transaction safety will have to be handled with APL code. The forwarding workflow execution states are transferred as Workflow State UDRs from the Workflow Bridge forwarding Agent, which enables the collection workflow to take different actions depending on the execution state of the forwarding workflow. The Workflow Bridge collection agent requires that all Workflow State UDRs are returned before the next Workflow State UDR is forwarded into the workflow. The only exception to this is that the collection agent accepts to have several ConsumeCycle UDRs outstanding at the same time. However, all ConsumeCycleUDR s must have been returned before the next type of Workflow State UDRs is forwarded. If the forwarding workflow is a batch workflow, this means that all ConsumeCycleUDR s must be returned before the DrainCycleUDR is forwarded into the workflow. For more information on the workflow execution states, see Workflow Monitor . Broadcasting and Load Balancing The same UDR can be sent to multiple workflow instances in the collection workflow using broadcasting. If the forwarding workflow has many workflow instances as well, all the UDRs sent from these instances can also be sent to all the instances in the collecting workflow. Load balancing can be used to direct different UDRs to different workflow instances using a static load-balancing strategy (see Workflow Bridge Profile Configuration General Tab ). Each workflow instance in the collection workflow is assigned a LoadId by adding this field to the workflow instance table in the Workflow Properties and then entering specific Ids for each instance. In the APL code, it is possible to determine specific UDRs that can have the forwarding workflow routed to a designated LoadId. You configure the number of workflow instances you want to send UDRs to in the Workflow Bridge profile. Transport You have the option to select the best transport for your needs. See also the Transport setting in Workflow Bridge Profile Configuration General Tab . Option Description Option Description Transport Select the transport protocol that you prefer for the best performance. The section contains the following subsections: Workflow Bridge Profile Workflow Bridge Batch Forwarding Agent Workflow Bridge Real-time Forwarding Agent Workflow Bridge Realtime Collection Agent Workflow Bridge UDR Types Workflow Bridge Examples

---

# Document 496: Type Conversion Functions - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204677850/Type+Conversion+Functions
**Categories:** chunks_index.json

This section describes functions that are used to perform conversions between different types. The following functions for Type Conversion described here are: baToBigInt Converts a bytearray to a big integer (two complement). void baToBigInt (bigint bigintVar, bytearray baValue) Parameter Description bigintVar Bigint variable to set baValue Bytearray value Returns Nothing baToHexString Converts a bytearray to a string containing the hexadecimal values. string baToHexString(bytearray baValue) Parameter Description baValue Bytearray value Returns A hexadecimal string baToStr Converts a bytearray to a string. string baToStr (bytearray array, string charEncoding) //Optional Parameter Description array The bytearray to convert charEncoding The character encoding to use. If no encoding is specified, ISO-8859-1 (Latin 1) is used. If you specify character encoding, it must match the character encoding included in the standard charsets found in https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/nio/charset/Charset.html or the extended charset of the target Java implementation. If you specify a character encoding that cannot be found, a compilation error occurs. Returns The result string dateToString Converts a date to a string and assigns the result to a string variable (or field). Returns true if the conversion succeeded. The only time the conversion can fail, is if the date is null or the format is invalid. boolean dateToString (string stringVar, date dateValue, string format) //optional Parameter Description stringVar String identifier to set. dateValue The date value. format If no format string is specified, the default system format is used as specified in the property mz.server.dateformat . For further information about this property, see Cell Properties in the System Administrator's Guide . The date formatting is based on standard Java syntax. For further information, see https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/text/SimpleDateFormat.html . Returns true or false . strToBA Converts a string to a bytearray and assigns the result to a bytearray variable (or field). void strToBA (bytearray array, string stringValue, string charEncoding) //Optional Parameter Description array The resulting bytearray stringValue The string value charEncoding The character encoding to use. If no encoding is specified, ISO-8859-1 (Latin 1) is used. If you specify character encoding, it must match the character encoding included in the standard charsets found in https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/nio/charset/Charset.html or the extended charset of the target Java implementation. If you specify a character encoding that cannot be found, a compilation error occurs. Returns Nothing strToBigInt Converts a string to a big integer. If the conversion was successful true is returned. If one of the keywords dec or hex are specified, the string is assumed to be decimal or hexadecimal respectively. Decimal is the default. boolean strToBigInt (bigint bigintVar, string stringValue, dec|hex) //Optional Parameter Description bigintVar Big integer variable to set stringValue String value Returns true or false strToDate Converts a string to a date and assigns the result to a date variable (or field). Returns true if the conversion succeeded. You can enable lenient interpretation of the date/time in the string to be converted by setting the Cell property mz.drdate.lenient to true in the cell.conf . With lenient interpretation, a date such as "January 32, 2016" will be treated as being equivalent to the 31nd day after January 1, 2016. With strict (non-lenient) interpretation, an invalid date will cause the function to leave the submitted date variable unchanged. The default value of mz.drdate.lenient is false . boolean strToDate (date dateVar, string stringValue, string format, //Optional string timeZone) //Optional Parameter Description dateVar Date identifier to set stringValue Date value format If no format string is specified, the default system format is used as specified in $MZ_HOME/ common/config/cell/default/master/cell.conf , the mz.server.dateformat property. The date formatting is based on standard Java syntax. For further information, see https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/text/SimpleDateFormat.html . Note! Even though the syntax conforms to SimpleDateFormat , it is not directly based on this class. You can enable date format handling based on the SimpleDateFormat class in the installed Java version by setting the Execution Context property mz.use.drdateformat to false. This enables use of additional patterns that are available in the installed Java version. $ mzsh topo set topo://container:<container>/pico:<pico name>/val:config.properties.mz.use.drdateformat false When mz.use.drdateformat is set to true (default), the function does not apply the timezone offset at conversion. The timezone can be specified but the date is not modified. Note! Unlike SimpleDateFormat the strToDate function does not accept the Locale parameter and uses the default JVM locale instead, which may result in parsing errors. If this is an issue, it can be solved by setting the locale to US_en in the JVM arguments of the relevant EC. $ mzsh topo set topo://container:<container>/pico:<pico name>/obj:config.jvmargs  'usercountry: ["-Duser.country=US"] userlanguage: ["-Duser.language=en"]' timeZone An optional string stating the time zone to set. It is recommended that you specify the time zone id using the long format, e g "America/St_Johns". It is possible to also use the abbreviated format, e g "PST". However, this can lead to ambiguous results and should be avoided. If an invalid time zone format is entered, no error is returned. Instead, the time zone is automatically set to "GMT". If the time zone is specified in the stringValue , it overrides the timeZone parameter. Returns true or false . strToDouble Converts a decimal string to a double and assigns the result to a double variable (or field). Returns true if the conversion succeeded. boolean strToDouble (double doubleVar, string stringValue) Parameter Description doubleVar Double identifier to set. stringValue String value. Returns true or false . strToFloat Converts a decimal string to a float and assigns the result to a float variable (or field). Returns true if the conversion succeeded. boolean strToFloat (float floatVar, string stringValue) Parameter Description floatVar Float identifier to set stringValue String value Returns true or false strToInt Converts a decimal or hexadecimal string to an integer and assigns the result to an integer variable (or field). Returns true if the conversion succeeded. If one of the keywords dec or hex are specified, the string is assumed to be decimal or hexadecimal respectively. Decimal is the default. boolean strToInt (int intVar, string stringValue, dec|hex) //Optional Parameter Description intVar Integer identifier to set. stringValue String value. Returns true or false . Example - Using strToInt Provided that the field CallTime is a string containing a hexadecimal string, it converts its content to an integer. int a; int b; strToInt( a, CallTime, hex ); strToInt( b, "12345" ); /* dec is default */ strToLong Converts a decimal or hexadecimal string to a long and assigns the result to an long variable (or field). Returns true if the conversion succeeded. If one of the keywords dec or hex are specified, the string is assumed to be decimal or hexadecimal respectively. Decimal is the default. boolean strToLong (long longVar, string stringValue, dec|hex) //Optional Parameter Description longVar Long identifier to set stringValue String value Returns true or false strToBigDec Converts a decimal or hexadecimal string to a BigDecimal and assigns the result to a BigDecimal variable (or field). Returns true if the conversion succeeded. boolean strToBigDec (bigdec bigdecVar, string stringValue) Parameter Description bigdecVar BigDecimal identifier to set stringValue String value Returns true or false udrToString Converts a UDR to a string. Each UDR will be preceded with the internal class name, and each of its field will be preceded with the field name. string udrToString(drudr myUDR) Parameter Description myUDR The UDR to convert Returns A string containing the UDR fields. The output will be in the following format: Field values for: <internal UDR reference> field1: <value> field2: <value>

---

# Document 497: DB Ref Event - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204638833/DB+Ref+Event
**Categories:** chunks_index.json

The DB Ref Event is triggered when a user performs any of the following operations on its tables: Commits changes to a database table Performs import operations If Enable Advanced Logging is selected in a Reference data profile, additional information will be included as follows: SQL statements for commit operations Generated SQL and log files' locations for import operations For more information about Reference Data Management, see the Reference Data Management user's guide. Filtering In the Event Setup tab, the values for all the event fields are set by default to All in the Match Value(s) column, which will generate event notifications every time a DB Ref event is generated. Double-click on the field to open the Match Values dialog where you can click on the Add button to add which values you want to filter on. If there are specific values available, these will appear in a drop-down list. Alternatively, you can enter a hard coded string or a regular expression. The following fields are available for filtering of DB Ref events in the Event Setup tab: DB Ref event specific fields profileIdentity - This fields contains the name of the Data Reference profile. user - This field contains the name of the user that performed the operation. Fields inherited from the Base event The following fields are inherited from the Base event, and can also be used for filtering, and described in more detail in Base Event : category - If you have configured any Event Categories, you can select to only generate notifications for DB Ref events with the selected categories. See Event Category for further information about Event Categories. contents - This field contains a string with event specific information. If you want to use this field for filtering you can enter a part of the contents as a hard coded string. eventName - This field can be used to specify which event types you want to generate notifications for. This may be useful if the selected event type is a parent to other event types. However, since the DB Ref event is not a parent to any other event, this field will typically not be used for this event. origin - This field always contains the IP address of the Platform. severity - With this field you can determine to only generate notifications for events with a certain severity; Information, Warning, Error or Disaster. timeStamp - This field contains the date and time for when the Platform generated the event. If you want to use timeStamp for filtering, it may be a good idea to enter a regular expression, for example, "2014-06-15 09:.*" for catching all DB Ref events from 9:00 to 9:59 on the 15th of June, 2014. Note! The values of these fields may also be included in the notifications according to your configurations in the Notifier Setup tab.

---

# Document 498: In-maps - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204612864/In-maps
**Categories:** chunks_index.json

The in_map construct is used to map external formats to internal formats during decoding. The general syntax for an in-map declaration is as follows: in_map <map_name> : <in_map options> { <explicit map specifications> <automatic> : <automatic options> { <automatic mapping specifications> }; <sub-external specifications> }; The general in-map options are: Option Description external(<external_name>) Specifies the external format to map from. This is a mandatory parameter. internal(<internal_name>) The internal format name to map to. This is a mandatory parameter, unless target_internal is specified. target_internal(<target_internal_name>) The target internal format name created when automatically generating a map. This parameter is only valid for automatic mappings. discard_output Specifies that the in_map will produce no output when used in a decoder. This can be useful for uninteresting "filler records" that are not needed for processing. emit_field(field1, field2, ...) Specifies that a decoder using this in_map will not route out the top level UDR. Instead, the content (records or list of records) of the named fields are routed. Specially named options can also be supplied in the in_map depending on the type of the external format. The type specific options are: Option Description ipdr_compact Only applicable for XML based formats (IPDR formats). Specifies that the IPDR "compact" encoding is to be used. PER_aligned Only applicable for ASN.1 based formats. Specifies that PER encoding (ALIGNED version) is to be used. PER_unaligned Only applicable for ASN.1 based formats. Specifies that PER encoding (UNALIGNED version) is to be used. Option Description <explicit map specifications> Describes how the external fields are mapped to the internal fields. These specifications are optional. i:<internal field> and e:<external field> [ using in_map <sub_map> ] ; <automatic> Specifies that all external fields not explicitly mapped in <explicit_map_specifications> will be implicitly mapped according to the external formats implicit type conversions. It is also possible to control the behavior of the automatic mapping through options or a specification block, see the section below, Automatic Maps, for details). <sub-external specifications> This is used to handle the special case where the mapped external is the parent of other externals that must be considered for decoding. This is currently only supported for XML schema based externals where it is used to support, for instance, IPDR decoding. ignore_unknown_tags This option can be used to ignore unknown tags when the external format is ASN.1 BER. Example - ignore_unknown_tags Adding the following for an in_map creates an in_map called inMapIgnoringUnknownTags that simply ignores any unknown tags in the BER encoding: in_map inMapIgnoringUnknownTags: external(Udr), target_internal(Udr), ignore_unknown_tags { automatic; }; Note! This functionality can also be achieved by using the ASN.1 extensibility syntax. For example, entering the following code results in tags of the type TheType to be ignored: TheType ::= SEQUENCE { boolField (1) BOOLEAN OPTIONAL, } Loading

---

# Document 499: Web Service UDR Type Folder Structure - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205035149/Web+Service+UDR+Type+Folder+Structure
**Categories:** chunks_index.json

UDR types can be viewed in the UDR Internal Format Browser . It is accessed either by right-clicking on the text pad in the Analysis or Aggregation agents and selecting the UDR Assistance... option, or by clicking on the New Configuration button in Desktop, selecting APL Code or Ultra Format from the menu, which will open the APL Code Editor or Ultra Format Editor , and then right-clicking on the text pad and selecting the UDR Assistance... option . Open The UDR Assistance menu in the APL Code Editor The UDR folder structure The AbstractWSCycle UDRs is created and saved in a folder, created and named according to the following structure: WS.[Directory Name].[WSProfile Name].cycles.[WSCycleUDR Names] The UDR types related to the XML-schema are created and saved in a folder, created and named according to the following structure: WS.[Directory Name].[WSProfile Name].[alias].[complexTypeUDRs] The alias is replaced with the name of the Target Name space (tns). The name is set in the XML Schema part of the WSDL file. If the target name space has no name alias, the UDR will be saved in the [WSProfile Name] folder. Note! When concatenating WSDL files, the aliases in the files can be identical, and if this occurs the structure will be changed to avoid a name conflict. If the names include invalid characters, they will be replaced with underscore characters. The structure can be as follows: WS.[Directory Name].[WSProfile Name].[WSDL Filename].[alias] If the WSDL filename includes invalid name characters these will be replaced with underscore characters in the WSDL Filename . Note! If the WSDL file that you use to configure the WS profile includes a variable named "Thread", it is automatically changed to "thread". You must then rename the variable to thread in the APL code in the Analysis or Aggregation agent in your workflow. This prevents compilation issues when you try to compile your workflow .

---

# Document 500: Workflow Table - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204997546
**Categories:** chunks_index.json



---
**End of Part 22** - Continue to next part for more content.
