# RATANON/MZ93-DOCUMENTATION - Part 21/112

---
**Dataset:** ratanon/mz93-documentation
**Part:** 21 of 112
**GitHub:** https://github.com/ratan0n/docs/tree/main/mz93-documentation
**Size:** ~63.5 KB
---

The LDAP agent contains a number of UDRs. In the UDR Internal Format Browser , a detailed view of the available UDRs and respective fields is displayed. To open the browser, click the Configuration menu and select the option APL Code , and then right-click in the editing area and select the option UDR Assistance... . Open LDAP agent UDRs in the UDR Assistance Note! After receiving an LdapResponseUDR , it is possible to access a context by investigating an included LdapRequestUDR that has triggered an LDAP operation. LdapAbandonRequestUDR The LdapAbandonRequestUDR is used to cancel an operation that was sent to the LDAP server. The following fields are included in the LdapAbandonRequestUDR : Field Description Field Description Context (any) This field is a field of type any (that is, Java Objects) that can be freely used to store information, such as UDRs, int, string, etc. The information stored in this field will be available when a response is received. For example, you can use this field to store what caused the incoming LDAP request and use it to reply to the request after getting the response. request (LdapRequestUDR) This optional field contains the request that was sent to the LDAP server. For further information, see the section below, LdapRequestUDR. requestID (long) This field contains the request ID of the operation request that was sent to the LDAP server. It must be populated using the requestID field of an LdapRequestIDUDR response routed out by the agent. This field is only populated if you have selected the Enable Request ID check box in the Advanced tab of the LDAP agent configuration dialog. For further information, see LDAP Agent Configuration . LdapAbandonResultUDR When an LdapAbandonRequestUDR for an abandon operation is sent to the LDAP agent, the LdapAbandonResultUDR is sent by the LDAP agent to the outgoing routes in the workflow and contains the result information of processing that abandon operation. The following fields are included in the LdapAbandonResultUDR : Field Description Field Description abandonSent (boolean) This field is set to true only if the abandon operation caused the agent to send a corresponding abandon request to the LDAP server. Note that its value does not represent whether or not the operation was actually cancelled on the LDAP server side. request (LdapRequestUDR) This field contains the data from the request field of the abandon operation. LdapAddRequestUDR The LdapAddRequestUDR is used to send data to the LDAP agent for an add operation to be executed in the LDAP server. The following fields are included in the LdapAddRequestUDR : Field Description Field Description attributes (map<string,list<string>>) This field contains the relevant LDAP attributes. This map must include the attribute name and the attribute values. Each attribute may have one or more values. Context (any) This field is a field of type any (that is, Java Objects) that can be freely used to store information, such as UDRs, int, string, etc. The information stored in this field will be available when a response is received. For example, you can use this field to store what caused the incoming LDAP request and use it to reply to the request after getting the response. dn (string) This field contains the Distinguished Name for the add operation. LdapAddResultUDR When an add operation is sent to the LDAP server, the LdapAddResultUDR is sent by the LDAP agent to the outgoing routes in the workflow and contains the result information for the add operation sent. The following fields are included in the LdapAddResultUDR : Field Description Field Description request (LdapAddRequestUDR) This field contains the data from the request field of the add operation. LdapCompareRequestUDR The LdapCompareRequestUDR is used to send data to the LDAP agent for a compare operation to be executed in the LDAP server. The following fields are included in the LdapCompareRequestUDR : Field Description Field Description assertionValue (string) This field contains the assertion value for the compare operation. attributeName (string) This field contains the attribute name. Context (any) This field is a field of type any (that is, Java Objects) that can be freely used to store information, such as UDRs, int, string, etc. The information stored in this field will be available when a response is received. For example, you can use this field to store what caused the incoming LDAP request and use it to reply to the request after getting the response. dn (string) This field contains the Distinguished Name for the compare operation. LdapCompareResultUDR When a compare operation is sent to the LDAP server, the LdapCompareResultUDR is sent by the LDAP agent to outgoing routes in the workflow and contains the result information for the compare operation sent. The following fields are included in the LdapCompareResultUDR : Field Description Field Description compareTrue (boolean) This field determines if a match was found with the data sent in the compare operation. If a match is found the value is set to true . request (LdapCompareRequestUDR) This field contains the data from the request field of the compare operation. LdapDeleteRequestUDR The LdapDeleteRequestUDR is used to send data to the LDAP agent for a delete operation to be executed in the LDAP server. The following fields are included in the LdapDeleteRequestUDR : Field Description Field Description Context (any) This field is a field of type any (that is, Java Objects) that can be freely used to store information, such as UDRs, int, string, etc. The information stored in this field will be available when a response is received. For example, you can use this field to store what caused the incoming LDAP request and use it to reply to the request after getting the response. dn (string) This field contains the Distinguished Name for the delete operation. LdapDeleteResultUDR When a delete operation is sent to the LDAP server, the LdapDeleteResultUDR is sent by the LDAP agent to the outgoing routes in the workflow and contains the result information for the delete operation sent. The following fields are included in the LdapDeleteResultUDR : Field Description Field Description request (LdapDeleteRequestUDR) This field contains the data from the request field of the delete operation. LdapErrorUDR The LdapErrorUDR is sent by the LDAP agent to the outgoing routes in the workflow when an error occurs in a request, and contains the details of the error which has occurred. The following fields are included in the LdapErrorUDR : Field Description Field Description errorCode (int) This field contains the LDAP result code for the operation sent to the LDAP server. For further information on the LDAP result codes, see https://docs.ldap.com/ldap-sdk/docs/javadoc/com/unboundid/ldap/sdk/ResultCode.html . errorMessage (string) This field contains the result message for the operation sent to the LDAP server. request (LdapRequestUDR) This field contains the LdapRequestUDR sent to the LDAP agent for an operation to be executed in the LDAP server. For further information, see the section below, LdapRequestUDR. searchResult (list<LdapSearchResultUDR>) This field contains a list of the search results, listing the LdapSearchResultUDRs . This field is only populated on errors for search operations that either time out or have their results truncated as specified in the timeLimit and sizeLimit search parameters. For further information, see the sections below, LdapSearchRequestUDR and LdapSearchResultUDR. If the operation was not a search, this field is empty. LdapExtendedRequestUDR The LdapExtendedRequestUDR is used to send data to the LDAP agent for the extended request included to be executed on the server. The following fields are included in the LdapExtendedRequestUDR : Field Description Field Description Context (any) This field is a field of type any (that is, Java Objects) that can be freely used to store information, such as UDRs, int, string, etc. The information stored in this field will be available when a response is received. For example, you can use this field to store what caused the incoming LDAP request and use it to reply to the request after getting the response. oid (string) This field contains the object identifier (oid) for the request sent to the LDAP server, which determines the request name for the operation. value (bytearray) This field contains the content of the request sent to the LDAP server. valueBERType (byte) This field contains a byte which determines the format of the request content. LdapExtendedResultUDR When an extended request is sent to the LDAP server, the LdapExtendedResultUDR is sent by the LDAP agent to the outgoing routes in the workflow and contains the result information for the request sent. The following fields are included in the LdapExtendedResultUDR : Field Description Field Description oid (string) This field contains the object identifier (oid) for the extended result, which determines the request name for the operation. request (LdapExtendedRequestUDR) This field contains the data from the request field of the extended request sent. value (bytearray) This field contains the content of the result received. valueBERType (byte) This field contains a byte which determines the format of the request content. LdapModifyDNRequestUDR The LdapModifyDNRequestUDR is used to send data to the LDAP agent for a modify DN (Distinguished Name) operation to be executed in the LDAP server. The following fields are included in the LdapModifyDNRequestUDR : Field Description Field Description Context (any) This field is a field of type any (that is, Java Objects) that can be freely used to store information, such as UDRs, int, string, etc. The information stored in this field will be available when a response is received. For example, you can use this field to store what caused the incoming LDAP request and use it to reply to the request after getting the response. deleteOldRDN (boolean) This field determines whether the previous Distinguished Name is to be removed. dn (string) This field contains the Distinguished Name for the modify DN operation. newSuperiorDN (string) This field contains the Distinguished Name of the new parent DN. If the parent DN is not new, this field is empty. newRDN (string) This field contains the new Distinguished Name. LdapModifyDNResultUDR When a modify DN operation is sent to the LDAP server, the LdapModifyDNResultUDR is sent by the LDAP agent to the outgoing routes in the workflow and contains the result information for the operation sent. The following fields are included in the LdapModifyDNResultUDR : Field Description Field Description request (LdapModifyDNRequestUDR) This field contains the data from the request field of the modify DN operation. LdapModifyRequestUDR The LdapModifyRequestUDR is used to send data to the LDAP agent for a modify operation to be executed in the LDAP server. The following fields are included in the LdapModifyRequestUDR : Field Description Field Description attributes (map<string,list<string>>) This field contains the relevant attributes. This map must include the attribute name and the attribute values. Context (any) This field is a field of type any (that is, Java Objects) that can be freely used to store information, such as UDRs, int, string, etc. The information stored in this field will be available when a response is received. For example, you can use this field to store what caused the incoming LDAP request and use it to reply to the request after getting the response. dn (string) This field contains the Distinguished Name for the modify operation. modificationType (string) This field contains the type of modification operation sent. LdapModifyResultUDR When a modify operation is sent to the LDAP server, the LdapModifyResultUDR is sent by the LDAP agent to the outgoing routes in the workflow and contains the result information for the operation sent. The following fields are included in the LdapModifyResultUDR : Field Description Field Description request (LdapModifyRequestUDR) This field contains the data from the request field of the modify operation. LdapRequestUDR The LdapRequestUDR encompasses all request UDRs that can be sent to the LDAP agent. All request UDRs belong to the LdapRequestUDR type. Field Description Field Description Context (any) This field is a field of type any (that is, Java Objects) that can be freely used to store information, such as UDRs, int, string, etc. The information stored in this field will be available when a response is received. For example, you can use this field to store what caused the incoming LDAP request and use it to reply to the request after getting the response. LdapRequestIDUDR The LdapRequestIDUDR is sent by the LDAP agent to acknowledge that a corresponding operation for an operation request has been sent to the LDAP server. This UDR is sent by the agent for every operation request, except the abandon operation. It can be used to later cancel the operation request using an abandon operation. This UDR is only sent by the agent if you have selected the Enable Request ID check box in the Advanced tab of the LDAP agent configuration dialog. For further information, see LDAP Agent Configuration . The following fields are included in the LdapRequestIDUDR : Field Description Field Description Context (any) This field is a field of type any (that is, Java Objects) that can be freely used to store information, such as UDRs, int, string, etc. The information stored in this field will be available when a response is received. For example, you can use this field to store what caused the incoming LDAP request and use it to reply to the request after getting the response. request (LdapRequestUDR) This field contains the operation request sent to the LDAP server. requestID (long) This field contains an identifier assigned by the LDAP agent to the operation request. LdapResultUDR The LdapResultUDR encompasses all UDRs sent by the LDAP agent to the outgoing routes in the workflow. All result UDRs belong to the LdapResultUDR type. LdapSearchRequestUDR The LdapSearchRequestUDR is used to send data to the LDAP agent for a search operation to be executed in the LDAP server. The following fields are included in the LdapSearchRequestUDR : Field Description Field Description attributesToReturn (list<string>) This field contains a list of the attributes to be returned by a search operation. baseDN (string) This field contains the base Distinguished Name for the operation. Context (any) This field is a field of type any (that is, Java Objects) that can be freely used to store information, such as UDRs, int, string, etc. The information stored in this field will be available when a response is received. For example, you can use this field to store what caused the incoming LDAP request and use it to reply to the request after getting the response. deferencePolicy (string) This field contains the deference policy applied to the search operation. You can choose one of the following values: NEVER ALWAYS FINDING SEARCHING filter (string) This field contains the search filters. scope (string) This field contains the search scope to determine which entry levels you want to search. You can choose one of the following levels: OBJECT_SCOPE - To search the named entry only ONELEVEL_SCOPE - To search the entries immediately below the base DN SUBTREE_SCOPE - To search in the entire subtree sizeLimit (int) This field contains the maximum number of elements that can be returned by the search operation. If the limit is exceeded, the LdapErrorUDR will contain the corresponding error code, and the results returned by the server will be available in the Ldap S earchResultUDR s list. The default value is 0. If the value is set to 0, the number of elements returned is unlimited. timeLimit (int) This field contains the maximum amount of time in seconds that a search operation can take to complete. If the limit is exceeded, the LdapErrorUDR will contain the corresponding error code, and the results returned by the server will be available in the LdapSearchResultUDR s list. The default value is 0 seconds. If the value is set to 0, the search operation continues until performed to completion. typesOnly (boolean) This field determines if the attribute values or descriptions are returned. If set to true , only the attribute descriptions are returned. LdapSearchResultEntryUDR When a search operation is sent to the LDAP server, a LdapSearchResultEntryUDR is included in the LdapSearchResultUDR for each matching entry in the search operation. See the section below, LdapSearchResultUDR. The following fields are included in the LdapSearchRequestUDR : Field Description Field Description attributes (map<string,list<any>>) This field contains a map of the LDAP attributes and values for the corresponding matched entry. Each attribute may have one or more values. dn (string) This field contains the Distinguished Name for the corresponding matched entry. LdapSearchResultUDR When a search operation is sent to the LDAP server, the request field in the LdapSearchResultUDR is populated with the LdapSearchRequestUDR, and the searchEntries field is populated with the search result's entry UDRs. The LdapSearchResultUDR is sent by the LDAP agent to the outgoing routes in the workflow. Field Description Field Description request (LdapSearchRequestUDR) This field contains the data from the LdapSearchRequestUDR sent to the LDAP server for a search operation. For further information, see the section above, LdapSearchRequestUDR. searchEntries (list<LdapSearchEntryResultUDR>) This field contains a list of the search results, listing the LdapSearchEntryResultUDR s. For further information, see the section above, LdapSearchEntryResultUDR.

---

# Document 458: mzcli - service - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/547980319/mzcli+-+service
**Categories:** chunks_index.json

Usage usage: service start [-s, --scope <all | custom | standard>] | restart [--publish-only] | dump | info [-d, --detailed] [-i, --instance <provider/service instance>] | list | update [-c, --command] [-i, --instance <provider/service instance>] Note! This command is valid only for the MZ_HOME owner. The command enables you to manage the services that are configured and hosted in Service Contexts. start Use service start to start the platform and Service Contexts. When you call service start, the platform orchestrates the start-up of defined service instances ( standard-services.conf and custom-services.conf ) and saves the configuration produced. The command accepts the following option: Option Description Option Description [-s, --scope <all | custom | standard>] Use this option to choose which services you want to start. Example - [-s, --scope <all | custom | standard>] To start both standard and custom services, you may call the following: mzcli service start or mzcli service start --scope all To start only custom or standard services, run mzcli service start --scope custom or mzcli service start --scope standard restart Use service restart when the platform is restarted while some or all of the Service Contexts are kept running, e g, after Platform failure and recovery, or after scheduled maintenance of the Platform. When you call service restart , the command applies the configuration state saved by the service start command, so that all service instances are configured the same way as when the service start was issued. At the very least, service restart republishes the information required to connect to a service instance, e g, from a workflow). However, it also causes any service members found to be missing in the Service Contexts, to be restarted - this may happen when a failure and recovery affects the platform and some of the Service Contexts. Caution! When the Platform is restarted, while Service Contexts are active, you must also restart the embedded services using this command. The command accepts the following option: Option Description Option Description [--publish-only] Use this option to only publish the service configuration in the platform registry. This option can be used if you first upgrade the platform and then execute a rolling upgrade of Service Contexts. Using the option will not restart any service members. dump Use service dump to display very detailed information in HOCON format on all the services running. This information is mainly intended for support and troubleshooting. info Use service info to display information on all of the services running or a specific service instance. The command accepts the following options: Option Description Option Description [-d, --detailed] Use this option to display detailed information on all of the services running. [-i, --instance <provider/service instance>] Use this option to display detailed information on a specific service instance. Example - [service info] For information on all of the services running, you call the following: mzcli service info For detailed information on all of the services running, you call the following: mzcli mzadmin/dr service info --detailed For information on a specific service, you must specify the service provider/service instance, for example: mzcli service info --instance kafka/kafka1 list Use service list to display information on all available service providers. update Use service update to send custom commands to the service instance. Option Description Option Description [-c, --command] Use this option to specify a custom command. [-i, --instance <provider/service instance>] Use this option to specify a specific service instance that should be updated. Return Codes Listed below are the different return codes for the service command: Code Description Code Description 0 Will be returned if the command was successful 1 Will be returned if an argument is invalid 2 Will be returned when a known error occurs 3 Will be returned when a general error occurs

---

# Document 459: Kafka Real-Time Forwarding Agent Input/Output Data and MIM - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/608108581/Kafka+Real-Time+Forwarding+Agent+Input+Output+Data+and+MIM
**Categories:** chunks_index.json

Input/Output Data This section includes information about the data type that the agent expects and delivers. The agent receives and produces the UDR type KafkaRecords . Meta Information Model (MIM) Published MIMs MIM Parameter Description MIM Parameter Description <Route> Queue Full Count This MIM parameter contains the number of KafkaRecords UDRs left in the queue in the route out of the agent. <Route> Queue Full Count is of the long type and is defined as a global MIM context type. <Route> Queue Full Size This MIM parameter contains the queue size of the KafkaRecords UDRs in the route out of the agent. <Route> Queue Full Size is of the long type and is defined as a global MIM context type.

---

# Document 460: SQS Agents - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/299663361
**Categories:** chunks_index.json

The Amazon SQS Agents act as consumers (collection agents) and producers (forwarding agents) of messages in Amazon SQS, which is a fully managed message queueing service. Both standard and FIFO queueing are supported. See What is Amazon Simple Queue Service? - Amazon Simple Queue Service for more information about SQS. Subsections This section has the following subsections: Amazon SQS UDRs Amazon SQS Collection Agent Amazon SQS Forwarding Agent

---

# Document 461: APL Reference Guide - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204646109/APL+Reference+Guide
**Categories:** chunks_index.json

Loading This document describes the Analysis Programming Language, APL, and contains descriptions of all the different APL commands that can be used. For information about Terms and Acryonyms used in this document, see the Terminology document. Loading

---

# Document 462: wfgroupaddwfgroup - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204744000/wfgroupaddwfgroup
**Categories:** chunks_index.json

usage: wfgroupaddwfgroup <workflow group name> <pattern match expression for workflow names> This command adds one or more workflow groups to an existing workflow group. Note! A workflow group that is already a member of the workflow group is skipped by the command. Similarly, you can not add a workflow group to itself. Example - Adding all the workflow groups with names beginning with wf_grp_, but skips wf_grp_1 mzsh <username>/<password> wfgoupaddwfgroup <wf_grp_1> <wf_grp_*> With this command, you compare a single pattern match expression, or several, with the full workflow group name, <folder>.<workflowgroupconfigurationname>.<workflowgroupname> , of all the workflows. For further information about pattern match expressions see Textual Pattern Matches . Return Codes Listed below are the different return codes for the wfgroupaddwfgroup command: Code Description 0 Will be returned if the command was successful. 1 Will be returned if the number of arguments is incorrect. 2 Will be returned if the group is not found. 3 Will be returned if the workflow(s) cannot be found. 4 Will be returned if there is no connection to Mgmt_Utils. 5 Will be returned if the group is locked. 6 Will be returned if the updating of group data failed. 7 Will be returned if the workflow type is not supported. 8 Will be returned if the configuration lock could not be released.

---

# Document 463: FTAM EWSD Agent Transaction Behavior - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205000172/FTAM+EWSD+Agent+Transaction+Behavior
**Categories:** chunks_index.json

This section includes information about the FTAM EWSD agent transaction behavior. For information about the general transaction behavior, see 3.1.11 Workflow Monitor . Emits The agent emits commands that changes the state of the file currently processed. Command Description Begin Batch Emitted right before the first byte of each collected file is fed into a workflow. End Batch Emitted just after the last byte of each collected file has been fed into the system. Retrieves The agent retrieves commands from other agents and based on them generates a state change of the file currently processed. Command Description Cancel Batch If a Cancel Batch message is received, the agent sends the batch to ECS. Note! If the Cancel Batch behavior, defined on workflow level, is configured to abort the workflow, the agent will never receive the last Cancel Batch message. In this situation ECS will not be involved, and the established copy area will not be deleted.

---

# Document 464: Database Table Functions - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204612323
**Categories:** chunks_index.json

A special table type is used to handle database table lookups with optional caching in memory. All of the following column references may be either numeric (column index, starting at 0) or string (column name). The table lookup only supports int, string, and date types. Note! For MS SQL, the column type timestamp is not supported in tables accessed by MediationZone. Use column type datetime instead. Please refer to the Notes section in the Database Functions page for details on the allowed database data types. The following functions for the Database Table are described here: 1 sqlExec 2 tableCreate 3 kustoTableCreate 4 tableCreateIndex 5 tableGet 6 tableLookup 7 tableRowCount 8 tableGetMetaInfo sqlExec The sqlExec function is used when updating and inserting data into tables. It returns an integer value stating how many rows were updated/inserted. SQL errors will cause runtime errors (the workflow aborts). int sqlExec ( string dbProfile, string sqlQuery ) Parameter Description Parameter Description dbProfile Name of the database where the table resides, including folder name. sqlQuery SQL query to send to the database. Note that SQL statements must not end with ';'. Calls to stored procedures must be embedded in blocks. Examples - Valid for Oracle databases "<SQL query>" "BEGIN <procedure>; END;" Returns An integer equaling the number of rows updated or inserted. tableCreate Returns a table that holds the result of a database query. SQL errors in the table lookup will cause runtime errors (workflow aborts). table tableCreate ( string dbProfile, string sqlQuery ) Parameter Description Parameter Description dbProfile Name of the database where the table resides. sqlQuery SQL query to send to the database. Note that SQL statements must not end with ';'. Only columns of type number, date and string are supported. disableCommit (Removed from MediationZone 9.3.0.1) An optional parameter to disable the commit statement from being performed at the end of every SQL transaction for this particular function. Setting this parameter to false will result in the commit statement to be performed at the end of every SQL transaction for this particular function. By default, the system has the disableCommit set to true unless otherwise changed via this parameter. Note! It should be noted that on recent Oracle versions, the DBLink SQL transaction behaviour has changed, where every single SQL statement for remote database transaction requires a commit or rollback statement in order to close a connection. In addition, Redshift users should set this to false as every statement needs to be committed. Returns A table Example - Using tableCreate To avoid performance problems, the table must be read from the database as seldom as possible. For instance, once for each workflow invocation. initialize { table myTab = tableCreate("myFolder.myProfile", "select user from subscribers" ); } kustoTableCreate The kustoTableCreate function looks up information in Kusto databases. The resulting table is of the same type as that resulting from tableCreate, meaning that it can be used together with functions such as tableLookup, tableGet etc. The format of this function is the following: table kustoTableCreate(string profileName, string, databaseName, string query) Parameter Description Parameter Description profileName The name of the profile used. This should be an Azure Profile of the type Azure Data Explorer. databaseName The name of the database in Azure. The cluster name is specified in the Azure profile. query The query to apply to the database in question. This is written in the Kusto Query Language, see example below. Example - Using kustoTableCreate table result = kustoTableCreate("Default.AZDLookupDb", "lookupdb", "test | where isnotnull(BeginLocation) | project EpisodeNarrative, EventNarrative | limit 5000"); The Kusto data types will be interpreted as the following types in the resulting table object: Azure Type APL Type Azure Type APL Type bool boolean datetime date dynamic string int int long long real bigdec string string decimal bigdec timespan string tableCreateIndex Creates an index for one or several columns of a table. This will greatly increase the efficiency of subsequent tableLookup calls on these columns using the equality operator. If the column already has an index, this function has no effect. Note! An index will not be created unless there are at least five rows in the table. void tableCreateIndex ( table tableValue, int|string column1, ... int|string columnN ) Parameter Description Parameter Description tableValue A table object columnN A column index (starting with 0 for the first column), or name for which to create an index. At least one column must be specified. Returns Nothing Example - Using tableCreateIndex initialize { table myTab = tableCreate("myFolder.myProfile", "select id, user from anum" ); tableCreateIndex( myTab, "id" ); } tableGet The tableGet function returns the value of a table entry. The value is returned as an any object, which means the returned value is of the same type as the value extracted. any tableGet ( table tableValue, int row, int|string column) Parameter Description Parameter Description tableValue A table object row The row index. The first row is indexed 0 (zero). column Column index or name. The first column is indexed 0 (zero). Returns Any depending on the column type tableLookup The tableLookup function returns a table containing all the rows of the original table matching the specified column value(s). At least one pair of (column, operator, value) group must be specified. table tableLookup ( table tableValue, int|string column1, string operator1, string|date|int value1, any value1a, //Optional (used only for "between" and "not between") ... int|column columnN, string operatorN, any valueN, any valueNa ) //Optional (used only for "between" and "not between") Parameter Description Parameter Description tableValue A table object columnN Column index or name. The first column is indexed 0 (zero). operatorN Operator specifying the range of the requested values. Possible operators are: = != > < <= >= between - Requires two operands, ( valueN, valueNa ). not between - Requires two operands, ( valueN, valueNa ). starts with - The operator can only be applied to string columns. valueN/ValueNa Value(s) matching columnN and operatorN Returns A table matching the query Example - Using tableLookup The following example looks for a specific entry in the in-memory table returned by the preceding tableCreate command. table myTab; // To avoid performance problems, the table is read // from the database once for each time the // workflow is activated. initialize { myTab = tableCreate( "myFolder.myProfile", "select user from subscribers" ); } consume { table user = tableLookup( myTab, "user", "=", input.anum ); if ( tableRowCount( user ) > 0) { // At least one entry found. } else { // No entry found. } } Note! When a column is of date type, the matching values must contain date, time, and timezone, as demonstrated in the example below. Example - Using tableLookup when a column is of date type table myTab; initialize { myTab = tableCreate("myFolder.myProfile","select date_field from all_dates"); } consume { date dateFilter; //The matching value must contain date, time, and timezone. strToDate(dateFilter,"01/05/2016 00:00:00","dd/MM/yyyy HH:mm:ss","CET"); table myLookup = tableLookup(myTab,"date_field","=",dateFilter); if ( tableRowCount( myLookup ) > 0) { // At least one entry found. } else { // No entry found. } } tableRowCount The tableRowCount function returns the number of rows in a table. int tableRowCount (table tableValue ) Parameter Description Parameter Description tableValue A table object Returns An integer stating the number of rows found. tableGetMetaInfo The tableGetMetaInfo function returns the column name, column type and index status. tableGetMetaInfo(table tableValue); Parameter Description Parameter Description tableValue A table object Returns A list where each element is of type ColumnMetaInfoUDR . Note! For Oracle db, tableName and isIndex functions are not supported. Example - Using tableGetMetaInfo table myTab = tableCreate("Default.MySql", "select id, name, remark from test" ); list<ColumnMetaInfoUDR> columnInfoList = tableGetMetaInfo(myTab); // Display the number of columns. int columnCount = listSize(columnInfoList); // Get the meta info of the first column ColumnMetaInfoUDR firstColInfo = listGet(columnInfoList, 0); firstColInfo.columnName // get column name firstColInfo.columnType // get column type firstColInfo.isIndex // get index status (boolean type) firstColInfo.tableName // get table name Note! ColumnType format follows Data types format.

---

# Document 465: Starting, Stopping and Restarting Picos - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205881349/Starting+Stopping+and+Restarting+Picos
**Categories:** chunks_index.json

This page describes how to start, stop and restart picos in the Pico Management screen in Desktop. Starting Picos To start picos that are not running: Select the check box(es) for the pico(s) you want to start. Open Not started pico selected in Pico Management screen Click on the Start button. The state will change from Not-started to flashing Starting . Open When the pico has been successfully started, the state will change to Running . Open Stopping Picos To stop picos that are running: Select the check box(es) for the pico(s) you want to stop. Open Running pico selected in Pico Management screen Click on the Stop button. The state will change from Running to flashing Stopping . Open When the pico has been successfully stopped, the state will change to Not-started . Open Restarting Picos To stop picos that are running: Select the check box(es) for the pico(s) you want to restart. Open Running pico selected in Pico Management screen Click on the Restart button. The state will change from Running to flashing Restarting . Open When the pico has been successfully restarted, the state will change to Running Open and you will get a notification that the pico has been successfully restarted. Open

---

# Document 466: UDR Plugins - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204645191/UDR+Plugins
**Categories:** chunks_index.json

Data sent between agents in workflows is either represented as UDRs (Usage Detail Records) or as raw data. Raw data is sent as bytearrays, while UDRs are to be treated as individual records. Due to the various formats of incoming data, the system does not provide any hardcoded formatting rules. Instead, it provides the Ultra subsystem where nearly any format may be defined and handled using the Ultra Format Definition Language (UFDL). Such definitions will automatically compile into classes, implementing the DRUDR interface. In addition, the DTK provides the possibility of coding such classes directly in Java. Open DRUDR UDR related classes are located in the package com.digitalroute.devkit.drudr. DRUDR UDRs developed using the DTK must extend the DRAbstractUDR class, which uses Java reflection to implement all DRUDR methods, except for the actual field data manipulation. A DRUDR class is intended to be a data carrier, and thus it will require methods for setting and retrieving user defined values, as it walks its way through a workflow. Such values are referred to as fields. By implementing method names prefixed with the get_ and/or set_ keywords, the UDR subsystem uses Java reflection mechanisms to obtain information about available fields, such as their access type and data type. DRUDR s contain a list of possible error codes that may be useful if UDRs are routed to ECS. Error codes may be added using addErrorCode , examined via getErrorCodes and removed by clearErrors . Finally, a description of the UDR Type and its fields may be obtained using getDRUDRDesc . Example - Creating a UDR A UDR is created to contain the three fields: name , age and isChild . Note, it is not the variable names but the method names that determine the field names. The isChild field will not be possible to populate since it does not have a set_ method. public class MyUDR extends DRAbstractUDR { private String _name; private int _age; public void set_name(String newName) { _name = newName; } public String get_name() { return _name; } public void set_age(int newAge) { _age = newAge; } public int get_age() { return _age; } public boolean get_isChild() { // Read only field return _age < 18; } // writeTo and readFrom methods are omitted } The above UDR class can be instantiated and used as follows from DTK code: MyUDR udr = new MyUDR(); udr.setValue("name", "Karen"); udr.setValue("age", 10); udr.setValue("isChild", true); // Will cause exception System.out.println( "Name: " + udr.getValue("name") + "Age: " + udr.getValue("age") + "Child: " + udr.getValue("isChild")); or used as follows in APL code: MyUDR udr = udrCreate(MyUDR); udr.name = "Karen"; udr.age = 10; udr.isChild = true; // Will cause APL compilation error debug( "Name: " + udr.name + "Age: " + udr.age + "Child: " + udr.isChild); The Ultra format system allows the definition of nested UDRs. That is, for instance, a UDR within another UDR. Addressing fields in such UDRs is done by so called qualified names where a dot (".") separates each level. For a DRUDR plugin example, see: com.digitalroute.devkit.examples.udr.* DRUDRDesc The DRUDRDesc class contains information about a specific UDR Type. An instance of this class may be obtained from a DRUDR and a list of all available UDR Types in the system from the DREnvironment . The class offers methods such as getFields , which returns a list of DRUDRField instances that describe each field. DRUDRDesc extends the DRUDRType class, where each returned field's type may be examined. A returned field could be a primitive field but also a nested UDR ( DRUDRDesc ), a list ( DRUDRListDesc ), a map ( DRUDRMapDesc ), a table ( DRUDRTableType ) or a byte array ( DRUDRRawDataDesc ). The system automatically creates DRUDRDesc instances for all UDRs defined in the system. DRUDRField A DRUDRField represents an element within a UDR. The getFieldName method returns the element name and getType returns the type of the element. The returned type could be a primitive field, such as a string or integer, but also a composite type, such as another DRUDRDesc or any other DTUDRType subtype. If traversing a nested DRUDRDesc , the returned field's type has to be examined and if it is of type DRUDRDesc the a further examination needs to be performed. DRUDRType To be able to support type validation and automatic code generation, MediationZone implements a type description system that is separate from standard Java class handling. The base class for all type descriptions is DRUDRType , and various UDR types are described by subclasses of DRUDRDesc . The following table lists the available types, their type descriptions and the runtime implementation classes. MediationZone Type Type Description Java Object Type MediationZone Type Type Description Java Object Type any DRUDRType.PT_ANY() Object bigint DRUDRType.PT_BIGINT() BigInteger bitset DRUDRType.PT_BIT_SET() DRBitSet boolean DRUDRType.PT_BOOLEAN() Boolean byte DRUDRType.PT_BYTE() byte bytearray DRUDRRawDataDesc byte[] char DRUDRType.PT_CHAR() char date DRUDRType.PT_DATE() DRDate float DRUDRType.PT_FLOAT() float double DRUDRType.PT_DOUBLE() double int DRUDRType.PT_INT() int ipaddress DRUDRType.PT_IPADDRESS() DRIPAddress long DRUDRType.PT_LONG() long short DRUDRType.PT_SHORT() short string DRUDRType.PT_STRING() String table DRUDRTableType DRTable list type DRUDRListDesc DRList map type DRUDRMapDesc Map General UDR type DRUDRDesc DRUDR subtype DevKit UDR type DRUDRClassDesc DRAbstractUDR subclass

---

# Document 467: Creating New Config Class - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205655602/Creating+New+Config+Class
**Categories:** chunks_index.json

When porting an existing DTK agent, using a configuration contract XML file, you will need to add code to be able to read old configurations otherwise importing any old system export will leave the agent with empty configuration. This is done by overriding the "readFrom" method in the configuration class and use the "readGenFieldValue" help method to read all field values from the old configuration. Make sure that you have set your version on the new configuration class such that this will be different from the old version. See the below example code using the Disk Forwarding agent from the DTK examples Old Configuration Contract <?xml version="1.0" encoding="UTF-8"?> <contract mz-version='1.0'> <class-name>DiskForwardingConfig</class-name> <package-name>com.digitalroute.devkit.examples.diskforwarding</package-name> <storable-id>devkitexamples.DiskForwardingConfig</storable-id> <section id='Disk Forwarding'> <field id='directory'> <title>Directory</title> <name>Directory</name> <description>The path to the source directory</description> <type><object-type name='java.lang.String'/></type> <default-value>""</default-value> <validation> <validate minLength='1' message='Directory may not be empty'/> </validation> </field> </section> </contract> New Configuration Class package com.digitalroute.devkit.examples.diskforwarding; import com.digitalroute.devkit.config.DRAbstractConfigObject; import com.digitalroute.devkit.config.annotation.DRConfigFieldInfo; import com.digitalroute.devkit.config.annotation.DRConfigTypeInfo; import com.digitalroute.devkit.exception.DRException; import com.digitalroute.devkit.misc.DREnvironment; import com.digitalroute.devkit.storable.DRInputStream; import com.digitalroute.devkit.storable.DRStorableId; // Compared to the old XML config definition from MZ8, we are here // using the same DRStorableId as well as a higher version. @DRStorableId("devkitexamples.DiskForwardingConfig") @DRConfigTypeInfo(version = 10f, section = "Disk Forwarding") public class DiskForwardingConfig extends DRAbstractConfigObject { public static final String DIRECTORY = "Directory"; private String _directory; public DiskForwardingConfig() {} @DRConfigFieldInfo(title = DIRECTORY, description = "The path to the target directory") public void setDirectory(String directory) { _directory = directory; } public String getDirectory() { return _directory; } @Override public String validateField(String fieldName, Object fieldValue, DREnvironment env) throws DRException { if (fieldName.equalsIgnoreCase("directory")) { if (fieldValue == null || ((String) fieldValue).length() < 1) return "Directory may not be empty"; } return null; } // To just be able to read configurations from the current configuration // class framework, there is no need to implement the readFrom method. // However, to be able to also read configurations from MediationZone 8 // configurations, this is necessary. @Override public void readFrom(DRInputStream in, float version) throws DRException { if (version >= 10.0f) { super.readFrom(in, version); } else { // Read earlier configuration versions (from MediationZone 8 agent version) // The label used is the "name" element from the XML _directory = readGenFieldValue(in, "Directory", null); } } }

---

# Document 468: SAP Batch Agent Events - Batch - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204740384/SAP+Batch+Agent+Events+-+Batch
**Categories:** chunks_index.json

Agent Message Events There are no agent message events for this agent. Debug Events Debug messages are dispatched in debug mode. During execution, the messages are displayed in the Workflow Monitor. You can configure Event Notifications that are triggered when a debug message is dispatched. For further information about the debug event type, see Debug Event . The agent produces the following debug events: Input charging request in XML format Invalid charging request in XML format Successful charging answer in XML format Charging error in XML format

---

# Document 469: Duplicate UDR Agent Meta information Model and Events - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205652404/Duplicate+UDR+Agent+Meta+information+Model+and+Events
**Categories:** chunks_index.json

Meta Information Model For information about the MIM and a list of the general MIM parameters, see Administration and Management in Legacy Desktop . Publishes MIM Parameter Description Detected Duplicates This MIM parameter contains the number of detected duplicates in the current batch. Detected Duplicates is of the int type and is defined as a trailer MIM context type. Accesses MIM Parameter Description User selected The agent accesses user selected values to log in ECS. Agent Message Events Storage Repository Initialized: Reported when the agent has successfully opened its duplicate detection repository (cache). Number of number UDRs were duplicates ( number were too old): Reported after each processed batch. The last number denotes UDRs that were too old to be compared against, that is, they were older than the configured maximum age. Agent Debug Events There are no debug events for this agent.

---

# Document 470: Cookie UDR - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205654400/Cookie+UDR
**Categories:** chunks_index.json

The Cookie UDR is used to set or read a Cookie. The following fields are included in the Cookie UDR : Field Description Field Description maxAge (int) This field may contain maximum age of the cookie in seconds. name (string) This field contain the name of the cookie. path (string) This field may contain a uri path for the cookie to which the client should return the cookie value (string) This field may contain the value of the cookie. If left empty meaning the cookie will be deleted.

---

# Document 471: Batch Request - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205001837
**Categories:** chunks_index.json

AcquireUDR This UDR is dedicated to requesting the connected SAP Convergent Charging Server to collect a list of chargeable items included in an acquisition parameter. The SAP Convergent Charging Server processes these chargeable items and stores them in temporary files. For field definitions, refer to the section below, AcquisitionParametersUDR. Field Description Field Description parameters Contained within this field is a list of chargeable items stored as an AcquisitionParametersUDR AcquisitionParametersUDR This UDR represents the data for the batch acquisition operation of a chargeable item or a collection of chargeable items in the charging client. Field Description Field Description chargeableItem (ChargeableItemUDR (sapcc)) A ChargeableItem represents the information that the client needs to perform the charge process. It consists of a name and a list of properties . consumptionDate (date) The date of the consumption event. The value should be a string representing a numerical value in the following format: 1, 0.1, 0.01, 0.001 etc. serviceid (string) The serviceId part of the access object linked to the customer master data defined in SAP Convergent Charging userid (string) The userId part of the access object linked to the customer master data defined in SAP Convergent Charging BlankChargeUDR (sapcc.batch.BlankChargeUDR) This UDR is used by the SAP CC Batch agents to submit a blank charge request to the SAP Convergent Charging server. The sapcc.batch.BlankChargeUDR extends from sapcc.BlankChargeUDR. For field definitions, refer to the section ChargeUDR in Charging Request UDRs . ChargeUDR (sapcc.batch.ChargeUDR) This UDR is used by the SAP CC Batch agents to submit a charge request to the SAP Convergent Charging server. The sapcc.batch.ChargeUDR extends from sapcc.ChargeUDR and contains one additional field. For sapcc.ChargeUDR files, refer to Charging Request UDRs . The additional field for sapcc.batch.ChargeUDR is provided below: Field Description Field Description reratingLockCode (string) The rerating operation lock code

---

# Document 472: Misc Field - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204611786/Misc+Field
**Categories:** chunks_index.json

Many of the objects in the PCC Buckets and PCC Products data model includes a field for storing miscellaneous data. The field is called Misc and has the type map<string, any> . Even though the Misc field is stated to support storing values of type any there are some limitations to what type the values can have. The following types can be used: bigint bitset boolean byte bytearray char date float/ double int ipaddress long short string

---

# Document 473: Workflow Bridge Real-time Forwarding Agent Defining Forwarding Host - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205035312/Workflow+Bridge+Real-time+Forwarding+Agent+Defining+Forwarding+Host
**Categories:** chunks_index.json

If you want to specify which host the forwarding agents are to connect to, you can set the property wfb.host as an execution property in the STR, and enter the host that you want the agent to connect to as the value. Example - Setting the forwarding host mzsh topo set topo://container:container1/pico:ec1/val:config.properties.wfb.host <host>

---

# Document 474: IBM MQ Agent - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205033512/IBM+MQ+Agent
**Categories:** chunks_index.json

This section describes the IBM MQ agent and IBM MQ APL commands. The agent is a collection agent for real-time workflow configurations. The IBM MQ Collection acts as a client to an IBM Websphere MQ Queue Manager. It collects messages from a defined number of message queues, topics, and durable subscriptions, and routes the data as UDRs to a real-time workflow. Connection At startup, a connection to a Queue Manager is set up to listen to a number of queues, topics, or durable subscriptions. This can be configured either directly in the IBM MQ Collection agent or be dynamically set within an Analysis agent. If the agent will fail to connect to all configured queues, topics, or durable subscriptions, the workflow will abort. Message Queues Message queues are used for storing messages in Websphere MQ Server. The messages consist of two parts; the binary data used by the application and the delivery information handled by the Queue Manager. The Queue Manager provides a logical container for message queues and is responsible for transferring the data between local and remote queues. The IBM MQ agent will read the messages in the configured local message queues and each message data will be transferred as a UDR into the workflow. Depending on the agent's configuration the Queue Manager will remove the message from the queue directly or it will wait until it has been processed. New messages can also be sent to the Queue Manager with the IBM MQ APL commands. Topics and Durable Subscriptions As opposed to point-to-point communication, IBM Websphere offers the possibility to publish and subscribe to topics. Neither the publisher nor the subscriber needs to know where the other part is located. All interactions between publishers and subscribers are controlled by the Queue Manager. The IBM MQ agent acts as a subscriber and will register which topics or durable subscriptions to listen for at the Queue Manager. The Queue Manager will then examine every incoming publication and place matching messages on the subscriber's queue, which will be read by the IBM MQ agent and transferred as UDRs into the workflow. Prerequisites The reader of this information should be familiar with: IBM WebSphere MQ: For information about IBM WebSphere MQ, see http://www.ibm.com/software/integration/wmqfamily/ . The section contains the following subsections: IBM MQ Configuration IBM MQ Examples IBM MQ Preparations IBM MQ Meta Information Model and Events IBM MQ APL Functions IBM MQ Input/Output Data IBM MQ UDRs

---

# Document 475: Link UDR - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205035032/Link+UDR
**Categories:** chunks_index.json

The Link UDR is used to create a link. A link can be used to either navigate to another page or open a dialog. To create a normal link of a text, set the text field. To add a link to an icon, add the IconUDR to the components field. To get a working link, the URL field or dialog field must be set. You can use the following APL code to create a link that uses the 'url' field: Link page2 = udrCreate(Link); page2.text = "Go to next page"; page2.url = "/page2"; You can use the following APL code to create a link that uses the 'dialog' field: // Create the dialog that will open when clicking the link PlainText bodyText = udrCreate(PlainText); bodyText.value = "Dialog Body"; Dialog linkDialog = udrCreate(Dialog); linkDialog.dialogBody = bodyText; // Create a link that opens the dialog created above Link openDialog = udrCreate(Link); openDialog.text = "Open dialog"; openDialog.dialog = linkDialog; The following fields are included in the Link UDR : Field Description attributes (map<string,string>) This field may contain extra attributes to be added. components (list<ComponentUDR>) This field may contain a list of child components. This can be used if for example a icon should act as a link. cssClasses (list<string>) This field may contain a list of extra values added to class attribute. This is typically used to style the component. Please read more on Bootstrap . dialog (Dialog UDR) This field may contain a Dialog UDR if the link should open a dialog. If the Dialog UDR have the field addAutomatic it will also be added to the page. id (string) This field may contain the id of the component url (string) This field may contain the url to the linked page. text (string) This field may contain a link text, then a text component will be added as a child component. It can also be done manually by adding a component in the components list.

---

# Document 476: Inter Workflow Real-Time Collection Agent Events - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204641791/Inter+Workflow+Real-Time+Collection+Agent+Events
**Categories:** chunks_index.json

Agent Message Events An information message from the agent, stated according to the configuration done in the Event Notification Editor. For further information about the agent message event type, see Agent Event . Ready with batch: name The real-time Inter Workflow collecting agent will not start to collect a batch that has been forwarded by a batch workflow to the storage until the batch is completely forwarded. This message will be sent when the batch has been completely forwarded. Debug Events There are no debug events for this agent.

---

# Document 477: Record Declaration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204646864/Record+Declaration
**Categories:** chunks_index.json

To be able to split the incoming data stream into individual records the record size must be calculated. The record size calculation is managed by the record options terminated_by , static_size , and dynamic_size , and includes the termination character. The different ways to calculate the size are tried in the following order: If the record is a sub-record (a field of another record) and the parent external field size is specified, this size is used. How field sizes are calculated depends on the external type of the parent record type. A typical case appears if an ASN.1/BER type contains a sequential subtype, in which case the BER size specification is used. If the static_size option is specified, this size is used. If the dynamic_size option is specified, this value is calculated and used. If the terminated_by option is specified, the input stream is scanned until the terminator is found (this implies that no field can contain this terminator since the first occurrence is seen as the end of the UDR). The record size includes the termination character but never takes up more than the total remaining size in the UDR. If everything else fails, an attempt to calculate the size is made by summarizing the total size of all content declarations. terminated_by The function terminated_by identifies how a record is terminated. Records can be terminated by a byte constant or EOF (end of file). The constant can be declared numerically (decimal or hexadecimal), or as a plain ASCII char. In the latter case, the literal must be enclosed in quotes. Note! Only one byte is allowed. Example - Using terminated_by Record termination by constant: external myExternal : terminated_by(0xA) { // <contents declaration> }; external myExternal : terminated_by(';') { // <contents declaration> }; Record termination by end of file: external demoExt : terminated_by(EOF) { // <contents declaration> ascii remainingData : dynamic_size( remaining_size ); }; dynamic_size Binary encodings that vary in size often contain a field with information on their specific length. In these cases, the dynamic_size declaration may be used, specifying how to calculate the record size from the values of one or more fields. Example - dynamic_size external myExternal : dynamic_size(recordLength) { int RecordLength : static_size(2); // <continued contents declaration> }; static_size Records of fixed size are declared using static_size . Example - static_size external myExternal : static_size(<recordLength>) { // <contents declaration> }; identified_by If the identified_by option is present, it specifies the condition under which a record of this type is present in the stream. This is used when the input data contains different record types, in which case the decoder uses the identified_by expression to evaluate if the data matches the record type. The condition is also evaluated when deciding whether to use a specific out map during encoding. Example - identified_by external myUDRType1 : identified_by( udrType == 1 ) { int udrType : static_size(1); // <continued contents declaration> };

---

# Document 478: Internal Version Control - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204613815/Internal+Version+Control
**Categories:** chunks_index.json

When there are changes made to the configuration of a workflow (or agent), the new configuration is saved as a new version. It is possible to go back to any previous version of a workflow and then save it to become the new current version. This version can then be modified and saved as a new version. From the perspective of configuration, MediationZone enables a smooth transition from one instance to another, for example from test to production through its system export/import capability. System export/import includes the capability to migrate any selected configuration part of one MediationZone installation to another while still maintaining full version control on the importing side.

---

# Document 479: Setting up Grafana - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/283082814/Setting+up+Grafana
**Categories:** chunks_index.json

This page provides information on how to set up Grafana on your cluster to visualize metrics collected by the Prometheus server. Download and Install Grafana Download and install the version of Grafana compatible with your operating system. You can download Grafana from https://grafana.com/get /. Adding Prometheus as Data Source to Grafana For more information, refer to the instructions provided in https://prometheus.io/docs/tutorials/visualizing_metrics_using_grafana/ .

---

# Document 480: External Systems - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204646999/External+Systems
**Categories:** chunks_index.json

MediationZone collects and forwards data to various external systems. The communication protocol used for connecting to those systems is defined by the agents connecting to them. For information on agents and their security settings, see the documentation for the respective agents. Note! If you cannot establish secure connections to external systems, you must use VPN.

---

# Document 481: Notifier Setup Tab - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204670679/Notifier+Setup+Tab
**Categories:** chunks_index.json



---
**End of Part 21** - Continue to next part for more content.
