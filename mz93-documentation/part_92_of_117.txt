# RATANON/MZ93-DOCUMENTATION - Part 92/112

---
**Dataset:** ratanon/mz93-documentation
**Part:** 92 of 112
**GitHub:** https://github.com/ratan0n/docs/tree/main/mz93-documentation
**Size:** ~69.9 KB
---

You open the Radius Client agent configuration dialog from a workflow configuration. To open the Radius Client agent configuration, click Build  New Configuration. Select Workflow from the Configurations dialog. When prompted to select a workflow type , select Realtime. Click Add agent and select Radius Client from the Processing tab in the Agent Selection dialog. Radius Servers Tab Open The Radius Client agent configuration dialog - Radius Servers tab The Radius Servers tab enables you to configure an IP address and a secret key for every RADIUS server that the agent communicates with. Setting Description Setting Description Host Address The IP address or hostname of the RADIUS server. Secret Key The shared secret key is used to sign RADIUS transactions between the server and its client, as well as to encrypt user-password attributes. Throughput Threshold If throttling has been enabled for the host, this field will show the configured threshold for when requests (UDRs) should be throttled. Throttled UDRs will be routed back into the workflow. For example: 1.000 (which means a maximum of 1.000 requests/second will be forwarded). To Add a Server In the configuration for the Radius Client agent, click on the Add button. Open The Add Radius Server dialog Enter the IP address or hostname and secret key for the server in the Host Address and Secret Key fields. If you want to enable throttling for the host, select the Enable Throttling check box, and then enter the maximum number of UDRs (requests) per second you want the agent to forward in the Throughput Threshold (UDR/s) field. Note! Ensure that you handle the throttled UDRs in your APL code in the workflow in order to not loose any UDRs. Click on the Add button and the server will be added in the table containing Radius Servers, and then click on the Close button to close the dialog when you are finished adding hosts. Adding a server from the Workflow Instance view You can define Radius Servers per workflow by setting the property Additional Servers to Default or Per Wrokflow in the Workflow Table tab in Workflow Properties . When defining the servers, you need to follow this json format: [{"host":"<host>", "secret":"<encrypted password>", "maxTps":"<value>"}] This format also applies when using External References . Open The Radius Client Additional Servers property with value - Workflow Instances Miscellaneous Tab Open The Radius Client agent configuration dialog - Miscellaneous tab Setting Description Setting Description Host Enter the IP address or the hostname via which the agent should bind with the Radius servers. Note! Since the Radius servers are configured to communicate with a specific host on this port, the workflow that includes the Radius agent must be configured to execute on the EC associated with that specific host. Two Radius agents cannot be configured to listen through the same port, on the same host. Source Port The local port via which the agent will bind with the Radius servers. Additional Ports If you want to use a range of ports, enter the number of consecutive ports in this field. For example, if you enter 2000 in the Source Port field and 10 in the Additional Ports field, the ports 2000-2010 will be used. Retry Count This setting defines the maximum number of attempts to send. An attempt to send occurs if a response is not received within the Retry Interval time. If you set this to 0, no retries will be made. Retry Interval Enter the time interval between repeated attempts to send. In the Retry Interval Time Unit setting you can decide if you want to configure this interval in seconds or milliseconds. Retry Interval Time Unit Select in which unit you want to configure the Retry Interval ; Seconds or Milliseconds . Seconds is the default setting. Timeout Resolution (ms) The agent checks whether retries are to be sent at regular intervals. Enter the number of milliseconds you want to have between these checks in this field. Skip MD5 Calculation Select this checkbox to exclude the use of the MD5 hashing algorithm. Note! When the Skip MD5 Calculation checkbox is selected, the authenticator field in all the request messages turns to 0 (zero). Identifier Calculation Select this checkbox if you want an identifier to be calculated and appended to the requests automatically. This identifier will be used for correlating requests with answers. Since the maximum number of pending requests to a specific port is 256, the identifier range will be 0-255. Error Handling Select an Error Route to ensure that all rejected packets are routed into the workflow using this route. This is optional.

---

# Document 2166: Workflow Template - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204997489
**Categories:** chunks_index.json

The workflow template is the area where the workflow is designed. The workflow template has one workflow per default. You can add more workflows via the Add Workflow button. Note! A workflow configuration cannot be activated, the workflows in it however can. Note! Each configuration only allows 1 user to edit it at any one time. While editing the configuration, it is locked to the user's session. To release the lock, you must navigate away from the configuration to another page. It is advised not to close the browser tab without navigating away from the configuration first as this will cause the lock to stay in place until timeout. Open You create a workflow configuration by using one of the following methods: Click Build  New Configuration . Select Workflow from the Configurations dialog or click the New button in the upper left part of the Workflow Template window. Select a Workflow Type : Batch , Realtime , or Task , and then Ok . Click Add agent to open the Agents selection dialog. Click on the agent from the Agents selection dialog to deploy the agent to the template. A workflow template can have multiple labels located next to the workflow template name. These labels serve to identify the workflow template. The following are the labels that may appear: Label Description Label Description Open This label identifies the workflow as a Batch workflow. This label is mutually exclusive to Realtime and Task. Open This label identifies the workflow as a Realtime workflow. This label is mutually exclusive to Batch and Task. Open This label identifies the workflow as a Task workflow. This label is mutually exclusive to Batch and Realtime. Open This label identifies the workflow as a Read Only workflow. Read Only workflows will be locked from any editing and you must click on the Edit button to modify a Read Only workflow. Open This label identifies the workflow as a valid workflow. For more information about validation, refer to Workflow Validation . Open This label identifies the workflow as an invalid workflow. For more information about validation, refer to Workflow Validation . Here are more things that you can do on the workflow template: 1 Configuration 1.1 Routing Agents 1.2 Route Options 1.3 Agent Options 1.4 Agent Selection Dialog 1.5 Workflow Tables 1.6 Workflow Properties 1.7 Workflow Monitor 2 Visualization 3 Common Agent Services 3.1 Thread Buffer Tab 3.2 Filename Sequence Tab 3.3 Sort Order Tab 3.4 Filename Template Tab Configuration Note! Due to the agents' relationships within a workflow configuration, it is preferable that all agents and routes are added before the configuration is started. Each agent in the workflow configuration has a specific configuration dialog named after the agent type. You can access these configurations by double-clicking the agent or the route. Subsequently you can also click on the Edit button when selecting an agent or a route. This causes a dialog to appear with options. See Agent Options or Route Options for more information. When an agent is deployed into the workflow template it receives a default name located underneath it. The same applies to routes when they are added. These names may be modified to ease identification in monitoring facilities and logs. All editing and triggering from the workflow template generate changes to the workflow configuration. Examples of this are adding and removing agents, altering agent positions, and editing agent settings and preferences. If you have the Workflow Monitor open, the changes made after saving the workflow template will be reflected. The workflow table is affected if it includes columns that correspond to an agent removed from the workflow template. Routing Agents To create a data flow, agents need to be connected to each other. To connect the agents, click the left mouse button on the center of the source agent and without releasing the left mouse button, move the pointer to the target agent and release there. This creates a route between the two agents indicating the data flow. You can also create a route between agents by using the button under agent options and selecting the target agent in the dialog. You can modify a route name by clicking on its name and typing a new name. Route names must be unique within a workflow configuration and may only contain the a-z, A-Z, 0-9, "-" and "_" characters. Route Options Clicking on a route in the workflow template provides you with a couple of options. Open Options Description Options Description Open Opens the Edit Route dialog where you can then edit the route name and route style. You can also double-click the route itself to open the Edit Route dialog. A route name is modified by typing a new name. Route names must be unique within a workflow configuration and may only contain the a-z, A-Z, 0-9, "-" and "_" characters. You can also change the appearance of the routes by selecting from the following Route Style options; Orthogonal , Bezier , or Straight. The default route style is Bezier . Note! In a real-time workflow a fourth kind of routing type appears by default when a response is returned to an agent that sent out a request. The route is shown as a dot-dashed line. Open Open Removes the selected route. Agent Options Clicking an agent in the workflow template provides you with a few options. Open Options Description Options Description Open Opens the Agent Configuration dialog where you can add or edit the settings and configuration values for the selected agent. You can also double-click the agent itself to open the Agent Configuration dialog. In a read only configuration mode, you can proceed to edit directly on the agent configuration dialog. To save, click Edit on the dialog bar as shown below. Open A read only agent configuration dialog Note! By clicking Edit on the dialog bar, the system will validate if any other changes have been performed and saved on the same agent and prompt a version change dialog. You can then decide to accept the saved changes and discard your local changes or choose to have your local changes overwrite the other version. Open Removes the agent and all its stored configuration. This action will not prompt you with any dialog and it is final so be absolutely sure that you want to remove the agent. Open Opens a dialog with an option to route the selected agent to another agent. Open Open Brings up an information dialog that displays parts of the agent's configuration. Open Agent Selection Dialog For more information about the different types of agents, refer to the Agent Selection Dialog section. Workflow Tables For more information about the workflow monitor, refer to the Workflow Table section. Workflow Properties For more information about the workflow monitor, refer to the Workflow Properties section. Workflow Monitor For more information about the workflow monitor, refer to the Workflow Monitor section. Visualization You can manipulate visuals of the workflow template by zooming in or out, or moving the workflow template around. A toolbar is present on the right side of the workflow template to allow you to manipulate the visuals. Open Workflow template visualization toolbar Options Description Options Description Open Zooms in on the workflow template. Open Zooms out of the workflow template. Open Centers the workflow template so that all agents and routes are visible on the canvas. Open Displays all the keyboard shortcuts that you can use within the workflow template. There is also a zoom percentage along with an x and y coordinate, which are displayed as soon as you zoom in or out. The default range on the zoom percentage is 100% while the x and y coordinates, which are determined from the point on the top left corner of the workflow template canvas, start at 0, 0, respectively. These values appear at the bottom left corner of the canvas whenever you manipulate the visuals. Open Common Agent Services Some agent configuration dialogues are optionally equipped with additional tabs holding configurations for different common services. This section describes the general services that are available. The user guide for each agent, in turn describe what services it uses. Thread Buffer Tab By default, a batch workflow uses one active thread at a time. By configuring a buffer storage for an agent, it is possible for yet another thread to be created. This is also called multithreading. One thread populates the buffer, and another pulls it for data. Adding yet another buffer for another agent adds yet another thread, and so on. This is especially useful in complex workflows with many agents. All batch agents that receive UDRs can use this functionality. Note! A workflow that is configured with multithreading can only handle data of the UDR type. If bytearrays are routed into an agent using this service, an exception is thrown. Open the Configuration dialog of the agent and select the Thread Buffer tab. The tab is present in batch processing and batch forwarding agents. Open Item Description Item Description Use Buffer Enables multithreading. For further information, see Multithreading . Print Statistics Statistics to be used when trying out where to use the Thread Buffer in the workflow. After each batch execution, the full and empty percentages of the threads using the buffer are logged in the event area at the bottom of the Workflow Monitor. For information on how to interpret the results, see the section below, Analyzing Thread Buffer Statistics. A UDR may be queued up while another thread is busy processing a reference to it. Workflows routing the same UDR on several routes and involving further processing of its data, must consequently be reconfigured to avoid this. A simple workaround is to route the UDR to an Analysis agent for cloning before routing it to the other agents (one unique clone per route). Analyzing Thread Buffer Statistics By using the Print Statistics alternative in the Thread Buffer tab, buffer statistics are logged for the whole batch execution and show the full and empty percentages for the threads using the thread buffer. For information about multithreading in a batch workflow, refer to the section Threads in a Batch Workflow, in Multithreading . Example - A thread buffer printout 11:03:04: Buffer usage statistics [5] for 2089 turnover(s) of UDRs: Incoming queue: Available 54%. Full 46%. Outgoing queue: Available 59%. Empty 41%. The number within brackets, which is [5] in the example, is the batch counter id. Turnover is the total number of UDRs that have passed through the buffer. Available indicates how often (out of the total turnover time) the buffer has been available for the incoming queue to forward a UDR and for the outgoing queue to fetch a UDR. Incoming queue: Full is logged for the incoming thread and indicates how often (out of the total turnover time) the buffer has been full and an incoming UDR had to wait for available buffer space. In the example, Full indicates that for 46% of the incoming UDRs there was a delay because of a full buffer. Outgoing queue: Empty is logged for the outgoing thread and indicates how often (out of the total turnover time) an outgoing queue had to wait for data because of an empty buffer. In the example, Empty indicates that for 41% of the attempts to fetch a UDR, the buffer was empty. The percentage values for Empty and Full must be as low as possible, and as equal as possible. The latter may be hard to achieve, since the agents may differ too much in processing complexity. If possible, add and configure another agent to take over some of the processing steps from the most complex agent. See the section below, Thread Buffer Tab, for how to configure the thread buffer. Filename Sequence Tab For batch collection agents such as Disk, FTP, and SFTP, there is a service available, found in the agents' configuration dialog in the Filename Sequence tab. The filename sequence is used when you want to collect files that contain a sequence number in the file name. The sequence number is expected to be found at a specific position in the file name and has a fixed or dynamic size. Note! When collecting from several sources, the Filename Sequence service is applied to the data that arrive from all the sources, as though all the information arrives from a single source. This means that the Filename Sequence number count is not specific to any of the sources. Open Item Description Item Description Enable Filename Sequence Determines if the service will be used or not. Start Position The offset in the file name where the sequence number starts. The first character has offset 0 (zero). In the example file name TTFILE0001 the start position is 6. Length The length of the sequence number, if the sequence number has a static length (padded with leading zeros). If the sequence number length is dynamic this value is set to 0 (zero). Example TTFILE0001-TTFILE9999 Length: 4 TTFILE1-TTFILE9999 Length: 0 Wrap On If the Filename Sequence service is enabled, a value must be specified on which the sequence will wrap. This number should be larger than or equal to Next Sequence Number and it must be larger than Wrap To . Wrap To The value that the sequence will wrap to. This value must be less than the Wrap On value and less than or equal to Next Sequence Number. Warn On Out Of Sequence If enabled, the agent logs an informative message to the System Log when detecting an out of sequence file, before deactivating. The collection agent will not continue to collect any files upon the next activation, until either the missing file is found, or the Next Sequence Number is set to a valid value. Sort Order Tab The Sort Order service is available for some batch collection agents and is used to sort matched files before collection. The sort pattern is expected to occur at a specific position in the file name or to be located using a regular expression. However, if the sort pattern cannot be applied, the workflow will abort, except for files with a name which is shorter than Position plus Length . For information on this exception, see the description below for Position . Note! Regular expressions according to Java syntax apply. For further information see Pattern (Java SE 17 & JDK 17) . Open Item Description Item Description Enable Sort Order Determines if the service will be used or not. If enabled, the sort order that you select also applies to subfolders if you have selected the Include Subfolders checkbox for the FTP, SFTP, and Disk collection agents. For further information, see the section for the relevant agent in Appendix 2 - Batch and Real-Time Workflow Agents . Modification Time Select to enable file collection order according to the modification time stamp. If Sort Direction is set to Ascending , the oldest files are collected first. The time resolution depends on the server and protocol. Note! Most FTP and SCP servers follow the Unix modification date format for file time stamps. The modification date resolution is one minute for files that are time stamped during the last six months. After six months a resolution of one day is applied. Value Pattern The method used to locate the item (part of the file name) to be the target for the sorting. This could be either Position that indicates that the item is located at a fixed position in the file name or Regular Expression indicating that the item should be fetched using a regular expression. Position If Position is enabled, the files are sorted based on the part of the filename indicated by Position plus Length . The Start Position value states the offset in the file name where the sorting item starts. The first character has offset 0 (zero). The Length value states the length of the sorting item (part of the file name) if it has a static length. To sort items with a dynamic length, use the value zero (0). Note! Files with a name which is shorter than Position plus Length are ignored. However, when Include Subfolders option is selected, a folder name shorter than Position plus Length will cause the workflow to abort. Regular Expression If enabled, the sorting item is extracted from the file name using the regular expression. If the file name does not end with a digit, this is the correct option. Example - Sorting using regular expression d+ locates the first digit sequence in a file name. Sort the following files in an alphabetical or numerical order: FILEA_1354.log FILEB_23.log FILEC_1254.log, Use d+ in the regular expression. Depending on the selected Sort Direction, the files are sorted in the following order: FILEC_1254.log FILEA_1354.log FILEB_23.log Sort Type Type of sorting. Could be either Alphanumeric or Numeric . Ignore Case If enabled, the sorting is not case sensitive. Sort Direction Indicates if the sort order should be Ascending or Descending . Note! When Include Subfolders option is selected, the same sort order criteria are applied to subfolder names. Filename Template Tab The Filename Template service is available to batch forwarding agents that are responsible for creating a file, and the Disk forwarding agent for real-time workflows. The configuration contains MIM resources for all available agents in the workflow, the values of which may be used when constructing a filename for the outgoing file. Since this service includes a selection of MIM resources from available agents in the workflow, it is advised to add all agents to the workflow, and to assign route and agent names, before the filename template configuration is completed. Note! The Filename Template service also provides you with the so called Dynamic Directory support. This means that you can change the output directory during execution of a workflow, the input data of which is bytearray. See Input Data in the configuration Target tab of your relevant forwarding agent. By creating directories and subdirectories with names which consist of MIM values, and by adding appropriate APL code, you configure the output directory to sort the out data into directories that are created during the workflow execution. For further information, see the section below, Defining a MIM Resource of FNTUDR Type. Open The list contains MIM resources or user defined values that create the file name. The order of the items in the list controls the order in the file name. There are two ways in which you can determine the order of the items. You can use the Up and Down arrow buttons, or you can use the column headers. If you begin to sort the items using the column headers, the Up and Down arrows are disabled. The table - with MIM resources, user defined values, separators and/or directory delimiters - is used to create the filepath or filename. The order of the items in the table defines the filepath or filename. Since the service uses a selection of MIM resources from available agents in the workflow, it is advised to add all agents to the workflow before the filename template configuration is completed. Item Description Item Description Create Non-Existing Directories When this checkbox is selected, non-existing directories stated in the path are created. If not selected, the agent will abort if a required directory is missing. Open Item Description Item Description MIM Defined Determines if the Value will be selected from a MIM resource. The MIM resource of type FNTUDR is represented in the template table in the same way as other MIMs, however it has another appearance when the filename or filepath is presented. A MIM FNTUDR value can represent a sub-path with delimiters, a part of a filename, or a directory. For further information about how to use the FNTUDR in filename templates, see the section below, Defining a MIM Resource of FNTUDR Type. User Defined Determines if the Value will be a user defined constant entered in the text field. Directory Delimiter Determines if the Value will be a directory delimiter indicating that the file sub-path will have a directory delimiter at that specified position. You cannot have two directory delimiters directly after each other, or a delimiter in the beginning or end of a filename template. The MIM resource of the special UDR type FNTUDR can include, begin or/and end with directory delimiters this must be noted when adding delimiters in the template. For further information about using the FNTUDR in filename templates, see the section below, Defining a MIM Resource of FNTUDR Type. Size Number of allocated characters in the file name for the selected MIM resource (or user defined constant). If the actual value is smaller than this number, the remaining space will be padded with the chosen padding character. If left empty, the number of characters allocated in the file name will be equal to the MIM value or the constant. Padding Character to pad remaining space with if Size is set. If Size is not set, this value is ignored. Alignment Left or right alignment within the allocated size. If Size is not set, this value is ignored. Separator Separating character to add to the file name after the MIM value or constant. Date Format Adds a timestamp to the file name in the selected way. For further information about the format, see Date and Time Format Codes in Administration and Management in Legacy Desktop . Example - Configuring a Filename Template tab In this example, there is a workflow containing a Disk collection agent named Disk_In and two Disk forwarding agents named Disk_Out and Disk_Out2. The desired output file names from both forwarding agents are as follows: A-B-C.DAT Where A is the name of the Disk forwarding agent, B is the name of the currently collected file, C is the number of UDRs in the outgoing file and .DAT is a customer suffix. It is desired that the number of UDRs in the files takes up six characters and is right aligned. The following file name template configuration applies to the first agent: Open The following file name template configuration applies to the second agent: Open If two files FILE1 and FILE2 are processed where 100 UDRs goes to Disk_Out and 250 goes to Disk_Out2 from each file, the resulting file names would be: Disk_Out-FILE1-000100.DAT Disk_Out2-FILE1-000250.DAT Disk_Out-FILE2-000100.DAT Disk_Out2-FILE2-000250.DAT Defining a MIM Resource of FNTUDR Type A MIM resource with a value of the FNTUDR type included in the filename template is treated somewhat differently than other MIM resources. A FNTUDR value is a text string that can contain delimiters. The delimiters in the FNTUDR value will be replaced by directory delimiters when determining the target file path. The FNTUDR is defined in the FNT folder. Example - How to create an FNTUDR value to published as a MIM resource The following example shows a set of APL code that creates a FNTUDR value and publishes it as a MIM resource. To use the FNTUDR value in a filename template, the MIM resource must be added in the filename template configuration. import ultra.FNT; mimPublish( global, "FNTUDR Value" , any ); consume { FNTUDR fntudr = udrCreate(FNTUDR); fntAddString(fntudr, "dir"); fntAddString(fntudr, "1"); fntAddDirDelimiter(fntudr); fntAddString(fntudr, "dir2"); fntAddDirDelimiter(fntudr); fntAddString(fntudr, "partOfFileName"); mimSet ("FNTUDR Value", fntudr); udrRoute(input); } The following filename template configuration uses the FNTUDR published by the APL code. Open The resulting output file in the previous example is saved in a file with the following sub path from the root directory. dir0/dir1/dir2/partOfFileName20070101_1 The part dir1/dir2/partOfFileName derives from the FNTUDR Value. For further information about how to manipulate FNTUDRs with APL functions and how to publish MIM resources, see the APL Reference Guide and the section Meta Information Model in Administration and Management in Legacy Desktop .

---

# Document 2167: Duplicate UDR Inspector - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204607196
**Categories:** chunks_index.json

To open the Duplicate UDR Inspector, click Manage  Duplicate UDR Inspector . Note! Duplicate UDR Inspector currently does not support Duplicate UDR profiles with Enable Separate Storage Per Workflow option selected. Note! Applicable only to Legacy Desktop, ensure that the Read Only check box is selected unless you need to delete batches from the cache. If not selected, the profile will be locked and workflows using the profile will not be able to write to the cache. Inspect Duplicate UDR Batches Once the search criteria have been specified in the Filter dialog, the Duplicate UDR Inspector table is populated with matching batches. Open The Duplicate UDR Inspector Table The Duplicate UDR Inspector displays a table of duplicate UDR batches that were detected in workflows that contained a Duplicate UDR Agent. The table has the following columns: Item Description Item Description ID The index of the batch in the search results. Processed Date The date when the batch was processed. Content Start / End The Duplicate UDR Detection agent stores batches in date segments. These columns show the date range of the Indexing field value of the UDR that was used for duplication checks during transaction. If the transaction contains dates older than the Max Cache Age, configured in the Duplicate UDR profile, Outside range is displayed. If both Start and End show Outside range, all dates in the transaction were older than Max Cache Age. These columns are only visible if Date Field is enabled in the Duplicate UDR profile. Records The number of records (UDRs) processed for a given batch. Duplicates The number of duplicates found in the batch. Action MIM Values The MIM data stored for the batch. Click this button to view all MIM values. You can use the Display page selector at the bottom of the page to navigate between pages. The table displays up to 500 Duplicate UDR transactions per page. You can also select individual batches by selecting the checkbox and choose to either Delete or Clear selection(s) . The Duplicate UDR Inspector table also has the following options: Filter Refresh Delete Filter Clicking this button opens the Filter window where you can specify the UDR profile and a date range for the required results. Open Duplicate UDR Inspector Filter Dialog Menu option Description Duplicate UDR profile Click Browse button to select the appropriate Duplicate UDR Profile to filter the results for. Processed start date and time Processed end date and time The Duplicate UDR Detection agent stores batches in date segments. Populate the date-time picker to filter the results for duplicates detected between a certain time period. Close Click to close the Filter window. Reset Click to reset all selections in the Filter window. OK Click to apply the filters and close the Filter window. Refresh and Delete Click Refresh button to refresh the data in the Duplicate UDR results table. Click Delete to delete all the rows in the table.

---

# Document 2168: Appendix 3 - Task Workflow Agents - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204644296
**Categories:** chunks_index.json

Task workflows are used to execute system housekeeping tasks such as removing files or cleaning up database tables. The following are the Task Workflow agents we have: 1 Data Hub Task Agent 2 Data Veracity Task Agent 3 Python Task Agent 3.1 General 3.2 MIM 4 SQL Agent 5 Script Agent 6 Unit Test Runner Agent Data Hub Task Agent The Data Hub Task agent is explained in detail in Data Hub Task Agent . Data Veracity Task Agent The Data Veracity Task Agent is explained in detail in Data Veracity Task Agent . Python Task Agent The Python Task Agent runs Python scripts and is configured in two tabs  General where the code is entered and MIM where MIM values can be freely assigned. General Open The Python collection agent configuration - General tab In the General tab, you enter the selected code string that needs to be executed in a task workflow. You can Validate the input code and confirm your choice by clicking on the OK button. Setting Description Setting Description Code Area This is the text area where you enter your code, see Python Writer's Guide for further information. The entered code will be color-coded depending on the code type, and for input assistance, a pop-up menu is available. Below the text area, there are line, column, and position indicators. See Python Code Editor Assistance . Interpreter Select which https://infozone.atlassian.net/wiki/x/SBU0D you want to use. If no selection is made the interpreter that has been set as default in the https://infozone.atlassian.net/wiki/x/uwgzD will be used. MIM Open The MIM tab of the Python Task Agent You can assign MIM values and edit entries using the Add, Edit, Remove, Up , and Down buttons. When you click on the Add button the Add MIM dialog box will open. Open The Add MIM dialog box Here, you can insert the relevant MIM values. Setting Description Setting Description Assigned Select the target assignee to which the MIM will be bound. Name Enter the name of the MIM value Type Select the data type, you can choose from the following supported data types: any, boolean, date, double, int, long , and string . SQL Agent The SQL agent executes an SQL statement or script in the database specified by a database profile. Open SQL agent configuration Setting Description Setting Description Database Click Browse... to select a Database profile. For further information about how to configure a Database profile, see Database Profile . SQL Statement Enter a PL/SQL script or SQL statements. Note! Group several SQL statements within a block. For a single SQL statement omit the semicolon (;) at the end. Script Agent This agent runs a shell script or other executable located on the filesystem of an EC. The workflow will stop when it receives an exit code from the script. If the script returns a non-zero exit code, the workflow will abort. Output to stdout will appear in the debug output from the agent. Warning! It is strongly recommended that you run script task workflows on a separate EC. Running script task workflows on the same EC as other workflows may cause unpredictable errors and loss of data. During a short time before exec() runs the actual script, fork() allocates the same amount of memory for the script as used for the EC. If the memory is not available, the EC will abort with an out-of-memory error and must then be restarted. Open Script agent configuration Setting Description Setting Description Script Name Enter the absolute path and name of the script file or executable that will perform the task. You may omit the path if it is not required by the shell. For instance, to remove files or directories you can simply enter rm or rmdir . Parameters Enter the arguments and options expected by the script. The value will be passed as-is to the shell, except for carriage return characters, which will be handled as a blank spaces. To call the script without options parameters, leave this field blank. Unit Test Runner Agent This task agent executes unit tests. You can customize the queries and define the exact location where the reports are saved. Open Unit Test Runner Task Agent Configuration Setting Description Setting Description Test Discovery Settings Query Enter the unit test run query All Select this option to enter "all" into the query field. Add folder... Select this option to enter the add folder code into the query field. Add name... Select this option to enter a unit test. Report Settings Directory Enter the target directory where the reports will be saved. Interpreter Settings Profile Select the Interpreter profile.

---

# Document 2169: Web Service Profile Configuration Tab - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204741100/Web+Service+Profile+Configuration+Tab
**Categories:** chunks_index.json

To open the configuration dialog, click the New Configuration button and select WS Profile from the Configurations dialog. Note! Any restrictions on the WSDL format will be ignored by the outgoing web service. The Web Service Profile consists of four tabs: Configuration, Security, Advanced, and View WSDL Configuration. Open WS Profile Configuration The Configuration tab consists of two main parts: WSDL Configuration and WSDL Validation . Note! If you are using Legacy Desktop, the WSDL Configuration will look different. You will see separate options for importing single and concatenated WSDL files. Use the Import button to open the Import New File dialog. Open Import New File dialog box Here you can browse for and import one or more WSDL files via the web browser. If present, they are imported at the same time as the WSDL file. If not, a validation error occurs. Basic validation of the WSDL file is performed before the file is imported. After the file is imported, the content of the WSDL file and adherent files can be viewed in the View WSDL Content tab. A more extended validation of the WSDL file is performed when the profile is saved. You can use the Export button to export the original WSDL file to a ZIP file. When you select an entry you are presented with an actions list allowing you to further interact with it: Open WS Profile Actions List Action Description Action Description Clear Selection(s) Clears the currently selected item(s). View Opens the WSDL Schema screen. Open WSDL Schema Screen Here you can view the schema of the selected entry. Replace Opens the Replace Existing File screen. Open Replace Existing File Screen Here you can replace the contents of the selected entry by uploading the desired files. Delete Deletes the selected entry. Underneath the entries selection table, you can select a Service Port Definition from the dropdown list, if several such definitions are available. The WSL Validation section allows you to select one or more validation checks if desired. Validation Type Description Validation Type Description Enable Desktop WSDL Validation Select to enable a desktop-side validation of the provided WSDL files. Enable Platform-Side Schema Validation Select to enable a platform-side validation of the provided WSDL files.

---

# Document 2170: Charging Request UDRs - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204609178
**Categories:** chunks_index.json

ChargeUDR This UDR is dedicated to submitting a charge request to the SAP Convergent Charging Core server. Field Description applyTransactionFilter (boolean - optional) TRUE : Only the details of the price computation which are not filtered will be returned in the answer. FALSE : The full details of the price computation will be returned in the answer  this is the default value. chargeableItemName (string) The name of the ChargeableItem which corresponds to this usage as defined in SAP Convergent Charging. A ChargeableItem represents the information that the client needs to be sent to perform the charge process. It consists of a name and a list of properties. ciPropertyList (list<PropertyUDR>) The list of properties to be included in the chargeableItem as defined in SAP Convergent Charging ChargeableItem package definition. any bigint (BigInteger) boolean byte char date (DRDate) double float int ipaddress (DRIPAddress) long short string Others (bitset, bytearray, table, list, map, UDR, ) consumptionDate (date) The date of the consumption event resultType (ResultTypeUDR  optional) This field can be used to pass over the default agent configuration. The correct instance of a ResultTypeUDR should be used: NO_TRANSACTIONS MASTER_TRANSACTION ALL_TRANSACTIONS ALL_TRANSACTIONS_AND_RECURRING USE_DEFAULT : indicates that the default agent configuration will be used for this request. Refer to the relevant agent configuration section for more details on the possible values. chargeExecutionContext (ChargeExecutionContextUDR  optional) This field defines what information is to be included in the response to this charge operation. This field cannot be combined with the resultType field. serviceId (string) The serviceId part of the access object linked to the customer master data defined in SAP Convergent Charging userId (string) The userId part of the access object linked to the customer master data defined in SAP Convergent Charging BlankChargeUDR This UDR is dedicated to submitting a blank charge request to the SAP Convergent Charging Core server. For the field definitions, refer to the section above, ChargeUDR. EstimateChargeUDR This UDR is dedicated to submitting a get estimated price request to the SAP Convergent Charging Core server. For the field definitions, refer to the section above, ChargeUDR. CheckLimitUDR This UDR is dedicated to submitting a check limit request to the SAP Convergent Charging Core server. This operation represents the property limit check operation also called Inverse Rating. This UDR defines additional fields to ChargeUDR : Field Description estimationMode (boolean - optional) TRUE : the default value FALSE : if set to false, the check limit operation is immediately followed by a final rating, using the found value for the inversed property. Note! The false value will impact the customer account. moneyLimit (string - optional) A string representation of the maximum amount of money available for the inverse rating. When the limit amount of money is not provided (null value), the limit is retrieved from the account balances. The moneyLimit value must respect the SAP Convergent Charging Money definition. For example: EUR 12.15 , or USD 0.123456 . precision (string - optional) The expected precision of the result The value must be a string representing a numerical value in the following format: 1, 0.1, 0.01, 0.001 etc. propertyToInverse (string) The name of the property used by the inverse rating process. This property must be contained in the chargeableItem definition on the SAP Convergent Charging Core server. SessionStartUDR This UDR is dedicated to starting a session-based rating of one or multiple services on the SAP Convergent Charging Core server. Field Description applyTransactionFilter (boolean - optional) TRUE : Only the details of the price computation which are not filtered will be returned in the answer. FALSE : The full details of the price computation will be returned in the answer  this is the default value. consumptionDate (date) The date of the consumption event enableReservationRenewalListener (boolean - optional) TRUE : Reservation Renewal Events are sent in session. FALSE : Reservation Renewal Events are not sent in session. externalData (bytearray) Optional external data that can be used when processing a Reservation Renewal Event. This data is not read or changed by SAP Convergent Charging. reservationRenewalListenerId (byte) The id is a number in the range of 1 to 127. resultType (ResultTypeUDR  optional) This field can be used to pass over the default agent configuration. For more details on the possible values, see the field definition for resultType in the section above, ChargeUDR. serviceId (string) The serviceId part of the access object linked to the customer master data defined in SAP Convergent Charging services (list<ServiceSessionUDR>) A list of services to be charged in the session. The services may only contain Reservation Items when a session is started. For more details on the possible values, see the field definitions in the section ServiceSessionUDR in Common SAP CC UDRs . sessionCleanupResultType (ResultTypeUDR optional) This field can be used to pass over the default agent configuration. For more details on the possible values, see the field definitions in the section above, ChargeUDR . sessionId (string) The unique identifier of the session userId (string) The userId part of the access object linked to the customer master data defined in SAP Convergent Charging StartSessionUDR This UDR is dedicated to starting a session-based rating of one service on the SAP Convergent Charging Core server. Note! This UDR is deprecated with later versions of SAP Convergent Charging and is replaced by SessionStartUDR. Field Description applyTransactionFilter (boolean - optional) TRUE : Only the details of the price computation which are not filtered will be returned in the answer. FALSE : The full details of the price computation will be returned in the answer  this is the default value. chargeableItemName (string) The name of the ChargeableItem which corresponds to this usage as defined in SAP Convergent Charging. A ChargeableItem represents the information that the client needs to be sent to perform the charge process. It consists of a name and a list of properties. consumptionDate (date) The date of the consumption event. The value must be a string representing a numerical value in the following format: 1, 0.1, 0.01, 0.001 etc. propertyToInverse (string) The name of the property used by the best effort reservation process. This property must be contained in the chargeableItem definition on the SAP Convergent Charging Core server. reservationItemList (listPropertyUDR) The list of properties to be included in the reservation chargeableItem as defined in SAP Convergent Charging ChargeableItem package definition. For more details on casting, see the field definitions in the section above , ChargeUDR. resultType (ResultTypeUDR  optional) This field can be used to pass over the default agent configuration. For more details on the possible values, see the field definition for resultType in the section above, ChargeUDR. serviceId (string) The serviceId part of the access object linked to the customer master data defined in SAP Convergent Charging sessionCleanupResultType (ResultTypeUDR  optional) This field can be used to pass over the default agent configuration. For more details on the possible values, see the field definitions in the section above, ChargeUDR. sessionId (string) The unique identifier of the session sessionResolutionMode (ResolutionModeUDR  optional) This optional field can be used to pass over the default agent configuration. If set, it defines the session termination to apply if this particular session reached its 'time to live'. The session can be either cancelled (cancel) or confirmed (confirm). sessionTTL (long  optional) This optional field can be used to pass over the default agent configuration. If set, it defines the 'time to live' for this particular charging session. userId (string) The userId part of the access object linked to the customer master data defined in SAP Convergent Charging SessionUpdateUDR This UDR is dedicated to updating a session-based rating of one or multiple services on the SAP Convergent Charging Core server. Field Description applyTransactionFilter (boolean - optional) TRUE : Only the details of the price computation which are not filtered will be returned in the answer. FALSE : The entire details of the price computation will be returned in the answer  this is the default value. consumptionDate (date) The date of the consumption event The value must be a string representing a numerical value in the following format: 1, 0.1, 0.01, 0.001 etc. externalData (bytearray) Optional external data that can be used when processing a Reservation Renewal Event. This data is not read nor changed by SAP CC Server. resultType (ResultTypeUDR  optional) This field can be used to pass over the default agent configuration. For more details on the possible values, see the field definition for resultType in the section above, ChargeUDR . serviceId (string) The serviceId part of the access object linked to the customer master data defined in SAP Convergent Charging. services (list<ServiceSessionUDR>) A list of services to be charged in the session. For more details on the possible values, see the field definitions in the section ServiceSessionUDR in Common SAP CC UDRs . sessionCleanupResultType (ResultTypeUDR  optional) This field can be used to pass over the default agent configuration. For more details on the possible values, see the field definitions in the section above, ChargeUDR . sessionId (string) The unique identifier of the session userId (string) The userId part of the access object linked to the customer master data defined in SAP Convergent Charging UpdateSessionUDR This UDR is dedicated to updating a session-based rating of one service on the SAP Convergent Charging Core server. Note! This UDR is deprecated with later versions of SAP Convergent Charging and is replaced by SessionUpdateUDR. Field Description applyTransactionFilter (boolean - optional) TRUE : Only the details of the price computation which are not filtered will be returned in the answer. FALSE : The full details of the price computation will be returned in the answer  this is the default value. chargeableItemName (string) The name of the ChargeableItem which corresponds to this usage as defined in SAP Convergent Charging. A ChargeableItem represents the information that the client needs to be sent to perform the charge process. It consists of a name and a list of properties. confirmationItemList (list<PropertyUDR> - optional) The list of properties to be included in the confirmation chargeableItem as defined in SAP Convergent Charging ChargeableItem package definition. Note! If not present, the previous reservation item will be used for the confirmation. The confirmationItem can only redefine the modified properties. For more details on the casting, see the field definitions in the section above, ChargeUDR. consumptionDate (date) The date of the consumption event reservationItemList (list<PropertyUDR> - optional) The list of properties to be included in the new reservation chargeableItem as defined in SAP Convergent Charging ChargeableItem package definition Note! If not present, the previous reservation item will be used for the new reservation. The new reservation Item can only redefine the modified properties. For more details on the casting, see the field definitions in the section above, ChargeUDR . resultType (ResultTypeUDR  optional) This field can be used to pass over the default agent configuration. For more details on the possible values, see the field definition for resultType in the section above, ChargeUDR. serviceId (string) The serviceId part of the access object linked to the customer master data defined in SAP Convergent Charging sessionCleanupResultType (ResultTypeUDR  optional) This field can be used to pass over the default agent configuration. For more details on the possible values, see the field definitions in the section above, ChargeUDR. sessionId (string) The unique identifier of the session userId (string) The userId part of the access object linked to the customer master data defined in SAP Convergent Charging. SessionStopUDR This UDR is dedicated to stopping a session-based rating of one or multiple services on the SAP Convergent Charging Core server. Field Description applyTransactionFilter (boolean - optional) TRUE : Only the details of the price computation which are not filtered will be returned in the answer. FALSE : The full details of the price computation will be returned in the answer  this is the default value. consumptionDate (date) The date of the consumption event. The value must be a string representing a numerical value in the following format: 1, 0.1, 0.01, 0.001 etc. externalData (bytearray - optional) Optional external data that can be used when processing a Reservation Renewal Event. This data is not read nor changed by SAP Convergent Charging. resultType (ResultTypeUDR  optional) This field can be used to pass over the default agent configuration. For more details on the possible values, see the field definition for resultType in the section above, ChargeUDR. serviceId (string) The serviceId part of the access object linked to the customer master data defined in SAP Convergent Charging. services (list<ServiceSessionUDR>) A list of services to be charged in the session. The services may only contain Confirmation Items or have Cancellation set when a session is stopped. For more details on the possible values, see the field definitions in the section ServiceSessionUDR in Common SAP CC UDRs . sessionCleanupResultType (ResultTypeUDR  optional) This field could be used to pass over the default agent configuration. For more details on the possible values, see the field definitions in the section above, ChargeUDR . sessionId (string) The unique identifier of the session userId (string) The userId part of the access object linked to the customer master data defined in SAP Convergent Charging. StopSessionUDR This UDR is dedicated to stopping a session-based rating of one service on the SAP Convergent Charging Core server. Note! This UDR is deprecated with later versions of SAP Convergent Charging and is replaced by SessionStopUDR . Field Description applyTransactionFilter (boolean - optional) TRUE : Only the details of the price computation which are not filtered will be returned in the answer. FALSE : The full details of the price computation will be returned in the answer  this is the default value. chargeableItemName (string) The name of the ChargeableItem which corresponds to this usage as defined in SAP Convergent Charging. A ChargeableItem represents the information that the client needs to be sent to perform the charge process. It consists of a name and a list of properties. confirmationItemList (list<PropertyUDR> - optional) The list of properties to be included in the confirmation chargeableItem as defined in SAP Convergent Charging ChargeableItem package definition. Note! If not present, the previous reservation item will be used for the confirmation. The confirmationItem can only redefine the modified properties. For more details on the casting, see the field definitions in the section above, ChargeUDR. resultType (ResultTypeUDR  optional) This field can be used to pass over the default agent configuration. For more details on the possible values, see the field definition for resultType in the section above, ChargeUDR serviceId (string) The serviceId part of the access object linked to the customer master data defined in SAP Convergent Charging. sessionCleanupResultType (ResultTypeUDR  optional) This field can be used to pass over the default agent configuration. For more details on the possible values, see the field definitions in the section above, ChargeUDR sessionId (string) The unique identifier of the session SessionResolutionMode (ResolutionModeUDR) The session termination to apply to the session. The session can be either cancelled (cancel) or confirmed (confirm). userId (string) The userId part of the access object linked to the customer master data defined in SAP Convergent Charging

---

# Document 2171: Shut Down Platform and Execution - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204638048/Shut+Down+Platform+and+Execution
**Categories:** chunks_index.json

Disable all Workflow Groups, from the Execution Manager in Desktop, or by entering the following command: $ mzsh mzadmin/<password> wfgroupdisable * Note! If you use the wfgroupdisable command, make sure that you enable all system tasks again when you are done. Stop all workflows that are not disconnected and let them finish execution. Ensure that all users shut down any connected connected Desktops. If you want to see which Desktops that are connected, you can use the following command: $ mzsh mzadmin/<password> pico -view This command will also display other pico instances, such as ECs. Shut down the Platform and all ECs. $ mzsh shutdown platform <ec name> ...

---

# Document 2172: Extract Database Definition Files for PostgreSQL - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204604207/Extract+Database+Definition+Files+for+PostgreSQL
**Categories:** chunks_index.json

When PostgreSQL and MediationZone are not installed on the same machine (the database may be installed on any machine within the network), the database definition files need to be transferred to the PostgreSQL machine before the database can be created. On the PostgreSQL machine (as postgres UNIX user): transfer the database-setup.tar file from the MediationZone machine and extract the files: $ tar -xvf ./database-setup.tar Enter the database directory $ cd database

---

# Document 2173: PostgreSQL Connection - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205029651/PostgreSQL+Connection
**Categories:** chunks_index.json

When using PostgreSQL as platform database, no post platform installation configuration is needed: Note! The PostgreSQL driver is included in the release, so there is no need to download the driver.

---

# Document 2174: ADLS2 File Forwarding Agent Input/Output Data and MIM - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204671929/ADLS2+File+Forwarding+Agent+Input+Output+Data+and+MIM
**Categories:** chunks_index.json

Input/Output Data The agent consumes bytearray or MultiForwardingUDR types. MIM For information about the MIM and a list of the general MIM parameters, see Administration and Management in Legacy Desktop . Publishes MIM Value Description MultiForwardingUDR's FNTUDR This MIM parameter is only set when the agent expects input of MultiForwardingUDR type. The MIM value is a string representing the sub path from the output root directory on the target file system. The path is specified by the fntSpecification field of the last received MultiForwardingUDR . For further information on using input of MultiForwardingUDR type, refer to the section, MultiForwardingUDR Input, in ADLS2 File Forwarding Agent Configuration . This parameter is of the string type and is defined as a batch MIM context type. File Transfer Timestamp This MIM parameter contains a timestamp, indicating when the target file was created in the temporary directory. File Transfer Timestamp is of the date type and is defined as a trailer MIM context type. Target Filename This MIM parameter contains the name of the target filename, as defined in Filename Template . Target Filename is of the string type and is defined as a trailer MIM context type. Target Template Pathname This MIM parameter contains the name of the target pathname, directories and filename, as defined in Filename Template . Target Template Pathname is of the string type and is defined as a trailer MIM context type. Target Pathname This MIM parameter contains the path to the output directory, as defined in the Disk tab. Target Pathname is of the string type and is defined as a global MIM context type. Accesses The agent accesses MIM parameters in the Filename Template configuration to construct the target filename.

---

# Document 2175: Importing Code - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205653576/Importing+Code
**Categories:** chunks_index.json

When importing code, use the following prefixes: python. : to import Python Module configurations. ultra. : to import built-in UDR types or Ultra Format configurations. apl. : to import functions and/or constants from APL Code configurations. . : to import something relative to any of the items listed above if located in the same folder. <nothing> : to import any standard or third party Python module. A good practice is to strive to organize the code in modules for maximum reuse. Note! Always import your Python Module configurations, Ultra Format configurations, and APL Code configurations from the global scope, i.e. not from within a function. Example - Importing Code to the Python Agent # Absolute imports from python.Analytics.PYM_Algorithms import findclu from ultra.Analytics.UFL_Types import InputData from apl.Analytics.APL_Helpers import logger # Relative imports from .PYM_Algorithms import findclu from .UFL_Types import InputData from .APL_Helpers import logger # Other imports import numpy as np

---

# Document 2176: IBM MQ APL Functions - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204641764/IBM+MQ+APL+Functions
**Categories:** chunks_index.json

IBM MQ APL functions are used to send data to an IBM WebSphere MQ queue. MQConnect This function will open a connection to a queue and queue manager. MQQueue mqConnect(MQQueueManagerInfo info, string queueName) Parameters Parameter Description info The information needed to connect to the queue manager MQQueueManagerInfo UDR. For further information about the MQQueueManagerInfo UDR type see MQQueueManagerInfo in IBM MQ UDRs . queueName The name of the queue Returns Returns an MQQueue UDR. For further information about the MQQueue UDR type see MQQueue in IBM MQ UDRs . Note! If there is no available queue status for some reason, the MaxDepth and CurrentDepth fields will be assigned the value "-1" and the mqConnect function will still be able to connect. MQPut This function will put a message on a queue. If the function fails, it will populate the ErrorDescription field with a description and set isError to true. If the error was generated from an MQ exception it will also update the MqError field in the MQQueue UDR. string mqPut(MQQueue queue, MQMessage message) Parameters Parameter Description queue The MQQueue UDR that is the result from the mqConnect function. For further information about the MQQueue UDR type see MQQueue in IBM MQ UDRs message The message to add to the queue. For further information about the MQMessage UDR type see MQMessage in IBM MQ UDRs . Returns Returns null if the function was successful and an error message if it failed. MQClose This function closes the connection to the queue manager. If the function fails, it will populate the ErrorDescription field with a description and set isError to true. If the error was generated from an MQ exception it will also update the MqError field in the MQQueue UDR. string mqClose(MQQueue queue) Parameters Parameter Description queue The MQQueue UDR that is the result from the mqConnect function. For further information about the MQQueue UDR type see MQQueue in IBM MQ UDRs . Returns Returns null if the function was successful and an error message if it failed. MQStatus This function will query the queue for MaxDepth and CurrentDepth and populate the corresponding fields in the MQQueue UDR. If the function fails, it will populate the ErrorDescription field with a description and set isError to true. If the error was generated from an MQ exception it will also update the MqError field in the MQQueue UDR. string mqStatus(MQQueue queue) Parameters Parameter Description queue The MQQueue UDR that is the result from the mqConnect function. For further information about the MQQueue UDR type see MQQueue in IBM MQ UDRs . Returns Returns an error message describing the problem, or null if the function was successful.

---

# Document 2177: FTP Forwarding Agent Transaction Behavior - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204607565
**Categories:** chunks_index.json

The transa ction behavior for the FTP forwarding agent is presented here. For further information about the general transaction behavior, see Workflow Monitor . Input/Output Data Output Data The agent emits nothing. Input Data The agent retrieves commands from other agents and based on them generates a state change of the file currently processed. Command Description Begin Batch When a Begin Batch message is received, the temporary directory DR_TMP_DIR is first created in the target directory, if not already created. Then, a target file is created and opened in the temporary directory. End Batch When an End Batch message is received, the target file in DR_TMP_DIR is closed and, finally, the file is moved from the temporary directory to the target directory. Cancel Batch If a Cancel Batch message is received, the target file is removed from the DR_TMP_DIR directory.

---

# Document 2178: Creating a DTK Plugin - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204676496/Creating+a+DTK+Plugin
**Categories:** chunks_index.json

To create and commit a DTK plugin: Create the different Java files required for the type of plugin you want to create. See the chapters describing each plugin for further information. Compile all the Java files for your plugin into classes: > javac -classpath $CLASSPATH com/mycompany/myagent/*.java Caution! Do not use the default package context in the Java code. All classes in MediationZone must have unique names. Create a user-defined *.jar file containing the classes, see Creating a DTK Plugin | Creating a User Defined Jar below. Create a user-defined *.mzp package containing the *.jar file, see https://infozone.atlassian.net/wiki/spaces/MD93/pages/204676496/Creating+a+DTK+Plugin#Creating-a-User-Defined-Package below. Commit your user-defined package, see https://infozone.atlassian.net/wiki/spaces/MD93/pages/204676496/Creating+a+DTK+Plugin#Committing-a-User-Defined-Package below. Creating a User-Defined Jar To create a *.jar file containing the classes, use the following command syntax: > jar cvf my_agent.jar com/mycompany/myagent/*.class It is also possible to add resources to a jar file, just append any resource name to your "jar create" command. This allows you to, for instance, add images that your class depends on to the jar: > jar cvf my_agent.jar com/mycompany/myagent/*.class com/mycompany/myagent/myagent_icon.svg Creating a User-Defined Package In order to insert the *.jar file into MediationZone, a package containing the jar file must first be created. A package gives the *.jar file a name and a version. The mzsh pcreate command creates a code package used for composing packages (.mzp) in order to create additional functionality and updates. The name and version will be visible in the About window once the new package has been committed into the system. A package is created using the pcreate command in the mzsh Command Line Tool: usage: pcreate <name> <version> <package-file> [-level <default level>] [-revision <revision> ] [-repository <repository> ] [-hidden] [[-level <level name>] file=<file-to-include> ... ] [-osgi <true/false>] [-exported <export-version> file=<jar file>] For Private Cloud, AWS or when you do not have a local installation, do: java -jar $DEVKIT_JAR pcreate ... Argument Description Argument Description <name> The name of the package <version> The version string of the package <package-file> The resulting package file name [ -level <default level>] Specifies if this software should support update to a running system. The default level can either be platform or execution . Execution implies that the component can be updated when the system is running, for example upgrading to a newer agent version. Note! Not all kinds of software using the Development Toolkit can be updated and also that a third party library being used by the software may or may not support the execution level. [ -revision <revision>] Used to show the revision number from which the .mzp file is built, that is from a revision management system. [ -repository <repository>] Used to show the repository from which the .mzp file is built, that is from a revision management system. -hidden Used if the .mzp file is not supposed to be visible in the system, for example in the ">About dialog. [ -level <level name>] file=<file-to-include> The level name can either be platform or execution. Each filename to be included can optionally be preceded by a level. [ -osgi <true/false> ] When this argument is set to true, the MZP will be built as an OSGi bundle. This ensures that the Java code within the bundle is isolated from the rest of MediationZone. Use OSGi bundling when your DTK plugin depends on third-party libraries that you need to include in the MZP, so they do not cause any conflicts with the rest of the system. Only the Java packages explicitly exported will be visible to MediationZone. To specify which Java packages to export, use the following options: -exportpackages <javapackagename> - Will export the specified Java package(s). -exported <export-version> file=<jar file> - Will export all Java packages contained within the specified JAR file. The default value is false . [ -exportpackages <java package>] When the -osgi true argument is used, this argument states the Java package(s) to be exported. Multiple packages can be exported by stating them in a comma-separated list, for example: com.mycompany.myagent1,com.mycompany.myagent2 Example - Using -osgi and -exportpackages mzsh username/password pcreate "My Agent" 1.0 my_agent.mzp -level platform file=my_agent.jar file=my_third_party_library.jar -osgi true -exportpackages com.mycompany.myagent [ -exported <export-version> file=<jar file>] This argument will export all Java packages contained within the specified JAR file when used with the argument -osgi true . This argument can be used multiple times if you need to export Java packages from multiple JAR files. Example Using -osgi and -exported mzsh username/password pcreate "My Agent" 1.0 my_agent.mzp -level platform file=my_third_party_library.jar -osgi true -exported 1.0.0 file=my_agent.jar Committing a User-Defined Package FTo commit a user-defined package: 1. sftp mzp to test server 2. Login on the test server 3. $ mzsh user/pw pcommit my_agent.mzp Note! The name ( My Agent in the example above, Creating a DTK Plugin | Creating a User Defined Jar ) is the package key, meaning that if a new package with the same name is inserted, then the old code for that package name is replaced.

---

# Document 2179: Periods Data Model Rules - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205656167
**Categories:** chunks_index.json



---
**End of Part 92** - Continue to next part for more content.
