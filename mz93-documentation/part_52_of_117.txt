# RATANON/MZ93-DOCUMENTATION - Part 52/112

---
**Dataset:** ratanon/mz93-documentation
**Part:** 52 of 112
**GitHub:** https://github.com/ratan0n/docs/tree/main/mz93-documentation
**Size:** ~69.1 KB
---

Open Search this document: This page contains release information for the different releases of MediationZone 9.3 For each release the following information is available: Release Notes - Contains information about the contents of the release, important information and known issues. You must read through this information before starting any installation or upgrade. Bug Fix Appendix - Contains information about bug fixes included in the release. To obtain your release, please, visit Our Download site . Note! A new license is required to access new features in a minor version update. Please log a case to request your updated license. MediationZone 9.3 Version Date of Release Release Notes Bug Fix Appendix 9.3.0.0 Sep 24, 2024 MediationZone 9.3 Release Bug Fixes 9.3.0.1 Oct 3, 2024 MediationZone 9.3 Release Bug Fixes 9.3.0.2 Oct 18, 2024 MediationZone 9.3 Release Bug Fixes 9.3.0.3 Nov 1, 2024 MediationZone 9.3 Release Bug Fixes 9.3.0.4 Nov 21, 2024 MediationZone 9.3 Release Bug Fixes 9.3.1.0 Nov 29, 2024 MediationZone 9.3 Release Bug Fixes 9.3.1.1 Dec 10, 2024 MediationZone 9.3 Release Bug Fixes 9.3.1.2 Jan 10, 2025 MediationZone 9.3 Release Bug Fixes 9.3.1.3 Jan 29, 2025 MediationZone 9.3 Release MediationZone 9.3 Release 9.3.1.4 Feb 28, 2025 MediationZone 9.3 Release MediationZone 9.3 Release 9.3.1.5 Mar 14, 2025 MediationZone 9.3 Release MediationZone 9.3 Release 9.3.1.6 Mar 26, 2025 MediationZone 9.3 Release MediationZone 9.3 Release 9.3.1.7 Apr 9, 2025 MediationZone 9.3 Release MediationZone 9.3 Release 9.3.2.0 Recalled! Upgrades cannot be made to this release, use the 9.3.2.1 release or later instead. Apr 11, 2025 MediationZone 9.3 Release MediationZone 9.3 Release 9.3.2.1 Apr 15, 2025 MediationZone 9.3 Release MediationZone 9.3 Release 9.3.2.2 Apr 30, 2025 MediationZone 9.3 Release MediationZone 9.3 Release 9.3.2.3 May 9, 2025 MediationZone 9.3 Release MediationZone 9.3 Release 9.3.2.4 May 16, 2025 MediationZone 9.3 Release MediationZone 9.3 Release 9.3.2.5 May 30, 2025 MediationZone 9.3 Release MediationZone 9.3 Release 9.3.2.6 Jun 5, 2025 MediationZone 9.3 Release MediationZone 9.3 Release

---

# Document 1223: Azure Event Hub Agents - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204672218/Azure+Event+Hub+Agents
**Categories:** chunks_index.json

This section describes the Azure Event Hub consumer (collector) and producer (forwarding) agents. These agents are available in real-time workflow configurations. The section contains the following subsections: Azure Profile Azure Event Hub Consumer Agent Azure Event Hub Producer Agent

---

# Document 1224: Web Service Profile WSDL Content Tab - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204609979/Web+Service+Profile+WSDL+Content+Tab
**Categories:** chunks_index.json

The View WSDL Content tab is used to display the content of imported files, both WSDL and adherent files. Open Web Service profile - View WSDL Content tab The following buttons are available in this tab. Setting Description Setting Description WSDL Definition When a WSDL file is successfully imported to the Web Service profile the WSDL filename is stated here. The View button opens a read-only view of the file contents. View View Selected If one of the files in the Included Files list is selected, this button opens a read-only view of its imported content. Included Files If the imported WSDL Definition contains references to other WSDL or xsd files included in the configuration, they are listed here. This section provides a general description of the WSDL Content tab. The WSDL file is only an interpreter of the Web Services incoming and outgoing messages. If any strange errors appear, investigate the error message, study the WSDL and refer to parameters, test, and modify until the error is resolved.

---

# Document 1225: Charging Request UDRs - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204609178/Charging+Request+UDRs
**Categories:** chunks_index.json

ChargeUDR This UDR is dedicated to submitting a charge request to the SAP Convergent Charging Core server. Field Description applyTransactionFilter (boolean - optional) TRUE : Only the details of the price computation which are not filtered will be returned in the answer. FALSE : The full details of the price computation will be returned in the answer  this is the default value. chargeableItemName (string) The name of the ChargeableItem which corresponds to this usage as defined in SAP Convergent Charging. A ChargeableItem represents the information that the client needs to be sent to perform the charge process. It consists of a name and a list of properties. ciPropertyList (list<PropertyUDR>) The list of properties to be included in the chargeableItem as defined in SAP Convergent Charging ChargeableItem package definition. any bigint (BigInteger) boolean byte char date (DRDate) double float int ipaddress (DRIPAddress) long short string Others (bitset, bytearray, table, list, map, UDR, ) consumptionDate (date) The date of the consumption event resultType (ResultTypeUDR  optional) This field can be used to pass over the default agent configuration. The correct instance of a ResultTypeUDR should be used: NO_TRANSACTIONS MASTER_TRANSACTION ALL_TRANSACTIONS ALL_TRANSACTIONS_AND_RECURRING USE_DEFAULT : indicates that the default agent configuration will be used for this request. Refer to the relevant agent configuration section for more details on the possible values. chargeExecutionContext (ChargeExecutionContextUDR  optional) This field defines what information is to be included in the response to this charge operation. This field cannot be combined with the resultType field. serviceId (string) The serviceId part of the access object linked to the customer master data defined in SAP Convergent Charging userId (string) The userId part of the access object linked to the customer master data defined in SAP Convergent Charging BlankChargeUDR This UDR is dedicated to submitting a blank charge request to the SAP Convergent Charging Core server. For the field definitions, refer to the section above, ChargeUDR. EstimateChargeUDR This UDR is dedicated to submitting a get estimated price request to the SAP Convergent Charging Core server. For the field definitions, refer to the section above, ChargeUDR. CheckLimitUDR This UDR is dedicated to submitting a check limit request to the SAP Convergent Charging Core server. This operation represents the property limit check operation also called Inverse Rating. This UDR defines additional fields to ChargeUDR : Field Description estimationMode (boolean - optional) TRUE : the default value FALSE : if set to false, the check limit operation is immediately followed by a final rating, using the found value for the inversed property. Note! The false value will impact the customer account. moneyLimit (string - optional) A string representation of the maximum amount of money available for the inverse rating. When the limit amount of money is not provided (null value), the limit is retrieved from the account balances. The moneyLimit value must respect the SAP Convergent Charging Money definition. For example: EUR 12.15 , or USD 0.123456 . precision (string - optional) The expected precision of the result The value must be a string representing a numerical value in the following format: 1, 0.1, 0.01, 0.001 etc. propertyToInverse (string) The name of the property used by the inverse rating process. This property must be contained in the chargeableItem definition on the SAP Convergent Charging Core server. SessionStartUDR This UDR is dedicated to starting a session-based rating of one or multiple services on the SAP Convergent Charging Core server. Field Description applyTransactionFilter (boolean - optional) TRUE : Only the details of the price computation which are not filtered will be returned in the answer. FALSE : The full details of the price computation will be returned in the answer  this is the default value. consumptionDate (date) The date of the consumption event enableReservationRenewalListener (boolean - optional) TRUE : Reservation Renewal Events are sent in session. FALSE : Reservation Renewal Events are not sent in session. externalData (bytearray) Optional external data that can be used when processing a Reservation Renewal Event. This data is not read or changed by SAP Convergent Charging. reservationRenewalListenerId (byte) The id is a number in the range of 1 to 127. resultType (ResultTypeUDR  optional) This field can be used to pass over the default agent configuration. For more details on the possible values, see the field definition for resultType in the section above, ChargeUDR. serviceId (string) The serviceId part of the access object linked to the customer master data defined in SAP Convergent Charging services (list<ServiceSessionUDR>) A list of services to be charged in the session. The services may only contain Reservation Items when a session is started. For more details on the possible values, see the field definitions in the section ServiceSessionUDR in Common SAP CC UDRs . sessionCleanupResultType (ResultTypeUDR optional) This field can be used to pass over the default agent configuration. For more details on the possible values, see the field definitions in the section above, ChargeUDR . sessionId (string) The unique identifier of the session userId (string) The userId part of the access object linked to the customer master data defined in SAP Convergent Charging StartSessionUDR This UDR is dedicated to starting a session-based rating of one service on the SAP Convergent Charging Core server. Note! This UDR is deprecated with later versions of SAP Convergent Charging and is replaced by SessionStartUDR. Field Description applyTransactionFilter (boolean - optional) TRUE : Only the details of the price computation which are not filtered will be returned in the answer. FALSE : The full details of the price computation will be returned in the answer  this is the default value. chargeableItemName (string) The name of the ChargeableItem which corresponds to this usage as defined in SAP Convergent Charging. A ChargeableItem represents the information that the client needs to be sent to perform the charge process. It consists of a name and a list of properties. consumptionDate (date) The date of the consumption event. The value must be a string representing a numerical value in the following format: 1, 0.1, 0.01, 0.001 etc. propertyToInverse (string) The name of the property used by the best effort reservation process. This property must be contained in the chargeableItem definition on the SAP Convergent Charging Core server. reservationItemList (listPropertyUDR) The list of properties to be included in the reservation chargeableItem as defined in SAP Convergent Charging ChargeableItem package definition. For more details on casting, see the field definitions in the section above , ChargeUDR. resultType (ResultTypeUDR  optional) This field can be used to pass over the default agent configuration. For more details on the possible values, see the field definition for resultType in the section above, ChargeUDR. serviceId (string) The serviceId part of the access object linked to the customer master data defined in SAP Convergent Charging sessionCleanupResultType (ResultTypeUDR  optional) This field can be used to pass over the default agent configuration. For more details on the possible values, see the field definitions in the section above, ChargeUDR. sessionId (string) The unique identifier of the session sessionResolutionMode (ResolutionModeUDR  optional) This optional field can be used to pass over the default agent configuration. If set, it defines the session termination to apply if this particular session reached its 'time to live'. The session can be either cancelled (cancel) or confirmed (confirm). sessionTTL (long  optional) This optional field can be used to pass over the default agent configuration. If set, it defines the 'time to live' for this particular charging session. userId (string) The userId part of the access object linked to the customer master data defined in SAP Convergent Charging SessionUpdateUDR This UDR is dedicated to updating a session-based rating of one or multiple services on the SAP Convergent Charging Core server. Field Description applyTransactionFilter (boolean - optional) TRUE : Only the details of the price computation which are not filtered will be returned in the answer. FALSE : The entire details of the price computation will be returned in the answer  this is the default value. consumptionDate (date) The date of the consumption event The value must be a string representing a numerical value in the following format: 1, 0.1, 0.01, 0.001 etc. externalData (bytearray) Optional external data that can be used when processing a Reservation Renewal Event. This data is not read nor changed by SAP CC Server. resultType (ResultTypeUDR  optional) This field can be used to pass over the default agent configuration. For more details on the possible values, see the field definition for resultType in the section above, ChargeUDR . serviceId (string) The serviceId part of the access object linked to the customer master data defined in SAP Convergent Charging. services (list<ServiceSessionUDR>) A list of services to be charged in the session. For more details on the possible values, see the field definitions in the section ServiceSessionUDR in Common SAP CC UDRs . sessionCleanupResultType (ResultTypeUDR  optional) This field can be used to pass over the default agent configuration. For more details on the possible values, see the field definitions in the section above, ChargeUDR . sessionId (string) The unique identifier of the session userId (string) The userId part of the access object linked to the customer master data defined in SAP Convergent Charging UpdateSessionUDR This UDR is dedicated to updating a session-based rating of one service on the SAP Convergent Charging Core server. Note! This UDR is deprecated with later versions of SAP Convergent Charging and is replaced by SessionUpdateUDR. Field Description applyTransactionFilter (boolean - optional) TRUE : Only the details of the price computation which are not filtered will be returned in the answer. FALSE : The full details of the price computation will be returned in the answer  this is the default value. chargeableItemName (string) The name of the ChargeableItem which corresponds to this usage as defined in SAP Convergent Charging. A ChargeableItem represents the information that the client needs to be sent to perform the charge process. It consists of a name and a list of properties. confirmationItemList (list<PropertyUDR> - optional) The list of properties to be included in the confirmation chargeableItem as defined in SAP Convergent Charging ChargeableItem package definition. Note! If not present, the previous reservation item will be used for the confirmation. The confirmationItem can only redefine the modified properties. For more details on the casting, see the field definitions in the section above, ChargeUDR. consumptionDate (date) The date of the consumption event reservationItemList (list<PropertyUDR> - optional) The list of properties to be included in the new reservation chargeableItem as defined in SAP Convergent Charging ChargeableItem package definition Note! If not present, the previous reservation item will be used for the new reservation. The new reservation Item can only redefine the modified properties. For more details on the casting, see the field definitions in the section above, ChargeUDR . resultType (ResultTypeUDR  optional) This field can be used to pass over the default agent configuration. For more details on the possible values, see the field definition for resultType in the section above, ChargeUDR. serviceId (string) The serviceId part of the access object linked to the customer master data defined in SAP Convergent Charging sessionCleanupResultType (ResultTypeUDR  optional) This field can be used to pass over the default agent configuration. For more details on the possible values, see the field definitions in the section above, ChargeUDR. sessionId (string) The unique identifier of the session userId (string) The userId part of the access object linked to the customer master data defined in SAP Convergent Charging. SessionStopUDR This UDR is dedicated to stopping a session-based rating of one or multiple services on the SAP Convergent Charging Core server. Field Description applyTransactionFilter (boolean - optional) TRUE : Only the details of the price computation which are not filtered will be returned in the answer. FALSE : The full details of the price computation will be returned in the answer  this is the default value. consumptionDate (date) The date of the consumption event. The value must be a string representing a numerical value in the following format: 1, 0.1, 0.01, 0.001 etc. externalData (bytearray - optional) Optional external data that can be used when processing a Reservation Renewal Event. This data is not read nor changed by SAP Convergent Charging. resultType (ResultTypeUDR  optional) This field can be used to pass over the default agent configuration. For more details on the possible values, see the field definition for resultType in the section above, ChargeUDR. serviceId (string) The serviceId part of the access object linked to the customer master data defined in SAP Convergent Charging. services (list<ServiceSessionUDR>) A list of services to be charged in the session. The services may only contain Confirmation Items or have Cancellation set when a session is stopped. For more details on the possible values, see the field definitions in the section ServiceSessionUDR in Common SAP CC UDRs . sessionCleanupResultType (ResultTypeUDR  optional) This field could be used to pass over the default agent configuration. For more details on the possible values, see the field definitions in the section above, ChargeUDR . sessionId (string) The unique identifier of the session userId (string) The userId part of the access object linked to the customer master data defined in SAP Convergent Charging. StopSessionUDR This UDR is dedicated to stopping a session-based rating of one service on the SAP Convergent Charging Core server. Note! This UDR is deprecated with later versions of SAP Convergent Charging and is replaced by SessionStopUDR . Field Description applyTransactionFilter (boolean - optional) TRUE : Only the details of the price computation which are not filtered will be returned in the answer. FALSE : The full details of the price computation will be returned in the answer  this is the default value. chargeableItemName (string) The name of the ChargeableItem which corresponds to this usage as defined in SAP Convergent Charging. A ChargeableItem represents the information that the client needs to be sent to perform the charge process. It consists of a name and a list of properties. confirmationItemList (list<PropertyUDR> - optional) The list of properties to be included in the confirmation chargeableItem as defined in SAP Convergent Charging ChargeableItem package definition. Note! If not present, the previous reservation item will be used for the confirmation. The confirmationItem can only redefine the modified properties. For more details on the casting, see the field definitions in the section above, ChargeUDR. resultType (ResultTypeUDR  optional) This field can be used to pass over the default agent configuration. For more details on the possible values, see the field definition for resultType in the section above, ChargeUDR serviceId (string) The serviceId part of the access object linked to the customer master data defined in SAP Convergent Charging. sessionCleanupResultType (ResultTypeUDR  optional) This field can be used to pass over the default agent configuration. For more details on the possible values, see the field definitions in the section above, ChargeUDR sessionId (string) The unique identifier of the session SessionResolutionMode (ResolutionModeUDR) The session termination to apply to the session. The session can be either cancelled (cancel) or confirmed (confirm). userId (string) The userId part of the access object linked to the customer master data defined in SAP Convergent Charging

---

# Document 1226: LDAP Agent Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205000966
**Categories:** chunks_index.json

To open the LDAP collection agent configuration, click Build  New Configuration . Select Workflow from the Configurations dialog. When prompted to Select workflow type , select Realtime . Click Add agent and select LDAP in the Processing tab in the Agent Selection dialog. Double-click the agent icon or right-click the icon and select Edit agent , to display the Agent Configuration dialog. The LDAP agent configuration has three tabs: Connections , Advanced and Security . Connections Tab LDAP agent configuration - Connections tab The routing logic that you can select in the Connections tab applies to creating new connections. A connection pool is created towards the server nodes listed in the agent configuration. When the pool receives a new request and all of the already established connections are busy, then a new connection is established following the selected routing logic. You can choose between Round Robin and Failover. Setting Description Setting Description Routing Algorithms Settings RoundRobin If you choose Round Robin routing logic, the next server node from the list specified in the agent configuration is used to establish the connection. This is the default logic. Failover If you choose Failover routing logic, the primary server node is used to establish all the connections until the pool realizes that the server node is down. When it fails a second server is used, then the third, etc. Server Nodes Setting Host Enter the host name or IP address for the LDAP server node. Port Enter the port number for the LDAP server node. Note! If you use external references, you must provide hosts and ports in coma separated syntax: <host1>:<port1>,<host2>:<port2>. Advanced Tab LDAP agent configuration - Advanced tab Setting Description Setting Description Connection Settings Max Connections Enter the maximum number of concurrent connections permitted towards the LDAP servers. The default value is 2. Max Connection Age (ms) Enter the maximum amount of time in milliseconds that an LDAP connection can exist before closing it. The default value is 60000 milliseconds. Max Connection Wait Time (ms) Enter the maximum amount of time in milliseconds that you want the agent to wait for a connection to become available from the pool. The default value is 1000 milliseconds. If the maximum amount of time set is exceeded, an exception is thrown which is written to the pico log. No attempt is made to retry the operation. Connection Timeout (ms) Enter the connection timeout in milliseconds before assuming that the initial attempt to connect to the LDAP server is unsuccessful. The default value is 100 milliseconds. If the amount of time set is exceeded, an exception is thrown which is written to the pico log. Pending Answers Limit Enter the maximum number of operations that can be active per connection. When this limit is reached, the connection stops accepting new requests and waits for all of the answers to arrive and it is checked by the pool. The default value is 1000. Pool Check Interval (ms) Enter the time interval, in milliseconds, that you want to wait before checking the pool state after it has been marked as invalid. Invalid means no idle connections are available and all connections that are currently in use are invalid, or the pending answers limit has been exceeded for all of the connections. The default value is 2000 milliseconds. Operation Settings Number of Retries Enter the maximum number of retries permitted for an unsuccessful operation. The default value is 0. To enable retries you must select a value of 1 or more. Retry Interval (ms) Enter the time interval, in milliseconds, that you want to wait before retrying an unsuccessful operation. The default and maximum value is 1000 milliseconds. If the server is overloaded, the delay interval doubles for each retry until the maximum value of 1000 milliseconds is reached. Max Throughput (Ops/sec) Enter the maximum number of operations per second sent to be sent to the LDAP server. If you enter the value of 0, the number of operations per second is unlimited. Operation Timeout (ms) Enter the maximum amount of time in milliseconds permitted after sending a request to the LDAP server without receiving a response, before the request times out. The default value is 5000 milliseconds. If the maximum amount of time set is exceeded, an exception is thrown which is written to the pico log. If you have entered a value for the Number of Retries option, the operation request will be sent again. Otherwise, the operation request will be ignored. Enable Request ID If you want to be able to abandon an operation, you must select this check box. An identifier embedded in an LdapRequestIDUDR is sent by the agent, for every operation request, except abandon. For further information on LDAP Agent UDRs, see LDAP Agent UDRs . Security Tab LDAP agent configuration - Security tab Setting Description Setting Description Security Principal You can enter a security principal to use to bind to the LDAP server. If this field and the Security Credentials field are not populated, the LDAP server is connected to without authentication. Security Credentials You can enter the security credentials for the specified security principal. If this field and the Security Principal field are not populated, the LDAP server is connected to without authentication. Enable TLS Select this check box if you want to enable TLS security. If you select this check box, the Keystore and Keystore Password fields are available. If you enable this check box and leave the Keystore and/or Keystore Password fields empty, a TLS connection is created without a certificate. Keystore Enter the full path to the keystore file that you want to use. The keystore file must be in . jks format. This field is optional. If you leave this field empty, a TLS connection is created without a certificate. Keystore Password Enter the password for the selected keystore file. This field is optional. If you leave this field empty, a TLS connection is created without a certificate. The following command can be used to create a keystore with the Java keytool program: $ keytool -keystore clientkeystore -genkey -alias client Keytool prompts for required information such as identity details and password. Note that the keystore password must be the same as the key password.

---

# Document 1227: Amazon SQS Forwarding Agent Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/299663569/Amazon+SQS+Forwarding+Agent+Configuration
**Categories:** chunks_index.json

You can open the SQS Forwarding Agent configuration dialog from a workflow configuration. Click Build  New Configuration . Select Workflow from the Configurations dialog. Select the workflow type, then click Add Agent , and select SQS Forwarding from the Processing tab of the Agent Selection dialog. Setting Description Setting Description AWS Profile The connection details to AWS as configured in the Amazon Profile UI.

---

# Document 1228: Multithreading - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204997440
**Categories:** chunks_index.json

Multithreading enables a workflow to operate on more than one UDR at a time. By default, while a batch workflow handles one active thread at a time, a real-time workflow always executes multithreaded. A workflow that is configured to multithreading can only handle data of the UDR type amongst agents that are configured with a thread buffer. Otherwise, during the same period of time, other data types can be processed anywhere else within the workflow. By using asynchronous agents in a workflow that is configured with multithreading, you increase the workflow multithreading capabilities even further. Threads in a Real-Time Workflow In real-time workflows, the collecting agent continuously stores UDRs in a buffer at the beginning of a workflow. UDRs are processed concurrently, and the processing order cannot be guaranteed. This way, an agent might handle as many UDRs as the number of configured threads, simultaneously. Open Real-time workflow multithreading Note! Agents that route bytearray data in a real-time workflow do not use a buffer. Threads in a Batch Workflow To apply multithreading in a batch workflow, a UDR storage buffer has to be configured ahead of an agent with Thread Buffer support. A delivering thread stores a UDR in the buffer and then fetches the next UDR in turn. A processing thread pulls a UDR from the buffer, forwards it to the agent, and then pulls the next UDR in turn. This way, when you add another buffer to the next agent, you also add another thread to the workflow. Batch workflow multithreading - A buffer adds a thread To configure a batch workflow agent with multithreading, use the Thread Buffer tab of the agent configuration. See Thread Buffer Tab in Workflow Template . Thread Buffers The order of processing UDRs is not guaranteed if thread buffers are used when sharing MIM variables between agents!

---

# Document 1229: Software Environment - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204613040
**Categories:** chunks_index.json

This section describes environment variables that are used and the directories and files that are created at installation. Depending on the type of installation (Platform or Execution Container), there may be less directories and files than listed here. Environment Variables The following environment variables are set in MZ_HOME/bin/mzsh after installation. Variable Description JAVA_HOME This environment variable specifies where the JDK is installed. Example value: /opt/jdk/jdk-17.0.2 MZ_CONTAINER This environment variable specifies the container name. Example value: container1 MZ_CONTAINER_TYPE This environment variable specifies the container type. It is typically not changed. Example value: platform MZ_PLATFORM This property specifies a URL, which contains the IP address or hostname of the Platform Container and the Web Interface port. When you have entered a hostname and failover occurs, the hostname is retrieved from the DNS enabling reconnection. If you have entered a static IP address as the value of this property reconnection issues may occur if the IP address changes. The port must be unique for each MediationZone system. Example value: http://localhost:9000 MZ_HOME This is the directory where the Platform Container or Execution Container container is installed. Example value: /opt/mz/container1 You can view and set these environment variables by using the mzsh command topo env. For further information, see topo . You may also override these properties in the shell. MZ_HOME Directory Structure MZ_HOME refers to the installation path of the Platform Container, Execution Container. You must set MZ_HOME as an environment variable on your system. For further information about how to set this path, see the Installation Instructions . The directories that are created in MZ_HOME after a default installation of a Platform Container are described below. When you install an Execution Container, a subset of these directories are created. The owner of the files and directories in MZ_HOME is referred to as mzadmin throughout this document. Directory Description Directory Description MZ_HOME/3pp This directory is used for storing files required by third-party software, e g database drivers. MZ_HOME/backup This directory contains the backup files produced when performing a System Backup task or a System Import , see the Desktop User's Guide for further information about these operations. The directory will be created when the first backup is made. MZ_HOME/bin This directory contains the commandline tool, mzsh. You can use the the command line tool to interact with MediationZone and perform system related tasks such as shutdown, startup, imports and exports of configurations, etc. Some Desktop related tasks, such as starting and stopping workflows, are also possible to perform with the commandline tool. Use the command line tool to start different parts of the system, such as the Platform or an Execution Context. These entities are running in their own Java Virtual Machines and are referred to as Pico processes. Every pico process has its own definition in STR. For further information about STR, see System Topology Registry For further information about the command line tool, see Command Line Tool User's Guide . MZ_HOME/codeserver This directory contains all the mzp packages in your installation, as well as any Jar files generated from your APL and Ultra configurations. Note! The contents of this directory should not be modified. MZ_HOME/common The lib subdirectory contains common libraries that are used by the system. This directory should not be modified. The services subdirectory contains service definitions. This directory should not be modified. The config subdirectory contains the STR data. Note! In an Execution Container, any local changes to the files in this directory are overwritten when the Platform is restarted. MZ_HOME/data This directory contains: Configuration data, e g agents, profiles and workflows, associated with each deployment User and access group data MZ_HOME/desktop This directory contains binaries for the Legacy Desktop and the Desktop Launcher. MZ_HOME/documentation This directory contains the documentation in PDF format. MZ_HOME/etc This directory contains the following files: ESAPI.properties - This file is used by the esapi security 3pp. This file should not be modified. mz.license - This file is the MediationZone installation license file. mz_trap_mib.txt - This file is the MIB definition file that is used by the SNMP trap utility. validation.properties - This file is used by the ESAPI Security 3pp. This file should not be modified. MZ_HOME/ha This directory contains a Jar file, which in turn contains scripts used for high availability installations. For further information, see chapter High Availability Setup . MZ_HOME/lib This directory contains the code that is necessary for the non-pico started servers and that is not loaded from the code server, as well as third party code. The pico-started servers, e g the Desktop and the ECs, executable code will never be fetched from this directory during runtime. The code is instead fetched from the pico cache. The exceptions are the Code Server and pico-start utility, picostart.jar , which will obtain their code from this directory. MZ_HOME/log This directory contains various logs. If the operating system on the machine where the installation is made provides so-called job control, this directory will contain process identification files (with extension * .pid ). With mzsh , these may be used in order to identify all processes related to the system execution. MZ_HOME/mzdb If Derby is used, this directory is the default location of the the database instance(s). MZ_HOME/pico-cache This directory is used by pico processes for caching. MZ_HOME/scripts This directory contains user-called scripts and script templates. MZ_HOME/storage This directory is the root directory for storage used by the Platform and services. Under the storage directory, the system creates sub-directories as required, which correspond to the services configured in the system. MZ_HOME/tmp This is a directory that is used for temporary storage by various subsystems. MZ_HOME/upgrade_history When upgrading or downgrading using setup.sh script, the resulting mzp packages of the plist that is made during upgrade/downgrade will be stored in subdirectories to this directory where each version will have its own subdirectory. Packages for old version when running an upgrade will be stored in: $MZ_HOME/upgrade_history/<old version>/plist Packages for new version when running a downgrade will be stored in: $MZ_HOME/upgrade_history/<new version>/plist MZ_HOME/web This directory contains resources for the user documentation. MZ_HOME/webapps This directory contains third-party software that is required to navigate the user documentation. MZ_HOME/webroot This directory contains resources for web applications. MZ_HOME/wi This directory contains resources for the Web Interface.

---

# Document 1230: SFTP Forwarding Agent Transaction Behavior - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204643085/SFTP+Forwarding+Agent+Transaction+Behavior
**Categories:** chunks_index.json

This section includes information about the SFTP forwarding agent transaction behavior. For information about the general transaction behavior, see Transactions in Workflow Monitor . Emits This agent does not emit anything. Retrieves The agent retrieves commands from other agents and based on them generates a state change of the file currently processed. Command Description Begin Batch When a Begin Batch message is received, the temporary directory DR_TMP_DIR is first created in the target directory, if not already created. Then, a target file is created and opened in the temporary directory. End Batch When an End Batch message is received, the target file in DR_TMP_DIR is closed and, finally, the file is moved from the temporary directory to the target directory. If backlog functionality is enabled, an additional step is taken where the file is moved from DR_TMP_DIR to DR_POSTPONED_MOVE_DIR and then to the target directory. If the last step failed, the file will be left in DR_POSTPONED_MOVE_DIR and marked as backlogged. Cancel Batch If a Cancel Batch message is received, the target file is removed from the DR_TMP_DIR directory.

---

# Document 1231: PCC Installation Instructions - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205029812
**Categories:** chunks_index.json

Search this document: Chapters The following chapters are included: Architecture Overview PCC System Requirements PCC Installation Overview PCC Installation of Control Zone and Execution Zone for PCC Installation of the Data Repository for PCC High Availability in PCC This document describes the installation procedure for the Policy and Charging Control solution for 3GPP and non-3GPP environments. The installation procedure comprises two steps, see Installation Overview PCC for further information. Terms and Acronyms This section contains glossaries for all terms and acronyms used throughout the PCC and MediationZone documentation. PCC Terms and Acronyms Term/Acronym Definition Term/Acronym Definition PCC Policy and Charging Control PCRF Policy and Charging Rules Function 3GPP 3rd Generation Partnership Project General Terms and Acronyms For information about general Terms and Acronyms used in this document, see the Terminology document.

---

# Document 1232: ECS Collection Agent Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204999973
**Categories:** chunks_index.json

To open the ECS collection agent configuration, click Build  New Configuration . Select Workflow from the Configurations dialog. When prompted to Select workflow type , select Batch . Click Add agent and select Ecs from the Agent Selection dialog. Double-click the agent icon or right-click the icon and select Edit agent , to display the Agent Configuration dialog. You either collect data from a Reprocessing Group that has been defined in the ECS Inspector or from a Saved Filter defined in the ECS Inspector. The settings in the configuration dialog depends on which option you choose. Note! The default directory, used to store UDRs and batches routed to the ECS, is $MZ_HOME/ecs . Open ECS collection configuration dialog Setting Description Setting Description Reprocessing Group Select this checkbox to collect data from a predefined Reprocessing Group . The groups in the Reprocessing Group list are suffixed with their type - batch or UDR. Reprocessing groups are defined in the ECS Inspector. Collected UDRs or batches are automatically marked as Reprocessed . Reprocessed data can be collected again, if the state is manually changed back to New in the ECS Inspector. Saved Filter (Read Only) Select this checkbox to collect data defined by a filter saved in the Search ECS dialog in the ECS Inspector. This option can only be used for UDRs. In order for UDRs to be collectible, they must match the search criteria in the selected filter. Collection Size This field is enabled when a UDR Reprocessing Group is selected. The value defines how many UDRs to collect before the ECS collection agent finishes the current batch and starts a new one. The valid range is 1,000 to 100,000 UDRs. A higher value requires more memory and can have an impact on performance. SQL Bulk Size To improve performance, data records are retrieved in bulk. The SQL Bulk Size value specifies how many records are included in each bulk. The valid range is 1 to 1000, with a default value of 20. Routed Types A group of UDRs can consist of several format types. Select Add to display the UDR Internal Format Browser. Select the type or types to collect. Any UDRs in the Reprocessing Group that do not match the selected types are ignored.

---

# Document 1233: System Requirements - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204736060/System+Requirements
**Categories:** chunks_index.json

The MediationZone system is divided into three different zones: The Control Zone, which includes the Platform and the database, the Execution Zone, which contains the host(s) responsible for executing and supervising workflows, and the Access Zone, which contains the MediationZone Desktop user interface, the Web Interfaces, and the Command Line Tool interface. The minimum MediationZone system installation comprises a single Platform container. The Platform and any other available pico processes such as Execution Contexts, Service Contexts, and Desktops may run in the Platform container. To scale out the system, you may install additional Execution Containers for your ECs, and SCs. Other Platform Containers may exist in a system, for high availability, but only one can be active at a time. Many operations in MediationZone can be performed via the Command Line Tool or the Web Interface. However, some operations can only be performed from the Desktop user interface installed as a local Windows. The Web Interface and Command Line Tool are automatically installed with the Platform Containers and Executions Containers. The MediationZone Platform container host needs to have the Java Development Kit installed before the installation. The Java Runtime Environment is sufficient for Desktops and Execution Containers. Network It is common that the MediationZone hosts are protected by one or more firewalls. For the communication between the various components of the system to work, you may need to update your firewall settings. For further information, about firewall settings, see https://infozone.atlassian.net/wiki/x/vyc0D in the https://infozone.atlassian.net/wiki/x/W4BED . Deployment on Hyperscalers MediationZone supports being deployed on hyper-scalers considered that the supported system requirements are met. Operating System Java For OpenJDK binaries, ensure that it is Java Technology Compatibility Kit (TCK) certified to comply with Java SE standards. Please refer to the link below for details. https://openjdk.org/groups/conformance/JckAccess/jck-access.html Platform Databases Other Third Party Software Web Browsers for Desktop Legacy Desktop and Desktop Launcher

---

# Document 1234: FTP EWSD Agent - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205033157
**Categories:** chunks_index.json

This section describes the FTP/EWSD agent. This is a collection agent for batch workflow configurations. Prerequisites The reader of this information should be familiar with: The Siemens SAMAR OneFileView file handling Standard FTP (RFC 959, http://www.ietf.org/rfc/rfc0959.txt The FTP/EWSD agent enables collection of cyclic files from Siemens EWSD switches into the workflow, by using the FTP protocol. When the workflow is activated, the FTP/EWSD agent connects to the configured FTP service and requests information about the cyclic file by using the LIST FTP command. The switch returns information about the cyclic file. The agent compares the returned information field values COPY-DATA-BEGIN and LAST-RELEASE with its internal state. If LAST-RELEASE has the same value that the agent holds, the agent deletes the cyclic file with the FTP delete command DELE , and thereby releases the currently established copy space. The agent then retrieves the file contents with RETR and inserts it into the workflow. The RETR command establishes a new copy space. When all the data is successfully collected into the workflow, the agent generates another LIST command in order to retrieve the value of COPY-DATA-BEGIN and of LAST-RELEASE . The agent saves these values and then generates the DELE command to release the space of the collected data. Multiple File View Option In the Multiple File View mode, the cyclic file is sliced into sections (slices). By checking Automatic Seq No Assignment you enable the agent to automatically set these sequence numbers. The agent connects to the configured FTP service and searches from the ACTIVE file slice, backwards, to the oldest file slice in the FILLED state. The agent then collects all the file slices, from the oldest to the most recent file slice. Note! When collection is complete, release all the file slices and continue to collect the currently ACTIVE file slice. The section contains the following subsections: FTP EWSD Transaction Behavior FTP EWSD Configuration FTP EWSD Input/Output Data and MIM FTP EWSD Events

---

# Document 1235: Manipulating The Data In Reference Data Management - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204743480/Manipulating+The+Data+In+Reference+Data+Management
**Categories:** chunks_index.json

Subject to user permission settings that is configured via the Reference Data Profile and Access Controller, Reference Data Management allows you to manipulate the data within the query result of your table. You can insert one or more new rows, edit one or more fields in the data. You can even remove rows of records from the result. Any insert, edit or delete action applied to the data set will cause the modification status bar to appear. The modification status bar will display the total uncommitted modification count and a Review button to open the Review Modification(s) dialog. The Review Modification(s) dialog allows you to review, discard or commit the modifications. On commit, the Reference Data Management will attempt to commit the changes into the database table and refresh the query result with the latest changes. Note! Data set is the scope in which modifications are applied. When switching data set, any uncommitted changes will be discarded. Any uncommitted changes will also be discarded when changing the query configurations or leaving Reference Data Management page. Note! Manipulating the data is only applicable if the Standard Search Type is selected in the Query dialog. Refer to Querying A Table In Reference Data Management for more information. 1 Inserting rows 2 Editing the fields 3 Removing rows Inserting rows To insert your rows into the table: Click on Insert Row button in the query result view of the Reference Data Management dashboard. The Insert Row button is enabled once you have successfully queried a result. The Insert Row dialog will pop up. Input fields will be created for each column for you to fill in all relevant data into. Be fully aware of the data type for each of these columns and fill them in accordingly as any mismatch data type will cause an error when you commit the rows into the table. Once you are done filling in the fields, click on Apply to complete the action and close the dialog. Open To add additional rows, just click on Add another row and fill in the data for the new row. Once you have completed filing in all the rows you want to insert, click on Apply to complete the action and close the dialog. Note! Only columns with supported data types are available in the Insert Row dialog. All supported columns in the table will be present in the Insert Row dialog, even if you did not choose to display all of them in your query result. Note! While in the Insert Row dialog, any columns on the table that are set to NOT NULL will have their fields highlighted in red when empty. If you have set a character limit for the data in the columns, the fields in the Insert Row dialog will also have the same limit. The new row(s) are now ready for review. Click on the Review button to open the Review Modification(s) dialog. There will be a green INS label on the query result view to indicate that the row is under review and has yet to be committed into the table. Open In the Review Modification(s) dialog, you can review the row(s) that you have added and check for any mistakes. Open If the row contains a mistake, you can discard that row from the Review Modification(s) dialog and insert it again with the correct data. Once everything is reviewed and is correct, you may click on Commit . A confirmation dialog will appear prompting you to continue or to cancel. On success, you will see a green notification on the top of your browser that will show you how many data changes have been successfully committed. You can then download the SQL script used for inserting the row(s) or you can also click on Details to view details of the commit. Once you are done, you may close the notification. Open On any failure during the commit, you will see a red notification on the top of the your browser and no rows will be inserted. Open You can download the SQL script or click on details to see more details on the error. Open You can click on Force Commit to attempt to insert some of the row(s) into the table. Editing the fields You can only edit one row at a time from the query result view. To edit row(s) in the table: Click on the meatball menu button on the row you want to edit the value of and select Edit to open the Edit dialog. Open Input fields will be created for each column and current values for the fields will be filled in. Update the value(s) of the field(s) you wish to change. Once you have edited enough, click on Apply to complete the action and close the dialog. Note! Only columns with supported data types are available in the Edit dialog. All supported columns in the table will be present in the Edit dialog, even if you did not choose to display all of them in your query result. Note! While in the Edit dialog, any columns on the table that are set to NOT NULL will have their fields highlighted in red when empty. If you have set a character limit for the data in the columns, the fields in the Edit dialog will also have the same limit. Open The updated row(s) are now ready for review. Click on the Review button to open the Review Modification(s) dialog. There will be a blue UPD label on the query result view to indicate that the row is under review and the edit is yet to be committed into the table. Open In the Review Modification(s) dialog, you can review the row(s) that you have edited and check for any mistakes. Open If the row contains a mistake, you can discard that row itself from the Review Modification(s) dialog and edit it again with the correct data. Once everything is reviewed and is correct, you may click on Commit . A confirmation dialog will appear prompting you to continue or to cancel. On success, you will see a green notification on the top of your browser that will show you how many data changes have been successfully committed. You can then download the SQL script used for altering the row(s) or you can also click on Details to view details of the commit. Once you are done, you may close the notification. On any failure during the commit, you will see a red notification on the top of the your browser and no rows will be altered. You can download the SQL script or click on details to see more details on the error. You can click on Force Commit to attempt to edit some of the row(s) in the table. Removing rows To remove rows from the table: There are 3 ways to remove rows. You can select only one row, multiple rows or remove all of the rows in the data set. To remove one row: Click on the meatball menu button on the row you want to remove and select Delete . Open To remove multiple rows: Select multiple rows to remove at one time by clicking on the check box at the left of each row. Then click on the Delete button on the table toolbar. Note! Due to the lazy loading feature, selected rows will be cleared if scrolled too fast or too far away from the selected row(s). It is estimated that the table is able to handle selection within a window of 150 rows with moderate scrolling speed. Open To remove all rows in the data set: Click on the Delete button on the table toolbar without selecting any rows. Open A confirmation dialog will appear and you can click on Ok to mark the row(s) for removal or Cancel to stop the operation. You will still need to review the removal before it gets completely deleted from the table. The marked row(s) are now ready for review. Click on the Review button to open the Review Modification(s) dialog. There will be a red DEL label on the query result view to indicate that the row is under review and the removal is yet to be committed into the table. Open In the Review Modification(s) dialog, you can review the row(s) that you have marked for removal and check for any mistakes. In case there are also new rows that are being inserted or rows being updated included in the review, information for rows marked for deletion can be found with a red background. Open If the marked row is not what you want removed, you can discard it from the Review Modification(s) dialog and it will no longer be marked for removal. Once everything is reviewed and is correct, you may click on Commit . A confirmation dialog will appear prompting you to continue or to cancel. On success, you will see a green notification on the top of your browser that will show you how many data changes have been successfully committed. You can then download the SQL script used for dropping the row(s) or you can also click on Details to view details of the commit. Once you are done, you may close the notification. On any failure during the commit, you will see a red notification on the top of the your browser and no rows will be dropped. You can download the SQL script or click on details to see more details on the error. You can click on Force Commit to attempt to delete some of the row(s) in the table.

---

# Document 1236: Authorization Server Properties - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204648132/Authorization+Server+Properties
**Categories:** chunks_index.json

This section describes the different properties that are being used in the Authorization Server. These properties are divided into several blocks with each block corresponding to a particular element of the Authorization Server. The following is an example of parameters that have been configured accordingly to the requirements. enabled=true # -------------------------------------------------------------------------------- # Storage Properties # -------------------------------------------------------------------------------- # Only used when storage type is "database". PostgreSQL or Oracle DB only storage.database.profile-name=<Path.DBProfileName> storage.database.poolsize=8 # Only used when storage type is "file-based" storage.file-based.storage-location=/Users/limyizhan/Workspace/mz9/mz-drx/mediationzone/storage/oauth2.storage # The storage type can be either "file-based" or "database" storage.type=file-based # -------------------------------------------------------------------------------- # Server Properties # -------------------------------------------------------------------------------- # Validity period in seconds for access token generated server.access-token-expiry=1800 # -------------------------------------------------------------------------------- # Management Api Properties # -------------------------------------------------------------------------------- management-api.enable-basic-auth=true # HTTP Basic Authentication Password management-api.password=DR-4-6912EB66E4E5FDF6035DBF848195669A # HTTP Basic Authentication Username management-api.username=mzadmin # -------------------------------------------------------------------------------- # JSON Web Token (JWT) Properties # -------------------------------------------------------------------------------- jwt.key-id=selfsigned jwt.key-password=DR-4-6912EB66E4E5FDF6035DBF848195669A jwt.keystore-location=/Users/limyizhan/Downloads/keystore_server.jks jwt.keystore-password=DR-4-6912EB66E4E5FDF6035DBF848195669A # Only RS256, RS384 and RS512 are supported jwt.signature-algorithm=RS256 Storage The OAuth2 Service stores provisioned scopes and registered clients into memory or persistent storage. The storage configuration is used to determine where the data should be stored. For Database type storage, see Authorization Server Storage Database Schema for details on creating the table for Authorization Server. Parameter Name Description Parameter Name Description type Type of storage to be used. The value can be one of the following: file-based (Default) - The data will be stored in a file-based storage. database - The data will be stored in a database. Note! Only PostgreSQL and Oracle database are currently supported. file-based.storage-location Location of the file-based storage. Will be created if not found. Only used when storage type is set to "file-based" Note! For fresh installs, the last path in the location should be non-existent as the Authorization server will create it automatically. database.profile-name The Database Profile Name in MZ to be used. Only used when storage type is set to "database". The value of the profile name should include the directory name as shown in the desktop UI. Example - Database Profile Name storage { database { profile-name="REST.PRF_DB" } type="database" } database.poolsize The size of the connection pool, representing the number of database connections that are kept open and ready for use. Only used when storage type is set to "database". Server The server configuration for the OAuth2 Service that will determine where the access token endpoint will be hosted on and the access token expiry. Parameter Name Description Parameter Name Description access-token-expiry Validity period in seconds for access token generated. Management API The Management API is used to provision scopes and register clients via HTTP. Clients need to be registered before any access token can be requested. The Management API configuration is used to configure the base endpoint in the Authorization Server that will be used to host the Management API. For more information on the function of Management API, see Management API . Parameter Name Description Parameter Name Description enable-basic-auth Enables the HTTP Basic Authentication for Management API. Note! It is recommended to have enable-basic-auth set to true. This is so the list of clients and scope will not be accessible to anyone without the proper credentials mentioned below. username Username for HTTP Basic Authentication (if enabled). password Password for HTTP Basic Authentication (if enabled). Must be encrypted using "mzsh encryptpassword" command. JWT The Authorization Server generates the JSON Web Token (JWT) and requires the JWT to be digitally signed. Currently, only the RSA private/public key pair signing method is supported. The JWT block is used to configure the keystore and the RSA private/public key pair details. Parameter Name Description Parameter Name Description keystore-location Path to the keystore where the RSA private/public key pair used for JWT is stored. Only Java KeyStore (JKS) format is supported. keystore-password Password of the keystore. Must be encrypted using mzsh encryptpassword command. key-id Alias of the RSA private/public key pair used for JWT. key-password Password of the RSA private/public key pair used for JWT. signature-algorithm Signature algorithm to be used for JWT signing. Only RS256, RS384 and RS512 are supported.

---

# Document 1237: wfgroupaddwf - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204612640/wfgroupaddwf
**Categories:** chunks_index.json

usage: wfgroupaddwf <workflow group name> <pattern match expression for workflow names> This command adds one or more workflows to an existing workflow group. With this command you compare a single pattern match expression, or several, with the full workflow group name, <folder>.<workflowconfigurationname>.<workflowname> , of all the workflows. For further information about pattern match expressions see Textual Pattern Matches . A workflow that is already a member of the workflow group is skipped by the command. Return Codes Listed below are the different return codes for the wfgroupaddwf command: Code Description 0 Will be returned if the command was successful. 1 Will be returned if the number of arguments is incorrect. 2 Will be returned if the group is not found. 3 Will be returned if the workflow(s) cannot be found. 4 Will be returned if there is no connection to Mgmt_Utils. 5 Will be returned if the group is locked. 6 Will be returned if the updating of group data failed. 7 Will be returned if the workflow type is not supported. 8 Will be returned if the configuration lock could not be released.

---

# Document 1238: Execution Container Installation - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204996848/Execution+Container+Installation
**Categories:** chunks_index.json

This chapter describes how to prepare and install an Execution Container. Note! You need to make a Platform Container Installation prior to this Execution Container Installation . The preparations and installation are done in three steps: General Preparations which include configuration of the software environment and setting values for predefined parameters that may vary between installations. For further information, see General Preparations Execution Context . Software installation. For further information, see Execution Container Software Installation . This chapter includes the following sections: General Preparations Execution Context Execution Container Software Installation

---

# Document 1239: Diameter Functions - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205656833/Diameter+Functions
**Categories:** chunks_index.json

The functions described below are used for setting the value of the Diameter AVP Origin-State-Id. The Diameter Stack agent has a corresponding MIM value named Origin State Id MIM value. For further information about the MIM values, see Diameter Stack Agent Input/Output Data and MIM in the Desktop User's Guide. The following functions for Diameter described here are: diameterSetOriginStateId The diameterSetOriginStateId function sets the value for the Origin State Id. This can be called in the initialize block to replace the default initialization value. diameterSetOriginStateId ( string DiameterStackName, int newValue ) Parameter Description DiameterStackName The name of the Diameter Stack agent for which you want to set the Origin State Id. newValue The new value that you want to set instead of the default initialization value. diameterIncrementOriginStateId The diameterIncrementOriginStateId function increments the value for the Origin State Id . diameterIncrementOriginStateId ( string DiameterStackName ) Parameter Description DiameterStackName The name of the Diameter Stack agent for which you want the Origin State Id to be incremented. diameterGetOriginStateId The diameterGetOriginStateID function gives the same value as accessing the MIM value. diameterGetOriginStateId ( string DiameterStackName ) Parameter Description DiameterStackName The name of the Diameter Stack agent for which you want to get the Origin State Id .

---

# Document 1240: REST Server_Deprecated Agent Input/Output Data and MIM - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205686830/REST+Server_Deprecated+Agent+Input+Output+Data+and+MIM
**Categories:** chunks_index.json

Input/Output Data The Input/Output data is the type of data an agent expects and delivers. The REST Server_Deprecated agent receives and produces Cycle (REST) types. MIM For information about the MIM and a list of the general MIM parameters, see Administration and Management in Legacy Desktop . Publishes MIM Value Description MIM Value Description Discarded REST UDRs This MIM parameter contains the number of discarded Cycle UDRs due to errors. Discarded Rest UDRs is of the long type and is defined as a global MIM context type. Error Response Sent This MIM parameter contains the error number sent back to the REST Client_Deprecated. Error Response Sent is of the long type and is defined as a global MIM context type. HTTP Method Requests Received This MIM parameter contains a map of the HTTP methods that were received from the REST Client_Deprecated request. HTTP Method Requests Received is of the map<string,long> type and is defined as a global MIM context type. Outstanding Requests This MIM parameter contains the number of outstanding requests that the agent is handling. The value of this MIM parameter is reset when the workflow is started. Outstanding Requests is of the long type and is defined as a global MIM context type. <Route> Queue Full Count This MIM parameter contains the amount of Cycle UDRs left in the queue in the route out of the REST Server_Deprecated agent. <Route> Queue Full Count is of the long type and is defined as a global MIM context type <Route> Queue Size This MIM parameter contains the queue size of the Cycle UDRs in the route out of the REST Server_Deprecated agent. <Route> Queue Size is of the long type and is defined as a global MIM context type <Route> UDRs This MIM parameter contains the amount of Cycle UDRs that were routed out of the REST Server_Deprecated agent. <Route> UDRs is of the long type and is defined as a global MIM context type Requests Received This MIM parameter contains the amount of requests the REST Server_Deprecated agent has received throughout its execution. Requests Received is of the long type and is defined as a global MIM context type Response Sent This MIM parameter contains the amount of responses the REST Server_Deprecated agent has sent back to clients throughout its execution. Response Sent is of the long type and is defined as a global MIM context type Timeout Requests This MIM parameter contains the number of timeout errors that have occurred. Timeout Requests is of the long type and is defined as a global MIM context type. Accesses The agent does not access any MIM parameters.

---

# Document 1241: SAP HANA Connection - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204604247/SAP+HANA+Connection
**Categories:** chunks_index.json

Using SAP HANA as a platform database requires some SAP HANA 3PPs that are not bundled. Note! The latest tested version of JDBC version (ngdbc) is 2.14.9. The following steps are applicable when using an SAP HANA database. Download the SAP HANA JDBC driver. SAP Development Tools Store the JDBC driver in a directory that is available on the Platform Container host, such as mz.3pp.dir . For more information, see 3pp Properties .

---

# Document 1242: Data Masking Agent Input/Output Data and MIM - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204640456/Data+Masking+Agent+Input+Output+Data+and+MIM
**Categories:** chunks_index.json

Input/Output Data The input/output data is the type of data that an agent expects to receive and delivers. The agent expects UDRs of the type configured in the agent. and it can deliver UDRs of the type configured in the agent, or type: LookupFailure See Data Masking UDRs for further information. MIM The Data Masking agent does not have any agent specific MIM parameters. For information about the MIM and a list of the general MIM parameters, see Administration and Management in Legacy Desktop .

---

# Document 1243: Killing a Spark Application - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204742895/Killing+a+Spark+Application
**Categories:** chunks_index.json



---
**End of Part 52** - Continue to next part for more content.
