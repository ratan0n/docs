# RATANON/MZ93-DOCUMENTATION - Part 60/112

---
**Dataset:** ratanon/mz93-documentation
**Part:** 60 of 112
**GitHub:** https://github.com/ratan0n/docs/tree/main/mz93-documentation
**Size:** ~63.7 KB
---

When configuring notifications with Notification Type Log File, you have the option to use External References for configuring Directory, Filename and Size, see Log File in Event Notifications Configuration . Whenever a notification with notification type log file, that uses external references, is generated, the System External Reference event is triggered. Filtering In the Event Setup tab, the values for all the event fields are set by default to All in the Match Value(s) column, which will generate event notifications every time data a System External Reference event occurs. Double-click on the field to open the Match Values dialog where you can click on the Add button to add which values you want to filter on. If there are specific values available, these will appear in a drop-down list. Alternatively, you can enter a hard coded string or a regular expression. The following fields are available for filtering of System External Reference events in the Event Setup tab: Fields inherited from the Base event The following fields are inherited from the Base event, and described in more detail in Base Event : category - If you have configured any Event Categories, you can select to only generate notifications for System External Reference events with the selected categories. See Event Category for further information about Event Categories. contents - The contents field contains a hard coded string with event specific information. If you want to use this field for filtering you can enter a part of the contents as a hard coded string. eventName - This field can be used to specify which event types you want to generate notifications for. This may be useful if you have configured notifications for several different events with notification type log file, that uses external references, and you only want notifications to be generated for a specific event type. origin - If you only want to generate notifications for events that are issued from certain Execution Contexts, you can specify the IP addresses of these Execution Contexts in this field. receiveTimeStamp - This field contains the date and time for when the event was inserted into the Platform database. If you want to use timeStamp for filtering, it may be a good idea to enter a regular expression, for example, "2012-06.*" for catching all events from 1st of June, 2012, to 30th of June, 2012. severity - With this field you can determine to only generate notifications for events with a certain severity; Information, Warning, Error or Disaster. timeStamp This field contains the date and time for when the Execution Context generated the event. If you want to use timeStamp for filtering, it may be a good idea to enter a regular expression, for example, "2012-06-15 09:.*" for catching all events from 9:00 to 9:59 on the 15th of June, 2012. Note! The values of these fields may also be included in the notifications according to your configurations in the Notifier Setup tab.

---

# Document 1412: Charging Answer UDRs - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204642846
**Categories:** chunks_index.json

PurchaseOrderUDR This UDR represents the charging answer which could be received from the SAP Convergent Charging Core server in response to a ChargeUDR , a BlankChargeUDR or an EstimateChargeUDR . Field Description Field Description allNotifications (list<NotificationUDR>) Usually, the Notifications are enclosed in the transactions. This list offers a shortcut to the generated Notification independently of the transaction. For further information, see Notification UDRs . chargingResults (list<ChargingResultUDR>) A list of charging results that contain details about the charging operation. For further information, refer to the section below, ChargingResultUDR. currency (string) The currency value respects the SAP Convergent Charging Currency.getAlphaCode() format. For example: EUR , or USD moneyAmount (string) A string representation of the charged amount. The moneyAmount value respects the SAP Convergent Charging Money.toString() . format. For example: EUR 12.15 , or USD 0.123456 status (OrderStateUDR) FREE PAID transactionList (list<TransactionUDR>) Depending on the ResultType defined on the Request, it will contain the generated transaction (i.e. the detail generated by the pricing logic). For further information, see Common SAP CC UDRs . snapshotId (int) The snapshot identifier used to rate event CheckLimitResultUDR This UDR represents the charging answer which could be received from the SAP Convergent Charging Core server in response to a CheckLimitUDR . Field Description Field Description allNotifications (list<NotificactionUDR>) Usually, the Notifications are enclosed in the transactions. This list offers a shortcut to the generated Notification independently of the transaction. For further information, see Notification UDRs . iterations (int) Represents the number of iterations, necessary to get the result limit (string) The limit maxLimitReached (boolean) Is true if the limit is the maximum, otherwise false . The maximum corresponds to the propertyToInverse value set in the chargeableItem passed in the request. precision (string) The precision of the request propertyToInverse (string) The property to inverse transactionList (list<TransactionUDR>) Depending on the ResultType defined on the Request, it will contain the generated transaction (i.e. the detail generated by the pricing logic). For further information, see Common SAP CC UDRs . SessionResultUDR This UDR represents the charging answer which could be received from the SAP Convergent Charging Core server in response to a SessionStartUDR , SessionUpdateUDR , SessionStopUDR . Field Description Field Description accumulatedAmount (list <MoneyUDR>) Contains the accumulated reserved amount serviceSessionResults (list <ServiceSessionResultUDR>) Contains the the charging answer for start, stop and update of a session For further information, see the section below, ServiceSessionResultUDR. transacSetsToCleanup (list <TransactionSetUDR>) Depending on the CleanupResultType defined on the Request, it will contain the generated transaction (i.e. the detail generated by the pricing logic). For further information, see Common SAP CC UDRs . ServiceSessionResultUDR This UDR contains information associated with Service Session. Field Description Field Description exception (CCExceptionUDR) Is set if the charging operation failed reservationId (string) The unique identifier for the service startRateResult (StartSessionResultUDR) This field is populated if a Service Session contains a Reservation Item. For further information, see the section below, StartSessionResultUDR. stopRateResult (StopSessionResultUDR) This field is populated if a Service Session contains a Confirmation Item or has Cancellation set to true. For further information, see the section below, StopSessionResultUDR. updateRateResult (UpdateSessionResultUDR) This field is populated if a Service Session contains a Confirmation Item and a Reservation Item. For further information, see the section below, UpdateSessionResultUDR. StartSessionResultUDR This UDR represents the charging answer which could be received from the SAP Convergent Charging Core server in response to a StartSessionUDR. Field Description Field Description allNotifications (list<NotificationUDR>) The aggregation of the three above notification lists. For further information, see Notification UDRs . currency (string) A string representation of the currency. The currency value respects the SAP Convergent Charging Currency.getAlphaCode() format. For example: EUR , or USD limit (string) The limit name (string) The name toConfirmMoneyAmount (string) A string representation of the amount to confirm. The toConfirmMoneyAmount value respects the SAP Convergent Charging Money.toString() format. For example: EUR 12.15 , or USD 0.123456 toReserveMoneyAmount (string) A string representation of the charged amount to reserve. The toConfirmMoneyAmount value respects the SAP Convergent Charging Money.toString() format. For example: EUR 12.15 , or USD 0.123456 transactionSetsToCleanup (list<TransactionSetUDR>) Depending on the CleanupResultType defined on the Request, it will contain the generated transaction (i.e. the detail generated by the pricing logic). For further information, see Common SAP CC UDRs . transactionSetsToConfirm (list<TransactionSetUDR>) Depending on the ResultType defined on the Request, it will contain the generated transaction set (i.e. the detail generated by the pricing logic). This transaction set corresponds to the amount to confirm. For further information, see Common SAP CC UDRs . transactionSetsToReserve (list<TransactionSetUDR>) Depending on the ResultType defined on the Request, it will contain the generated transaction set (i.e. the detail generated by the pricing logic). This transaction set corresponds to the amount to reserve. For further information, see Common SAP CC UDRs . transactionCleanedupNotifications (list<NotificationUDR>) This list offers a shortcut to the generated Notification present in the cleaned-up transactions For further information, see Notification UDRs . transactionConfirmedNotifications (list<NotificationUDR>) This list offers a shortcut to the generated Notification present in the confirmed transactions. For further information, see Notification UDRs . transactionReservedNotifications (list<NotificationUDR>) This list offers a shortcut to the generated Notification present in the reserved transactions. For further information, see Notification UDRs . transactionSetId (long) The transaction set id of the answer UpdateSessionResultUDR This UDR represents the charging answer which could be received from the SAP Convergent Charging Core server in response to a UpdateSessionUDR . Field Description Field Description accumulatedMoneyAmount (string) A string representation of the total amount confirmed since the beginning of the session. The accumulatedMoneyAmount value respects the SAP Convergent Charging Money.toString() format. For example: EUR 12.15 , or USD 0.123456 allNotifications (list<NotificationUDR>) The aggregation of the three above notification lists. For further information, see Notification UDRs . currency (string) A string representation of the currency. The currency value respects the SAP Convergent Charging Currency.getAlphaCode() format. For example: EUR , or USD limit (string) The limit name (string) The name toCancelMoneyAmount (string) A string representation of the amount to cancel for this update. The toCancelMoneyAmount value respects the SAP Convergent Charging Money.toString() format. For example: EUR 12.15 , or USD 0.123456 toConfirmMoneyAmount (string) A string representation of the amount to confirm for this update. The toConfirmMoneyAmount value respects the SAP Convergent Charging Money.toString() format. For example: EUR 12.15 , or USD 0.123456 toReserveMoneyAmount (string) A string representation of the charged amount to reserve for this update. The toReserveMoneyAmount value respects the SAP Convergent Charging Money.toString() format. For example: EUR 12.15 , or USD 0.123456 transactionSetsToCancel (list<TransactionSetUDR>) Depending on the ResultType defined in the request, it will contain the generated transaction (i.e. the detail generated by the pricing logic). This transaction set corresponds to the amount to cancel. For further information, see Common SAP CC UDRs . transactionSetsToCleanup (list<TransactionSetUDR>) Depending on the CleanupResultType defined in the request, it will contain the generated transaction set (i.e. the detail generated by the pricing logic). For further information, see Common SAP CC UDRs . transactionSetsToConfirm (list<TransactionSetUDR>) Depending on the ResultType defined in the request, it will contain the generated transaction (i.e. the detail generated by the pricing logic). This transaction set corresponds to the amount to confirm. For further information, see Common SAP CC UDRs . transactionSetsToReserve (list<TransactionSetUDR>) Depending on the ResultType defined in the request, it will contain the generated transaction (i.e. the detail generated by the pricing logic). This transaction set corresponds to the amount to reserve. For further information, see Common SAP CC UDRs . transactionCanceledNotifications (list<NotificationUDR>) This list offers a shortcut to the generated Notification present in the cancelled transactions. For further information, see Notification UDRs . transactionCleanedupNotifications (list<NotificationUDR>) This list offers a shortcut to the generated Notification present in the cleaned up transactions. For further information, see Notification UDRs . transactionConfirmedNotifications (list<NotificationUDR>) This list offers a shortcut to the generated Notification present in the confirmed transactions. For further information, see Notification UDRs . transactionReservedNotifications (list<NotificationUDR>) This list offers a shortcut to the generated Notification present in the reserved transactions. For further information, see Notification UDRs . StopSessionResultUDR This UDR represents the charging answer which could be received from the SAP Convergent Charging Core server in response to a StopSessionUDR . Field Description Field Description accumulatedMoneyAmount (string) A string representation of the total amount confirmed since the beginning of the session. The accumulatedMoneyAmount value respects the SAP Convergent Charging Money.toString() format. For example: EUR 12.15 , or USD 0.123456 toConfirmMoneyAmount (string) A string representation of the amount to confirm for this stop. The toConfirmMoneyAmount value respects the SAP Convergent Charging Money.toString() format. For example: EUR 12.15 , or USD 0.123456 toCancelMoneyAmount (string) A string representation of the amount to cancel for this stop. The toCancelMoneyAmount value respects the SAP Convergent Charging Money.toString() format. For example: EUR 12.15 , or USD 0.123456 currency (string) A string representation of the currency. The currency value respects the SAP Convergent Charging Currency.getAlphaCode() format. For example: EUR , or USD transactionSetsToCleanup (list<TransactionSetUDR>) Depending on the CleanupResultType defined on the Request, it will contain the generated transaction (i.e. the detail generated by the pricing logic). For further information, see Common SAP CC UDRs . transactionSetsToConfirm (list<TransactionSetUDR>) Depending on the ResultType defined on the Request, it will contain the generated transaction (i.e. the detail generated by the pricing logic). This transaction set corresponds to the amount to confirm. For further information, see Common SAP CC UDRs . transactionSetsToCancel (list<TransactionSetUDR>) Depending on the ResultType defined on the Request, it will contain the generated transaction (i.e. the detail generated by the pricing logic). This transaction set corresponds to the amount to cancel. For further information, see Common SAP CC UDRs . transactionCleanedupNotifications (list<NotificationUDR>) This list offers a shortcut to the generated Notification present in the cleaned-up transactions ( list<TransactionSetUDR> ) For further information, see Notification UDRs . transactionConfirmedNotifications (list<NotificationUDR>) This list offers a shortcut to the generated Notification present in the confirmed transactions. For further information, see Notification UDRs . transactionCanceledNotifications (list<NotificationUDR>) This list offers a shortcut to the generated Notification present in the cancelled transactions. For further information, see Notification UDRs . allNotifications (list<NotificationUDR>) The aggregation of the three above notification lists. For further information, see Notification UDRs . CCExceptionUDR This UDR represents a charging error that may be received from the SAP Convergent Charging Core server when charging fails, or as a result of failed validation of UDR field values ( BadUDRFormatException ) before the request is sent to the server. Every charging request could result in a CCExceptionUDR . Field Description Field Description cause (string) The stack trace of the exception message (string) A string description of the error message reason (string) A string description of the error reasonCode (int) A specific code for this error type (string) The type of the Exception. Can be: CommunicationFailureException IllegalArgumentException ServerFailureException InvalidItemException ForbiddenChargeException TransactionClearingException StartRateException StopRateException UpdateRateException DoesNotExistException CannotInverseException BadUDRFormatException TranslateResultUDR This UDR represents the result of a successful translate operation. Field Description Field Description translatedValues (string) A list of strings, including translated values ChargingResultUDR The result of a charge or blank charge operation when the chargeExecutionContext is set in the request. Field Description Field Description chargedItems (list<ChargedItemUDR>) This is the charged items returned as output from the charge operation. responseItems (list<ResponseItemUDR>) This is the response items that were generated from the charge operations. notifications(list<NotificationUDR>) This list contains the notifications produced during the price plan execution. AccountOperationTypeUDR This UDR represents the account operation type for a charge or blank charge operation when the chargeExecutionContext is set in the request. Field Description Field Description CREDIT (AccountOperationTypeUDR (sapcc.accountOperation)) The account operation is a credit operation. DEBIT (AccountOperationTypeUDR (sapcc.accountOperation)) The account operation is a debit operation. AccountOperationUDR This UDR represents the details of an account operation for a charge or blank charge operation when the chargeExecutionContext is set in the request. Field Description Field Description amount (MoneyUDR sapcc) A string representation of the price amount and currency. The currency value respects the SAP Convergent Charging Currency.getAlphaCode() format. For example: EUR , or USD amountAssignments (list <AmountAssignmentUDR (sapcc.accountOperation)>) The list of amount assignments for the account operation. For more details on the possible values, see the field definitions in the section below, AmountAssignmentUDR. dependentAccountOperationKey (int) The numeric key of the account operation that it depends on, if applicable key (int) The numeric key of the account operation mainAccountReference (AccountReferenceUDR (sapcc.accountOperation)) The main account reference to the account impacted by the charging operation. For more details on the possible values, see the field definitions in the section below, AccountReferenceUDR. netAmount (MoneyUDR (sapcc)) A string representation of the net amount and currency. The currency value respects the SAP Convergent Charging Currency.getAlphaCode() format. For example: EUR , or USD taxAmount (MoneyUDR (sapcc)) A string representation of the tax amount and currency. The currency value respects the SAP Convergent Charging Currency.getAlphaCode() format. For example: EUR , or USD type (AccountOperationTypeUDR (sapcc.AccountOperation)) The type of account operation. For more details on the possible values, see the field definitions in the section above, AccountOperationTypeUDR. AccountReferenceTypeUDR This UDR represents the account reference type for a charge or blank charge operation when the chargeExecutionContext is set in the request. Field Description Field Description EXTERNAL (AccountReferenceTypeUDR (sapcc.accountOperation)) The account reference is an external account. PREPAID (AccountReferenceTypeUDR (sapcc.accountOperation)) The account reference is a prepaid account. AccountReferenceUDR This UDR represents the reference to an account impacted by a charge or blank charge operation when the chargeExecutionContext is set in the request. Field Description Field Description id (string) The identifier of the account impacted by a charging operation. type (AccountReferenceTypeUDR (sapcc.accountOperation)) The type of account impacted by a charging operation. For details on the possible values, see the field definitions in the section above, AccountReferenceTypeUDR. AccountTypeUDR This UDR represents the account type for a charge or blank charge operation when the chargeExecutionContext is set in the request. Field Description Field Description EXTERNAL (AccountTypeUDR sapcc) The account type is a postpaid account that is managed in a third-party accounting system. PREPAID (AccountTypeUDR sapcc) The count type is a prepaid account that is managed in the SAP CC system. UNDEFINED (AccountTypeUDR sapcc) The account type is not defined as external or prepaid. AmountAlertModelUDR This UDR represents the alert that could be received when the balance reaches a certain amount for a charge or blank charge operation when the chargeExecutionContext is set in the request. Field Description Field Description amount (string) The amount that triggers an alert code (string) The code of the amount alert AmountAssignmentUDR This UDR represents the assignment of part of the amount of an amount operation to an account for a charge or blank charge operation when the chargeExecutionContext is set in the request. Field Description Field Description accountReference (AccountReferenceTypeUDR (sapcc.accountOperation)) The reference to the account impacted by a charging operation. For more details, see the field definitions in the section above, AccountReferenceTypeUDR. amount (MoneyUDR (sapcc)) A string representation of the amount and currency of the assignment amount. The currency value respects the SAP Convergent Charging Currency.getAlphaCode() format For example: EUR , or USD chargedItemKey (int) The numeric key of the charged item ChargeableItemInfoUDR This UDR inherits all fields from UniqueIdentifierUDR . ChargeableItemInfoUDR represents the details of the chargeable item associated to a charging result. ChargingContractInfoUDR This UDR represents the details of the charging contract associated to a charging result for a charge or blank charge operation when the chargeExecutionContext is set in the request. Field Description Field Description chargingContractId (string) The identifier of the charging contract chargingContractItemId (string) The external identifier of the charging contract item subscriberAccountId (string) The identifier of the subscriber account associated to the charging contract. ChargingProcessInfoUDR This UDR represents the details of the charging process for a charge or blank charge operation when the chargeExecutionContext is set in the request. Field Description Field Description chargedItemSetUniqueId (UniqueIdentifierUDR (sapcc)) The unique identifier of the charged item set generated by the charging process. For more details on the possible values, see the field definitions in the section below, UniqueIdentifierUDR. eventProcessingDate (date) The date when the event was processed ExpirationAlertModelUDR This UDR represents the alert that could be received before or after a reference date when the state of a prepaid account has changed for a charge or blank charge operation when the chargeExecutionContext is set in the request. Field Description Field Description dayCount (int) The number of days before or after the reference state date of the prepaid account that this alert must be thrown refStateDate (ReferenceStateDateUDR (sapcc)) The reference state of the expiration alert. For more details on the possible values, see the the field definitions in the section below, ReferenceStateDateUDR. ExternalAccountModelUDR This UDR represents the external account defined in a subscriber account for a charge or blank charge operation when the chargeExecutionContext is set in the request. Field Description Field Description code (string) The code of the external account currencyCode (string) The currency code of the external account description (string) The description of the external account externalAccountCode (string) The external code of the external account systemCode (string) The system code of the external account type (ExternalAccountTypeUDR (sapcc)) The type of external account. For more details on the possible values, see the field definitions in the section below, ExternalAccountTypeUDR. ExternalAccountTypeUDR This UDR represents the type of external account for a charge or blank charge operation when the chargeExecutionContext is set in the request. Field Description Field Description PAYABLE (ExternalAccountTypeUDR (sapcc)) The external account type is payable. RECEIVABLE (ExternalAccountTypeUDR (sapcc)) The external account type is receivable. UNDEFINED (ExternalAccountTypeUDR (sapcc)) The external account is not defined as payable or receivable. PrepaidAccountModelUDR This UDR represents the details of a prepaid account for a charge or blank charge operation when the chargeExecutionContext is set in the request. The prepaid account is a balance defined by a minimal value that can be zero, but cannot be less than zero, unless overspending is granted. Field Description Field Description amount (string) A string representation of the amount of the prepaid account amountAlerts (list<AmountAlertModelUDR (sapcc)>) The list of amount alerts in the prepaid account. For more details on the possible values, see the field definitions in the section above, AmountAlertModelUDR. blockedStateDate (date) The blocked state date of the prepaid account closedStateDate (date) The closed state date of the prepaid account code (string) The code of the prepaid account currencyCode (string) The currency code of the prepaid account description (string) The description of the prepaid account emptyLimit (string) The minimal amount (empty limit) of the prepaid account. expirationAlerts (list<expirationAlertModelUDR (sapcc)>) The list of expiration alerts for the prepaid account. For more details on the possible values, see the field definitions in the section above, ExpirationAlertModelUDR. lockedStateDate (date) The locked state date of the prepaid account overrunAccountCode (string) The overrun account code of the prepaid account overrunAccountType (AccountTypeUDR (sapcc)) The overrun account type of the prepaid account. This field is optional. For more details on the possible values, see the field definitions in the section above AccountTypeUDR. ReferenceStateDateUDR This UDR represents the reference state date of the prepaid account for a charge or blank charge operation when the chargeExecutionContext is set in the request. Field Description Field Description ACTIVE (ReferenceStateDateUDR (sapcc)) The alert must be thrown when the state of the prepaid account becomes active after it has been blocked or locked. In this case, the dayCount does not apply. BLOCKED (ReferenceStateDateUDR (sapcc)) The reference date of the alert is the blocked state date of the prepaid account. CLOSED (ReferenceStateDateUDR (sapcc)) The reference date of the alert is the closed state date of the prepaid account. LOCKED (ReferenceStateDateUDR (sapcc)) The reference date of the alert is the locked state date of the prepaid account. UniqueIdentifierUDR This UDR represents the unique identifier for a charge or blank charge operation when the chargeExecutionContext is set in the request. Field Description Field Description type (string) The type of unique identifier

---

# Document 1413: GTP' UDR - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204739104/GTP+UDR
**Categories:** chunks_index.json

The GTPMessageStat UDR is used for monitoring the arrival of messages, and can be viewed in the UDR Internal Format Browser . The following fields are included in the GTPMessageStat UDR: Field Description Field Description host (string) This field contains the server host. messageType (string) This field contains the message type. port (string) This field contains the server port. timestamp (long) This field contains the timestamp of the arrival of the message.

---

# Document 1414: Agent Types and MIMs - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204742360/Agent+Types+and+MIMs
**Categories:** chunks_index.json

This section describes different types of agents, how they behave, and their requirements in different types of workflows, as well as the Meta Information Model (MIM). There are three different types of workflows; batch, real-time, and task. Open Batch - Handles data in transactions, where you start a batch, send data into the workflow as a bytearray, and then end the batch. Thereafter the batch can either be committed or it can be rolled back. Real-time - Treats data as individual UDRs and not as a continuous stream of data. There is no transaction safety and any data that is in the workflow at the time of a system failure is lost. Tasks - Runs tasks that are created by the user or included in the system. Single-agent workflows that do not collect or emit data. Agents in Real-time versus Batch Workflow Batch-collecting agents feed the workflow one batch at a time while batch-processing agents process one piece of data at a time and do not emit any transactions. The workflow logic is adapted to data execution in sequential and single-threaded mode. Real-time collecting agents are collectors that feed the workflow record-by-record, and real-time processing agents handle several records simultaneously. The workflow logic is adapted for several threads working in parallel and statefulness on the user session. In real-time workflows, there may not be any need to forward the processed data, and a response must be sent back through the connecting agent that received the request. The following table lists some of the differences between batch and real-time workflows. Batch Real-time Batch Real-time Data is ordered. Order is not guaranteed. Only one collector per workflow is allowed. Several collectors per workflow may exist. Only one built-in thread in the agent is utilized. The agent can handle multiple threads. Stops to close transactions. Never stops processing. Stops executing when there is no more data to process, except for some push collectors that may continue execution in this case. Never stops executing. Data flows one way. Data may be routed back to the collector. No circular routing. Circular routing is allowed. Different types of MIM values. Only global MIM values. Standalone Workflows There is a special type of workflow, called a standalone workflow. To ensure that an agent is compatible with standalone execution it must adhere to the following rules: Only real-me agents are candidates for standalone. Remote cNoteommunication can only occur in the agent's initialize and deinitialize methods. Only local storage can be used. Meta Information Model MediationZone provides a data model that will supply information published by the agents and the workflow, to all other agents in the workflow during workflow execution. This data model is referred to as the Meta Information Model (MIM). In DTK the DRMIMEntry class describes a specific MIM. MIMs are often used to communicate configuration of runtime information between agents as well as adding audit and ability to trace errors. To request the value of an entry, or to retrieve a list of all existing entries, the DRMIMTree method is utilized. Agents can define when a MIM's value is available, using four constants in the DRMIMEntry class. These four types include: Global - An entity that spans over many batches. If this entry is cacheable it will be constant for the execution of a workflow. Note! Real-time agents can only use Global MIM type. Batch - An entity that can be updated during a batch. If this entry is cacheable ( DRMIMEntry.isCacheable() ) the tree delegating MIMs will keep the value of this entry during the current batch. Header - An entity available in the header of a batch. This value is, once requested, cached in the MIM tree for the given batch. Mostly this MIM is assigned its value in the beginBatch call. Trailer - An entity available in the trailer of a batch. This value is, once requested, cached in the MIM tree for the given batch. This MIM can be accessed at any time after the drain call on the corresponding agent.

---

# Document 1415: Configuration Browser - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204610515/Configuration+Browser
**Categories:** chunks_index.json

The Configuration Browser gives a view of all configurations. The user can easily filter what configurations to be shown, by selecting configurations of a specific type or owned by a specific user. By default, all configurations are displayed. The browser supports a set of operations that can be performed; cut, copy, paste, delete, rename, encrypt, decrypt, and validate. For each configuration, there is a Properties dialogue where you can set permissions and view history, references, and basic information. The browser supports drag-and-drop for moving and copying configurations between folders. Holding down the CTRL-key while dragging a configuration results in a copy operation. From the Configuration Browser you can also open the Configuration Tracer. In Configuration Tracer you see both active and historical configurations. To open the Configuration Browser, click the Tools button in the upper left part of the Desktop window, and then select Configuration Browser from the menu. Note! When using the default authentication method, configurations created by LDAP-authenticated users may not appear in the Configuration Browser. To make these configurations visible, change the owner in the Properties dialogue (opened from the right-click menu in the Configuration Navigator). The new owner must be listed in the Users tab in the Access Controller . Open The Configuration Browser Right-click Menu Right-click in the Configuration Browser to display the right-click menu. Open Configuration Browser Right-click Menu Right Click Menu Refresh Open Select this option to refresh the Folder Pane and the Configuration Browser Table. Expand All Open Select this option to expand all of the folders to display the folders, subfolders, and all the configurations that they contain. The only valid separators in a folder name are "_" or "-". If any other character is used as a separator, or if the Platform property mz.subfolder.enabled is set to false in platform.conf , this button is disabled. Collapse All Open Select this option to collapse subfolders and configurations so only the folders are visible. The only valid separators in a folder name are "_" or "-". If any other character is used as a separator, or if the Platform property mz.subfolder.enabled is set to false in platform.conf , this button is disabled. New Configuration... Open Opens the Configuration drop-down menu. New Folder... Open Select this option to create a new folder. Open Configuration(s)... Open Available when at least one configuration is selected in the browser. Select this option to open the selected configuration. Export Configuration(s) Available when at least one configuration is selected in the browser. Select this option to export the selected configurations. The System Exporter opens with the configurations pre-selected. Note! When exporting from the Configuration Browser, configuration dependencies are not automatically selected. To select configuration dependencies, select the Select Dependencies checkbox in the System Exporter. For further information see System Exporter . Cut Open Select this option to put one or more configurations on the clipboard so they can be moved to another location. Select the menu option Paste in the folder where the configurations should be stored. This option is not applicable if the configuration is locked. For further information see the section Locks in Administration and Management in Legacy Desktop . Copy Open Select this option to put one or more configurations on the clipboard so they can be copied to another location. Select the menu option Paste in the folder where the copied configurations should be stored. Paste Open Select this option to store configurations that have been cut or copied to the clipboard into a folder. Delete... Open Select this option to delete the selected configuration(s). If the configuration is referenced by another configuration, a warning message is displayed, informing you that you cannot remove the configuration. For further information see the section below, References Tab. Note! If you have enabled subfolders, you can only delete the last subfolder within a folder. Rename... Open Select this option to change the name of the selected configuration. Take special precaution when renaming a configuration. If, for example, an APL script is renamed, workflows that are using this script will become invalid. This is especially important to know when renaming folders containing many ultra format configurations or APL. Renaming a folder with ultra formats or APL configurations will make all referring configurations invalid. Note! If you have enabled subfolders, you can only delete the last subfolder within a folder. Encrypt... Select this option to encrypt the selected configurations. Decrypt... Select this option to decrypt the selected configurations. Validate... Open Select this option to validate the configuration. A validation message will be shown to the user Properties Open Select this option to launch the Properties dialog for the selected configuration. For further information, see the section below, Properties. Configuration Browser Table The Configuration Browser table displays all configurations for the selected folder. If you right-click a configuration, a pop-up menu is displayed. The columns in the Configuration Browser table are: Column Description Column Description Name Displays the name of the configuration. Perm Displays the permissions granted to the current user of the configuration. Permissions are shown as R (Read), W (Write), and X (eXecute). If the configuration is encrypted, an E is also added. For further information about permissions, see the section below, Permissions Tab. Owner Displays the username of the user that created the configuration. The owner can: Read, modify (write), and execute the configuration Modify the permissions of user groups to read, modify, and execute the configuration. Modified By Displays the username of the user that made the last modifications to the configuration. Modified Date Displays the date when the configuration was last modified. Filter Configurations Select this icon ( ) to open the Filter Configurations dialogue: Using the Folders tab you select which folders to see in the browser Using the Types tab you select the configurations that you want to see in the browser Using the Owners tab you select the owners whose configurations you want to see in the browser Historic Configurations The Historic option provides you with the option to select between the current list of configurations saved in the system and the Historic view, which lists configurations that have been deleted. The Historic view also provides a unique identification Key assigned by the system for every configuration. Open Historic configurations Options Refresh Select this option to refresh the information in the table. Historic Historic mode displays configurations that have been removed from the system. The user can select to restore such a configuration. Restore Applicable only in the Historic view mode. Click to restore the selected configuration. Once you click Restore and confirm its validity, the configuration is active and available for use. Table The table in the Historic configurations contains the following columns: Column Description Column Description Name Displays the name of the configuration. Ver Displays the configuration version. Key Displays the internal key used to identify the configuration. Modified By Displays the user name of the user that made the last modifications to the configuration. Modified Date Displays the date when the configuration was last modified. Comment Displays any comments regarding the configuration. Properties To open the Properties dialog, right-click on a configuration and select Show Properties . This dialog contains four different tabs: Basic , which contains basic information about the configuration. The Basic tab is displayed by default. Permission , where you set permissions for different users. References , where you can see which other configurations are referenced by the selected configuration, or that refer to the selected configuration. History which displays the revision history for the configuration. Basic Tab The Basic tab is the default tab in the Properties dialog and contains the following information: Open The Properties dialog box - Basic tab Item Description Item Description Name Displays the name of the configuration. Type Displays the type of configuration. Key Displays the internal key used to identify the configuration. Folder Displays the name of the folder in which the configuration is located. Version Displays the version number of the configuration. See the History folder for further information about the different versions. Permissions Displays the permissions granted to the current user of the configuration. Permissions are shown as R (Read), W (Write), and X (eXecute). If the configuration is encrypted, an E is also added. For further information about permissions, see the section below, Permissions Tab. Owner Displays the username of the user that created the configuration. The owner can: Read, modify (write), and execute the configuration Modify the permissions of user groups to read, modify, and execute the configuration. Modified by Displays the user name of the user that made the last modifications to the configuration. Modified Displays the date when the configuration was last modified. If you want to use the information somewhere else, you can highlight the information and press CTRL-C to copy the information to the clipboard. Permissions Tab The Permissions tab contains settings for what different user groups are allowed to do with the configuration: Open The Permissions tab As access permissions are assigned to user groups, and not individual users, it is important to make sure that the users are included in the correct user groups to allow access to different configurations. R W X E Permission Description R - - - Allowed only to view the configuration, given that the user is granted access to the application. - W - - Allowed to edit and delete the configuration. - - X - Allowed only to execute the configuration. R W - - Allowed to view, edit, and delete the configuration, given that the user is granted access to the application. - W X - Allowed to edit, delete, and execute the configuration. R - X - Allowed to view and execute the configuration, given that the user is granted access to the application. R W X - Full access. - - - E Encrypted. References Tab The References tab contains information about which other configurations that the current configuration refers to, and which other configurations that the current configuration is referenced by: Open The References tab The References tab contains two tabs; Used By , which displays all the configurations that use the current configuration, and Uses , which displays all the configurations that the current configuration uses. To edit, just double-click a configuration to open it in a tab. History Tab The History tab contains version information for the configuration: Open The History tab In the table, the following columns are included: Column Description Column Description Version Displays the version number. Modified Date Displays the date and time when the version was saved. Modified By Displays the username of the user that saved the version. Comment Displays any comments for the version. If you want to clear the configuration history, click the Clear Configuration History button. The version number is not affected by this.

---

# Document 1416: Installation Overview PCC - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204997065/Installation+Overview+PCC
**Categories:** chunks_index.json

The Policy Charging and Control solution depends on a set of components. The order in which these are installed is defined here: Installing MediationZone to provide the majority of the functions in [CZ] and [EZ], see Installation of Control Zone and Execution Zone for PCC . Installing the Data Repository. [DR] for storage and [CZ] for management, see Installation of the Data Repository for PCC .

---

# Document 1417: Diameter Peer State Changed Event - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204638898/Diameter+Peer+State+Changed+Event
**Categories:** chunks_index.json

When you run a Diameter workflow, the peer connections of the Diameter Stack agents are monitored through the standard Diameter watchdog as described in RFC 6733 and RFC 3539. Possible states of the connection are: OKAY, SUSPECT, DOWN, REOPEN, INITIAL. The Diameter peer state changed event is triggered whenever there is a change of peer state. Filtering In the Event Setup tab, the values for all the event fields are set by default to All in the Match Value(s) column, which will generate event notifications every time a Diameter peer state changed event is generated. Double-click on the field to open the Match Values dialog where you can click on the Add button to add which values you want to filter on. If there are specific values available, these will appear in a drop-down list. Alternatively, you can enter a hard coded string or a regular expression. Diameter peer state changed specific fields The following fields are available for filtering Diameter Peer State events in the Event Setup tab: newState - The new state of the connection. peerName - The name of the Diameter peer for which the connection state has changed. Fields inherited from the Base event The following fields are inherited from the Base event, and can also be used for filtering, and described in more detail in Base Event : category - If you have configured any Event Categories, you can select to only generate notifications for Couchbase Monitor events with the selected categories. See Event Category for further information about Event Categories. contents - This field contains a string with event specific information. If you want to use this field for filtering you can enter a part of the contents as a hard coded string. eventName - This field can be used to specify which event types you want to generate notifications for. This may be useful if the selected event type is a parent to other event types. However, since the Couchbase Monitor event is not a parent to any other event, this field will typically not be used for this event. origin - If you only want to generate notifications for events that are issued from certain Execution Contexts, you can specify the IP addresses of these Execution Contexts in this field. receiveTimeStamp - This fi eld contains the date and time for when the event was inserted into the Platform database. If you want to use timeStamp for fi ltering, it may be a good idea to enter a regular expression, for example, "2014-06.*" for catching all Diameter Peer State Changed events from 1st of June, 2014, to 30th of June, 2014. severity - With this fi eld you can determine to only generate noti fi cations for events with a certain severity; Information, Warning, Error or Disaster. timeStamp - This fi eld contains the date and time for when the Execution Context generated the event. If you want to use timeStamp for fi ltering, it may be a good idea to enter a regular expression, for example, "2014-06-15 09:.*" for catching all Diameter Peer State Changed events from 9:00 to 9:59 on the 15th of June, 2014. Fields inherited from the Workflow event The following fields are inherited from the Workflow event, and described in more detail in Workflow Event : workflowKey - The name of the internal workflow key. workflowName - A list indicating what workflow(s) information to select. workflowGroupName - The name of the workflow group. Fields inherited from the Agent event The following fields are inherited from the Agent event, and described in more detail in Agent Event : agentName - The name of the agent issuing the event. Note! The values of these fields may also be included in the notifications according to your configurations in the Notifier Setup tab.

---

# Document 1418: Batch-Based Real-Time Agents - Agent Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205035430/Batch-Based+Real-Time+Agents+-+Agent+Configuration
**Categories:** chunks_index.json

This section describes how to configure the agents. When you select one of the agents, the configurations include the same tabs that are displayed in a batch version of the configuration, with the exception of the Filename Sequence tab, which is not included as it is irrelevant in a real-time workflow. For details on the configuration of the agents, see the relevant section: Amazon S3 Collection Agent Configuration Amazon S3 Forwarding Agent Configuration Disk Collection Agent Configuration - Batch Disk Forwarding Agent Configuration - Batch FTP Collection Agent Configuration FTP Forwarding Agent Configuration SCP Collection Agent Configuration SCP Forwarding Agent Configuration SFTP Collection Agent Configuration SFTP Forwarding Agent Configuration Additional Configurations for Collection Agents When the collection agents are included in a real-time workflow, there are also three additional tabs for each of the agent configurations: Decoder , Decompression and Execution . See the example image below. Open Disk agent configuration dialog - Agent tab Decoder Tab In the Decoder tab you configure the settings related to the decoding of the collected data. Open Disk agent configuration dialog - Decoder tab Setting Description Setting Description Decoder Click Browse to select from a list of available decoders created in the Ultra Format Editor, as well as the default built-in decoders: CSV Format JSON Format MZ Tagged Format Different settings are available depending on the Decoder you select. CSV Format Open Decoder CSV Format JSON Format Open Decoder JSON Format MZ Tagged Format Open Decoder MZ Tagged Format Full Decode This option is only available when you have selected a decoder created in the Ultra Format Editor. Select this option to fully decode the UDR before it is sent out from the decoder agent. This action may have a negative impact on performance, since not all fields may be accessed in the workflow, making decoding of all fields in the UDR unnecessary. If it is important that all decoding errors are detected, you must select this option. If this checkbox is cleared (default), the amount of work needed for decoding is minimized using "lazy" decoding of field content. This means that the actual decoding work may be done later in the workflow, when the field values are accessed for the first time. Corrupt data (that is, data for which decoding fails) may not be detected during the decoding stage, but can cause a workflow to abort later in the process. MZ Tagged Specific Settings Tagged UDR Type Click the Add button to select from a list of available internal UDR formats stored in the Ultra and Code servers, to reprocess UDRs of an internal format and send them out. If the compressed format is used, the decoder automatically detects this. JSON Specific Settings UDR Type Click Browse to select the UDR type you want the Decoder to send out. You can either select one of the predefined UDRs or the DynamicJson UDR, which allows you to add a field of type any for including payload. Unmapped Fields If you have selected DynamicJson as UDR Type , you can select the option data in this field in order to include payload. If you have selected another UDR type that contains an any, or a map field, you can select to put any unmapped fields into the field you select in this list. All fields of any or map type in the selected UDR type will be available. If set to (None), any unmapped fields will be lost. Schema Path Enter the path to the JSON schema you want to use in this field. CSV Specific Settings UDR Type Click Browse to select the UDR type you want the Decoder to send out. You can either select one of the predefined UDRs or the DynamicCsv UDR if the CSV format is not known. Format Select the CSV format you want to use; Unix , Mac , Windows , or Excel , or select to define your own customized format. If you select Custom , the following four settings will be enabled. Delimiter Enter the delimiter character(s) for the fields in the CSV. Use Quote Select this option if quotes are used in the CSV. Quote If Use Quote is selected, enter the type of quotes used in the CSV. Line Break Enter how line breaks are expressed in the CSV. Decompression Tab In the Decompression tab you specify if you want to decompress the files or not. Open Disk agent configuration dialog - Decompression tab Setting Description Setting Description Compression Type Select the required decompression algorithm: No Compression : The agent will not decompress the files. This is the default setting. GZIP : The agent will decompress GZIP formatted files. No configuration required. LZO : The files are compressed using LZO compression. If you select this option, the Command Line field is displayed and populated by default with the command lzop -d -c -q . This command allows you to use the lzop unix command to decompress standard input with the LZO algorithm and write the output on standard output. You can enter an alternative lzop command if required. For further information on the lzop command, see https://www.lzop.org/lzop_man.php . Execution Tab In the Execution tab, you configure how often the workflow will be executed, how decoding errors will be handled and what action is to be taken when Cancel Batch messages are called. For furher information on Cancel Batch, see Batch-Based Real-Time Agents - Transaction Behavior . Open Disk agent configuration dialog - Execution tab Note! Cancel Batch messages are sent: If a decoding error occurs, and you have selected the Cancel Batch option in the agent configuration If you have selected for files to be decompressed in the Decompression tab of agent configuration and it fails, e g because a file is corrupt or is not compressed. Setting Description Setting Description Run Once Select this option if you want the workflow to run once. Repeat Every X Seconds Select this option if you want the workflow to be run repeatedly with an interval of a specific number of seconds. The default value is 5 seconds. If you have selected this option, when the agent encounters an error, the workflow does not abort. The error is reported in the System Log and the agent retries at the next repeat. Decoding Error Handling Select one of the error handling options to control how to react upon decoding errors: Cancel Batch - Processing of the current batch is stopped and skips to the next batch. Route Raw Data - Route the remaining, undecodable, data as raw data. This option is useful if you want to implement special error handling for batches that are partially processed. Abort Immediately If enabled, the workflow immediately aborts on the first Cancel Batch message from any agent in the workflow. The erroneous data batch is kept in its original place and must be moved/deleted manually before the workflow can be started again. Abort After X Consecutive Cancel Batch If enabled, the value of X indicates the number of allowed Cancel Batch calls, from the collection agent before the workflow will be aborted. The counter is reset between each successfully processed data batch. Thus, if 5 is entered, the workflow will abort on the 6th data batch in a row that is reported erroneous. Never Abort The workflow will never abort. However, as with the other error handling options, the System Log is always updated for each Cancel Batch message. Additional Configurations for Forwarding Agents When the forwarding agents are included in a real-time workflow, there is also one additional tabs for each of the agent configurations: File Closing Criteria . See the example image below. Open Disk agent configuration dialog Setting Description Setting Description (bytes) When the file size has reached the number of bytes entered in this field, the file will be closed as soon as the current bytearray has been included, and stored in the storage directory. This means that the file size may actually be larger than the set value since the system will not cut off any bytearrays. If nothing is entered, this file closing criteria will not be used. Volume (UDRs) When the file contains the number of UDRs entered in this field, the file will be closed and stored in the storage directory. If nothing is entered, this file closing criteria will not be used. Timer (sec) When the file has been open for the number of seconds entered in this field, the file will be closed and stored in the storage directory. If nothing is entered, this file closing criteria will not be used.

---

# Document 1419: OSS Mediation 3G/4G - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205658473/OSS+Mediation+3G+4G
**Categories:** chunks_index.json

Version History Date Version Editor Comments 2022-05-16 1.0 Patrik Bruce First version Definition OSS Mediation provides the Operational Support System (OSS) components of a CSPs system landscape with the ability to ingest operational network data to derive insights into network health and subscriber experience. OSS Mediation is defined as a set of capabilities for 3G/4G networks (GPRS/EPC), characterised by, and limited to: Originating Data Sources Operational data, events, and alarms received directly from network elements or probes Operational data, events, and alarms received from Network Management Systems (NMS) Output Data Targets Network Performance Management systems Analytics systems Data warehouse and data lake systems The data collected must have the sole purpose of being used for Operation Support Systems (OSS), in the sub-domains of Fault Management, Performance Management, Service Assurance (for example Customer Experience Management), Geo Location and Content Delivery Networks. Charging and monetisation purposes, among others, are excluded from this right to use. This Right to Use (RTU) grants the licensee the right to use DigitalRoutes MediationZone software in accordance with this definition.

---

# Document 1420: Categorized Grouping Agent Overview - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204999295
**Categories:** chunks_index.json

The Categorized Grouping agent is a processing agent designed to divide incoming data into categories. Each category can contain data from one or more files. When a category closing condition is met, the data collected in a category can be grouped with an external script and the result will be emitted into the workflow. Categorizing Incoming data is divided into categories by the agent. All data assigned the same categoryId will be accumulated in one category. It is performed according to conditions set in APL in the analysis agent, usually preceding the Categorized Grouping agent. Grouping The incoming data accumulated in a category can be grouped into one or several files. Each categorized set of data sent to the agent will have an associated filename, set either by default or in the APL configuration. If no filename is configured in the preceding APL agent a DEFAULT_FILENAME will be automatically set by the agent for each category. The default file will always be situated in the top directory of its category. Closing Conditions A category will be closed as soon as one of the configured closing conditions is met. There are four different closing conditions available to configure in the agent. It is also possible to use APL to add a closing condition. To close a category from APL, it is enough that one UDR sets the closing condition to true . When a closing condition for a category is met, an external script is executed generating a file containing all the data of one category. If the Grouping feature is not enabled, the filename associated with incoming data is ignored and only one file is created for each category. The resulting file is emitted upon a closing condition. This is useful when splitting is desired and grouping is not needed. The external script will not be used. Categorized Grouping Related UDR Types The UDR types created by default in the Categorized Grouping agent can be viewed in the UDR Internal Format Browser in the CatGroup folder. To open the browser open an APL Editor, in the editing area right-click and select UDR Assistance... ; the browser opens.

---

# Document 1421: Data Serialization - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204610961/Data+Serialization
**Categories:** chunks_index.json

Data that is transferred between processes, persisted in the database, or exported to file, must be serialized. MediationZone implements its own serialization mechanism for input and output streams, where each object to be serialized is referred to as a Storable . The serialization also includes a version control mechanism where an object can populate itself differently depending on the version of the incoming stream. In the DTK there is only one programmatic interface for handling object serialization. Classes for this are located in the package devkit.storable . However, depending on the target, the system handles serialization in two different ways: Plain streams Plain streams are used in a running system. As with regular Java serialization, it is imperative that each element is written and read in the exact same order. For performance reasons these stream types are used within a running system in interclient communication. XML In XML streams, each element is associated with a user defined name tag. The tag is used to locate the value. XML streams are used for database persistence and when objects are exported to a file, imported into another MediationZone system and during upgrades. The XML stream provides the ability to make use of a supplied version number to be able to automatically upgrade a configuration in a running system. An object to be serialized must implement the DRStorable interface. This interface contains two methods that serialize the object: readFrom and writeTo : The methods operate on a DRInputStream and DROutputStream respectively, where data of various types may be obtained or set using a name tag. Note! All storables that are to be persisted, in either the database or exported/imported, must have names defined. Other storables may use null, however, it is encouraged to always use unique name tags. The readFrom method is handed a version parameter. When storables are deserialized, this parameter may be used to detect if the input stream is of the same version as when it was serialized. If not, different actions may be taken to populate values correctly. Again, it is only on XML streams that this version number is set. Streams supplied from the runtime system will always contain the constant LATEST_VERSION .

---

# Document 1422: Redshift - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204639496/Redshift
**Categories:** chunks_index.json

This section contains information that is specific to the database type Redshift. Supported Functions The Redshift database can be used with: Database Table Related Functions (APL) SQL Collection/Forwarding Agents Preparations The are no additional preparations are required.

---

# Document 1423: HTTP/2 Server Agent Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204608038/HTTP+2+Server+Agent+Configuration
**Categories:** chunks_index.json



---
**End of Part 60** - Continue to next part for more content.
