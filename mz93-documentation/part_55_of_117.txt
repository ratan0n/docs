# RATANON/MZ93-DOCUMENTATION - Part 55/112

---
**Dataset:** ratanon/mz93-documentation
**Part:** 55 of 112
**GitHub:** https://github.com/ratan0n/docs/tree/main/mz93-documentation
**Size:** ~69.8 KB
---

When you are using an Oracle database, set the following properties in install.xml : Property Description Property Description install.ora.owner Default value: mzowner This property specifies the Oracle username of the database owner. The user owns all the data definitions in the Oracle instance to be created. Note! The installation fails if the same username is configured for both the database owner, install.ora.owner , and the mz.jdbc.user . If it is necessary to have the same username for both users, then the oracle_user.sql file must be manually updated prior to creation of the database. install.ora.password Default value: mz This property specifies the password of the database owner, defined with the install.ora.owner variable described above. install.ora.host Default value: localhost This property specifies IP address or hostname for the database instance. install.ora.size Default value: small This property specifies the size of the Oracle database instance. Possible values are small, medium, or large. small is aimed for test and demo installations. medium is aimed for small and medium sized corporates. large is aimed for large operators. install.ora.port Default value: 1521 This property specifies the Oracle database port. install.ora.home Default value: /opt/oracle Example value: /opt/oracle/product/12.1.0 This property specifies the Oracle home directory. This value must be identical to the value assigned to the environment variable ORACLE_HOME previously described. install.ora.sid Default value: MZ This property specifies the Oracle SID for the instance to be created. The value must be identical to value assigned to the environment variable ORACLE_SID previously described. install.ora.data Default value: ${install.ora.home}/oradata This property specifies a directory path to be used in other Oracle directory definitions. The variable is used for convenience, when the same directory path is repeated for any of the following definitions. install.ora.data.tab Default value: ${install.ora.data} Example value: ${install.ora.data}/tables This property specifies the directory where the Oracle table space data files are to be created. install.ora.data.idx Default value: ${install.ora.data} Example value: ${install.ora.data}/indexes This property specifies the directory where the Oracle index data files are to be created. install.ora.data.temp Default value: ${install.ora.data} Example value: ${install.ora.data}/temp This property specifies the directory where the Oracle temporary table space data files are to be created. install.ora.data.log Default value: ${install.ora.data} Example value: ${install.ora.data}/logfiles This property specifies the directory where the Oracle log files are to be created. install.ora.data.roll Default value: ${install.ora.data} Example value: ${install.ora.data}/rollback This property specifies the directory where the Oracle rollback data files are to be created. install.ora.data.ctrl Default value: ${install.ora.data} Example value: ${install.ora.data}/control This property specifies the directory where the Oracle control data files are to be created. install.ora.tb.space.tab Default value: ts_mz_tab This property specifies the name of the tablespace to use to create the table in. install.ora.tb.space.idx Default value: ts_mz_idx This property specifies the name of the tablespace to use for the index. If new directories are specified for the Oracle data, these directories must be created by the Oracle user.

---

# Document 1296: SnmpTrapUDR - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204643207/SnmpTrapUDR
**Categories:** chunks_index.json

Open The SNMP Trap agent uses its own static UDR type called SnmpTrapUDR . There is also a special static UDR called FlatSnmpUDR used for unresolved triggered requests. The SnmpTrapUDR contains data from a received SNMP trap, received by the SNMP Trap agent. Field Description Field Description trapSource (string) The IP address or the remote host sending the trap. receiveTime (long) The UTC timestamp when the SNMP trap notification was received by the agent. sysUpTime (string) Value of sysUpTime (time since last reboot). 0 as of RFC3418. trapOid (string) Value of snmpTrapOID, unique trap Object Identifier (OID). 0 as of RFC3418. trapName (string) The name of the trap, resolved from loaded MIB data. isGeneric (boolean) This is a flag telling if the trap OID is a sub OID of snmpTraps as specified in RFC3418. True if trap is generic, false if enterprise-specific. pduType (string) The type of the SNMP PDU as a string (TRAPv1, TRAPv2, INFORM). oidToName (map<string,string>) A map of all OIDs in this trap to their resolved name from the MIB data. Maps OID to name (for variable bindings). oidToValue (map<string,string>) A map of all OIDs in this trap to their values. Maps OID to value (for variable bindings). Example Example - linkDown trap Source: 192.168.10.140 PDU Type: TRAP Receive Time: 2016/09/22 11:08:13 SysUpTime: 7 days, 21:59:48.75 Trap OID: 1.3.6.1.6.3.1.1.5.3 Trap Name: linkDown Generic: true <Trap Varbinds> ifOperStatus(1.3.6.1.2.1.2.2.1.8.1) = 2 ifAdminStatus(1.3.6.1.2.1.2.2.1.7.1) = 2 ifIndex(1.3.6.1.2.1.2.2.1.1.1) = 1

---

# Document 1297: Software Environment - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204613040/Software+Environment
**Categories:** chunks_index.json

This section describes environment variables that are used and the directories and files that are created at installation. Depending on the type of installation (Platform or Execution Container), there may be less directories and files than listed here. Environment Variables The following environment variables are set in MZ_HOME/bin/mzsh after installation. Variable Description JAVA_HOME This environment variable specifies where the JDK is installed. Example value: /opt/jdk/jdk-17.0.2 MZ_CONTAINER This environment variable specifies the container name. Example value: container1 MZ_CONTAINER_TYPE This environment variable specifies the container type. It is typically not changed. Example value: platform MZ_PLATFORM This property specifies a URL, which contains the IP address or hostname of the Platform Container and the Web Interface port. When you have entered a hostname and failover occurs, the hostname is retrieved from the DNS enabling reconnection. If you have entered a static IP address as the value of this property reconnection issues may occur if the IP address changes. The port must be unique for each MediationZone system. Example value: http://localhost:9000 MZ_HOME This is the directory where the Platform Container or Execution Container container is installed. Example value: /opt/mz/container1 You can view and set these environment variables by using the mzsh command topo env. For further information, see topo . You may also override these properties in the shell. MZ_HOME Directory Structure MZ_HOME refers to the installation path of the Platform Container, Execution Container. You must set MZ_HOME as an environment variable on your system. For further information about how to set this path, see the Installation Instructions . The directories that are created in MZ_HOME after a default installation of a Platform Container are described below. When you install an Execution Container, a subset of these directories are created. The owner of the files and directories in MZ_HOME is referred to as mzadmin throughout this document. Directory Description Directory Description MZ_HOME/3pp This directory is used for storing files required by third-party software, e g database drivers. MZ_HOME/backup This directory contains the backup files produced when performing a System Backup task or a System Import , see the Desktop User's Guide for further information about these operations. The directory will be created when the first backup is made. MZ_HOME/bin This directory contains the commandline tool, mzsh. You can use the the command line tool to interact with MediationZone and perform system related tasks such as shutdown, startup, imports and exports of configurations, etc. Some Desktop related tasks, such as starting and stopping workflows, are also possible to perform with the commandline tool. Use the command line tool to start different parts of the system, such as the Platform or an Execution Context. These entities are running in their own Java Virtual Machines and are referred to as Pico processes. Every pico process has its own definition in STR. For further information about STR, see System Topology Registry For further information about the command line tool, see Command Line Tool User's Guide . MZ_HOME/codeserver This directory contains all the mzp packages in your installation, as well as any Jar files generated from your APL and Ultra configurations. Note! The contents of this directory should not be modified. MZ_HOME/common The lib subdirectory contains common libraries that are used by the system. This directory should not be modified. The services subdirectory contains service definitions. This directory should not be modified. The config subdirectory contains the STR data. Note! In an Execution Container, any local changes to the files in this directory are overwritten when the Platform is restarted. MZ_HOME/data This directory contains: Configuration data, e g agents, profiles and workflows, associated with each deployment User and access group data MZ_HOME/desktop This directory contains binaries for the Legacy Desktop and the Desktop Launcher. MZ_HOME/documentation This directory contains the documentation in PDF format. MZ_HOME/etc This directory contains the following files: ESAPI.properties - This file is used by the esapi security 3pp. This file should not be modified. mz.license - This file is the MediationZone installation license file. mz_trap_mib.txt - This file is the MIB definition file that is used by the SNMP trap utility. validation.properties - This file is used by the ESAPI Security 3pp. This file should not be modified. MZ_HOME/ha This directory contains a Jar file, which in turn contains scripts used for high availability installations. For further information, see chapter High Availability Setup . MZ_HOME/lib This directory contains the code that is necessary for the non-pico started servers and that is not loaded from the code server, as well as third party code. The pico-started servers, e g the Desktop and the ECs, executable code will never be fetched from this directory during runtime. The code is instead fetched from the pico cache. The exceptions are the Code Server and pico-start utility, picostart.jar , which will obtain their code from this directory. MZ_HOME/log This directory contains various logs. If the operating system on the machine where the installation is made provides so-called job control, this directory will contain process identification files (with extension * .pid ). With mzsh , these may be used in order to identify all processes related to the system execution. MZ_HOME/mzdb If Derby is used, this directory is the default location of the the database instance(s). MZ_HOME/pico-cache This directory is used by pico processes for caching. MZ_HOME/scripts This directory contains user-called scripts and script templates. MZ_HOME/storage This directory is the root directory for storage used by the Platform and services. Under the storage directory, the system creates sub-directories as required, which correspond to the services configured in the system. MZ_HOME/tmp This is a directory that is used for temporary storage by various subsystems. MZ_HOME/upgrade_history When upgrading or downgrading using setup.sh script, the resulting mzp packages of the plist that is made during upgrade/downgrade will be stored in subdirectories to this directory where each version will have its own subdirectory. Packages for old version when running an upgrade will be stored in: $MZ_HOME/upgrade_history/<old version>/plist Packages for new version when running a downgrade will be stored in: $MZ_HOME/upgrade_history/<new version>/plist MZ_HOME/web This directory contains resources for the user documentation. MZ_HOME/webapps This directory contains third-party software that is required to navigate the user documentation. MZ_HOME/webroot This directory contains resources for web applications. MZ_HOME/wi This directory contains resources for the Web Interface.

---

# Document 1298: Workflow Group States - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204605010
**Categories:** chunks_index.json

When a workflow group is executed and stopped depends on its configuration as well as on events that occur while running. To understand how a workflow group operates, see the state diagram below and the detailed description of the different states that follows. Open The Workflow Group state diagram State Description State Description Aborted The default behavior is that a workflow group does not assume the Aborted state until all of its members are back to Idle. When one member is in the Aborted state, the workflow continues until all the other members in the workflow group have finished execution. Then the workflow group gets into an Aborted state. Note! You can change the default behavior by using the Behavior when member abort settings in the Execution tab, see Execution in Managing a Workflow Group . When you stop a workflow group, it first assumes the Stopping state and takes care of all transactions. When this is done, the workflow group state changes to Idle. Hold A workflow group that is in the Idle state while being imported - either by the mzsh systemimport r | sr | sir | wr or by the System Importer configured to Hold Execution - enters the Hold state until the import activity is finished. The workflow group then resumes its Idle state. Idle The workflow group configuration is valid , and none of its members is currently being executed from within the workflow group. Invalid There is an error in the workflow group configuration. Note! The workflow group cannot be executed in the Invalid state. Running The workflow group is running, controlling the execution of its members according to the configuration settings. Stopping A manual stop of the workflow group, or of the parent workflow group, makes the workflow group enter the Stopping state. The workflow group remains in the Stopping state while all the members are finishing their data transactions. Then the workflow group goes into either the Idle or the Aborted state. Suppressed Workflow groups that are in the Running state while configurations are being imported - either by the mzsh systemimport r | sr | sir | wr command, or by the System Importer configured to Hold Execution - enter the Suppressed state. In this state any scheduled members are prevented from being started. The workflow group remains in this state until the import activity is finished. Then, if the workflow members are still running, the real-time workflow group returns to the Running state. Batch workflow groups remain in the Suppressed state until their members complete their execution. Then, the workflow group state becomes Idle. Note! If the workflow group is in the Suppressed state, and you stop all the workflow group members, the workflow group enters the Stopping state. If this happens while an import process is going on, the workflow group moves from the Stopping state to the Idle state, and then to the Hold state.

---

# Document 1299: Administration and Management in Legacy Desktop - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205655211/Administration+and+Management+in+Legacy+Desktop
**Categories:** chunks_index.json

Desktop Background Color You can start several Desktop applications on a specific computer. To tell the difference between the applications and their respective views you can vary the background color of every Desktop. To change the Desktop application background color, set the Desktop property mz.gui.color.space.active . The value can be any color of the following: blue, green, yellow, orange, red, dark blue, dark green, magenta, or dark red. For further information about Desktop properties, see Desktop Properties . Dynamic Update While a real-time workflow is being executed, you can change the value of the following parameters: The Host and Port parameters of the TCP/IP agent The NAS list of the Radius agent To be able to dynamically update TCP/IP Host and Port parameters, you need to set them to either Default or Per Workflow in the Workflow Properties dialog box. See the figure The Workflow Table Tab in Workflow Table Tab . To update, select Dynamic Update . On the title bar of the monitor dialog box, the text Dynamic Update followed by a number appears. It represents the number of times that you have updated the workflow configuration while running it, that is since the last time you started it. Open Dynamic update Folders Folders enable the user to categorize configurations, and simplify their maintenance and operation. Folders can be created based on traffic type, decode for a specific network element, be based on geographic location, etc. There is a system folder named Default . This folder cannot be renamed or removed. Configuration Naming Configuration names within a folder must be unique. Some named items in the environment are used when constructing file names. To avoid potential conflicts in the file systems, MediationZone converts the conflicting characters when constructing file names. The following characters are allowed. Any other character results in a validation error. a-z A-Z 0-9 - (dash) _ (underscore) The system has an internal key for every configuration. This key is used to identify the configuration. Renaming a configuration does not change this key. The key is constructed using the system name and the date when the configuration was created. You can view the generated key by selecting the Show Properties option in the right-click menu in the Configuration Navigator, as well as in the Configuration Browser and Configuration Tracer. Date and Time Format Codes In various places, date formats are entered. The following list shows valid date and time format codes that can be combined with any characters that are not in the ranges of 'a'-'z' and 'A'-'Z'. For instance, characters such as ':', '.', ' ', '#' and '@' will appear in the resulting time even if they are not specified within single quotation marks. The date syntax conforms to the Java class SimpleDateFormat . This section contains a summary only. For a full description see: http://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html Letter Date or time component Example Letter Date or time component Example G Era designator AD y Year 1996; 96 M Month in year July; Jul; 07 w Week in year 27 W Week in month 2 D Day in year 189 d Day in month 10 F Day of week in month 2 E Day in week Tuesday; Tue a am/pm marker PM H Hour in day (0-23) 0 k Hour in day (1-24) 24 K Hour in am/pm (0-11) 0 h Hour in am/pm (1-12) 12 m Minute in hour 30 s Second in minute 55 S Millisecond 978 z Time zone PST; GMT-08:00 Z Time zone -08:00 Example - Date and time patterns are interpreted in U.S. local time The following examples show how date and time patterns are interpreted in U.S. local time. The example shows local date and time 2001-07-04 12:08:56 in the U.S. Pacific time zone. Format Example Format Example "yyyy.MM.dd G 'at' HH:mm:ss z" 2001.07.04 AD at 12:08:56 PDT "EEE, MMM d, ''yy" Wed, Jul 4, '01 "h:mm a" 12:08 PM "hh 'o''clock' a, zzzz" 12 o'clock PM, Pacific Daylight Time "K:mm a, z" 0:08 PM, PDT "yyyyy.MMMMM.dd GGG hh:mm aaa" 02001.July.04 AD 12:08 PM "EEE, d MMM yyyy HH:mm:ss Z" Wed, 4 Jul 2001 12:08:56 -0700 "yyMMddHHmmssZ" 010704120856-0700 Text Editor At various places in the environment, editable text areas are available in order to enter APL code. To assist in writing the code, right-click anywhere in the text area to show a pop-up menu with available host functions. Open Text Editor right-click menu The menu has the following options: Option Description Option Description Font Size Sets the font size. Cut Moves the selected text to the clipboard. You can also press CTRL+X to perform this action. Copy Copies the selected text to the clipboard. You can also press CTRL+C to perform this action. Paste Pastes the contents of the clipboard into the place where the insertion point is. You can also press CTRL+V to perform this action. Select All Selects all the text. You can also press CTRL+A to perform this action. Undo Reverts your last action. You can also press CTRL+Z to perform this action. Redo Redoes the last action that you undid with Undo. You can also press CTRL+Y to perform this action. Find/Replace... Displays a dialog where you can search for text and, optionally, replace it. You can also press CTRL+H to perform this action. Open Find/Replace dialog Quick Find Searches the code for the highlighted text. You can also press CTRL+F to perform this action. Find Again Repeats the search for last entered text in the Find/Replace dialog. You can also press CTRL+G to perform this action. Go to Line... Opens the Go to Line dialog where you can enter which line in the code you want to go to. Click OK and you are redirected to the entered line. You can also press CTRL+L to perform this action. Show Definition If you right-click a function in the code that is defined somewhere else and select this option, you are redirected to where the function is defined. If the function is defined within the same configuration, you jump to the line where the function is defined. If the function is defined in another configuration, the configuration opens and you jump directly to the line where the function is defined. You can also click a function and press CTRL+F3 to perform this action. Note! If you refer to an external function with the same name as a function within the current code, the Show Definition option will point to the function within the current code, while the external function is the one that is called during workflow execution. Show Usages If you right-click a function where it is defined in the code and select this option, a dialog called Usage Viewer opens and displays a list of the Configurations that use the function. You can also select a function and press CTRL+F4 to perform this action. UDR Assistance... Opens the UDR Internal Format Browser from which the UDR Fields can be inserted into the code area. You can also press CTRL+U to perform this action. MIM Assistance... Opens the MIM Browser from which the available MIM Resources can be inserted into the code area. You can also press CTRL+M to perform this action. Import... Imports the contents from an external text file into the editor. Note that the file has to reside on the host where the client is running. Export... Exports the current contents into a new file to, for instance, edit in another text editor or use in another MediationZone system. Use External Editor Opens the editor specified by the Desktop property mz.gui.editor.command, e.g. "notepad.exe" . APL Help... Opens the APL Reference Guide. APL Code Completion Performs code completion on the current line. For more information about Code Completion, see APL Code Completion below. You can also press CTRL+SPACE to perform this action. Indent Adjusts the indentation of the code to make it more readable. You can also press CTRL+I to perform this action. Jump to Pair Moves the cursor to the matching parenthesis or bracket. You can also press CTRL+SHIFT+P to perform this action. Toggle Comments Adds or removes comment characters at the beginning of the current line or selection. You can also press CTRL+7 to perform this action. Surround With Adds a code template that surrounds the current line or selection: for Loop ( CTRL+ALT+F ) while Loop ( CTRL+ALT+W ) Debug Expression ( CTRL+ALT+D ) if Condition ( CTRL+ALT+I ) Block Comment ( CTRL+ALT+B ) APL Code Completion In order to make APL coding easier, the APL Code Completion feature helps you find and add APL functions and their respective syntax. To access APL Code Completion, place the cursor where you want to add an APL function, press CTRL+SPACE and select the correct function. To reduce the number of hits, type the initial characters of the APL function. The characters to the left of the cursor are used as a filter. APL Code Completion covers: All installed APL functions. Function blocks such as beginBatch and consume . Condition statements such as while and if . APL functions created by APL Code configurations. APL functions created with the MediationZone Development Toolkit. APL Code Editor Outline In order to make it easier to navigate in an APL code configuration, there is an Outline navigation panel to the right of the APL Code Editor. The APL Code Editor Outline provides a view of all the blocks, variables, and methods in an APL code configuration and makes it possible to easily navigate between different types in the APL code. The entries in the navigation panel are automatically updated as you make valid entries in the APL Editor. You can also filter what you want to display in the Outline navigation panel. You can search for a specific block, variable, or method using the free text field, or by selecting one of the quick filter buttons for different types: Button Description Button Description b Click to display or hide the blocks within the APL code configuration displayed in the APL Code Editor. v Click to display or hide the variables within the APL code configuration displayed in the APL Code Editor. m Click to display or hide the methods within the APL code configuration displayed in the APL Code Editor. The Outline navigation panel can be hidden or made visible. By default, it is visible and all the elements are displayed. To hide or display the navigation panel, click the vertical Outline button to the right of the APL Code Editor. Open APL Code Editor Outline navigation panel Configuration List Editor The Configuration List Editor appears in many Agent Configuration dialog boxes and usually looks like the example in the figure below, Configuration List Editor. This table enables you to select and list several entries that you want to include in a certain Configuration definition. Open Configuration List Editor Button Description Button Description Add Open Click to open a dialog box where you can add an item to the Configuration list. Edit Open Select a row and click Edit. An Update dialog box opens and enables you to modify the data entry. Remove Open Select a row and click Remove . Open Select an entry from the Configuration list and click Up or Down to move it to an upper or lower position. Note! To change the order of any of the appended rows from ascending to descending, click a column's heading. The new order is not saved for the next time you open this view. UDR Browser In places where one or many UDR types or UDR fields need to be selected, the UDR Browser is utilized. You access the UDR Internal Format Browser from the Analysis or Aggregation agents, by right-clicking in the APL Code area and selecting UDR Assistance... The browser contains all UDR types available in the system: UDR types created in the Ultra Format Editor. These include events and sessions for the Aggregation sub-system. UDR types installed with the system. For further information about UDR types and fields, see the Ultra Reference Guide . Open UDR Internal Format Browser Setting Description Setting Description UDR Types List of available UDR types ordered in a tree structure. You can search for a specific UDR type using the filter text box. You can also expand the folders to display all the subfolders and types by clicking the Expand button. You can collapse the folders again by clicking the Collapse button. If you click the Refresh button, the view is refreshed and the folders are collapsed. Formats created in Ultra Format Editor usually have the following structure: folder name - configuration name - internal type name Note! There are a number of agents, for example Diameter and Inter Workflow, that have predefined UDR types with corresponding folder names. Expand All Open Click this button to expand all of the UDR Types folders to display all the subfolders and types. If you click the Refresh button, the view is refreshed and the folders are collapsed. Collapse All Open Click this button to collapse the UDR Types folders so that only the folders are displayed. UDR Fields Displays the UDR type fields in a tree structure. You can search for a specific UDR type field using the filter text box. To refresh the view, click the Refresh button. To ease identification, the fields are color coded: Optional - Italic black Read-only - Red Default - Blue Nested UDRs - Gray Note! A nested UDR that is optional appears in Italic Black. Show Optional If enabled, fields declared as optional are displayed in black italic text. Show Readonly Select this checkbox to display read-only fields. The text appears in red. Note! Clearing this checkbox also affects the blue text entries. These are reserved fields that you cannot modify. Datatype If enabled, only fields that match the selected data type are displayed. Selection Modes The browser operates in five modes depending on where it is used. Single selection of UDR Type. You can choose the UDR Type either by double-clicking the UDR Type, or by selecting it followed by OK or Apply . OK and double-click dismisses the dialog. Multiple selections of UDR Type. You can choose several UDR Types at once by selecting them followed by OK or Apply . OK or double-click dismisses the dialog. Single selection of UDR fields. Same as for UDR Type, but fields are selected instead. Multiple selections of UDR field. Same as for UDR Type, but fields are selected instead. Field input assistance. You can insert fields in the target text field by double-clicking them, or by selecting them followed by Apply . The OK button is not available. MIM Some agents in a workflow need information from the workflow or other agents in order to operate. For instance, an agent that produces a file might need the source file name and the number of processed UDRs to be used in the outgoing file name. In order to satisfy these requirements, MediationZone uses a model called Meta Information Model (MIM) . Agents may use MIM parameters to publish information during run-time that other agents may need to use. The MIM information is used in various parts of the system, for instance, when selecting which MIM resources to use in a file name. MediationZone uses Java Management Extensions (JMX) to monitor MIM tree attributes in running workflows. For more information, refer to Workflow Monitor . Open A MIM tree example MIM resources for each agent have their values assigned at any time, depending on type. As an example, the Disk collection agent publishes the MIM resource Source Filename which is set at Begin Batch. The agent puts the name of the collected file in this resource before it starts collecting the file. There are in total four types of MIMs: MIM Type Description MIM Type Description Batch Batch MIMs are dynamic values, populated during batch processing. An example of such a value is outbound UDRs. Global A global MIM value can be accessed at any time during the execution phase of a workflow. For instance, static values such as Agent Name. Header Header MIM values are populated when a batch is received for processing (an agent emits Begin Batch ). For example, Source Filename (published by the Disk collection agent). Trailer Trailer MIM values are populated after a batch is processed (an agent emits End Batch ). An example of such a value is Target Filename (published by the Disk forwarding agent). By default, all agents may publish the following MIM resources depending on their Input/Output data types. MIM Parameter Description MIM Parameter Description Agent Name This MIM parameter contains the name of the agent as defined in the workflow editor. All agents publish this resource. The value is set when the workflow starts executing. Agent Name is defined as a global MIM context type. <route name> UDRs (or Bytes) This MIM parameter contains the number of UDRs (or Bytes) routed on the link by the agent. The value is updated continuously during processing. This MIM is not valid for forwarding agents. <route name> UDRs (or Bytes) is defined as a batch MIM context type. <route name> Queue Size This MIM parameter contains the number of objects that are currently in the route's queue. <route name> Queue Full Count This MIM parameter contains the number of queue state changes. The value is updated each time a route's queue enters "full" state. Inbound UDRs (or Bytes) This MIM parameter contains the number of incoming UDRs (or Bytes) since last Begin Batch. The value is updated continuously during batch processing. This MIM is not valid for collection agents. Inbound UDRs (or Bytes) is defined as a batch MIM context type. Outbound UDRs (or Bytes) This MIM parameter contains the number of outgoing UDRs (or Bytes) since last Begin Batch. The value is updated continuously during batch processing. This MIM is not valid for forwarding agents. Outbound UDRs (or Bytes) is defined as a batch MIM context type. Note! Some MIM resources are not available until the agent to which they belong is configured. There are also pico specific MIM resources representing information about the picos' JVMs. These are: MIM Parameter Description MIM Parameter Description Available CPUs This MIM parameter states the number of processors that are available for the JVM. Available CPUs is defined as a global MIM context type. System Load Average This MIM parameter states the average system load during the last minute. The system load is the sum of the number of runnable entitites that are queued or running on the available processors, and this value shows the average of this sum for the last minute. This information is useful for indicating the current system load and may be queried frequently. System Load Average is defined as a global MIM context type. Heap Memory Used Percentage This MIM parameter states JVM's heap size, i.e. the amount of memory that is currently used by the JVM, in percent. Heap Memory Bytes Usedn is defined as a global MIM context type. Non Heap Memory Used Percentage This MIM parameter states the amount of memory outside of the heap (non-heap memory) that is currently used by the JVM, in percent. Non Heap Memory Bytes Used is defined as a global MIM context type. There are workflow specific MIM resources representing information of a running workflow. These are: MIM Parameter Description MIM Parameter Description Batch Cancelled This MIM parameter states if the current batch has been cancelled. Batch Cancelled is defined as a header MIM context type. Batch Count This MIM parameter contains a unique sequence number that is associated with each batch processed by the workflow. This value is increased by 1 up to 2 63 and is saved between workflow invocations. Batch Count is defined as a header MIM context type. Batch Duration This MIM parameter contains the time it took to process a batch. This value is updated during processing. Batch Duration is defined as a batch MIM context type. Batch End Time This MIM parameter contains the end time for the processing of a batch. Batch End Time is defined as a trailer MIM context type. Batch Start Time This MIM parameter contains the start time for the processing of a batch. Batch Start Time is defined as a header MIM context type. Execution Context This MIM parameter contains the name of the Execution Context hosting the current workflow. Execution Context is defined as a global MIM context type. Processed UDRs Interval Duration This parameter contains the duration of an interval in minutes for counting the number of processed UDRs in the current real-time workflow. This MIM parameter is only valid for real-time workflows. Processed UDRs Intverval Duration is defined as a global MIM context type. Processed UDRs Per Interval This parameter contains the UDRs processed during the defined interval in the current real-time workflow. This MIM parameter is only valid for real-time workflows. Processed UDRs Per Intverval is defined as a global MIM context type. Start Time This MIM parameter contains the date and time when the workflow was started. The value is set when the workflow is activated. Start Time is defined as a global MIM context type. Threads Configured This parameter contains the number of workflow threads configured in the current real-time workflow. This MIM parameter is only valid for real-time workflows. Threads Configured is defined as a global MIM context type. Threads Idle This parameter contains the number of workflow idle threads in the current real-time workflow. This MIM parameter is only valid for real-time workflows. Threads Idle is defined as a global MIM context type. Throughput By default, Throughput is the volume-per-time processing rate of a particular workflow or agent. Transaction ID Each batch closed by all workflows receives a unique transaction ID. Cancelled batches receive one as well. This MIM parameter contains the unique transaction ID. Transaction ID is defined as a header MIM context type. Workflow ID This MIM parameter contains the unique identification name of every workflow. Workflow Name This MIM parameter contains the name of the current workflow. The value is set when the workflow is activated. Workflow Name is defined as a global MIM context type. MIM Browser In places where access to MIM resources is needed, the MIM Browser is used. You access the MIM Browser from the Analysis or Aggregation agent, by right-clicking in the APL Code area and selecting MIM Assistance... . The browser contains all MIM resources available in the workflow: Open The MIM Browser The available MIM resources are displayed, ordered in a tree structure. Choose the MIM resource by double-clicking the MIM resource, or by selecting it followed by Apply . Cancel dismisses the dialog. You can also search for a specific MIM resource using the filter text box at the top of the MIM Browser . Locks Configurations that you edit are locked so that they cannot be modified by other users. When you open a locked configuration, a message box appears with information about the user that has access and can edit it. To edit a locked, or read-only, configuration you can save a copy of it with a different name. Open A locked configuration Locks are not persistent. If the system is restarted, all locks are forgotten. Encryption A configuration is persisted using XML and therefore more or less available in a readable form to any user, see Configuration Browser . Some configurations may be sensitive and possibly contain descriptions that are proprietary and must be protected. To protect such configurations, it is possible to encrypt configurations using a passphrase. A configuration is thereby only readable if the passphrase is known by the user. If the passphrase is lost, the configuration should be considered lost as well. There are configurations that generate information to the system, for example, the Ultra format that renders UDRs. A user can have access to the UDRs without knowing the passphrase for the configuration source, by setting the user group execute permission. A user can also import a format or analysis package which has execute permission configured. Encrypted configurations retain their encryption and passphrase across export and import. This means that to open a configuration that is imported from another system, you need its passphrase. The Database profile and some of the agents can use passwords from External References. These can be encrypted, either using the default key, or using a crypto service keystore file. See Using Passwords in External References in External Reference Profile for further information.

---

# Document 1300: SCP Collection Agent Events - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204609281/SCP+Collection+Agent+Events
**Categories:** chunks_index.json

Agent Message Events An information message from the agent stated according to the configuration done in the Event Notification Editor . For further information about the agent message event type, see Agent Event . Ready with file: filename Reported along with the name of the source file that has been collected and inserted into the workflow. File cancelled: filename Reported along with the name of the current file, each time a cancelBatch message is received. This assumes the workflow has not been aborted. For further information, see the section, Retrieves, in SCP Collection Agent Transaction Behavior . Debug Events Debug messages are dispatched in debug mode. During execution, the messages are displayed in the Workflow Monitor. You can configure Event Notifications that are triggered when a debug message is dispatched. For further information about the debug event type, see Debug Event .

---

# Document 1301: Diameter Request Agent Input/Output Data and MIM - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204999710/Diameter+Request+Agent+Input+Output+Data+and+MIM
**Categories:** chunks_index.json

Input/Output Data The input/output data is the type of data that an agent expects and delivers. The agent emits and receives UDRs of the type RequestCycleUDR . MIM The agent does not publish nor access any MIM parameters.

---

# Document 1302: FTAM EWSD Agent - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205652606/FTAM+EWSD+Agent
**Categories:** chunks_index.json

This section describes the FTAM EWSD agent. This is a collection agent for batch workflow configurations. Prerequisites The reader of this information should be familiar with: FTAM The FTAM EWSD agent allows files from Siemens EWSD switches to be collected and inserted into a workflow using the FTAM protocol. The agent does not communicate directly with the EWSD switch. Instead, it goes via the FTAM Interface service that must be running on a host in the network. The advantage of this implementation is that only one host has to be equipped with FTAM software. For further information about how the FTAM Interface service is maneuvered, see FTAM EWSD Interface Service . The FTAM EWSD usually collects a cyclic file, since that is how Siemens EWSD switches generate traffic data. When activated, the agent connects to the FTAM Interface service and requests the new data. The switch keeps track of the data to be collected by using two parameters: begin and end copy area pointer . After the FTAM EWSD agent has safely collected the data, a delete request is issued, resulting in the begin copy area pointer being moved to the end. The collected data is saved in files, each containing one copy area (all data from one(1) activation). The FTAM EWSD agent may not be combined with other collectors in the same workflow. Note! Since the FTAM/EWSD agent is the active part, it has to be scheduled to be invoked periodically. The section contains the following subsections: FTAM EWSD Agent Configuration FTAM EWSD Agent Transaction Behavior FTAM EWSD Agent Input/Output Data and MIM FTAM EWSD Agent Events FTAM EWSD Interface Service

---

# Document 1303: SFTP Forwarding Agent Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204740560/SFTP+Forwarding+Agent+Configuration
**Categories:** chunks_index.json

To open the SFTP forwarding agent configuration, click Build  New Configuration . Select Workflow from the Configurations dialog. When prompted to Select workflow type , select Batch . Click Add agent and select SFTP in the Forwarding tab in the Agent Selection dialog. Double-click the agent icon or right-click the icon and select Edit agent , to display the Agent Configuration dialog. You can configure part of the parameters in the Filename Sequence tab, see Workflow Template for more information. Connection Tab Open The SFTP forwarding agent configuration - Connection tab See the description of the Connection tab in SFTP Collection Agent Configuration . Target Tab Open The SFTP forwarding agent configuration - Target tab The Target tab contains configuration settings related to the remote host, target directories and target files. Setting Description Setting Description Input File Handling Settings Input Type The agent can act on two input types. Depending on which one the agent is configured to work with, the behavior will differ. The default input type is bytearray, that is the agent expects bytearrays. If nothing else is stated, the documentation refer to input of bytearray. If the input type is MultiForwardingUDR , the behavior is different. For further information about the agent's behavior in MultiForwardingUDR input, see SFTP Forwarding Agent MultiForwardingUDR Input . File Information Settings Directory Absolute pathname of the target directory on the remote host, where the forwarded files will be placed. The pathname may also be given relative to the home directory of the user's account. The files will be temporarily stored in the automatically created subdirectory DR_TMP_DIR in the target directory. When an End Batch message is received, the files are moved from the subdirectory to the target directory. Create Directory Select this check box to create the directory, or the directory structure, of the path that you specify in Directory. Note! The directories are created when the workflow is executed. Compression Compression type of the destination files. Determines whether the agent will compress the output files as it writes them. No Compression - the agent will not compress the files. Gzip - the agent will compress the files using gzip. Note! No extra extension will be appended to the target filenames, even if compression is selected. Target File Handling Settings Produce Empty Files If you require to create empty files, check this setting. Handling of Already Existing Files Select the behavior of the agent when the file already exists, the alternatives are: Overwrite - The old file will be overwritten and a warning will be logged in the System Log. Add Suffix - If the file already exists, suffix ".1" will be added. If this file also exists, suffix ".2" will be tried instead and so on. Abort - This is the default selection and is the option used for upgraded configurations, that is workflows from an upgraded system. Temporary File Handling Settings Use Temporary Directory If this option is selected, the agent will move the file to a temporary directory before moving it to the target directory. After the whole file has been transferred to the target directory, and the endBatch message has been received, the temporary file is removed from the temporary directory. Use Temporary File If there is no write access to the target directory and, hence, a temporary directory cannot be created, the agent can move the file to a temporary file that is stored directly in the target directory. After the whole file has been transferred, and the endBatch message has been received, the temporary file will be renamed. The temporary filename is unique for every execution of the workflow. It consists of a workflow and agent ID, and a file number. Abort Handling Select how to handle the file in case of cancelBatch or rollback, either Delete Temporary File or Leave Temporary File. Note! When a workflow aborts, the file will not be removed until the next time the workflow is started. Advanced Tab Open The SFTP forwarding agent configuration - Advanced tab The Advanced tabs contain configurations related to more specific use of the SFTP service, which might not be frequently utilized. Setting Description Setting Description Advanced Settings Port The port number the SFTP service will use on the remote host. Timeout (s) The maximum time, in seconds, to wait for response from the server. 0 (zero) means to wait forever. Accept New Host Keys If selected, the agent overwrites the existing host key when the host is represented with a new key. The default behavior is to abort when the key mismatches. Note! Selecting this option causes a security risk since the agent will accept new keys regardless if they might belong to another machine. Enable Key Re-Exchange Used to enable and disable automatic re-exchange of session keys during ongoing connections. This can be useful if you have long lived sessions since you may experience connection problems for some SFTP servers if one of the sides initiates a key re-exchange during the session. Buffered Mode Select this check box to enable buffered mode on the SFTP client. Additional Hosts Settings Additional Hosts List of additional host names or IP-addresses that may be used to establish a connection. These hosts are tried, in sequence from top to bottom, if the agents fail to connect to the remote host set in their Connection tabs. Use the Add, Edit, Remove, Move up and Move down buttons to configure the host list. After Treatment Settings Execute During transfer a temporary file is written, which is then moved to the final file. Select if the script should be executed on the transferred working copy or the final file with the following two options: Before Move: Execute the following command and its arguments on the temporary file. After Move: Execute the following command and its arguments on the final file. Command Enter a command or a script. The script will be executed on the remote system from it's working directory. Argument This field is optional. Each entered parameter value has to be separated from the preceding value with a space. The temporary filename is inserted as the second last parameter, and the final filename is inserted as the last parameter, automatically. This means that if, for instance, no parameter is given in the field, the arguments will be as follows: $1=<temporary_filename> $2=<final_filename> If three parameters are given in the Arguments field, the arguments are set as: $1=<parameter_value_#1> $2=<parameter_value_#2> $3=<parameter_value_#3> $4=<temporary_filename> $5=<final_filename> If After Move has been selected, the argument with <temporary filename> is excluded. Backlog Tab The Backlog tab contains configurations related to backlog functionality. If the backlog is not enabled, the files will be moved directly to their final destination when an endBatch message is received. If the backlog however is enabled, the files will first be moved to a directory called DR_POSTPONED_MOVE_DIR and then to their final destination. For further information about the transaction behavior, see Retrieves in SFTP Forwarding Agent Transaction Behavior . When backlog is initialized, and when backlogged files are transferred, a note is registered in the System Log. Open The SFTP forwarding agent configuration - Backlog tab Setting Description Setting Description Enable Backlog Enables backlog functionality. Directory Base directory in which the agent will create sub directories to handle backlogged files. Absolute or relative path names can be used. Max Size Settings Type If you select the Files option, the Size field below will determine the maximum number of files allowed in the backlog folder. If you select the Bytes option, the Sizefield below will determine the total sum (size) of the files that resides in the backlog folder. If a limit is exceeded the workflow will abort. Size Enter the maximum number of files or bytes that the backlog folder can contain. Processing Order Settings Processing Order Determines the order by which the backlogged data will be processed once connection is reestablished. Select between First In First Out ( FIFO ) or Last In First Out ( LIFO ). Duplicate File Handling Settings Duplicate File Handling Specifies the behavior if a file with the same file name as the one being transferred is detected. The options are Abort or Overwrite and the action is taken both when a file is transferred to the target directory or to the backlog. Security Tab Open The SFTP forwarding agent configuration - Security tab See the description of the Security tab in SFTP Collection Agent Configuration Note! Due to an upgrade of the Maverick library for MediationZone version 8.1.5.0, the default handling of the advanced security has changed. Users should take note of the behaviour change for the Advanced Security Option for the SFTP agents. The Advanced Security Option will be disabled by default. Users will have to enable it on their own accord from the Security Tab in the SFTP agents configuration. With Advanced Security Option disabled, Maverick will manage the connection between the SFTP agent and the server. Maverick will attempt to connect with the STRONG security level. Failing to do so, it will auto downgrade the security level to WEAK and attempt to connect, this behaviour will allow our agents to work well with backwards compatibility for servers with older instances of the Maverick library. Furthermore, having STRONG security level will result in a performance degradation. However, when a user manually enables the Advanced Security Option from the security tab, Maverick will instead assign the WEAK security level, which will not be as strict or resource intensive as the STRONG security level. For more information about security levels, you can refer to this page: https://www.jadaptive.com/managed-security-in-our-java-ssh-apis/

---

# Document 1304: REST Client_Deprecated Agent - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204608955/REST+Client_Deprecated+Agent
**Categories:** chunks_index.json

The REST Client_Deprecated processing agent allows querying of any HTTP API using any of the methods specified in RFC 2616 ( https://tools.ietf.org/html/rfc2616#section-5.1.1 ). The agent expects RESTCycleUDR types, which contain both request and response fields. The request fields of the UDR include the header, method, body, and target resource URI. After performing an HTTP query, the agent routes a RESTCycleUDR type that includes the original request as well as the response from the server. For further information about the UDR types used by the REST Client_Deprecated agent, see 9.62.3 REST Client UDR Types . Open REST Client agent workflow Prerequisites The reader of this information should be familiar with: Representational state transfer (REST) RFC 2616 - Hypertext Transfer Protocol -- HTTP/1.1 RFC 6749 - OAuth 2.0 Authorization Framework RFC 7617 - Basic HTTP Authentication Scheme This section includes the following subsections: REST Client_Deprecated Agent Configuration REST Client_Deprecated Agent Events REST Client_Deprecated Agent Example REST Client_Deprecated Agent Input/Output Data and MIM REST Client_Deprecated UDR Types

---

# Document 1305: DRRealtimeThreadAgent - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204676661/DRRealtimeThreadAgent
**Categories:** chunks_index.json

Interface that defines the execute method. An agent must use the thread that calls this method for I/O operation throughout the entire execution of the workflow. This method will only be called once. The workflow will stop (or abort) if this method returns (or throws an exception). The DRRealtimeThreadAgent extends the DRRealtimeAsyncRouter . The purpose of this is that the thread, entering the execute method, never leaves the agent by routing records to another agent.

---

# Document 1306: Real-Time Disk_Deprecated Collection Agent Example - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205655331/Real-Time+Disk_Deprecated+Collection+Agent+Example
**Categories:** chunks_index.json

This section contains information about how to download and run an example workflow configuration (real-time) that contains a Disk_Deprecated collection agent. The agent collects a file and decodes its records, stored in ASCII CSV format. The Analysis agent in the workflow generates debug output based on the contents in the file. The example includes the following: MediationZone configuration ( disk_collection_real_time.zip ) Input file ( INFILE-01 ) Follow these steps to install and run the example: Copy the downloaded files to /opt/disk_coll_rt_example on an EC host. Create the subdirectory in . Copy the file INFILE-01 to in . Open the System Importer and select in /opt/disk_coll_rt_example/disk_collection_real_time.zip . Import all configurations. Start the workflow.

---

# Document 1307: GCP PubSub Subscriber Agent Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205000357/GCP+PubSub+Subscriber+Agent+Configuration
**Categories:** chunks_index.json

To configure the GCP PubSub Subscriber Agent, double-click on the agent icon or select the Edit agent button after left-clicking on the agent in the Workflow Editor. After opening the Agent Configuration , you can set a name for the agent using the Name field. Main Tab The GCP PubSub Subscriber Main tab contains settings related to the profile and handling of messages for subscription and retrieval by the agent. GCP PubSub Subscriber configuration - Main tab Setting Description Setting Description GCP Pub/Sub Profile This is the profile to use for subscription. For more information, see GCP PubSub Profile . Ack Timeout in Seconds This refers to the timeout interval for acknowledgements to messages received by the agent. Endpoint The custom URL that you must specify for using the GCP services. The Endpoint must be specified in the format host:port . Advanced Tab Open GCP PubSub Subscriber configuration - Advanced tab Setting Description Setting Description Flow Control Max Outstanding Messages Maximum number of messages to be retrieved from PubSub. If not specified, all outstanding messages will be retrieved from PubSub until they are all processed for the subscription. You are required to specify numbers within the range of 1-9999999999. Max Outstanding Kilobytes This is the threshold for messages to be retrieved based on the configured kilobytes. Once the size is met, all messages within the threshold will be retrieved in a batch for collection. You are required to specify numbers within the range of 1-9999999999. Concurrency Control Parallel Streams This is the number of streams available or open for subscribers to receive messages. You are required to specify numbers within the range of 1-50. Executor Threads The number of threads for each stream to handle incoming messages. You are required to specify numbers within the range of 1-50.

---

# Document 1308: JMS UDRs - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205686072/JMS+UDRs
**Categories:** chunks_index.json

Both the JMS collection agent and JMS request agent send and receive JMSCycle types. For further information, see the image below. The UDR Browser shows the JMSCycle UDR type. The Request and Response fields are of the type any . During runtime these fields are converted to a JMS message according to the following rule: APL Type JMS Message Type APL Type JMS Message Type String TextMessage byte[] BytesMessage Note! If a value's type is not supported, a system log message is generated and the UDR is ignored. You can view the JMSCycle UDR from the UDR Internal Format Browser . To access the UDR Internal Format Browser : Open an APL agent configuration. Right-click on the code editor and select UDR Assistance... UDR Internal Format Browser - JMSCycle UDR Field Description Field Description Context (any) This field contains information about the context in which the operation is being invoked when needed. GetResponse (boolean) This field is set as true in a JMS Request workflow to indicate that a reply is expected, or as false to indicate that a reply is not expected. Note! This field only applies in a workflow that includes a JMS Request agent. HasReplyToDestination (boolean) This field is used by the workflow to determine whether an answer can be routed back or not. Note! This field only applies in a workflow that includes a JMS Collector agent. Request (any) This field contains the request. For valid Request types see the table above. RequestProperties (map<string,any>) Request message properties. For further information see JMS Message Properties below. Response (any) This field contains the response. For valid Response types see the table above. ResponseProperties (map<string,any>) Response message properties. For further information, see the section below, JMS Message Properties. Status(int) The value informs you about the message status: 0 (zero) : There has not been any attempt to send the message (UDR) yet. 10 : The message has been successfully sent and an answer has been received. 20 : The message response had not been received within the timeout limitations. 30 : Failed to send the message. 31 : Failed to send the message due to a broken JMS connection. 32 : Failed to send the message to the server due to slow or overloaded JMS server. 40 : A response with an unknown correlation ID was sent to the request agent. Note! This field only applies in a workflow that includes a JMS Request agent. If the GetResponse is set to False , only status codes 30 , 31 and 32 are applicable. OriginalData(bytearray) This field contains the original data in bytearray format. JMS Message Properties The JMS Message properties can be accessed in the UDR using the RequestProperties and the ResponseProperties fields. When the message is received, these fields are mapped to those of the output message, before the message is sent to the JMS server. The value types are checked by the agent when sent. If an invalid value type is found, an error is generated. The supported property values are: boolean, byte, short, int, long, float, double, or string.

---

# Document 1309: Salesforce Streaming API Agent Events - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204674489/Salesforce+Streaming+API+Agent+Events
**Categories:** chunks_index.json

Agent Message Events An information message from the agent is generated according to the configuration in the Event Notification Editor. There are no specific agent message events available for the Salesforce Streaming API agent. For further information about the agent message event type, see Agent Event . Debug Events Debug messages are dispatched in debug mode. During execution, the messages are displayed in the Workflow Monitor. You can configure Event Notifications that are triggered when a debug message is dispatched. For further information about the debug event type, see Debug Event . Loading

---

# Document 1310: Emergency Fix in Production - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204611176/Emergency+Fix+in+Production
**Categories:** chunks_index.json

In this scenario, a critical problem is detected in the production system, which requires an immediate fix. Open Chain of events: Team D detects a critical problem in the production MediationZone that needs to be fixed quickly and notifies Teams A and C. Team D resolves the problems in the configurations and performs an export of the configurations which are then checked into the Version Control System. If Teams A and C are not currently working on the configurations in question, they can just make an update in their working copy and import the updated configurations in to their respective MediationZone systems to retrieve the fix. However, if Teams A and C are in fact working with the configurations in which the fix has been made, great care must be taken in order to incorporate the fix into their work so it is not accidentally overwritten. For smaller changes, the easiest way would be to make the same changes again in the development/staging MediationZone systems. For larger changes, you may want to use the merge functionality in the Version Control System. However, whether this will work or not depends on the nature of the changes as well as the capabilities of the Version Control System.

---

# Document 1311: Database Related Properties - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204613248/Database+Related+Properties
**Categories:** chunks_index.json

MediiationZone will use as many database connections as it finds necessary. If this is not the requested behavior, you can set limits for connections, using system properties. For further information about these properties and their default values, see Database Properties .

---

# Document 1312: Access Zone - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204647020/Access+Zone
**Categories:** chunks_index.json

The Access Zone contains the various interfaces towards MediationZone: The Desktop is accessed using any of the supported web browsers. For further information about the Desktop, see Desktop User's Guide . The Legacy Desktop is installed on a client running Windows, see Legacy Desktop . The CLI (mzsh) is included container installations, and also in Desktop installations. However, it is typically used in a Linux environment. For further information about the Command Line Tool, see Command Line Tool User's Guide .

---

# Document 1313: MediationZone WebUI - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205849102/MediationZone+WebUI
**Categories:** chunks_index.json

The WebUI replaces the Desktop , and contains the same configuration, management, and monitoring UIs. It is a natively built web UI that complies to modern accessibility requirements. Open The WebUI. Please refer to the Desktop description for details on the sub-UIs.

---

# Document 1314: Language Characteristics - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204612107/Language+Characteristics
**Categories:** chunks_index.json

This chapter covers the key concepts of the APL language. The following sections are included: Syntax description Variables and Variable Scope Function Declarations Function Blocks Data types Control Flow Constants Separators Operators Global Code

---

# Document 1315: External Reference Profile - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204671724
**Categories:** chunks_index.json

The External Reference profile enables you to use configuration values that originate from property files or exported environment variables from the Platform's startup shell. You can use the values provided by External Reference profiles in the workflow and agent profile configurations. The External Reference profile is loaded when you start a workflow that depends on it. Changes to the profile become effective when you restart the workflow. This section includes the following subsections: External Reference Profile Configuration Using External Reference in Agent Profile Fields Using External Reference in Workflows Creating External Reference Files AWS S3 Support for External Reference Profile Using Passwords in External Reference Setting External Reference Values in DB

---

# Document 1316: Excel Decoder Agent Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204607402/Excel+Decoder+Agent+Configuration
**Categories:** chunks_index.json

To open the Excel Decoder agent configuration dialog from a workflow configuration, you can do the following: right-click the agent icon and select Configuration... select the agent icon and click the Edit button The Agent Configuration dialog contains the following settings: Open Excel Decoder agent configuration Setting Description Setting Description File Extension Select the file extension of the expected Excel file in this drop-down list. Process All File Select this check box if you want the entire files received to be decoded. Tabs Configuration If you want to decode parts of the files received, use this section to configure which tabs and cells in the received files you want to decode. Temporary Directory In order to decrease memory consumption, you can store metadata in in a temporary directory stated in this field.

---

# Document 1317: Notification UDRs - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204674566/Notification+UDRs
**Categories:** chunks_index.json

NotificationArgumentUDR This UDR inherits all the fields from PropertyUDR and is used in the NotificationAlertAmount , NotificationExpirationAlert , and NotificationUserAlert notifications types. NotificationUDR A notification describes an event, exceptional or not, that takes place in the instances. It provides information on where, when and what happened. This UDR is included in: CheckLimitResultUDR PurchaseOrderUDR StartSessionResultUDR StopSessionResultUDR TransactionSetUDR TransactionUDR UpdateSessionResultUDR. Field Description Field Description instanceId (string) The instance id where the event described by this notification took place timestamp (long) The date when the event described by this notification occurred descUid (int) Returns the unique identifier of the notification name (string) Returns the name of the notification prettyName (string) Returns the pretty name of the notification notifArguments (string) The arguments of the notification serviceProvider (string) The service provider of the subscriber account subscriberAccountCode (string) The code of the subscriber account code code (string) The user message of the alert

---

# Document 1318: String Functions - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205656708/String+Functions
**Categories:** chunks_index.json



---
**End of Part 55** - Continue to next part for more content.
