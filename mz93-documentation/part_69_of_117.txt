# RATANON/MZ93-DOCUMENTATION - Part 69/112

---
**Dataset:** ratanon/mz93-documentation
**Part:** 69 of 112
**GitHub:** https://github.com/ratan0n/docs/tree/main/mz93-documentation
**Size:** ~62.2 KB
---

**Categories:** chunks_index.json

This section describes the Encryption agent. The agent is a processing agent for batch and real-time workflow configurations. The Encryption agent can be used to either mask or unmask complete files in order to protect the data. It can be used when data is going to be processed in the cloud without involving personal data, for example. The agent enables compliance with regulations around data protection, ensuring personal data is accessed in a controlled manner. Open An example Encryption Agent Workflow The agent uses a profile in which you can make your encryption configurations, see Encryption Profile for further information about this profile. In the agent itself, you can determine whether the agent should encrypt or decrypt files and if you want the agent to handle empty data or not. The section contains the following subsections: Encryption Profile Encryption Agent Events Encryption Agent Configuration Encryptor Agent Input/Output Data and MIM

---

# Document 1630: External - Ericsson IOG/IN Records - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204646882
**Categories:** chunks_index.json

Record Declaration The syntax of an IN external format is declared as follows: external <format_name> inw { <field declarations> }; No size declarations are necessary for an IN record since it is given by the enclosing sequential record. In fact, an INW record can only be used as the final field in a sequential record. Field Declaration The syntax of an IN field is declared as follows: bcd tag_id(<int_constant>) <field_name> <: options>; The available tag_id values are given by the Ericsson IN documentation. The available options are: Option Description Option Description num_frame Indicates that the field has a number frame. Two fields are generated if this is specified, one with the specified field name and the other suffixed with _NumFrame . gnci Indicates that the field has a GNCI. Two fields are generated if this is specified, one with the specified field name and one suffixed with _GNCI . gnci on (<expr>) As gnci , however, the GNCI is only present if the expression is evaluated to true . terminated_by(<expr>) Identical to sequential definitions. int(base10) Identical to sequential definitions. int(base16) Identical to sequential definitions.

---

# Document 1631: SAP RFC Agent Preparations - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204609222
**Categories:** chunks_index.json

This document contains the steps to set up the SAP JCo library's jar file in Platform and Execution Container. To be able to use the SAP RFC profile and processing agent: Extract the SAP JCo library binaries: tar xvfz sapjco3-<platform_version>.tgz Add the extracted file sapjco3.jar to the classpath for the jar files for the relevant EC and the Platform. In the example below, the SAP jar files are located in MZ_HOME/3pp. The configuration includes the jar files required to use any of the SAP CC agents, and the Platform database is Derby. Note! Ensure that you include existing paths, so that they are not overwritten. $ mzsh topo get topo://container:<container>/pico:<ec>/obj:config.classpath $ mzsh topo get topo://container:<container>/pico:platform/obj:config.classpath Example - Setting classpath EC (ec1): $ mzsh topo set topo://container:main1/pico:ec1/obj:config.classpath.jars ' ["lib/picostart.jar", "3pp/common_message.jar", "3pp/common_util.jar", "3pp/core_chargingplan.jar", "3pp/core_chargingprocess.jar", "3pp/core_client.jar", "3pp/logging.jar", "3pp/sap.com~tc~logging~java.jar", "3pp/sapjco3.jar"]' Platform: $ mzsh topo set topo://container:main1/pico:platform/obj:config.classpath.jars ' ["lib/derby.jar", "lib/picostart.jar", "lib/javassist.jar", "lib/codeserver.jar", "lib/codeserver_common.jar", "3pp/sapjco3.jar"]' Create a jni folder in the MZ_HOME directory in both the Platform and Execution Container. Place the libsapjco3.so file in both the MZ_HOME/jni directories. Add the MZ_HOME/jni directory as an additional library file along with MZ_HOME/common/lib/native using the following topo command. mzsh topo set topo://container:main1/val:common.java.library.path '${mz.home}"/common/lib/native:"${mz.home}"/jni"' Note! If the common/lib/native directory does not exist in your MZ_HOME, you can create the directory before running the command above.

---

# Document 1632: wfgroupenable - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205657167/wfgroupenable
**Categories:** chunks_index.json

This command enables one or more workflow groups. usage: wfgroupenable <pattern match expression for workflow group names> ... [ -mode < a >] With this command you compare a single pattern match expression, or several, with the full workflow group name of all the workflow groups. Example- wfgroupenable <folder>.<workflowgroupconfigurationname>.<workflowgroupname> The command accepts standard wild cards, such as '*' and '?'. For further information see Textual Pattern Matches . It also accepts the following options: Option Description Option Description [ -mode < a > ] Enable only workflow groups marked with a specified mode: a - Only Autostart groups are enabled. Return Codes Listed below are the different return codes for the wfgroupenable command: Code Description Code Description 0 Will be returned if the command is successful. 1 Will be returned if the argument count is incorrect. 2 Will be returned if the user is not found or not logged in. 3 Will be returned if no matching workflow group is found. 4 Will be returned if the user does not have permission to access the workflow group.

---

# Document 1633: HA Monitor Server - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205816165/HA+Monitor+Server
**Categories:** chunks_index.json

The embedded HA Monitor Server in each pico instance is responsible for providing information about its availability. To configure the HA Monitor Server, you must set the system properties that are described in section High Availability . These properties control e g the listening port (HA port), interface to bind, and various threshold levels. To use the HA Monitor server, you must set the property mz.ha.enabled to true in each pico configuration. $ mzsh topo set topo://container:<container>:/pico:<pico>/val:config.properties.mz.ha.enabled true Example -Enabling HA Monitor Server $ mzsh topo set topo://container:main1/pico:platform/val:config.properties.mz.ha.enabled true $ mzsh topo set topo://container:main1/pico:ec1/val:config.properties.mz.ha.enabled true The HA Monitor Server is accessed via ha.jar , which is referenced by the HA script monitor . Additional scripts are available to start and stop pico instances based on the result of the monitor script. The scripts take the following arguments and must be known by the CMS or other entity that calls the HA scripts: JAVA_HOME at the monitored hosts MZ_HOME of containers HA ports of pico instances Open The HA script interface with the HA Monitor Server The monitor script interfaces the HA Monitor Server of a pico instance. By default, the scripts uses the following exit codes: 100 - ha.jar error returned non-zero value, indicating failed instance 110 - ha.jar returned 0 (zero), indicating healthy instance Extracting the HA Scripts The scripts files are stored in file in MZ_HOME/ha . Run the following command to extract the files: $ tar -xvf $MZ_HOME/ha/ha.tar Using the HA Scripts This is the communication between the HA Monitor Server and the CMS in detail: The CMS executes the monitor script. $ ./monitor <$JAVA_HOME> <$MZ_HOME> <username> <mz.ha.port> [host] [sec_timeout] [debug] The username argument is included for use in modified monitor scripts. By default, the host argument is omitted, this will cause the HA Client to connect to localhost. Use the optional argument sec_timeout to specify a timeout threshold, for the response from the HA Monitor Server. For additional debug information on stdout add the argument debug . The monitor script calls the HA Client to pull the HA monitor server for information about the pico instance. ... # Execute the ping command $java_home/bin/java -cp $mz_home/lib/ha.jar com.digitalroute.ha.HAClient $port $@ 2>&1 ... The monitor script uses the status from ha.jar to return the appropriate exit code to the CMS. ... # Collect the result result=$? # If the result differ from "0" then the command failed. if [ "$result" != "0" ] ; then echo "FAILED" exit 100 else echo "OK" exit 110 fi ... The CMS acts upon this information. In case of failure (indicated by exit code), the offline scripts followed by the clean script should be executed. $ ./offline <$JAVA_HOME> <$MZ_HOME> mzadmin <pico> ... $ ./clean <$JAVA_HOME> <$MZ_HOME> mzadmin <pico> ... The offline script is used to gracefully stop the pico instances. It must be executed when the Platform availability evaluation fails. The clean script is used to terminate the pico instances immediately and should always be used if the offline script fails. The CMS executes the online script to start a new pico instance, e g in a different container. $ ./online <$JAVA_HOME> <$MZ_HOME> mzadmin <pico> ... Note! The provided scripts should be seen as templates that must be modified for different types of CMS products. Consider the following when adjusting the scripts: Measure the response time from the HA Monitor Servers for different load conditions to be able to distinguish between unavailable and heavily loaded pico instances. When starting a failed EC, scheduled workflows will be executed according to the schedule. The HA Monitor Server Interface You can communicate with a HA Monitor Server via telnet. The following commands are supported: Command Description Command Description help Lists the available commands ping <pico_name> Checks the pico client(s) for availability. quit Closes the connection exit Closes the connection

---

# Document 1634: File System Type - GCP Storage - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/315162665/File+System+Type+-+GCP+Storage
**Categories:** chunks_index.json

When selecting GCP as a file system, you will see one tab - General . Open File System profile - GCP - General tab General tab The following settings are available in the General tab in the File System profile: Setting Description Setting Description Authentication Details - Service Account Settings Environment-Provided Service Account Select this option, if you are configuring an environment-provided service account with this profile. This will disable the Input Option and Credentials File fields. Input Option Using this option you delegate how the GCP connection credentials are acquired, the available options are to select a JSON File or to fill in the information from a Form. Credentials File Enter the path to the delegated credentials file. This option is visible only when the JSON File option is selected as the input option. Import Credentials from File This button allows for credentials to be imported from a locally stored file. This option is visible only when the Form input option is selected. Project ID Enter the project ID. This option is visible only when the Form input option is selected. Private Key ID Enter the Private key ID. This option is visible only when the Form input option is selected. Client Email Enter the client's email. This option is visible only when the Form input option is selected. Client ID Enter the client ID. This option is visible only when the Form input option is selected. Other Information Enter other information that might be used with this profile. This option is visible only when the Form input option is selected. Location Settings Bucket Enter the target bucket name. Use GCP Profile Select this check box if you already have a GCP Profile set up, this will disable the fields above and allow you to utilize the credentials that you have defined in your chosen GCP Profile.

---

# Document 1635: Preparations for Simplified Upgrade - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204736230/Preparations+for+Simplified+Upgrade
**Categories:** chunks_index.json

The preparation steps will not affect the running system and can be done in advance. Ensure that the environment variables are set correctly: Example - Setting Environment Variables export MZ_HOME=/opt/mz export JAVA_HOME=/opt/jdk/jdk-17.0.2 export PATH=$JAVA_HOME/bin:$MZ_HOME/bin:$PATH Make a system export of all your configurations with System Export. mzsh mzadmin/<password> systemexport <backup directory>/<filename> Note! These configurations must be imported after the upgrade. For safety, make an online backup of the database(s). For information about how to perform an online backup, see Backup and Disaster Recovery Procedures .

---

# Document 1636: Streaming Telemetry Agent Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205034742/Streaming+Telemetry+Agent+Configuration
**Categories:** chunks_index.json

You open the Streaming Telemetry processing agent configuration dialog from a workflow configuration. To open the Streaming Telemetry collection agent configuration, click Build  New Configuration . Select Workflow from the Configurations dialog. When prompted to Select workflow type, select Realtime . Click Add Agent and select Streaming Telemetry from the Processing tab of the Agent Selection dialog. Open Streaming Telemetry processing agent configuration dialog Streaming Telemetry Tab Item Description Item Description Name Enter the name of the agent. Error Route Select the desired error route from the drop down list. Enable TLS Select this check box to enable TLS over HTTP/2. Security Profile Select the desired Security Profile holding the necessary credentials. NOTE: If you are migrating from an earlier major version of MediationZone 8.x the certificates will be migrated to a new security profile!

---

# Document 1637: Environment Interfaces - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204611008/Environment+Interfaces
**Categories:** chunks_index.json

Many DTK classes hold various types of "environment" objects. These objects contain useful information and utilities related to the whereabouts of the class and are used by the plugins to communicate with the system. For instance, agent-related classes have access to the workflow environment where other workflow configurations may be obtained. There are also environment objects referencing data in the system. The environment classes can be divided into three interface categories: Common interfaces, including DREnvironment , DRWorkflowEnv , DRRealtimeWorkflowEnv and DRBatchWorkflowEnv Client interfaces, including DRUIEnvironment , DRWfUIEnvironment Server interfaces, including DRServerExecEnv , DRRealtimeServerEnv and DRBatchServerEnv Common interfaces are utilized both in client and server-side code and are mainly super interfaces for the other interfaces. Client interfaces are used in code related to the MediationZone user interface. Server interfaces are utilized in code related to the execution of workflows. The following figure illustrates the relationship and inheritance between all environment interfaces: Open Environment overview The coming sections describe each interface. DREnvironment This is the base interface for all other environments. It contains various methods to obtain system data. The method getDatabases returns a list of all database configurations that have been defined in the system. If a database configuration key is provided, the method getDatabaseProfile returns a DRDBProfile object, holding information about the specific database. A list of all UDR types created in the Ultra Format Editor or created using the DTK is available through the getDRUDRDescs method. There are various other methods that return UDR descriptions for given UDR type names etc. The MediationZone system name is obtained with the getSystemName method, property values are obtained with the getProperty method, and events can be dispatched to the Event Server using the dispatchEvent method. DRUIEnvironment This interface is available in all user interface related DTK code. The method reportException can be used to display the built-in exception viewer. If special user interface coding is desired, the Java JDesktopPane can be obtained with the getDesktopPane method. DRWorkflowEnv Utilities from this interface are available in agent development. The current workflow name is returned by the getWorkflowName method. The isRealtime method checks if the current workflow is a real-time or batch workflow. The getNodeOfType method returns a list of agent names of either all collection or processing agents available in the workflow. The getMIMTree method returns all MIM resources currently published in the workflow. This tree may be used within configuration components or for validation purposes. Given an agent name, the getInputNodeNames and getOutputNodeNames methods return a list of agent names that are connected to, or from, the agent, and the getInputTypes and getOutputTypes methods return the data types that the agent is configured to receive or forward. In the case of output, a route name has to be specified as well. Also, given an agent name, the getRouteNames method returns a list of outgoing route names. The getExecutionHosts method allows you to retrieve the execution hosts that the workflow has been scheduled to execute on (if any). The isStandalone method checks if the current workflow is a standalone workflow. Only realtime workflows can be standalone. DRRealtimeWorkflowEnv This interface is available in real-time workflows. Currently, there are no additional methods available in this interface. DRBatchWorkflowEnv This interface is available in batch workflows. The method getCancelBatchBehaviour returns how a Cancel Batch directive will be treated by the workflow. For further information about Cancel Batch behaviors, see the Desktop User's Guide . DRWfUIEnvironment This interface is available when coding agent user interfaces. Note! It extends both the DRBatchWorkflowEnv , DRRealtimeWorkflowEnv and DRWfUIEnvironment classes. Given an agent name, the method readState returns the agent's last saved state (if any). This method is only applicable for batch workflows. DRServerExecEnv This interface is available in all server-related DTK code. Agent message events may be sent to the event server using the method dispatchMessage , which comes in two versions where one offers the possibility of both setting an agent message and a type. Agent failure events may be sent to the event server using the logException method. However, this method must only be used if the agent wants the exception to be silently logged, not causing the agent to abort. The execute method allows an agent to execute a Runnable in a new thread. This method must be used when an agent wants to add a thread to the workflow. The workflow will be running until all collection agents and all threads added through this method are finished. The agent that creates the Runnable is also responsible for stopping it when the workflow is stopped. The method isDebugEnabled states if debugging has been enabled for the workflow. To send a debug event, the dispatchDebug should be used. A debug event will only be sent if isDebugEnabled is true. DRRealtimeServerEnv This interface is available when coding real-time agents. The interface includes methods for invoking and controlling simultaneously executing tasks. It is also possible to control the internal workflow queue which distributes work to the workflow threads. The queue has a soft limit which is set in the configuration. By calling the getQueueLimit method, the current limit can be inspected. The limit can be changed by calling the setQueueLimit method from the agent's initialize method. To check the current size of the queue during run time, the getQueueSize method should be used. If the agent implements the DRRealtimeAsyncRouter class, the callback on changes in the queue size can be controlled by using the setNotificationStep method. This method can only be used in the agent's initialize method. The current notification step can be inspected with the getNotificationStep method. DRBatchServerEnv This interface is available when coding batch agents. The method cancelBatch allows processing agents to cancel the batch if necessary. If the workflow is not configured to abort, this will send the currently processed batch to ECS. Based on the workflow configuration, the workflow may continue with the next batch or abort. If a Processing agent requires the currently processed batch to be split, for some reason, it may hint the collector to do so using the hintEndBatch method. If the collector supports splitting batches, it will immediately end the current batch and start a new one. If not, it will return an unsupported exception, causing the workflow to abort. The following collectors support this operation: Disk, FTP, Database, and ECS. Each batch is assigned a unique transaction ID that may be obtained using the getCurrentTxnID method.

---

# Document 1638: Workflow Buttons - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204638426/Workflow+Buttons
**Categories:** chunks_index.json

The contents of the button panel may change depending on which configuration type has been opened in the currently displayed tab. A workflow configuration uses the standard buttons that are visible for all configurations:

---

# Document 1639: SQL Collection Agent Transaction Behavior - Batch - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204643230/SQL+Collection+Agent+Transaction+Behavior+-+Batch
**Categories:** chunks_index.json

Emits The agent emits commands changing the state of the file currently processed. Command Description Command Description Begin Batch The agent will emit beginBatch before the first UDR from the result set is routed into the workflow. End Batch The agent will emit endBatch after the last row in the result set has been mapped to a UDR and routed into the workflow. Retrieves The agent retrieves commands from other agents and based on them generates a state change of the file currently processed. Command Description Command Description Hint End Batch When hintEndBatch is called the agent will call endBatch followed by beginBatch (if more records exists in the result set). It will then continue to process the result set. Cancel Batch Cancel Batch is not supported by the agent.

---

# Document 1640: REST HTTP Interface - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204611691
**Categories:** chunks_index.json

Provisioning is supported via a REST HTTP Interface which is implemented using the standard HTTP methods GET , PUT , POST and DELETE . The interface supports XML and JSON formats, and enables external systems to provision and update Rules. The REST HTTP Interface runs on the EC Web Interface and is started when the EC process is started. Authentication is performed against the Platform, if possible. If the Platform is unreachable, the user is authenticated against the locally defined user (configured in EC web interface properties). The UDRs available in the Rules REST Interface are: RulesMapping PCC_Rule QoS_Information Charging_Rule Static_Rule To retrieve one UDR: http://<host>:<port>/PCRF/Rules/<area>/<udr-type>/<udr-id> To retrieve all UDR of a certain type: http://<host>:<port>/PCRF/Rules/<area>/<udr-type> Note! In the examples in this chapter, HTTP/1.0 have been used, but REST supports HTTP/1.1 as well. Creating a UDR A UDR can be created by sending data to the HTTP Interface using POST to the base URL for the UDR. The response will be the created UDR. Default format for the response is XML if nothing is specified. The format for the response is decided by the Accept HTTP header. Example Creating a Qos_Information UDR in area PROD using XML POST http://localhost:9090/PCRF/Rules/PROD/QoS_Information HTTP/1.0 Content-Type: application/xml Content-Length: 251 The xml-data should be structured as follows: <QoS_Information> <APN_Agg_MBR_DL>0</APN_Agg_MBR_DL> <APN_Agg_MBR_UL>0</APN_Agg_MBR_UL> <Allocation_Retention_Priority>0 </Allocation_Retention_Priority> <Bearer_Identifier>1</Bearer_Identifier> <GBR_DL>100</GBR_DL> <GBR_UL>100</GBR_UL> <ID>100</ID> <MBR_DL>1000</MBR_DL> <MBR_UL>1000</MBR_UL> <QCI>1</QCI> </QoS_Information> Example Creating a QoS Information_UDR in area PROD using JSON POST http://localhost:9090/PCRF/Rules/PROD/QoS_Information HTTP/1.0 Content-Type: application/json Content-Length: 196 The json-data should be structured as follows: { "QoS_Information":{ "APN_Agg_MBR_DL":0, "APN_Agg_MBR_UL":0, "Allocation_Retention_Priority":0, "Bearer_Identifier":1, "GBR_DL":100, "GBR_UL":100, "ID":100, "MBR_DL":1000, "MBR_UL":1000, "QCI":1 } } Retrieving a UDR The format for the response is determined by the Accept HTTP header. Retrieving a specific RulesMapping UDR in area PROD as JSON GET http://localhost:9090/PCRF/Rules/PROD/RulesMapping/1001 HTTP/1.0 Accept: application/json Example output: { "ID": 1001, "Priority": 1, "Arguments": ["Arg1","Arg2"], "Targets": [1001], "StopFallthrough": false } Retrieving all RulesMapping UDRs in area PROD as JSON GET http://localhost:9090/PCRF/Rules/PROD/RulesMapping HTTP/1.0 Accept: application/json Example output: { "RulesMappings": [ { "ID": 1001, "Priority": 1, "Arguments": ["Arg1","Arg2"], "Targets": [1001], "StopFallthrough": false }, { "ID": 1002, "Priority": 2, "Arguments": ["Arg 3","Arg 4"], "Targets": [1002], "StopFallthrough": false } ] } Retrieving a specific PCC_Rule UDR in area PROD as JSON GET http://localhost:9090/PCRF/Rules/PROD/PCC_Rule/1001 HTTP/1.0 Accept: application/Json Example output: { "ID": 1001, "Rule_Name": "Rule 1", "Charging_Rules": [1001], "Period": 1, "QoS": 2 } Retrieving all PCC_Rule UDRs in area PROD as JSON GET http://localhost:9090/PCRF/Rules/PROD/PCC_Rule HTTP/1.0 Accept: application/json Example output: { "PCC_Rules": [ { "ID": 1001, "Rule_Name": "Rule 1", "Charging_Rules": [1001], "Period": 1, "QoS": 2 }, { "ID": 1002, "Rule_Name": "Rule 2", "Charging_Rules": [1001], "Period": 5, "QoS": 12 } ] } Retrieving a specific QoS_Information UDR in area PROD as JSON GET http://localhost:9090/PCRF/Rules/PROD/QoS_Information/1001 HTTP/1.0 Accept: application/json Example output: { "ID": 1001, "Name": "QoS 1Mbps", "ARP": 0, "APN_Agg_MBR_DL": 1000, "APN_Agg_MBR_UL": 1000, "GBR_DL": 0, "GBR_UL": 0, "MBR_DL": 1000, "MBR_UL": 1000, "QCI": 9 } Retrieving all QoS_Information UDRs in area PROD as JSON GET http://localhost:9090/PCRF/Rules/PROD/QoS_Information HTTP/1.0 Accept: application/json Example output: { "QoS_Informations": [ { "ID": 1001, "Name": "QoS 1Mbps", "ARP": 0, "APN_Agg_MBR_DL": 1000, "APN_Agg_MBR_UL": 1000, "GBR_DL": 0, "GBR_UL": 0, "MBR_DL": 1000, "MBR_UL": 1000, "QCI": 9 }, { "ID": 1002, "Name": "QoS 7/2Mbps", "ARP": 0, "APN_Agg_MBR_DL": 7000, "APN_Agg_MBR_UL": 2000, "GBR_DL": 0, "GBR_UL": 0, "MBR_DL": 7000, "MBR_UL": 2000, "QCI": 9 } ] } Retrieving a specific Charging_Rule UDR in area PROD as JSON GET http://localhost:9090/PCRF/Rules/PROD/Charging_Rule/1001 HTTP/1.0 Accept: application/json Example output: { "ID": 1001, "Name": "Charging Rule 1", "Dynamic_Rule": 0, "Final_Indication_Rule": 0, "Static_Rule": 1 } Retrieving all Charging_Rule UDRs in area PROD as JSON GET http://localhost:9090/PCRF/Rules/PROD/Charging_Rule HTTP/1.0 Accept: application/json Example output: { "Charging_Rules": [ { "ID": 1001, "Name": "Charging Rule 1", "Dynamic_Rule": 0, "Final_Indication_Rule": 0, "Static_Rule": 1001 }, { "ID": 1002, "Name": "Charging Rule 2", "Dynamic_Rule": 1001, "Final_Indication_Rule": 1001, "Static_Rule": 0 } ] } Retrieving a specific Static_Rule UDR in area PROD as JSON GET http://localhost:9090/PCRF/Rules/PROD/Static_Rule/1001 HTTP/1.0 Accept: application/json Example output: { "ID": 1001, "Rule_Name": "Static Rule 1", "Rule_Base_Name": "rb-default" } Retrieving all Static_Rule UDRs in area PROD as JSON GET http://localhost:9090/PCRF/Rules/PROD/Static_Rule HTTP/1.0 Accept: application/json Example output: { "Static_Rules": [ { "ID": 1001, "Rule_Name": "Static Rule 1", "Rule_Base_Name": "rb-default" }, { "ID": 1002, "Rule_Name": "Static Rule 2", "Rule_Base_Name": "rb-redirect" } ] } Updating a UDR Updates are made using PUT . Example Updating QoS Information UDRs in area PROD using XML PUT http://localhost:9090/PCRF/Rules//PROD/QoS_Information/<id> HTTP/1.0 Content-Type: application/xml Content-Length: 251 The format of the xml-data should be structured as follows: <QoS_Information> <APN_Agg_MBR_DL>0</APN_Agg_MBR_DL> <APN_Agg_MBR_UL>0</APN_Agg_MBR_UL> <Allocation_Retention_Priority>0 </Allocation_Retention_Priority> <Bearer_Identifier>1</Bearer_Identifier> <GBR_DL>100</GBR_DL> <GBR_UL>100</GBR_UL> <ID>100</ID> <MBR_DL>1000</MBR_DL> <MBR_UL>1000</MBR_UL> <QCI>1</QCI> </QoS_Information> Deleting a UDR Deleting a resource is done by using the DELETE method. Example Deleting Rules UDR 2101 in area PROD DELETE http://localhost:9090/PCRF/Rules/PROD/PCC_Rule/2101 HTTP/1.0 Clearing an area Clearing an area is done with a HTTP DELETE call to <host>:<port>/PCRF/Rules/<source area>/admin/clear . Example Clearing area TEST DELETE http://localhost:9090/PCRF/Rules/TEST/admin/clear HTTP/1.0 Copy one area to another Copying one area to another is done with a HTTP PUT call to <host>:<port>/PCRF/Rules/<source area>/admin/copyArea?dest=<destination area> . Example Copying data from TEST to PROD PUT http://localhost:9090/PCRF/Rules/TEST/admin/copyArea?dest=PROD HTTP/1.0 Content-Length: 0 Error codes There are several different codes that can be returned for the different operations. For admin commands: http://<host>:<port>/PCRF/Rules/<area>/admin/clear http://<host>:<port>/PCRF/Rules/<area>/admin/copyArea http://<host>:<port>/PCRF/Rules/<area>/admin/refresh Error code Description Error code Description 200 Will be returned if the last operation was successful. 500 Will be returned if there was an error. When creating a UDR: http://<host>:<port>/PCRF/Rules/<area>/<udr-type> Error code Description Error code Description 201 Will be returned if the UDR was created. 409 Will be returned if a UDR with the stated key already exists, or if there are dependencies missing. 415 Will be returned if the UDR key is of type string and the key is missing, or if the key type is incorrect. 500 Will be returned if the UDR requires references that are missing, or if there was an error. When retrieving one UDR: http://<host>:<port>/PCRF/Rules/<area>/<udr-type>/<id> Error code Description Error code Description 200 Will be returned if the requested UDR was found. 204 Will be returned if there is no UDR with the stated ID. 500 If there was an error. When retrieving all UDRs: http://<host>:<port>/PCRF/Rules/<area>/<udr-type> Error code Description Error code Description 200 Will be returned with an empty list or with a list containing the UDRs. When updating a UDR: http://<host>:<port>/PCRF/Rules/<area>/<udr-type>/<id> Error code Description Error code Description 200 Will be returned if the UDR was updated successfully. 408 Will be returned if the keys in the URL and the XML are different, or the key in the URL is set to "0".. 409 Will be returned if the UDR requires references that are missing, or if there is not UDR with the stated key. 500 Will be returned if there was an error. When deleting a UDR: http://<host>:<port>/PCRF/Rules/<area>/<udr-type>/<id> Error code Description Error code Description 200 Will be returned if the UDR was deleted successfully. 204 Will be returned if there is no UDR with the stated ID. 409 Will be returned if the UDR is referenced by another UDR. 500 Will be returned if there was an error.

---

# Document 1641: Diameter Stack Agent Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204640836/Diameter+Stack+Agent+Configuration
**Categories:** chunks_index.json

To open the Diameter Stack agent configuration, click Build  New Configuration . Select Workflow from the Configurations dialog. When prompted to Select workflow type , click Realtime  OK . Click Add agent . In the Agent Selection dialog click the Collection tab and select Diameter Stack . Double-click the agent icon or right-click the icon and select Edit agent , to display the Agent Configuration dialog. General Tab The General tab contains general diameter settings that are needed for the configuration of the agen t. Open The Diameter Stack agent - General tab Setting Description Setting Description Application Profile Click Browse to select a predefined application profile. The profile contains details about advertised applications, as well as supported AVPs and command codes. For further information, see Diameter Application Profile . Routing Profile Click Browse to select a predefined routing profile. The Profile contains details about supported hosts, listening ports, applications, and realms. For further information, see Diameter Routing Profile . Server Protocol Select the transport protocol for incoming connections. SCTP must be installed on every EC host that uses the SCTP protocol. For installation instructions, see your operating system documentation. Diameter Identity Select Hostname to manually enter the hostname (case sensitive) of this Diameter agent. In case the Origin-Host AVP has been left unconfigured, the Hostname value will be applied whenever a Diameter message is transmitted from this agent. If SCTP is configured as server protocol, all IP addresses that are resolved from the Diameter Identity will be used as SCTP endpoints through multihoming. Use DNS Hostname If enabled, the Diameter Identity of the local agent is automatically set by looking up the DNS hostname that is associated with the local IP address. If there is more than one network interface, the agent aborts on startup. Realm Enter the Diameter realm (case sensitive) for this specific host. In case the Origin-Realm AVP has been left unconfigured, the Realm value will be applied in messages transmitted from this agent. Listening Port Enter the port through which the Diameter agent should "listen" for transport connections input. Primary Host When using SCTP, optionally enter the IP address of the network interface that will be used to establish a transport connection. If left unconfigured, any IP address that can be resolved from the Hostname will be selected. Diameter Too Busy Tab The Diameter Stack receives, decodes, and forwards UDRs asynchronously. An internal queue in the workflow engine acts as a backlog for the workflow. When a load of messages gets too heavy to process, you can either use the configurations in the Diameter Too Busy tab, in order to respond to callers, or configure the Supervision Service with actions to take. Note! The configurations described in this section determine if and how the Diameter agent will reject incoming requests or UDRs to the workflow. For information regarding how to limit the number of requests and UDRs sent out from the workflow, see Diameter Routing Profile . The Diameter Too Busy tab enables you to configure the agent with instructions to respond to callers. Open The Diameter Stack agent - Diameter Too Busy tab Setting Description Setting Description Enable Diameter Too Busy Check to enable the agent to automatically respond with DIAMETER_TOO_BUSY when the workflow is overloaded. Maximum Workflow Queue Size(%) Enter the highest limit of the internal queue size. When this limit is reached the agent sends "Too Busy" responses. This setting is measured in percent % of the total Workflow Queue Size that is configured in Workflow Properties. Note! You can change this value during processing from the Workflow Monitor. Throughput Threshold (UDRs/s) The Throughput Threshold is also a congestion control setting. With it, you can make the agent reject some of the incoming UDRs. When a load of requests per second exceeds the value of this property, some of the requests will be rejected and the process sending the request will get a Diameter Too Busy response. Note! You can change this value during processing from the Workflow Monitor. Time Between Log Entries(s) This property tells the agent how often it should write messages to the system log when it is in congestion prevention mode. Time Between Log Entries is an integer value between 1 and 3600 seconds. Supervision Service If you want to reject certain messages when the load gets too heavy, you can use the Supervision Service. With this service, you can select one of the following overload protection strategies: Diameter_ACInterimRequest - For rejecting requests of type AccountingInterim-Request Diameter_CCInitialRequest - For rejecting Credit-Control Initial requests Diameter_CCTerminationRequest - For rejecting Credit-Control Termination requests Diameter_ACStartRequest - For rejecting requests of type AccountingStart-Request Diameter_ReAuthRequest - For rejecting ReAuthentication requests Diameter_AbortSessionRequest - For rejecting requests of type AbortSession Diameter:ACStopRequest - For rejecting requests of type AccountingStop-Request Diameter_CCUpdateRequest - For rejecting Credit-Control Update requests Diameter_CCEventRequest - For rejecting requests of type Credit-Control-EventRequest For each strategy, you can select if you want to reject 25, 50, or 100 % of the requests. See Workflow Properties for further information. Advanced Tab This tab includes more advanced settings for the Diameter Stack agent. The Diameter Stack agent - Advanced tab Setting Description Setting Description Diameter Answer Timeout (ms) Enter the period of time (in milliseconds) before a non-responded request is handled as an error, i.e. an Error Answer Message is returned. See the section, Special Error Handling, in The Diameter Base Protocol for further information. The timeout is checked periodically according to the Timeout Resolution (ms) setting. The time set in this field may be added to the time period entered for Diameter Answer Timeout (ms) . Consequently, setting the timeout interval to a very small value will not be very useful, since the delay in detecting the timeouts will have a quite large effect on the actual time interval before detecting timeouts. Examples Setting Diameter Answer Timeout (ms) to: 50 will result in timeouts being detected within 50 - 149 ms 300 will result in timeouts being detected within 300 - 399 ms 750 will result in timeouts being detected within 750 - 849 ms Timeout Resolution (ms) Enter the interval at which the Answer Timeout should be checked. Enable Debug Events Select this checkbox to enable debug mode. Useful for testing purposes. Enable Runtime Validation Select this checkbox to enable runtime validation of the Diameter messages against the command and AVP definitions in the Diameter Application profile. The following is validated in incoming and outgoing messages: Occurrences and position of AVPs The setting of AVP flags i.e. M-bit and P-bit The setting of command flags i.e. Proxiable (p-bit) and Error (e-bit) When runtime validation is selected, incoming messages that fail the validation are rejected by the Diameter Stack agent, and the appropriate result code is applied in an error answer message. Do Not Create Outgoing Connections Select this checkbox to prevent the agent from actively trying to connect or reconnect if a connection is lost, with peers. When this option is checked, the agent is said to run in passive mode. Bind On All Interfaces Select this checkbox to allow the agent to bind on interfaces other than just the Diameter identity. For example, in a Kubernetes solution. Keystore Path The path to a keystore file that contains the private key of the Diameter Stack, and any certificates needed to verify peers. This parameter is only applicable if TLS security is used for one or more of the peers in the routing profile. The path is relative to the Execution Context on which the Diameter Stack runs. Keystore Password The path to a keystore file that contains the private key of the Diameter Stack, and any certificates needed to verify peers. This parameter is only applicable if TLS security is used for one or more of the peers in the routing profile. The path is relative to the Execution Context on which the Diameter Stack runs. Security Profile Click Browse to select a security profile with certificate and configuration to use, if you prefer to use a secure connection. Refer to Security Profile for more information. Watchdog Enter the watchdog timer interval TWINIT. For information about TWINIT, see RFC 3539. Maximum Message Size (B) Enter the maximum number of bytes allowed in a single Diameter message. Socket Write Timeout (ms) Enter the timeout value for writing to a socket. If the write operation is blocked for longer than the timeout period, the peer will be disconnected. Write blocks may occur if the receiving peer is overloaded. Connect Timeout (ms) Enter the timeout value for peer connection attempts. This setting is only applicable to TCP connections. Connect Interval (ms) Enter the minimum time interval between connection attempts when routing messages from a workflow and the peer connection is not established. An interval timer is started at the first connection attempt; subsequent connection attempts to the same peer are then suppressed until the timer has expired. When realm-based routing is used, the connect interval is applied only if all configured peers in the realm are down. Error Route When there is an error in an incoming message, the Diameter Stack agent creates a DiameterErrorUDR that can be routed to the workflow. Use Error Route to select the outgoing route for UDRs of this type. You can disable the routing of these UDRs by selecting (None) , which is the default value. For information about DiameterErrorUDR , see the section, DiameterErrorUDR, in The Diameter Base Protocol . Connection Monitoring Route If you want to send connection-related messages and ConnectionLost UDRs to the workflow, use the Connection Monitoring Route option to select the outgoing route for UDRs of this type. You can disable the routing of these UDRs by selecting (None) , which is the default value. The UDR types that are routed are the following: Capabilities_Exchange_Request (Diameter.Base) Capabilities_Exchange_Answer (Diameter.Base) Device_Watchdog_Request (Diameter.Base) Device_Watchdog_Response (Diameter.Base) ConnectionLost (Diameter) For information on the ConnectionLost UDR, see The Diameter Base Protocol . Use Waiting Messages Limit When the Diameter Stack agent acts as a client and cannot send a message to a target peer, the message is kept in a queue until it is sent or a timeout occurs. In case of a timeout, a DiameterErrorUDR is routed back to the workflow. Select this check box to limit the number of messages that can be stored in the message queue, and enter the number of messages that can be queued. When the limit is exceeded, the first message in the queue is removed and handled as if a timeout has occurred. The default value is 500. Peer Profile Mappings Click Configure to set specific mappings for peers that you do not want to use the default Diameter Application profile, which is set in the General tab. To configure the mappings, you enter the Peer Identity and the Diameter Application profile that you want the specified peer to use. The peer identity can be a regular expression. The number of mappings configured is shown on the Configure button. For each peer that connects, the specific Diameter Application profile used is chosen by first checking each Peer Profile Mapping as ordered in the Peer Profile Mappings list. If the peer identity matches the configured name or pattern, this profile is chosen. If no peer profile mapping matches, the default Diameter Application profile is used. SCTP Options Tab This tab includes settings for SCTP heartbeats. These settings can be used to turn off SCTP heartbeats on the Diameter Stack when running the EC on a Linux X86-84 or amd64. Open The Diameter Stack agent - SCTP Options tab Disable Heartbeat Sending Setting Description Setting Description For Outgoing Associations Select this checkbox if you want to disable heartbeat sending for outgoing associations. For Incoming Associations Select this checkbox if you want to disable heartbeat sending for incoming associations.

---

# Document 1642: Disk Collection Agent - Batch - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204999728/Disk+Collection+Agent+-+Batch
**Categories:** chunks_index.json

The Disk collection agent collects files from a local file system and inserts them into a workflow. Initially, the source directory is scanned for all files matching the current filter. In addition, the Filename Sequence and Sort Order services may be utilized to further manage the matching of files, although they may not be used at the same time since it will cause the workflow to abort. All files found will be fed one after the other into the workflow. When a file has been successfully processed by the workflow, the agent offers the possibility of moving, renaming, removing, or ignoring the original file. The agent can also be configured to keep files for a set number of days. In addition, the agent offers the possibility of decompressing compressed (gzip) files after they have been collected. When all the files are successfully processed, the agent stops to await the next activation, whether it is scheduled or manually initiated. If you require to run the batch-based Disk collection agent in a real-time workflow, for further information, see Batch-Based Real-Time Agents . Loading

---

# Document 1643: Inter Workflow Batch Forwarding Agent Events - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204673660/Inter+Workflow+Batch+Forwarding+Agent+Events
**Categories:** chunks_index.json

Agent Message Events Inserted batch: filename Reported when a file has been closed in the target directory (hence ready for collection). The message is only used in batch workflows. Debug Events There are no debug events for this agent.

---

# Document 1644: Duplicate UDR SQL Storage Setup Guide - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205685209/Duplicate+UDR+SQL+Storage+Setup+Guide
**Categories:** chunks_index.json

The contents of this page is meant as a general guide to list considerations that might impact the performance of your Duplicate UDR SQL storage setup. Note that each setup may vary and that these are not strict rules that users should apply for all their Duplicate UDR SQL storage setup. File vs SQL Storage Generally, there would be some performance overhead when choosing to use SQL storage instead of File storage, but there are benefits that an SQL storage could provide depending on your needs that makes the performance overhead acceptable. The purpose of this guide is to offer several recommendations that you may apply to minimize the performance overhead of your SQL storage setup. Managing Latency It is recommended that you deploy your database server in the same network as the EC server where workflows with Duplicate UDR agents will be running. If you are unable to have both EC and the database server reside in the same network, minimize the network overhead between both servers as much as possible. Optimizing Read And Write Operations Performance may be better when "Enable Separate Storage Per Workflow" option is disabled. SAP Hana From our performance tests for SAP Hana SQL storage specifically, the use of columnar based table compared to row based tables show strong advantages in performance and disk space footprint. There were unexpected issues during our tests when the memory capacity of the machine where SAP Hana was installed was too small. We experienced minimal issues when installing SAP Hana database with at least 64GB memory capacity. Cache Size and Segmentation The Indexing Field of incoming UDRs should preferably be either an increasing sequence number or a timestamp with good locality to preserve performance of workflow executions. For large cache sizes, it may be a good idea to split them to multiple workflows in order to preserve performance. For large cache sizes, splitting batches of incoming UDRs into multiple transactions may improve performance of workflow runs. Minimizing the cache size may improve the performance of the duplicate checks by the Duplicate UDR agents and the speed of Search and Delete operations using the Duplicate UDR Inspector.

---

# Document 1645: Details - Application Tab - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204605398/Details+-+Application+Tab
**Categories:** chunks_index.json

The Application Tab contains the information listed below. RCP Connections Tab Open Application with the RCP Connections tab displayed Tab Description Tab Description RCP Connections Information about RCP connections. For detailed information, see 7.4 RCP Latency Monitoring and the description of Oracle's Package java.lang.management : https://docs.oracle.com/javase/8/docs/api/java/lang/management/package-summary.html Event Sending Tab Open Application with the Event Sending tab displayed Tab Description Tab Description Event Sending Information about Events. For detailed information, see Oracle's Package java.lang.management Description: https://docs.oracle.com/javase/8/docs/api/java/lang/management/package-summary.html Workflow MIM Browser Open Application with the Workflow MIM Browser tab displayed Tab Description Tab Description Workflow MIM Browser Information about Workflows. For detailed information, see Workflow Monitoring .

---

# Document 1646: Restore Configurations - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204604327/Restore+Configurations
**Categories:** chunks_index.json

Import the backup of the configurations using System Import. $ mzsh mzadmin/<password> systemimport <backup directory><filename> Start the real-time workflows. Enable the Workflow Groups.

---

# Document 1647: Configuration Contract - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204676747/Configuration+Contract
**Categories:** chunks_index.json

This chapter describes the Configuration Contract in further detail. This chapter includes the following sections: Configuration Contract Example Configuration Contract Tags Generating and Using Java Code from the Configuration Contract

---

# Document 1648: Operations REST Interface - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205031043
**Categories:** chunks_index.json

Operations such a workflow configuration, workflow execution plan, external references etc are exposed as an OpenAPI. A live instance of this OpenAPI can be accessed here for any given running Platform: Workflows http(s)://<platform server>:<platform port>/ops/mz/wf/v1/api-docs Workflow Groups http(s)://<platform server>:<platform port>/ops/mz/wfg/v1/api-docs External References http(s)://<platform server>:<platform port>/ops/extref/v1/api-docs Host http(s)://<platform server>:<platform port>/ops/mz/host/v1/api-docs Pico http(s)://<platform server>:<platform port>/ops/mz/pico/v1/api-docs Note! For Host and Pico , users must have Execute permission from the Pico Viewer application to access the API. This permission can be viewed and granted in Access Controller. This allows for exploration of the OpenAPI and it is also possible to place live requests against the running Platform granted that valid credentials are provided.

---

# Document 1649: The TCP/IP Format - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204675002/The+TCP+IP+Format
**Categories:** chunks_index.json

If Allow Multiple Connections and Send Response are selected, UDRs are expected as replies back to the collector from the APL agent. Extend the internal format to contain the built-in TCP/IP format. external my_ext sequential { // field definitions int type : static_size(1); ascii Anum : static_size(8); ascii Bnum : terminated_by(0xA); }; internal TCP_Int : extends_class( "com.digitalroute.wfc.tcpipcoll.TCPIPUDR" ) { }; in_map TCP_InMap : external( my_ext ), internal( TCP_Int ), target_internal( my_TCP_TI ) { automatic; }; decoder myDecoder : in_map( TCP_InMap );

---

# Document 1650: SMPP UDRs - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204740627/SMPP+UDRs
**Categories:** chunks_index.json

The SMPP Receiver agent generates DELIVER_SM UDRs and receives DELIVER_SM_RESP UDRs, while the SMPP Transmitter agent receives SUBMIT_SM UDRs and generates SUBMIT_SM_RESP UDRs. DELIVER_SM UDRs T he following fields are included in the DELIVER_SM UDRs: Field Description Field Description data_coding (int) This field defines the encoding scheme of the short message user data, (3) Latin-1 (ISO-8859-1), or (8), USC2 (UTF-16BE). Note! Even though there are several other encoding schemes defined, the mentioned schemes are the only ones currently supported by the SMPP agents. dest_addr_npi (int) This field indicates the NPI (Numbering Plan Indicator) of the destination address. dest_addr_ton (int) This field indicates the TON (Type Of Number) of the destination address. destination_addr (string) This field contains the destination address. esm_class (int) This field is used for indicating special message attributes associated with the short message. Note! Currently only the messaging mode Store and Forward is supported. priority_flag (int) This field designates the priority level of the message. protocol_id (int) This field contains the Protocol Identifier. This is a network specific field. registered_delivery (int) This field indicates whether an SMSC delivery receipt or an SME acknowledgement is required or not. replace_if_present_flag (int) This field indicates whether a submitted message should replace an existing message or not. schedule_delivery_time (string) This field defines when the short message is to be scheduled by the SMSC for delivery. Set to NULL for immediate message delivery. sequence_number (int) This field is used for correlating responses with requests. The allowed sequence_number range is from 0x00000001 to 0x7FFFFFFF. service_type (string) This field can be used to indicate the SMS Application service associated with the message. Set to NULL for default SMSC settings. short_message (bytearray) This field contains the actual SM (Short Message) which can consist of up to 254 octets of user data. Note! Long messages are not supported. sm_default_msg_id (int) If the SM is to be sent from a list of pre-defined ('canned') SMs stored on the SMSC, this field indicates the ID of the SM. If not using an SMSC canned message, set to NULL. source_addr (string) This field contains the source address. source_addr_npi (int) This field indicates the NPI (Numbering Plan Indicator) of the source address. source_addr_ton (int) This field indicates the TON (Type Of Number) of the source address. validity_period (string) This field indicates the validity period of this message. Set to NULL to request the SMSC default validity period. OriginalData (bytearray) This field contains the original data in bytearray format. DELIVER_SM_RESP UDRs The following fields are included in the DELIVER_SM_RESP UDRs: Field Description Field Description command_status (int) This field of an SMPP message response indicates the success or failure of an SMPP request. OriginalData (bytearray) This field contains the original data in bytearray format. SUBMIT_SM UDRs The following fields are included in the SUBMIT_SM UDRs: Field Description Field Description data_coding (int) This field defines the encoding scheme of the short message user data, (3) Latin-1 (ISO-8859-1), or (8), USC2 UTF-16BE). Note! Even though there are several other encoding schemes defined, the mentioned schemes are the only ones currently supported by the SMPP agents. dest_addr_npi (int) This field indicates the NPI (Numbering Plan Indicator) of the destination address. dest_addr_ton (int) This field indicates the TON (Type Of Number) of the destination address. destination_addr (string) This field contains the destination address. esm_class (int) This field is used for indicating special message attributes associated with the short message. Note! Currently only the messaging mode Store and Forward is supported. priority_flag (int) This field designates the priority level of the message. protocol_id (int) This field contains the Protocol Identifier. This is a network specific field. registered_delivery (int) This field indicates whether an SMSC delivery receipt or an SME acknowledgement is required or not. replace_if_present_flag (int) This field indicates whether a submitted message should replace an existing message or not. schedule_delivery_time (string) This field defines when the short message is to be scheduled by the SMSC for delivery. Set to NULL for immediate message delivery. service_type (string) This field can be used to indicate the SMS Application service associated with the message. Set to NULL for default SMSC settings. short_message (bytearray) This field contains the actual SM (Short Message) which can consist of up to 254 octets of user data. Note! Long messages are not supported. sm_default_msg_id (int) If the SM is to be sent from a list of pre-defined ('canned') SMs stored on the SMSC, this field indicates the ID of the SM. If not using an SMSC canned message, set to NULL. source_addr (string) This field contains the source address. source_addr_npi (int) This field indicates the NPI (Numbering Plan Indicator) of the source address. source_addr_ton (int) This field indicates the TON (Type Of Number) of the source address. validity_period (string) This field indicates the validity period of this message. Set to NULL to request the SMSC default validity period. OriginalData (bytearray) This field contains the original data in bytearray format. SUBMIT_SM_RESP UDRs The following fields are included SUBMIT_SM_RESP UDRs: Field Description Field Description command_status (int) This field of an SMPP message response indicates the success or failure of an SMPP request. message_id (string) This field contains the unique message identifier reference assigned by the SMSC to each submitted short message. It is an opaque value and is set according to SMSC implementation. submitSmUDR (SUBMIT_SM (SMPP)) his field contains the SUBMIT_SM UDR for which this SUBMIT_SM_RESP has been received. OriginalData (bytearray) This field contains the original data in bytearray format.

---

# Document 1651: Legacy Kafka Agents - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/301138541/Legacy+Kafka+Agents
**Categories:** chunks_index.json

This section describes the Kafka agents available in previous versions and contains the following subsections: Legacy Kafka Profile Legacy Kafka Batch Collector Legacy Kafka Real-Time Collector Legacy Kafka Producer Legacy Kafka UDRs

---

# Document 1652: ADLS2 File Collection Agent Input/Output Data and MIM - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204639813/ADLS2+File+Collection+Agent+Input+Output+Data+and+MIM
**Categories:** chunks_index.json

Input/Output Data

---

# Document 1653: BinaryMessage UDR - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205002718/BinaryMessage+UDR
**Categories:** chunks_index.json

The BinaryMessage UDR is used for sending binary data over a websocket. The following fields are included in the BinaryMessage UDR: Field Description Field Description data (bytarray) This field contains the data in bytarray format. URI (string) This field contains the Uniform Resource Identifier in string format. securityInfor mation (TLSInformation (websocket)) This field contains information about the certificate chain and also which protocol and cipher suite are used .

---

# Document 1654: Python Code Editor Assistance - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205653541/Python+Code+Editor+Assistance
**Categories:** chunks_index.json

In the code area of the Python Module, the General tab of the Python collection and processing agents, and the API tab of the Python Connector agent, the different parts of the code are color coded according to type, for easier identification. When you right-click in the code area, a context sensitive popup menu appears, enabling easy access to the most common actions that you might want to perform. Code completion provides proposals when requested to help you write Python code. These features are described below. Syntax Highlighting The text is color coded according to the following definitions: Brown: Strings Blue: Functions Green: Types Purple: Keywords Orange: Comments Right-Click Menu The following options are available when you right-click on the code editor in a Python agent configuration: Open Text Editor right-click menu Option Description Option Description UDR Assistance Opens the UDR Internal Format Browser from which the UDR Fields may be inserted into the code area. MIM Assistance Opens the MIM Browser from which the available MIM Fields can be inserted into the code area.

---

# Document 1655: SCP Forwarding Agent Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205653956
**Categories:** chunks_index.json



---
**End of Part 69** - Continue to next part for more content.
