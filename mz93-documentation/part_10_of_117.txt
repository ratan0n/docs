# RATANON/MZ93-DOCUMENTATION - Part 10/112

---
**Dataset:** ratanon/mz93-documentation
**Part:** 10 of 112
**GitHub:** https://github.com/ratan0n/docs/tree/main/mz93-documentation
**Size:** ~50.7 KB
---

Input/Output Data The Input/Output data is the type of data an agent expects and delivers. The REST Client_Deprecated agent receives and produces RESTCycleUDR types. MIM For information about the MIM and a list of the general MIM parameters, see Administration and Management in Legacy Desktop . Publishes MIM Value Description MIM Value Description Oustanding Requests This MIM parameter contains the number of outstanding requests that the agent is handling. The value of this MIM parameter is reset when the workflow is started. Oustanding Requests is of the long type and is defined as a global MIM context type. Timeouts This MIM parameter contains the number of timeout errors that have occurred. Timeouts is of the long type and is defined as a global MIM context type. Accesses The agent does not access any MIM parameters.

---

# Document 225: REST HTTP Interface - Buckets - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204611833
**Categories:** chunks_index.json

Provisioning is supported via a REST HTTP Interface which is implemented using the standard HTTP methods GET , PUT , POST and DELETE . The interface supports XML and JSON formats. The REST HTTP Interface runs on the EC Web Interface and is started when the EC process is started. Authentication is performed against the platform, if possible. If the platform is unreachable the user is authenticated against the locally defined user (configured in EC web interface properties). Retrieving Buckets To retrieve all buckets for a subscriber: Example Retrieving Buckets GET http://localhost:9090/PCC/Buckets/<subscriber key>/Bucket HTTP/1.0 Example output: { "Buckets": [ { "Product": 1001, "Counters": [ { "Usage": { "entry": [ { "key": 0, "value": 0 }, { "key": 1, "value": 0 }, { "key": 2, "value": 0 } ] } } ], "ID": "1", "StartTime": "2014-08-04 12:00:00", "StopTime": "2014-08-12 00:00:00" } ] } Return Codes No return codes will be sent. A list with 0 or more elements will be returned. Retrieving a Specific Bucket To retrieve a specific bucket with a certain ID: Example Retrieving a specific bucket GET http://localhost:9090/PCC/Buckets/<subscriber key>/Bucket/<id> HTTP/1.0 Example output: { "Product": 1001, "Counters": [ { "Usage": { "entry": [ { "key": 0, "value": 0 }, { "key": 1, "value": 0 }, { "key": 2, "value": 0 } ] } } ], "ID": "1", "StartTime": "2014-08-04 12:00:00", "StopTime": "2014-08-12 00:00:00" } Return Codes Code Description Code Description 200 Will be returned if the bucket was successfully retrieved. 204 Will be returned if the bucket did not exist. 500 Will be returned if a server error occurred. Creating a Bucket To create a bucket: Example Creating a bucket using xml POST http://localhost:9090/PCC/Buckets/<subscriber key>/Bucket Bucket HTTP/1.0 Content-Type: application/xml The xml-data should be structured as follows: <Bucket> <Counters> <Usage> <entry> <key>0</key> <value>100</value> </entry> <entry> <key>1</key> <value>200</value> </entry> <entry> <key>2</key> <value>300</value> </entry> </Usage> </Counters> <ID>1016</ID> <Misc> <entry> <key>mykey</key> <type>string</type> <value>myvalue</value> </entry> </Misc> <Product>1006</Product> <StartTime>2015-01-02 18:00:00</StartTime> </Bucket> Example Creating a bucket using JSON POST http://localhost:9090/PCC/Buckets/<subscriber key>/Bucket Bucket HTTP/1.0 Content-Type: application/json The json-data should be structured as follows: { "ID": "1016", "Misc": { "entry": [ { "key": "mykey", "type": "string", "value": "myvalue" } ] }, "StartTime": "2015-01-02 18:00:00", "Product": 1006, "Counters": [ { "Usage": { "entry": [ { "key": 0, "value": 100 }, { "key": 1, "value": 200 }, { "key": 2, "value": 300 } ] } } ] } Note! The subscriber is created if it does not exist when the command is called. Return Codes Code Description Code Description 201 Will be returned if the bucket was successfully created. 500 Will be returned if a server error occurred. Updating a Bucket Updates are made using PUT . Example Updating a bucket PUT http://localhost:9090/PCC/Buckets/<subscriber key>/Bucket/<id> HTTP/1.0 Return Codes Code Description Code Description 200 Will be returned if the bucket was successfully updated. 500 Will be returned if a server error occurred. Deleting a Bucket To delete a bucket: Example Deleting a bucket DELETE http://localhost:9090/PCC/Buckets/<subscriber key>/Bucket/<id> HTTP/1.0 Return Codes Code Description Code Description 200 Will be returned if the bucket was successfully deleted. 204 Will be returned if the bucket that was intended to be deleted did not exist. 500 Will be returned if a server error occurred. Retrieving All Sessions for a Subscriber To retrieve all sessions for a subscriber: Example Retrieving sessions GET http://localhost:9090/PCC/Buckets/<subscriber key>/Session HTTP/1.0 Example output: { "Sessions": [ { "ID": "gx;222;1000009", "Misc": { "entry": [ { "key": "origin_host", "type": "string", "value": "sim" }, { "key": "origin_realm", "type": "string", "value": "example.com" } ] }, "InstalledRules": [ { "Rules": [], "QoS": 0 } ], "Reservations": [ { "Granted": { "entry": [ { "key": 1, "value": 1 } ] }, "Products": [ 2 ], "Misc": { "entry": [] } } ], "LastActive": "2015-10-30 11:02:55" } ] } Return Codes No return codes will be sent. A list with 0 or more elements will be returned. Deleting a Subscriber To delete a subscriber: Example Deleting a subscriber DELETE http://localhost:9090/PCC/Buckets/<subscriber key> HTTP/1.0 Note! Deleting a subscriber means deleting the whole object found at: http://localhost:9090/PCC/Buckets/<subscriber key> Any Buckets and Subscribers belonging to this <subscriber key>-object will get deleted as well. Return Codes Code Description Code Description 200 Will be returned if the subscriber was successfully deleted. 204 Will be returned if the subscriber that was intended to be deleted did not exist. 500 Will be returned if a server error occurred. Retrieving Information about a Subscriber To retrieve information about a subscriber: Example Retrieving information about a subscriber GET http://localhost:9090/PCC/Buckets/<subscriber key>/Subscriber HTTP/1.0 Example output: { "Groups": [ "Group1" ], "IsChanged": false, "SentNotifications": [2], "Misc": { "entry": [ { "key": "billing_system", "type": "string", "value": "test" } ] }, "Notifications": [1] } Return Codes Code Description Code Description 200 Will be returned if the information about the subscriber was successfully retrieved. 204 Will be returned if the subscriber did not exist. 500 Will be returned if a server error occurred. Updating a Subscriber To update a subscriber: Example Updating a subscriber PUT http://localhost:9090/PCC/Buckets/<id>/Subscriber HTTP/1.0 Return Codes Code Description Code Description 200 Will be returned if the subscriber was successfully updated. 50 Will be returned if a server error occurred. Error Codes There are several different codes that can be returned for the different operations. When creating a UDR: Error code Description Error code Description 201 Will be returned if the UDR was created. 409 Will be returned if a UDR with the stated key already exists, or if there are dependencies missing. 415 Will be returned if the UDR key is of type string and the key is missing, or if the key type is incorrect. 500 Will be returned if the UDR requires references that are missing, or if there was an error. When retrieving one UDR: Error code Description Error code Description 200 Will be returned if the requested UDR was found. 204 Will be returned if there are no UDR with the stated id. 500 If there was an error. When retrieving all UDRs: Error code Description Error code Description 200 Will be returned with an empty list or with a list containing the UDRs. When updating a UDR: Error code Description Error code Description 200 Will be returned if the UDR was updated successfully. 408 Will be returned if the keys in the URL and the XML are different, or the key in the URL is set to "0". 409 Will be returned if the UDR requires references that are missing. 500 Will be returned if there was an error. When deleting a UDR: Error code Description Error code Description 200 Will be returned if the UDR was deleted successfully. 204 Will be returned if there are no UDR with the stated key. 409 Will be returned if the UDR is referenced by another UDR. 500 Will be returned if there was an error.

---

# Document 226: DRRealtimeCollector - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204676650/DRRealtimeCollector
**Categories:** chunks_index.json

The realtime collector implements the DRRealtimeThreadAgent class. As previously described, the realtime collector may choose to implement the consume method to handle request/response mechanisms. To tell the Workflow Editor that this capability exists, the Inspectable for the collector must return the response UDR Type in the getInputTypes method. When you create an agent which can use a "lazy" method of decoding, if an error occurs during lazy decoding in the agent that includes APL code configuration, a DRUnwindException is thrown. This exception must be caught to prevent the workflow from aborting. To catch a DRUnwindException in the collector agent, you can use the function block provided below. Alternatively, you can catch this exception, by adding the try-catch function block to the APL code included in the workflow. For further information on try-catch , see Function Blocks . catch(final DRUnwindException e){ if(e.getAction() == DRUnwindException.CONTINUE) { logger.log(Level.WARNING, "An error message", e); } else { throw e; } }

---

# Document 227: Backlog Size Functions - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204677891/Backlog+Size+Functions
**Categories:** chunks_index.json

In a real-time workflow, asynchronous agents use a queue to forward input UDRs to the workflow. This way, a workflow can be configured to include multiple queues, one for every asynchronous agent's output route. Each queue contains a UDR backlog. Note! The backlog can only handle UDRs. The following functions for Backlog Size described here are: queueGetSize The queueGetSize function retrieves the number of UDRs of the queue that currently contains the highest number of UDRs in the workflow. int queueGetSize() Parameter Description Returns the largest queue size. queueGetLimit The queueGetLimit function gets the configured maximum queue size limit. int queueGetLimit() Parameter Description Returns The soft limit, the configured maximum queue size limit of the workflow queue. You configure the soft limit of the workflow queues in the Workflow Properties. For further information, see Workflow Properties the Desktop user's guide. Note! A real-time agent implementation can modify the soft limit during the agent initialize() phase. For further information see initialize .

---

# Document 228: Closing Batches from APL and Error Handling - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204742014
**Categories:** chunks_index.json

Closing Batches from APL In addition to using the batch closing criteria in the agent's batch closing criteria, you can trigger closing of the current batch by routing a CloseBatchUDR to the agent. This UDR type contains the following field: Field Description Field Description BatchId (string) When the input type is MultiForwardingUDR , this field must contain the fntSpecification UDR. When the input type is bytearray, this field is ignored by the Disk_Deprecated forwarding agent. Error Handling When a worker process fails to synchronize or move data, an ErrorUDR is routed to the workflow. This UDR type contains the following fields: Field Description Field Description BatchId (string) When the input type is bytearray, this field contains the fixed string "SINGLE_BATCH". When the input type is MultiForwardingUDR , this field contains an fntSpecification string. Code (int) This field contains a code that identifies the type of error that occurred. 200 - Incoming data was throttled due to exceeded worker queue size or concurrent batches limit. 300 - Failed to create a stream for synchronized data. 301 - Failed to write data to a temporary file. 302 - Cannot guarantee that data was stored. 400 - Missing fntSpecification in MultiForwardingUDR . Data (list<bytearray>) This field contains the input data (payload) to the agent. The maximum size of the list depends on the settings in the Advanced tab. When data is redirected back into the workflow in an ErrorUDR due to an unexpected error, it is not guaranteed that the data has been written. In the case of throttled data, it is guaranteed that the data has not been written. Note that the redirected data is included by any counters for closing criteria. Therefore, when data has been throttled, for example, the final batch file contains less data than configured using the automatic closing criteria.

---

# Document 229: ECS Collection Workflow (UDR) - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204673020/ECS+Collection+Workflow+UDR
**Categories:** chunks_index.json

In order to send a UDR to the ECS, a workflow must contain an ECS forwarding agent. To perform a table lookup for all UDRs, an Analysis agent is used. If the lookup succeeded, the UDR is sent on the OK route to be saved on disk, while the failing UDRs are sent to the ECS forwarding agent. In the collection workflow the same evaluation is tried again. If it fails, the UDR is sent back to the ECS with the same configuration. To be able to collect ECS data, the UDRs or batches must each belong to an existing reprocessing group, and the reprocessing state must be set to New . Open A workflow collecting and validating ECS data Since we want to redo the processing made in the forwarding workflow, we keep the configurations of the ECS Inspector and ECS forwarding agents the same as in the previous workflow. Workflow Properties The Error tab in the Workflow properties must not be configured to handle cancelBatch behavior, since it will never be valid for ECS collection workflows. No calls to cancelBatch are allowed from any agent since it will cause the workflow to immediately abort. ECS Collection Agent All UDRs conforming to the collection criteria are selected and processed as a batch. Analysis Agent The Analysis agent only needs to validate and route the UDRs. The Error Code and Error Case are already associated with the UDR. Example - Analysis agent udrRoute( input, "error" ); Example - Reassigning to a Different Reprocessing Group Suppose there is a workflow collecting and validating UDRs from the ECS. If the validation fails, the UDRs are sent back to the ECS with an associated Error Code. UDRs assigned to a new or a different Error Code are directed to a new reprocessing group. If you need to associate these UDRs with a different reprocessing group, udrClearErrors must be called prior to udrAddError . The exception is if the new Error Code is associated with the same reprocessing group. Case 1 - Same reprocessing group If the new Error Code belongs to the same reprocessing group: Using udrClearErrors results in a new Error Code and reprocessing group to be associated with the UDR in the ECS. This method avoids several Error Codes pointing at different reprocessing groups, which makes automatic group assignment impossible. Leaving out udrClearErrors results in old and new Error Codes (including the reprocessing group) to be associated with the UDR in the ECS. Case 2 - Different reprocessing group If the new Error Code belongs to a different reprocessing group: Using udrClearErrors results in a new Error Code and reprocessing group to be associated with the UDR in the ECS. Leaving out udrClearErrors does not result in any association to a reprocessing group, however both Error Codes are associated with the UDR in the ECS. Note! All UDRs collected when activating the workflow are processed as one batch. Any call to cancelBatch causes the workflow to abort immediately. For more information, refer to cancelBatch . Note! For more information on the UDR functions mentioned above, see UDR Functions | udrAddError and UDR Functions | udrClearErrors . For details on the cancelBatch workflow function, see Workflow Functions | cancelBatch .

---

# Document 230: Duplicate Batch Inspector - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205685153/Duplicate+Batch+Inspector
**Categories:** chunks_index.json

The Duplicate Batch Inspector is used for viewing the metadata cache used for duplicate checking. To open the Duplicate Batch Inspector, go to Manage  Duplicate Batch Inspector . To populate the Duplicate Batch Inspector, specify search criteria in the Filter dialog. Open Filter dialog Setting Description Setting Description Profile Select the profile which corresponds to the data of interest. Display fields Click Browse to select which columns to display in the Duplicate Batch Inspector dialog. Note that to be able to select columns, you need to specify the fields to select as Logged MIMs in the Duplicate Batch Agent Configuration . Created start date and time Use this field to search for created data starting from this date and time. Created end date and time Use this field to search for data ending at this date and time. Select OK to view the matching data of the search. Open Duplicate Batch Inspector dialog Setting Description Setting Description Filter Click the Filter button to open the Filter dialog to specify new search criteria. Refresh Click Refresh to run the search with the previous search criteria. Delete Flags selected entries for deletion. A popup is displayed where you can confirm whether to Delete or Cancel the operation. If no entry is selected, you are asked if you want to Delete all entries or Cancel the operation.

---

# Document 231: Oracle RAC Connection - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204637920/Oracle+RAC+Connection
**Categories:** chunks_index.json

The following steps are applicable when using Oracle RAC: Go to JDBC and UCP Downloads page . Download the Zipped JDBC driver (ojdbc8.jar) and Companion Jars tar file for Oracle database driver 19c. Unzip the file. After successful extraction copy the ons.jar and ojdbc<version>.jar files from the root directory. Store ons.jar and ojdbc<version>.jar in the directory specified by the mz.3pp.dir property in the installation properties, see Additional Platform Properties in install.xml .

---

# Document 232: FTAM IOG Agent - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204607494/FTAM+IOG+Agent
**Categories:** chunks_index.json

This section describes the FTAM/IOG agent. This is a collection agent for batch workflow configurations. Prerequisites The reader of this information should be familiar with: FTAM Documentation FTAM Responder Application, 56/155 17-ANZ 216 01 Uen, Ericsson The FTAM/IOG agent allows files from Ericsson IOG to be collected and inserted into a workflow using the FTAM protocol. The agent does not communicate directly with the IOG. Instead, it goes via the FTAM Interface service that must be running on a host in the network. The advantage of this implementation is that only one host has to be equipped with FTAM software. For further information about how the FTAM Interface service is maneuvered, see FTAM IOG Interface Service . The FTAM/IOG agent collects subfiles that are part of a composite main file on the IOG. When activated, the agent connects to the FTAM Interface service and requests the new data. The FTAM/IOG agent keeps track of the data to be collected by reading the contents of one or more directory control files, which maintains the status of the subfiles The FTAM/IOG agent may not be combined with other collectors in the same workflow. The section contains the following subsections: FTAM IOG Agent Configuration FTAM IOG Agent Transaction Behavior FTAM IOG Agent Input/Output Data and MIM FTAM IOG Agent Events FTAM IOG Interface Service

---

# Document 233: Platform Properties - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205657584
**Categories:** chunks_index.json

This section describes the different properties that you can use in the STR to configure the Platform. Property Description Property Description auth.oidc.rp.client.id Default value: "" Client ID provided by Identity Provider. If it is not present, the SSO functionality is disabled. auth.oidc.rp.provider.url Default value: "" Provide the Base URL to the associated Identity Provider. Read access is required for the / .well-known/openid-configuration file to acquire the relevant Provider Configurations. auth.oidc.rp.provider.name Default value: "" The name of the provider needs to be Azure if it is used and groups are returned as uids. auth.oidc.rp.groupPath Default value "roles" Path in ID Token or UserInfo object to find an array of users Access groups as defined by the Access Controller , separated with a dot (.). The groups should be an array of Strings. Example: Here the groups array is inside and object . { myObject : { myGroups : [ "myGroup1", "mygroup2" ] } } The path should then be: groupPath: myObject.myGroups When the group's array is direct under UserInfo then groupPath is just the name of the group's array. auth.oidc.rp.auth.method Default value: "CLIENT_SECRET_BASIC" Available authentication methods are CLIENT_SECRET_BASIC and PRIVATE_KEY_JWT auth.oidc.rp.client.secret Default value: "" This is mandatory when CLIENT_SECRET_BASIC is used as an authentication method. This property sets the relevant Client Secret. auth.oidc.rp.auth.jwt.keystorePath Default value: "" Path to JKS keystore when PRIVATE_KEY_JWT is used auth.oidc.rp.auth.jwt.alias Default value: "" Alias for key in keystore when PRIVATE_KEY_JWT is used auth.oidc.rp.auth.jwt.keystorePassword Default value: "" Keystore password when PRIVATE_KEY_JWT is used, needs to be Encrypted by MediationZone. auth.oidc.rp.auth.jwt.keyPassword Default value: "" Key password when PRIVATE_KEY_JWT is used, needs to be Encrypted by MediationZone. auth.oidc.rp.scopes Default value: "" Optional additional scopes. Default scopes are openid, profile, and email. auth.oidc.rp.claims.username Default value: "" Claim to use as the user name, if not specify sub will be used. This value should be unique. auth.oidc.rp.auth.jwt.keyId Default value: "" Optional Key ID for JWT header when PRIVATE_KEY_JWT is used auth.oidc.rp.group.syncDisabled Default value false. When the value is set to true, the group synchronization from the Identity Provider is disabled, and the groups are set manually on each SSO User. auth.oidc.rp.group.default Default value "" When Group Sync is disabled, the value of this property will be assigned to the user's default group when the user logs in for the first time . auth.oidc.rp.multigroupsync.defaultGroup Default value "" This property assigns a default group to the user who is a member of multiple groups when the user logs in for the first time . It takes effect only when the group synchronization is enabled. The default group can be changed after logging in and must be one of the member groups. Changes made to the default group after logging in will persist in the next login. auth.oidc.rp.auth.debug Default value false. Set this to true during the implementation of SSO Access to get more information. cts.source.systems This parameter (of type list) is valid only for integrations with SAP CTS+. It enables you to restrict the source systems from which exports (regular configuration and Workflow Package)can originate. If the parameter is left empty, exports from any system will be allowed. Things to note: This parameter is only effective when an import is triggered via the CTS+ API. Imports initiated through the System Import UI or the command line interface are not impacted. The value of this parameter must exactly (case-sensitive) match the value specified in the mz.name system parameter of the source system. ( mz.name can be changed at any time in the source system but changes will only take effect after the system is restarted. mz.name corresponds to mzexport.mz.name in an export file. This parameter is used to determine if an import should be permitted) Example - System Parameter use cts.source.systems ="dev1,test,staging" mail.smtp.ssl.protocols Default value: "TLSv1.2" Specifies the SSL protocols that will be enabled for SSL connections. The property value is a whitespace separated list of tokens, with possible values "TLSv1, TLSv1.1, TLSv1.2, TLSv1.3". TLSv1 is not recommended. mz.codeserver.saveStateInterval Default value: 10 Whenever an update to the Codeserver state is made, such as when saving a workflow with a change in its APL code, the Codeserver state will have to be saved. Using this property allows you to set the minimum interval (in seconds)for how often the Codeserver saves its state to the disk. mz.crypto.hash.algorithm Default value: SHA-256 This property is to use the crypto algorithm for hashing data, for example, files. mz.crypto.key.crypt Default value: AES This property is to use the crypto algorithm to encrypt and decrypt sensitive data within communications, for example, passwords. The value can be set to AES/GCM/NoPadding for a higher level of security. Note! If you have set the value to AES/GCM/NoPadding, and you try to decrypt data, and it does not succeed on the first attempt, the property value reverts to AES. mz.crypto.key.stream Default value: PBKDF2WithHmacSHA256 This property is to encrypt configurations when you have a user password for the encryption. The value can be set to PBEWithMD5AndDES . Note! If the decryption fails when using the selected algorithm, it will try to use the other algorithm. mz.cryptoservice.keystore.path Default value: "" This property specifies the full path to the crypto service keystore file. This keystore file is used for encrypting/decrypting passwords with specific keys stored in the keystore, and needs to be of JCEKS type. See the JDK product documentation for further information about using keytool in different scenarios. See also the sections describing the mzsh encryptpassword in the https://infozone.atlassian.net/wiki/x/wacyD for further information. mz.cryptoservice.keystore.password Default value: "" This property specifies the password for the crypto service keystore file specified by the mz.cryptoservice.keystore.path property. This keystore is used for encrypting/decrypting passwords with specific keys stored in the keystore. See the sections describing the mzsh encryptpassword in the Command Line Tool Reference Guide for further information. mz.database.profile.validation.skip Default value: false Set this property to true if you want to bypass the remote database validation in the Database profile. Validation requires that the configured database, tables and columns are available, and if they are unavailable when the validation is performed, the configuration and all its dependents can be marked as invalid. You can set this property if you require to validate your configuration when, or in an environment where, the database or its tables are unavailable. mz.desktop.accelerators Default value: "/path/to/accelerators.properties" Set this property with the default value to set your own key bindings. You require to unpack a properties file from devkit.jar , and go to com/digitalroute/devkit/ui/accelerators/accelerators.properties . Save the accelerators.properties file to disk, and set this property to enable the accelerators.properties file. mz.dynamicconnections Default value: true This property specifies if the pico instances for Desktop, mzsh, and Service Contexts must be registered on pico hosts for access: true - Instances always have access. false - Instances must be registered on pico hosts for access. mz.httpd.security.disabled.cipher Default value: " .*_anon_.*$, SSL_.*$, (.*(3DES)).*$, .*_DHE_.*$ " This property allows you to use regex to manually disable the Java security cipher suite when using any picos to connect to the Platform with SSL enabled. This property is used when the Platform uses a different Java version than the rest of the picos. As there may be differences in the security ciphers between versions, the property aims to disable these ciphers to allow the picos to communicate with the Platform. mz.httpd.security.redirect Default value: false If TLS is enabled and this property is set to true , any attempt to access the webserver using HTTP will cause a redirect to HTTPS. The default behavior is just to return an error. mz.javac.source Default value: "default" If the compilation of the system is slow after you import a new configuration, set this property to determine the javac version to be used. The possible values are 7, 8 or default. Setting this value to "7" may improve the compilation time. mz.license.file Default value: $MZ_HOME/etc This property specifies the directory that contains the installation license file, i.e. mz.license . mz.mailserver Default value: "" This property specifies the name or IP address of the mail server to be used for event generated e-mails. Note! The use of this property has been deprecated and will removed in future releases. Use the property mz.mailserver.host instead. mz.mailserver.auth Default value: false Enables SMTP authentication. Note! The use of this property has been deprecated and will removed in future releases. Use the property mz.mailserver.auth.enabled instead. mz.mailserver.auth.user Default value: "" Set the SMTP user to be used for login when having enabled SMTP authentication with the mz.mailserver.auth property. mz.mailserver.auth.enabled Default value: false Set this property to true if you want to enable SMTP authentication. If set to true , you also need to add the properties mz.mailserver.auth.user and mz.mailserver.auth.password . mz.mailserver.host Default value: "" This property specifies the name or IP address of the mail server to be used for event generated e-mails. mz.mailserver.auth.password Default value: "" Set the encrypted password to be used for the SMTP user stated in the mz.mailserver.auth.user property when having enabled SMTP authentication with the mz.mailserver.auth property. To encrypt the password, use the mzsh encryptpassword command, and enter the result in this field. See the Command Line user documentation for further information on how to use this command. mz.mailserver.port Default value: 25/587 Use this property to configure which port you want to used for sending event generated e-mails. When the mz.mailserver.auth property is not used, i e set to false , the default value is 25 . When the mz.mailserver.auth is set to true , the default value is 587 . mz.notifier.mailfrom Default value: "" This property specifies the sending e-mail address to be used for event generated e-mails. You must enter an e-mail address for an event notification to be sent by e-mail. mz.picostorage.usecache Default value: true This property enables the cache during a system import. mz.platform.extref.ttl Default value: 5 Use this property to configure a cache for the external references by entering the number of seconds you want the cache to live. If you require to disable the cache, for example in a development enviroment, set the value to 0. mz.platform.s3.extref.ttl Default value: 5 Use this property to configure a cache for the external references stored on an S3 Container by entering the number of seconds you want the cache to live. This will only work when you have S3 Properties File selected in your external reference profile. If you require to disable the cache, for example in a development environment, set the value to 0. mz.platform.wf.max.concurrent.starts This property decides how many workflows that can start loading at the same time. No limit is set for actual running workflows. Warning! Only change the property if support has expressly recommended it. It is normally not recommend to change this property since it can introduce some instability. mz.platform.wf.threadpool Default value: 10 This is a platform property that controls the number of threads used for the thread pool used by the workflow and group servers. If you have a very large batch system with a lot of scheduling and workflows that are starting and stopping frequently, this property might need to be increased to get more threads. mz.security.user.restricted.login Default value: false Use this property to restrict user login to one instance for each interface type, i e Desktop and Command Line Tool mzsh. mz.servicehost.port.range This property determines the port range used by services. The system will bind to ports in the provided ranges. The values must not overlap with the ports used by SCs that are running on the same host. mz.servicehost.natures This property contains one or more service specific identifiers that sets behaviors, that are required by services that run on the Platform. mz.statistics.collect.all Default value: true This property enables or disables collection of all statistics on the Platform. When you set this property to false , it overrides mz.statistics.collect.pico and mz.statistics.collect.workflow . mz.statistics.collect.pico Default value: true This property enables or disables collection of pico statistics on the Platform. mz.statistics.collect.workflow Default value: true This property enables or disables collection of workflow statistics on the Platform. mz.subfolder.enabled Default value: false This property determines if the subfolder feature in Desktop is enabled or disabled. If you want to enable the subfolder feature in Desktop, set the value to true . mz.subfolder.separator Default value: "_" This property determines the separator you can use when naming folders in the Desktop so that the subfolder feature is enabled. The valid values are "-" or "_" . mz.systemlog.maxresults Default value: 500000 This property determines the maximum number of search results when you run a search in the System Log. mz.ultra.bitfield.codec Default value: "false" This property selects the implementation that is to be used for ultra bit_block . If set to true, the newly selected implementation will be used. Values that are not set using this property will use the old implementation. mz.ultra.xml.handle_as_string Default value: "" If you want to set any XML data type to be converted into string, you must set the value of this property to the data type you intend to convert. For example, if you wish to have all decimal data type be handled as string, set the value of this property to decimal . For further information on XML schema support, see https://infozone.atlassian.net/wiki/x/WSY0D mz.ultra.xml.restrictions Default value: off If you want to use XML union element type, you must enable this property . If you want to use unions and restrictions inside unions, set this property to union . If you want to use restrictions everywhere, including inside union type, set this property to on . For further information on XML schema support, see XML Schema Support . mz.use.date.timezone Default value: false Setting this property to true will instruct the system to use the attached time zone when SQL input originates from a date object. In most cases, the property should be set in the pico configuration of ECs . However, in case of audit processing, the property should also be set in the pico configuration of the Platform. Note that if the mz.use.date.timezone property is used for setting dates with another time zone, there will be no way of keeping track of the actual time zone in the database, and you may have to manually convert the date during selection. To keep track of the time zone in an Oracle database, use the data type TIMESTAMP WITH TIME ZONE. mz.user.emergency.unlock Default value: "" Setting this property with an encrypted password will change the mzadmin password at platform startup. For information about how to reset the mzadmin password, see https://infozone.atlassian.net/wiki/x/AqsyD Note! This property should always be removed when not being used. Otherwise the mzadmin password will be reset at every platform startup. mz.use.prefixfilter Default value: false If you add this property with the value true , files or configurations with more than one underscore at the beginning of the name are not visible from the Desktop after you restart the Platform. mz.webserver.host Default value: Taken from the common property pico.rcp.server.host . This is the host IP address or hostname used to communicate with the Platform Web Interface. mz.webserver.port Default value: 9000 This is the port used to communicate with the Platform Web Interface. Note! This is the port that you use to launch the Desktop. mz.osgi.bootdelegation.ext Default value: "" This property adds extra value to Felix Osgi boot delegation. Note! The value of this parameter should be a string with a extra boot delegation for Felix osgi. The value should not include a space and should not start or end with a comma. For AppDynamic monitoring tool the value should always be com.singularity.* . pico.rcp.codeserver.deregister.timeout Default value: 2700 This property specifies the time (in seconds) to wait before de-registering an unreachable EC from the Platform. Once de-registered, another EC can be brought up to replace it. An EC is considered to be unreachable when the last known state was that it was running, but has since lost contact with the Platform. pico.rcp.tls.keystore Default value: "" Set this property to enable the system to use TLS for all RCP connections that are not from the local host. If this property is not set, TLS will not be used at all. pico.tmpdir Default value: MZ_HOME/tmp This property specifies the pico temp directory you want the Platform to use. snmp.trap.format.b Default value: "" Add this property and set it to true if you want to activate the new format for SNMP events corresponding to the latest MIB definitions. If this property is not included, or if it is set to false, the previous invalid format will apply, which may be useful for backwards compatibility reasons. Enhanced User Security Platform Properties The properties below are applicable when the property mz.security.user.control.enabled is set to true in the Platform: Property Description Property Description mz.security.user.control.enabled Default value: true This property enables or disables enhanced user security. If set to true , several rules regarding the passwords apply as soon as the platform is restarted. For information about enhanced user security, see https://infozone.atlassian.net/wiki/x/LyYyD All users are required to change the password during their first login after this property has set to true . If an administrator user should reset a user's password, the user must also change it when they login. mz.security.max.password.age.enabled Default value: false Enables or disables the password expiration check. If the mz.security.user.control.enabled and mz.security.max.password.age.enabled properties are set to true, the user is required to change the password every certain number of days that is set in the mz.security.max.password.age.admin and mz.security.max.password.age.user properties . mz.security.max.password.age.admin Default value: 30 This property specifies the maximum password age for administrator users in days. Please refer mz.security.max.password.age.enabled column. mz.security.max.password.age.user Default value: 90 This property specifies the maximum password age for users in days. Please refer mz.security.max.password.age.enabled column. mz.security.max.password.history Default value: 12 This property specifies how many passwords back that are required to be unique before reusing an old password. mz.security.user.control.password.numcaps.count Default value: 1 The minimum number of upper case characters or number of numerical characters, in a password. mz.security.user.control.password.numcaps.message Default value: The password needs at least one capital letter or a number in it. The message to be displayed for the user when they have not met the condition for the minimum number of upper case or numerical characters in the password. mz.security.user.control.password.numcaps.pattern Default value: [A-Z0-9] The pattern of the permitted values in regular expression. The password will be matched to the pattern to determine if the condition is met. mz.security.user.control.password.length.count Default value: 8 The minimum total number of characters in a password. mz.security.user.control.password.length.message Default value: The password needs to be at least 8 characters. The message to be displayed for the user when they have not met the condition for the minimum length of the password. mz.security.user.control.password.lowercase.count Default value: "" The minimum total number of lowercase characters in a password. mz.security.user.control.password.uppercase.count Default value: "" The minimum total number of uppercase characters in a password. mz.security.user.control.password.number.count Default value: "" The minimum total number of numeric characters in a password. mz.security.user.control.password.special.count Default value: 1 The minimum number of special characters, in a password. mz.security.user.control.password.special.message Default value: The password needs to contain at least 1 special character(s). The message to be displayed for the user when they have not met the condition for the minimum number of special characters in the password. mz.security.user.control.password.special.pattern Default value: [W_] The pattern of the permitted values in regular expression. The password will be matched to the pattern to determine if the condition is met. mz.security.user.control.password.repetition.message Default value: The password contains too many consecutive identical characters. The message to be displayed for the user when they have not met the condition for the password having the least amount of multiple repeated characters in a sequence. mz.security.user.control.password.username.message Default value: The username may not be a part of the password. The message to be displayed for the user when they have the username contained within the password. mz.security.user.control.password.history.message Default value: The password may not be a recently used password. The message to be displayed for the user when they are reusing a password that they have used before. mz.security.user.control.password.extra.count Default value: "" The minimum number of characters for the extra user policy. mz.security.user.control.password.extra.message Default value: "" The message to be displayed for the user when they did not meet the requirements of the extra user policy. mz.security.user.control.password.extra.pattern Default value: "" The pattern of the permitted values. The password will be matched to the pattern to determine if the condition is met. mz.security.user.control.password.extra.type Default value: "" The type that determines what the extra pattern will be. The value of this property can be set to regexp or none. Setting it to regexp ensures that the pattern has to conform to regular expressions. mz.user.account.change.password.limit Default value: false Setting this property to true will limit the password change to only once per day. This property does not restrict users from the Administrator Group. mz.user.account.inactivity Default value: false Setting this property to true will disable user accounts with inactivity exceeding 90 days. However, system accounts (admin accounts) are not affected by this.

---

# Document 234: Reprocessing of Erroneous UDRs - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205881871/Reprocessing+of+Erroneous+UDRs
**Categories:** chunks_index.json

Reprocessing Groups are used to collect records from ECS into a workflow. It is possible to do automatic association of a Reprocessing Group to an error code when the UDR with the error code is sent to ECS. If not done automatically, this assignment is done manually usually after the corrective action is taken so that the record can be processed to completion in a workflow. Open An example of a reprocessing workflow using ECS The example above shows a reprocessing workflow that collects from ECS, applies correction logic and then reintroduces corrected data to the appropriate streams or sends it to ECS again if the UDRs cannot be corrected. In the example there is a node called Correction_Analysis where APL can be configured to also make corrections to the records prior to further processing. If the UDRs are not corrected in ECS or prior to the node Validation, the UDR will fail validation and be returned to ECS. Records that now pass the validation will continue processing through to workflow completion. Records that are reprocessed are assigned the Reprocessing State of Reprocessed (as opposed to New when the records enter ECS). MediationZone provides a configurable task within the Task Manager that can be scheduled to automatically clean these reprocessed records out of ECS.

---

# Document 235: Recover - Platform - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205783326/Recover+-+Platform
**Categories:** chunks_index.json

When the CMS receives an exit code from the monitor script that indicates failure on the Platform, the following measures apply: Stop the Platform by calling the offline script. Example $ ./offline <$JAVA_HOME> <$MZ_HOME> mzadmin platform Shutting down platform...done. The Platform should be down, but to make sure it is completely down, call the clean script. Example $ ./clean <$JAVA_HOME> <$MZ_HOME> mzadmin platform Start the Platform in an alternative Platform Container. The database, including its listener, must be started before the Platform, since the Platform depends on it. The CMS must execute the database online script in an alternative container. Example $ ./online <$JAVA_HOME> <$MZ_HOME> mzadmin platform Starting platform...done. Note! The database and its corresponding monitor/online/offline-functionality is not part of the MediationZone HA solution. Due to the reconnection behavior of the ECs, you do not need to restart these pico instances unless they are unavailable. However, it is recommended that you check that the workflows are behaving as expected. Services, running in an SC (e.g. Kafka), must be restarted when the Platform has recovered. You can update the online script to do so by uncommenting the following line: #cmd=$cmd;mzsh service restart --publish-only

---

# Document 236: Post Platform Installation Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/546635777/Post+Platform+Installation+Configuration
**Categories:** chunks_index.json

This section covers post-installation steps that are required when using a platform database. It includes the following subsections: Post Configuration for Oracle RAC Connection

---

# Document 237: ECS Inspection - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204607337
**Categories:** chunks_index.json

The ECS Inspector allows the user to inspect and maintain UDRs and batches located in the ECS, view and edit their content, and add them to Reprocessing Groups . The latter is a prerequisite for the data to be collected by an ECS collection agent. You may also restrict certain fields from being edited in the ECS. Apart from simply sending a UDR or batch to the ECS, a workflow can be configured to associate user-defined information with the ECS data. For UDRs, the Error Code and MIM information may contain user-defined information. For canceled batches, the Error UDR and Cancel Message may contain user-defined information. Note! The data itself is not saved to the database, only a reference to the data. Physically, the ECS data is saved in the directory defined by the property mz.ecs.path found in platform.conf . The default path is MZ_HOME/ecs . If the mz.ecs.path parameter is changed, the changes will take effect the next time data is inserted into the ECS. Existing ECS data is left at its current location and must not be moved. If required to do so anyway, move the content of the old mz.ecs.path directory to the new, and create a soft link in the old directory pointing out the new location. Note! Take special precautions when updating the Ultra formats. It is not possible to collect data from the ECS if the corresponding UDR has been renamed. If the format definition has changed, you can still collect the data. Changes to the formats are handled as follows: Added or renamed fields are assigned default values. Removed fields are ignored. Fields that have changed data types are assigned default values. The section contains the following subsections: ECS Inspector ECS Changing State Configuring Searchable Fields in the ECS ECS Restricted Fields Configuration Searching the ECS ECS Inspector Table ECS Error Codes ECS Reprocessing Groups

---

# Document 238: Appendix B - Couchbase - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204604410/Appendix+B+-+Couchbase
**Categories:** chunks_index.json

This appendix contains Couchbase specific information. Couchbase may be used as storage for Aggregation, Distributed Storage, and PCC. Note! Refer to Couchbase Compatibility Matrix for supported Couchbase versions. In order for MediationZone to communicate with the Couchbase database, the couchbase.mzp package must be included in your installation. Download Couchbase Enterprise edition from http://www.couchbase.com and install according to the Couchbase documentation: https://docs.couchbase.com/home/index.html . Required Couchbase services are: Data Index Query Refer to docs.couchbase.com for the information about these services. Note! For the optimal Couchbase Server operations, you must set swappiness to 0 (zero) as described in the topic about swap space. You can now proceed with either creating data buckets in the Couchbase cluster by using the Couchbase profile in MediationZone either in combination with Distributed Storage, or with PCC. Couchbase data buckets can be created either directly in the Couchbase Web Console, or by using Couchbase profiles. See the Desktop User's Guide for further information about how to create buckets with Couchbase profiles.

---

# Document 239: topo - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204646579
**Categories:** chunks_index.json



---
**End of Part 10** - Continue to next part for more content.
