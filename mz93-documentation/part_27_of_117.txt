# RATANON/MZ93-DOCUMENTATION - Part 27/112

---
**Dataset:** ratanon/mz93-documentation
**Part:** 27 of 112
**GitHub:** https://github.com/ratan0n/docs/tree/main/mz93-documentation
**Size:** ~69.7 KB
---

This section describes different recommended high-availability setups and what is required in terms of hardware and software. Other options are, available but it is recommended that an expertise is consulted before a different deployment option is selected. Software and Network Requirements The PCC solution manages availability in different ways. [EZ] and [DR] manage availability by running several of them, while [CZ] requires a stand-by machine to fail over to. This chapter describes what is required for high availability and the possible consequences of not having full redundancy. Network In order to have full redundancy, the network needs to be equipped with redundant switches and all nodes in the solution need to have two network cards each. This is needed in order to manage a switch- or network card failure. Couchbase For information on high availability of Couchbase clusters, see CB v 6.0 or CB v 5.5 . Redis For information on the high availability of Amazon ElastiCache, see https://aws.amazon.com/documentation/elasticache/ .

---

# Document 572: Legacy Desktop User Interface - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205035631
**Categories:** chunks_index.json

The Desktop provides a convenient user interface, displaying configurations, tools, and inspectors, with different options available for the different views. Open Desktop window The Desktop window is organized into two main sections: To the left you have the Standard Desktop Buttons , which allows you to expand lists of configurations, tools, and other options, see Standard Desktop Buttons and Options below for more information. The main view displays the selected tools and opened configurations in a tabbed arrangement. Standard Desktop Buttons and Options The Desktop user interface includes the following standard features: Feature Description Feature Description Desktop Buttons Open Browser - Click this button to open the Browser. Here you can see all available configurations and their properties. Open Configuration - Click this button to open a list of available configuration types to create a new configuration. Open Inspection - Click this button to open a list of available inspectors, see Inspection for more information. Open Tools - Click this button to open a list of available tools, see Tools & Monitoring for more information. Open Open Tabs - Click this button to open a list of all open tabs, which may be useful if you have many tabs open. Open Change Password - Click this button to open the Change Password dialog where you can change your user password. Open Documentation - Click this button to open the user documentation. Open Status - Click this button to open a list of status messages along with version information. Open Exit - Click this button to exit the Legacy Desktop. Tab Right-Click Menu There are different closing options available when right-clicking a tab. Open The tab right-click menu Close - Select this option to close the selected tab. Close Other - Select this option to close all other tabs in the Desktop window. Close All - Select this option to close all tabs in the Desktop window. Tab Button Panel The button panel is visible at the top of a tab. It is dynamic and changes according to the type of Configuration, Inspector, or Tool that is opened in the currently displayed tab. For a description of the specific buttons, refer to Build View , Inspection , and Tools & Monitoring . The following figure shows the button panel visible for a workflow configuration. Open The tab button panel for a workflow configuration Tabs Configurations and tools are opened in separate tabs, in the right part of the Desktop window. However, dialogs that are opened from right-click menu options, e.g. the MIM Browser or UDR Browser, are opened in a dialog box and not in another tab. Click the Open Tabs button to display a list with all the currently opened tabs. Open Open Tabs List dialog When exiting the Desktop, all tabs are closed, and they are not restored the next time you log in unless you have set the property mz.gui.restart.tabs to true . See Desktop Properties for more information. To reorder the tabs, click a tab and drag it to a different position along the top of the window. To move a tab to a separate Desktop window, click and drag it outside the current window. This can be useful when running and analyzing several workflows in the Workflow Monitor, to be able to view the monitors side by side. If there is only one tab open in the Desktop and the tab is moved to a separate window, the original Desktop window will be closed. A Tool, Inspector, or Configuration can only be open in one tab at a time. It is possible to move tabs between several Desktop windows. Browser View The Browser displays a list of all configurations and makes it possible to easily navigate between them. In the Browser you also filter what configurations are shown, by selecting entries of a specific type. You also have the option to display configurations with folders and subfolders. The Browser supports a set of operations that can be performed on the configurations by using the right-click menu. Each configuration has Properties where permissions are set and where you can view history, references, and other basic information. Refer to Properties in Configuration Browser for more information. Button Description Button Description Open To open the Browser , click the Browser button in the upper left part of the interface. Open The Browser View In the Browser there are two pre-existing folders: Default - This folder is where all configurations are stored if no other folder is specified. SystemTask - This folder contains workflows for performing different background routines. For further information, refer to System Task Workflows in Workflow Types . Note! The Default and SystemTask folders cannot be renamed or deleted. Subfolders It is possible to arrange your configurations in a structure with subfolders. Open Subfolder structure To enable this functionality you need to set the property platform mz.subfolder.enabled to true , and restart the Platform and any Legacy Desktop clients. When enabled, you can create a subfolder by using an underscore in the folder name when creating a new folder. Open Creating a subfolder If you want to use another character to define subfolders than underscore, you can use the property mz.subfolder.separator to define another separator. See Platform Properties for more information. Note! Subfolders are only available in Legacy Desktop. Right-Click Menu In this section, the different options available in the right-click menu of the Browser View are described. Note that some of the options have keyboard shortcuts - these are listed in grey color according to the used operating system. Right-click a configuration and select one of the following options: Option Description Option Description Column View Enables you to switch between Compact or Details viewing modes. When the Details mode is selected, additional information is shown about each item: the granted permissions, Owner, Modified By, and the Modification Date. Refresh Select this option to refresh the selected folder, subfolder, or configuration. Expand Select this option to expand the selected folder or subfolder to display all the subfolders and configurations that it contains. Collapse Select this option to collapse the selected folder or subfolder to not display all the subfolders or configurations. New Configuration Select this option to create a new profile based on the menu list. New Folder... Select this option to create a new folder. Open Configuration(s)... Available when at least one configuration is selected. Select this option to open the selected configuration(s). Export Configuration(s) Available when at least one configuration is selected. Select this option to export the selected configurations. The System Exporter dialog opens with the configuration(s) pre-selected. Note! When exporting from the Configuration Navigator, configuration dependencies are not automatically selected. This can be achieved by selecting the Select Dependencies checkbox in the System Exporter dialog. For further information see System Exporter . Download... Downloads the selected configuration. Cut Select this option to put one or more configurations on the clipboard to move the configuration to another location. Select the menu option Paste in the folder where the configurations should be stored. This option is not applicable if the configuration is locked. For further information see Locks in Administration and Management in Legacy Desktop . Copy Select this option to put one or more configurations on the clipboard to copy the configurations to another location. Select the menu option Paste in the folder where the copied configurations should be stored. Paste Select this option to store configurations that have been cut or copied to the clipboard in the selected folder. Delete... Select this option to delete the selected configuration(s). If the configuration is referenced by another configuration, a warning message is displayed, informing you that you cannot remove the configuration. For further information see The References Tab in 6.2 Configuration Browser . You can force the deletion of a folder and all the configurations that it contains. A message is displayed asking if you are sure that you want to continue, in order to avoid deletion by mistake. Note that there is no restore option for this function. All the configurations are permanently removed. Rename... Select this option to change the name of the selected configuration. Take particular care when renaming a configuration. If, for example, an APL script is renamed, workflows that are using this script will become invalid. This is important to know when you rename folders that contain many ultra format configurations or APL configurations. Renaming a folder with ultra formats or APL configurations will make all referring configurations invalid. Encrypt... Select this option to encrypt the selected configurations. Decrypt... Select this option to decrypt the selected configurations. Validate... Select this option to validate the configuration. A validation message is shown to the user. Show Properties Select this option to launch the Properties dialog for the selected configuration. For further information, see the Properties section below. Documentation Select this option to launch the Documentation dialog for the selected configuration. For further information, see the Documentation section below. Properties To open the Properties dialog, right-click a configuration and select Show Properties . Open The Properties dialog box This dialog contains four different tabs: Basic , which contains basic information about the configuration, Permission , where you set permissions for different users, References , where you can see which other configurations that are referenced by the selected configuration, or that refers to the selected configuration, and History which displays the revision history for the configuration. The Basic tab is displayed by default. The Basic Tab The Basic tab is the default tab in the Properties dialog and contains the following information: Configuration Information Description Configuration Information Description Name Displays the name of the configuration. Type Displays the configuration type. Key Displays the internal key used by MediationZone to identify the configuration. Folder Displays the name of the folder in which the configuration is located. Version Displays the version number of the configuration, see the History tab for further information about the different versions. Permissions Displays the permissions granted to the current user of the configuration. Permissions are shown as R (Read), W (Write), and X (eXecute). If the configuration is encrypted, an E is shown. For further information about permissions, see The Permissions Tab in Configuration Browser . Owner Displays the username of the user that created the configuration. The owner can: Read, modify (write), and execute the configuration. Modify the permissions of user groups to read, modify, and execute the configuration. Modified by Displays the username of the user that made the last modifications to the configuration. Modified Displays the date when the configuration was last modified. If you want to use the information somewhere else you can highlight the information and press CTRL-C to copy the information to the clipboard. The Permissions Tab The Permissions tab contains settings for what different user groups are allowed to do with the configuration: Open The Permissions tab As access permissions are assigned to user groups, and not individual users, it is important to make sure that the users are included in the correct user groups to allow access to different configurations. R W X E Permission Description R W X E Permission Description R - - - Allowed only to view the Configuration, given that the user is granted access to the application. - W - - Allowed to edit and delete the Configuration. - - X - Allowed only to execute the Configuration. R W - - Allowed to view, edit, and delete the Configuration, given that the user is granted access to the application. - W X - Allowed to edit, delete, and execute the Configuration. R - X - Allowed to view and execute the Configuration, given that the user is granted access to the application. R W X - Full access. - - - E Encrypted. The References Tab The References tab contains information about which other configurations the current configuration refers to, and which other configurations the current configuration is referenced by: Open The References tab The References tab contains two sub-tabs: Used By , which displays all the configurations that use the current configuration, and Uses , which displays all the configurations that the current configuration uses. To edit any of the configurations, double-click the configuration to open it for editing. The History Tab The History tab contains version information for the configuration: Open The History tab In the version table, the following columns are included: Column Description Column Description Version Displays the version number. Modified Date Displays the date and time when the version was saved. Modified By Displays the user name of the user that saved the version. Comment Displays any comments for the version. If you want to clear the Configuration history, click the Clear Configuration History button. The version number is not affected by this. Documentation To open the Documentation dialog, right-click a configuration and select Documentation . Open The Documentation dialog In this dialog, you can provide information on the selected configuration, for example, a description and the purpose of the configuration. You can use markdown syntax if preferred. The text entered is then included in the automated documentation that you can generate using the Documentation Generator tool. When you have completed the text, click OK to save. For further information, see Documentation Generator . Search Click the Search button to be able to make free text searches. Two options are shown at the top of the list. Option Description Option Description Filter Select to filter for entries that match the entered string. Search Select to find individual entries that match the entered string. Click Find Next to go to each individual entry in turn. Open

---

# Document 573: KPI Management - External Software - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204677074
**Categories:** chunks_index.json

To use KPI Management, you must install and start Spark, Kafka, and Zookeeper. The following chapters will explain the basic procedures for this, but please refer to the respective pages for details. The versions these instructions and KPI Management have been tested with are: Spark 3.5.0 for Scala 2.13 (the package name is spark-3.5.0-bin-hadoop3-scala2.13.tgz ) Kafka 3.3.2 for Scala 2.13 (the package is kafka_2.13-3.3.2.tgz and that also includes ZooKeeper) This section includes the following subsections: Spark, kafka and zookeeper Starting Clusters and Creating Topics Using Multiple Service Models

---

# Document 574: Reference Data Management User's Guide - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205656532
**Categories:** chunks_index.json

Search this document: Reference Data Management delivers the capability to query and edit specific table sets in relational databases while schema permissions remain unaltered. Open Secure access to database table data Reference Data Management includes the following: Profile that enables access via dashboard or RESTful API. Event notification that is triggered by edited data. Dashboard accessible on the Desktop. RESTful interface running on the Platform. Info! The Reference Data profile can be used with a Database profile that is configured for Oracle or PostgreSQL. Prerequisites The reader of this document should be familiar with: Database administration RESTful Web Services Chapters The following chapters and sections are included: Reference Data Profile RESTful Interface for Reference Data Management Reference Data Management DB Ref Event Reference Data Management Dashboard Data Types for Reference Data Management

---

# Document 575: Duplicate Batch Agent - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204738589/Duplicate+Batch+Agent
**Categories:** chunks_index.json

This section describes the Duplicate Batch profile, the Duplicate Batch Detection agent, and the Duplicate Batch Inspector. This processing agent is available in batch workflow configurations. The Duplicate Batch agent allows duplication control on passed data batches. Each data batch is tested against already stored metadata from batches, to see if they are considered to be duplicates. Metadata for data batches are kept for a configurable number of days. If the metadata of a batch has been removed, a duplicate of this batch can no longer be detected. If any duplicates are detected, a message is logged to the System Log, and the duplicate batch is canceled, which may cause the workflow to abort. For further information, see System Log . To monitor the duplicate batches, the Duplicate Batch Inspector may be used. See Duplicate Batch Inspector . It is only appropriate to use the agent after agents that may create duplicate batches, typically a file-based collection agent. Several workflows may utilize the same Duplicate Batch profile. In this case, their batches are mutually compared. Loading

---

# Document 576: Management of Batch Collection Workflow States - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/301138005/Management+of+Batch+Collection+Workflow+States
**Categories:** chunks_index.json

A batch workflow containing a Kafka collection agent will remain running and waiting for more data even if there is no more data to consume. This is a major difference compared to how batch workflows behave for other collection agents which will stop when the data from the last start cycle has been consumed, see Workflow Monitor for more information about workflow execution states. Note! A batch will not be completed if: the configured Batch Size has not been reached or a hardcoded timeout of 5 seconds has not been reached. A Kafka collection workflow will only stop automatically if it aborts due to errors. A workflow stop can also be triggered by evaluating MIMs like Workflow Throughput and Estimated Lag - where no lag means that there is no data left to process. During other circumstances, you can stop it via: Desktop Online mzsh the operational REST interface Note! The 5-second timeout for completing a batch also applies when stopping a Kafka batch collection workflow through these interfaces.

---

# Document 577: Vertica - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204639547/Vertica
**Categories:** chunks_index.json

This section contains information that is specific to the database type HP Vertica. Supported Functions The Vertica database can be used with: Audit Profile Database Table Related Functions (APL) Database Collection/Forwarding Agents Event Notifications Prepared Statements (APL) Shared Table Profile SQL Collection/Forwarding Agents SQL Loader Agent Task Workflows Agents (SQL) Preparations The drivers that are required to use the Vertica database are bundled with the software and no additional preparations are required.

---

# Document 578: Kafka Batch Forwarding Agent - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/301138234/Kafka+Batch+Forwarding+Agent
**Categories:** chunks_index.json

The Kafka Batch Forwarding agent sends messages to Kafka but does not have any configuration settings. Because of this, it must be placed after an Analysis or Aggregation agent, which populates KafkaRecord UDRs with the messages. The Kafka batch forwarding agent can send messages to multiple topics and partitions and transmits messages within Kafka transactions. Consumers of these topics should typically set the Kafka property isolation.level to read_committed to ensure they only receive messages that were successfully committed at the end of a batch. For more details, see Kafka Documentation . Workflow Example A simple workflow with a Kafka batch forwarding agent: Open The Kafka batch forwarding agent in a workflow Workflow Design Create the workflow with the following agents: Agent Configuration Disk Collects files from disk. Decoder Decodes the input data to internal UDRs. Analysis Creates KafkaRecord UDRs and then maps the content of the input UDR. Sets the destination topic for the data. Kafka No configurations made in the agent. Kafka Profile The Kafka profile defines the broker to which the messages should be forwarded. You need to create the Kafka profile before selecting it in the Execution tab of the Workflow Properties . Open Workflow Properties with Kafka profile selected Analysis Agent Configure the Analysis agent to create KafkaRecord UDRs, and then map the content of the input UDR. Set the topic where the data should be forwarded. kafka.KafkaRecord myUDR; consume { myUDR = udrCreate(kafka.KafkaRecord); strToBA(myUDR.value, input.value); myUDR.topic = "myNewMZTopic"; udrRoute(myUDR); }

---

# Document 579: Azure Event Hub Producer Agent - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204640242/Azure+Event+Hub+Producer+Agent
**Categories:** chunks_index.json

The Azure Event Hub Producer agent is responsible for sending events to the event hub topic. This section contains the following subsections: Azure Event Hub Producer Agent Configuration Azure Event Hub Producer Agent Events Azure Event Hub Producer Agent Input/Output Data and MIM

---

# Document 580: version - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204612495/version
**Categories:** chunks_index.json

usage: version This command is used to find out the current version installed. Return codes Listed below are the different return codes for the version command: Code Description Code Description 0 Will be returned if the version was detected successfully. 1 Will be returned if the version could not be detected for some reason.

---

# Document 581: Netflow V9 and V10 (IPFIX) considerations - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204739713/Netflow+V9+and+V10+IPFIX+considerations
**Categories:** chunks_index.json

The Netflow Agent The V9 and V10 UDR formats are template based, where the template provides a description of the fields that will be present in the UDRs. For detailed information on the V9 UDR format, see the section NetFlow Version 9 Flow-Record Format on Cisco's website and for the V10 UDR format, see RFC 7011 ( https://tools.ietf.org/html/rfc7011 ). The Netflow Agent does not detect templates, map incoming data to the corresponding template, or create UDRs of the incoming data. This functionality must be implemented in APL, as described in the section below, Workflow Design for V9UDR and V10UDR. The agent will forward the Netflow data using the rawData field to the workflow. Workflow Design for V9UDR and V10UDR When using Netflow with the V9UDR or V10UDR format, the workflow design must handle certain functions. Dynamic format Since the V9UDR V10UDR formats are dynamic, the workflow may not have access to the template when the first UDRs arrive, or the template may have changed and not yet been sent to the workflow. For this reason, it is recommended to let the real-time workflow with the Netflow collection agent(s) forward the UDRs via Inter Workflow, or Workflow Bridge agents, to a batch workflow that stores them on disk. A third workflow may then collect, decode and aggregate the UDRs. Decoding and Aggregation In order to decode the UDRs, you first have to decode the template, and this has to be done by defining an Ultra format for the template. For further information on decoding the V10UDR format, see RFC 7011 ( https://tools.ietf.org/html/rfc7011 ). The template should then be sent to an Aggregation agent to start a session, which will correlate all the UDRs that use the template. An Ultra defining the aggregation session handling will also have to be created. Since the aggregation has to be based on a template-specificfield, the templates have to be routed one at a time to the Aggregation agent. The APL code in the Aggregation agent will then have to handle the decoding of the actual UDRs.

---

# Document 582: Security and Privacy - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205815852
**Categories:** chunks_index.json

Search this document: This document describes the security aspects on the environment for MediationZone Platform. Chapters The following chapters are included: System Overview - Security Network Operating System Oracle Database Users Configuration Security External Systems Data Protection and Privacy Guide Application Security Testing

---

# Document 583: ECS Reprocessing Groups - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205000070/ECS+Reprocessing+Groups
**Categories:** chunks_index.json

In order for the ECS data to be processable, it has to be assigned to a Reprocessing Group and be in status New . The Reprocessing Group is then selected in the ECS collection agent of the reprocessing workflow. To create a Reprocessing Group, click the Reprocessing Groups button in the ECS Inspector. Open ECS Reprocessing Group dialog Click the Add button to display the Add ECS Reprocessing Group dialog. The Reprocessing Group must have a unique name. Open Add ECS Reprocessing Group dialog The setting Error UDR Type is only applicable to Data Type Batch . If no Error UDR is to be used in reprocessing, this information is not required. Note! UDRs with several Error Codes mapped to different reprocessing groups cannot be automatically assigned to a reprocessing group. They must be assigned manually.

---

# Document 584: Common SAP CC UDRs - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204740430
**Categories:** chunks_index.json

ChargedItemFieldTypeUDR This is a constant UDR, where value returns either "String", "Date", "Number" or "Boolean", depending on if the field type is STRING , DATE , NUMBER , or BOOLEAN . For an example that describes how to get the value, see the section below, OperationTypeUDR. Field Description Field Description NUMBER Constant value "Number" STRING Constant value "String" BOOLEAN Constant value "Boolean" DATE Constant value "Date" value (string) The property type value, can be "String", "Date", "Number", or "Boolean". This is a read-only field. ChargedItemFieldUDR Field Description Field Description name (name) The name of the field type (ChargedItemFieldTypeUDR) The type of the field value (any) The value of the field which must be cast to the right type, based on the type field. Note that numbers are represented as strings. ChargedItemUDR Field Description Field Description key (int) The numeric key of the charged item chargedItemClassId (string) The class identifier corresponding to the charged item fields (list<ChargedItemFieldUDR>) A list of all the fields in the corresponding charged item ChargeExecutionContextUDR This UDR is used to limit what is included in the response of a charge or blank charge operation. Info! The Execution Context in the UDR name is not related to the Execution Context. Note! The SAP CC APIs that the SAP CC agents depend on does not support setting the itemImmediatelyLoaded flag for ChargingOutputContext . As a result, the SAP CC agents are unable to support scenarios such as CIT creation via charging requests. Field Description Field Description outputChargeableItemExported This boolean field determines whether chargeable items must be exported in the output of the charging operation. resultAccountInfoReturned This boolean field determines if the account information is returned in the result of the charging operation. resultAccountOperationReturned This boolean field determines if the account operations is returned in the result of the charging operation. resultAllReturned This boolean field determines if all available information is returned in the result of the charging operation. resultChargeableItemInfoReturned This boolean field determines if the chargeable item information is returned in the result of the charging operation. resultChargedItemReturned This boolean field determines if the charged item is returned in the result of the charging operation. resultChargingContractInfoReturned This boolean field determines if the charging contract information is returned in the result of the charging operation. resultChargingProcessInfoReturned This boolean field determines if the charging process information is returned in the result of the charging operation. resultNotificationReturned This boolean field determines if the notifications is returned in the result of the charging operation. resultResponseItemReturned This boolean field determines if the response items is returned in the result of the charging operation. TransactionSetUDR This UDR represents the TransactionSet associated with a charging request result. The transaction set may be empty. Field Description Field Description allNotifications (list<NotificationUDR>) This list offers a shortcut to the generated Notification contained in all generated transactions (master and dependents). For further information, see Notification UDRs . dependentTransactionList (list<TransactionUDR>) This list contains the transactions generated by the associated dependent charges (if they exist). For further information, see the section below, TransactionUDR. masterTransaction (list<TransactionUDR>) This field contains the transaction generated by the master charge. For further information, see the section below, TransactionUDR. name (string) The name origin (string) The origin of the transaction set. It corresponds to the origin of the master transaction which can be: usage recurring oneshot snapshotId (int) The snapshot identifier used to rate event transactionSetId (long) The transaction set owner id ServiceSessionUDR This UDR represents the services associated with a Charging Request. Field Description Field Description cancellation (boolean) TRUE : Cancel session FALSE : Do not cancel session  this is the default value. confirmationItem (ChargeableItemUDR  optional) A ChargeableItem represents the information that the client needs to send to perform the charge process. It consists of a name and a list of properties. propertyToInverse (string) The name of the property used by the inverse rating process. This property must be contained in the chargeableItem definition on the SAP Convergent Charging Core server. reservationId (string) This field contains a unique identifier for the service. reservationItem (ChargeableItemUDR  optional) A ChargeableItem represents the information that the client needs to send to perform the charge process. It consist of a name and a list of properties. sessionResolutionMode (ResolutionModeUDR  optional) This optional field can be used to pass over the default agent configuration. If set, it defines the session termination to apply if this particular session has reached its 'time to live'. The session can be either cancelled (cancel) or confirmed (confirm). sessionTTL (long  optional) This optional field can be used to pass over the default agent configuration. If set, it defines the 'time to live' for this particular charging session. Note! This field will only work on SAP CC 5.0 SP1 and later. For older versions, this field will be present but it will not have any effect on the TTL. TransactionUDR This UDR represents the Transaction associated with a Charging Request Result. A transaction corresponds to the details of the price computation by the rating engine. It may be empty. Field Description Field Description currency (string) A string representation of the currency. The currency value respects the SAP Convergent Charging Currency.getAlphaCode() format. For example EUR , or USD detailList (list<TransactionDetailUDR>) This field contains the list of the transaction details produced during the price plan execution. It may be empty. For further information, see the section below, TransactionDetailUDR. dispatchCode1 (string) This field contains the value of the dispatch code. dispatchCode2 (string) This field contains the value of the dispatch code2. dispatchCode3 (string) This field contains the value of the dispatch code3. label (string) This field contains the label of the transaction. MoneyAmount (string) A string representation of the charged amount. The toConfirmMoneyAmount value respects the SAP Convergent Charging Money.toString() format. For example: EUR 12.15 , or USD 0.123456 notifList (list<NotificationUDR>) This list contains the notification produced during the price plan execution. For further information, see Notification UDRs . offerCode (string) This field contains the offer code of the subscription. chargeCode (string) This field contains the charge code of the subscription which leads to this transaction. operationType (OperationTypeUDR) This field contains the operation type of the transaction. It can be: CREDIT DEBIT origin (OriginUDR) This field contains the origin of the transaction. It can be: ONE_SHOT RECURRING USAGE relationshipType (RelationshipTypeUDR) This field contains the relationship type of the transaction. It can be: CLIENT PARTNER sessionId (string) When the transaction is produced during a session based rating, this field contains the corresponding session id. subscriptionCode (string) This field contains the subscription code against which the transaction was produced. transDate (date) The date of the transaction TransactionDetailUDR This UDR represents a transaction detail. It corresponds to a property produced during the price plan computation. TransactionDetailUDR is an instance of a PropertyUDR . For more details, refer to the section below, PropertyUDR. PropertyUDR This UDR is the base representation of a name-value property. In addition, a type can be added to specify how to cast the value. Field Description Field Description ccType (PropertyTypeUDR) The type of property. This field is read only. The ccType will be populated when the properties are returned while retrieving charged items. When it comes to submitting chargeable items, it can be left empty. The property types can be: STRING - Used for String, Boolean, or DRIpAddress Object types NUMBER - Used for Byte, Character, Short, Integer, Float, Double, Long and BigInteger object types DATE - Used for Date or DRDate Object types BIG_DECIMAL - Used for BigDecimal Object type. In this case the value will be a string representation of this bigDecimal ( BigDecimal.toPlainString() ). name (string) The name of the property value (any) The value of the property OperationTypeUDR This is a constant UDR, where value returns either "1" or "0", depending on if the operation type is CREDIT or DEBIT. This is an APL code example for how to get the operation type value: OperationTypeUDR rt = (OperationTypeUDR) input; if( rt.value == rt.DEBIT.value ) { ... ... } else if ( rt.value == rt.CREDIT.value ) { ... ... } Field Description Field Description CREDIT (OperationTypeUDR) Constant value 1 DEBIT (OperationTypeUDR) Constant value 0 value (string) The operation type value, which can be "1" or "0". This is a read-only field. OrderStateUDR This is a constant UDR, where value returns either "2" or "1", depending on if the order state is FREE or PAID. For an APL code example describing how to get the value, see the section above, OperationTypeUDR. Field Description Field Description FREE (OrderStateUDR) Constant value 2 PAID (OrderStateUDR) Constant value 1 value (string) The order state value, which can be "2" or "1". This is a read-only field. OriginUDR This is a constant UDR, where value returns either "2", "1" or "0", depending on if the origin is ONE_SHOT , RECURRING or USAGE . For an APL code example describing how to get the value, see the section above, OperationTypeUDR. Field Description Field Description ONE_SHOT (OriginUDR) Constant value 2 RECURRING (OriginUDR) Constant value 1 USAGE (OriginUDR) Constant value 0 value (string) The origin value, which can be "2", "1" or "0". This is a read-only field. PropertyTypeUDR This is a constant UDR, where value returns either "String", "Date", "Number" or "BigDecimal", depending on if the property type is BIG_DECIMAL , DATE, NUMBER or STRING . For an APL code example describing how to get the value, see the section above, OperationTypeUDR. Field Description Field Description BIG_DECIMAL (String) Constant value x DATE (Date) Constant value x NUMBER (Number) Constant value x STRING (BigDecimal) Constant value x value (string) The property type value, which can be "String", "Date", "Number" or "BigDecimal". This is a read-only field. RelationshipTypeUDR This is a constant UDR, where value returns either "1" or "0", depending on if the relationship type is PARTNER or CLIENT . For an APL code example describing how to get the value, see the section above, OperationTypeUDR. Field Description Field Description CLIENT (RelationshipTypeUDR) Constant value 0 PARTNER (RelationshipTypeUDR) Constant value 1 value (string) The relationship type value, which can be "1" or "0". This is a read-only field. ResolutionModeUDR This is a constant UDR, where value returns either "-1", "1" or "0", depending on if the resolution mode is USE_DEFAULT , CANCEL, or CONFIRM . For an APL code example describing how to get the value, see the section above, OperationTypeUDR. Field Description Field Description USE_DEFAULT (ResolutionModeUDR) Constant value -1 CANCEL (ResolutionModeUDR) Constant value 1 CONFIRM (ResolutionModeUDR) Constant value 0 value (string) The resolution mode value, which can be "-1", "1" or "0". This is a read-only field. ResponseItemUDR Field Description Field Description key (int) The numeric key of the response item chargedItemClassId (string) The class identifier corresponding to the response item fields (list<ChargedItemFieldUDR>) A list of all the fields in the corresponding response item ResultTypeUDR This is a constant UDR, where value returns either "-1", "0" or "1", "2" or "3" depending on if the result type is USE_DEFAULT , NO_TRANSACTIONS , MASTER_TRANSACTION , ALL_TRANSACTIONS, or ALL_TRANSACTIONS_AND_RECURRING . For an APL code example describing how to get the value, see the section above, OperationTypeUDR. Field Description Field Description USE_DEFAULT (ResultTypeUDR) Constant value -1 NO_TRANSACTIONS (ResultTypeUDR) Constant value 0 MASTER_TRANSACTION (ResultTypeUDR) Constant value 1 ALL_TRANSACTIONS (ResultTypeUDR) Constant value 2 ALL_TRANSACTIONS_AND_RECURRING (ResultTypeUDR) Constant value 3 value (string) The result type value, which can be "-1", "0" or "1", "2" or "3". This is a read-only field.

---

# Document 585: Creating Conditional Trace Templates - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204611053/Creating+Conditional+Trace+Templates
**Categories:** chunks_index.json

In the Conditional Trace templates you can either just make generic settings for which workflow(s) to trace on, and trace everything, or you can state which UDR types and fields within the stated workflow(s) you want to trace on, as well as create parameters that you can use for configuring matches that use these parameters to define more specific regular expressions. To create a Conditional Trace template: Click the Build  New Configuration in the upper part of the Desktop window, and then select Conditional Trace Template from the screen. Open Conditional Trace template with specific workflow stated and matchers configured Enter the following general settings: Setting Description Setting Description Workflow State the workflow(s) for which you want to apply a trace in this field. You can either state a specific workflow, or use a regular expression to match several workflows. Max Traces Per EC Enter the maximum number of traces to be performed per EC in this field. Sampling Factor If you have a high throughput and do not want view the hits for every match, you can use this setting to only view every second, or third, or fourth hit, etc. Sampling Factor 2 means only every second hit will be displayed, and Sampling Factor 5 means only every fifth hit will be displayed. Lifetime (s) Enter the automatic timeout of the trace in seconds With these settings you can use the template for tracing all UDRs through all routes and agents in the stated workflow(s). Traced Fields In the tab Traced Fields you can enter regular expressions to specify specific UDRs and UDR fields you want to trace on. Open To add a traced field entry: In the Traced Fields tab, click on the Add button to open the Add Traced Fields dialog. Enter a regular expression for the UDR type in the Typename field. Click on the Add... button and a field is added in the Traced Fields section. Click on the new field and enter a regular expression for the field. Click on the Add button to add a new line in the Traced Fields tab. Repeat the previous 4 steps for all the UDRs and fields you want to add expressions for and then click Close to close the dialog and return to the Traced Fields tab. Matchers and Parameters In the tab Matchers you can state certain UDR types and fields for which you want to do traces. You can also combine this with the parameters configured in the Parameters tab. Open Adding Matchers To add a new matcher without parameters: In the Matchers tab, click on the Add button to open the Add UDR Field Matchers dialog. Open Click on the Browse button next to the UDR Type setting, select which UDR type you want to trace on in the UDR Internal Format Browser and click OK . Click on the Add button to open the Add Field Regexp dialog. Open In this dialog, either the Field or Sub Field must be specified, or both. These fields will be combined into one. To select Field , click on the Browse button next to the Field setting and select which field in the selected UDR type you want to trace on in the UDR Internal Format Browser , and if want to state a Sub Field you can enter it as a qualified name in the Sub Field field before clicking OK . Either enter a regexp, or a specific value matching the field type, you want to trace on in the Value field. Click on the Add button. Repeat the previous 3 steps for all fields you want to add for the selected UDR type and then click Close . Click Add , to add the new UDR type with its stated fields in the Matchers tab. Repeat the previous 7 steps for all UDR types you want to add fields for and then click Close . Using Parameters In the Parameters tab you can configure parameters that can be used when configuring matchers, for example if you want to trace on UDRs that has a certain field added at the end. Open To add a new matcher with parameters: Open In the Parameters tab click on the Add button to open the Add Parameters dialog. Enter a name for the parameter in the Name field, optional validation in the Validation field, and a description in the Description field. Validation is done by using a regular expression. For example "[0-9]+" will only allow numbers to be entered. Click on the Add button to add the parameter to the Parameters tab. Repeat the previous two steps for all parameters you want to add. When all parameters have been added, you can proceed with creating matchers according to the description above where you can then use your parameters when creating the regular expressions for the matchers like in the example below. Open Saving the Conditional Trace Template When you are finished with your Conditional Trace Template, click on the Save As button to open the Save As dialog. Select which folder you want to store the configuration in, or create a new one. Enter a name for your Conditional Trace Template in the Name field and click OK . Note! It is recommended that you test the Conditional Trace template in a test environment first so that you can assess the performance impact that your trace filter(s) may have on your production setup.

---

# Document 586: The Diameter Base Protocol - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204672701
**Categories:** chunks_index.json

The Diameter Base Protocol is a successor of the Radius Protocol. It is designed to provide an extensible framework for any services that require the support of authentication, authorization, and accounting (AAA), across several networks. The Diameter Base Protocol, unlike the Radius Protocol, also enables new access control features while maintaining flexibility for further extension. According to RFC 6733, the Diameter Base Protocol alone does not offer much functionality. The Diameter Base Protocol should be regarded as a standard transport and management interface for AAA applications that provide a well-defined functionality subset. To increase functionality, predefined AAA applications are added. An AAA application usually consist of new command code and AVP definitions that map the semantics of the application. One example of a predefined application is the Diameter Credit-Control. For further information, see RFC 4006. The Diameter Workflow Operation There are two Diameter agents: Diameter Stack Diameter Request Diameter Stack The Diameter Stack agent manages transport, decoding, and encoding of Diameter input messages. In order for a workflow to act as a Diameter server, you must use the Diameter Stack agent. The Diameter Stack agent communicates with the workflow by using the UDR type called RequestCycleUDR . When a request message arrives to the stack, the message is decoded, validated, and turned into a UDR of the pre-generated UDR type, as specified in the Commands tab in Diameter Application Profile . This UDR is inserted into the RequestCycleUDR s Request field and routed through the workflow. By using the APL function udrCreate the Answer field is populated with an appropriate answer message, and then RequestCycleUDR is routed back to the stack agent, for transmission of the answer. It is possible to use multiple Diameter Stack agents in a workflow if that is required in the business logic. However, for the best possible performance, it is recommended to use one Diameter Stack agent per wo rkflo w. Open A Diameter Stack workflow Note! Diameter Base Protocol commands such as Capability-Exchange-Request and Capability-Exchange-Answer , are handled internally by the Diameter Stack agent. You see an indication of execution of these commands on the Workflow Monitor in the debug mode. The Diameter Stack agent also publish MIM values that contain counters for the various commands. AVPs (Attribute-Value pairs) from the Diameter Base Protocol are static, unchangeable, and always available to the system. Diameter Request In order for a workflow to act as a Diameter client, you must use both the Diameter Request agent and the Diameter Stack agent. The Diameter Request agent simply references a Diameter Stack agent that is suitable for the outgoing route. A RequestCycleUDR with a populated Request field is routed into the Diameter Request agent. This agent then uses the selected stack to send the message. A RequestCycleUDR containing the original Request field and a populated Answer field is then routed back into the workflow. A Diameter Request workflow Diameter Related UDR Types You view the UDR types that are created by default in the Diameter agents (based on RFC 6733), in the UDR Internal Format Browser, in the Diameter folder. To open the browser, open an APL Editor. In the editing area right-click and select UDR Assist ance. Open The UDR Internal Format Browser Each Command or AVP that is defined in the Diameter application profile configuration will result in a UDR type after it has been saved. Note that the base commands and AVPs in RFC 6733 are predefined and included automatically. Note! The BaseUDR and BaseCommand UDR types are internal and shall not be used in APL code. RequestCycleUDR The Diameter Stack agent and Diameter Request agent communicate with the workflow by using the UDR type RequestCycleUDR. For more information, see the sections above, Diameter Stack, and Diameter Request. The following fields are included in the RequestCycleUDR: Field Description Field Description Answer (BaseCommand (Diameter)) This field is populated with an "answer message UDR", before routed back by the workflow to the Diameter Stack agent. For the Diameter Request agent it will work the reversed way: after the answer field has been populated by the agent, the RequestCycleUDR is routed to the workflow. Note! In the answer message UDR, the fields Origin_Host and Origin_Realm will be automatically populated by the Diameter stack in case they are unconfigured, i e set to null. Otherwise, your configured values will be used. The field EndToEndIdientifier is available as a read-only field and will always have the same value as in the "request message UDR". AnswerReceivedTime (long) A timestamp indicating when the client receives the answer in nanoseconds. AnswerSentTime (long) A timestamp indicating when the server sends the answer in nanoseconds. Context (any) This is an internal working field that can be used in the workflow configuration to keep track of and use internal workflow information related to the request, when processing the answer. An example for a proxy workflow including TCP/IP and Diameter agents: When sending the RequestCycleUDR to the Diameter Request agent, the input TCPIPUDR is saved in the Context field. When the response is received from the Diameter agent, the TCPIPUDR can be read from the Context field and this TCPIPUDR can be used to send back the response to the TCP/IP agent. ExcludePeers (list<string>) You can populate this field with a list a list of peers, identified by their hostnames. When Round Robin is selected as the Realm Routing Strategy , these peers will be excluded from lookups in the Realm Routing Table . You can use ExcludePeers to act on errors in the answers from a Diameter server. For instance, if a peer answers with the Result-Code AVP set to DIAMETER_TOO_BUSY 3004 , you may want to exclude this peer in consecutive requests for some time. IncomingRemotePeer (string) This field is populated with the Diameter identity of the sending peer. Note! The field is read-only and will be automatically populated by the Diameter stack. Request (BaseCommand (Diameter)) The Diameter Stack agent populates the Request field with the "request message UDR" before routing the RequestCycleUDR to the workflow. For the Diameter Request agent it will work the reversed way and request messages will be transmitted from the workflow to the Diameter Stack agent by using this field. Note! In the request message UDR, the fields Origin_Host and Origin_Realm will be automatically populated by the Diameter stack in case they are unconfigured, i e set to null. Otherwise, your configured values will be used. The value of the field EndToEndIdientifier can be configured by using APL. If it is not configured, the value will be set by the stack sending out the request. RequestReceivedTime (long) A operating system uptime indicating when the server receives the request in nanoseconds. RequestSentTime (long) A operating system uptime indicating when the client sends the request in nanoseconds. Session_Id(string) A Diameter Session-Id value that will be read from the Request field in the Diameter message. This is a read-only field. Throttled(boolean) This fl ag indicates whether the UDR has been throttled or not. Default is false , and if the UDR has been throttled, it will be set to true . Note! If Throttled is true , the Answer field of the RequestCycleUDR will be set to null. WrappedMZObject The WrappedMZObject UDR does not map to a Diameter message but can be used to send data between workflows. WrappedMZObject is added as a field in the RequestCycleUDR (request or answer). Note! Since this is not a normal Diameter message, the receiver has to be another workflow. The following fields are included in the WrappedMZObject UDR: Field Description Field Description Data (any) The data to send to another workflow. Destination_Host (string) The server host, the destination of the message. Destination_Realm (string) The realm where to route the message. Is_Request (boolean) Used to indicate if the message is a request or not. Is_Unidirectional (boolean) To be used if when no reply is expected. DiameterErrorUDR When any of the following errors occurs, the Diameter Stack agent creates a DiameterErrorUDR : Decoding and validation errors for known requests and answers (e g unknown or missing AVP) Unknown request or answer (unknown command ID) Failure in CER/CEA handshake (e g no common applications) Request or answer sent before CER/CEA handshake A DiameterErrorUDR is not created unless the erroneous incoming data is formatted as a Diameter command. It must contain a header followed by a payload. The following fields are included in the DiameterErrorUDR UDR: Field Description Field Description ErrorMessage (string) This field contains the error message. IncomingMessage (BaseCommand(Diameter)) This field is populated with the incoming message if it can be decoded. IncomingRemotePeer (string) This field contains the name of the source peer, as specified in the Diameter routing profile configuration. If the peer is unknown, this field contains the content of the Origin-Host AVP, provided that the incoming message can be decoded. RawIncomingMessage (bytearray) This field contains the original Diameter message. ResultCode (int) This fields contains the Diameter result code. SentAnswer (BaseCommand(Diameter)) This field is populated with the answer message, if any. OriginalData (bytearray) This field is always empty. You can configure the Diameter Stack agent to route UDRs of this type to the workflow. For more information, see Advanced Tab in Diameter Stack Agent Configuration . ConnectionLost UDR The ConnectionLost UDR is sent whenever a connection to a peer is lost, regardless of the reason for the connection going down, i e, whether it is a controlled shutdown or, for example, a network failure. Field Description Field Description Message (string) This field contains the connection related message indicating the reason for the lost connection. PeerName (string) This field contains the name of the peer to which the connection is lost. You can configure the Diameter Stack agent to route UDRs of this type to the workflow. For more information, see Advanced Tab in Diameter Stack Agent Configuration . Special Error Handling The Diameter Stack agent produces three error answers with internal result codes. No suitable route When there is no peer or realm in the Diameter Routing profile that matches the content of the AVPs that are used for routing, a message with the error code 4997 is returned. The following AVPs are used for routing: Destination-Host Destination-Realm Acct-Application-Id Auth-Application-Id Vendor-Specific-Application-Id This error may also occur when all the peers of a realm are specified in the ExcludePeers field of a RequestCycle UDR and Round Robin is the selected Realm Routing Strategy . Connection to peer not open When connection with the peer that is receiving the request is not established, a message with the error code 4998 is returned. Timed out waiting for answer When a request is sent to a peer and no answer is received within a configurable timeout, a message with the error code 4999 is returned. Peer Failover Handling The connections to peers are monitored through the standard Diameter watchdog as described in RFC 6733 and RFC 3539. Possible states of the connections are: OKAY, SUSPECT, DOWN, REOPEN, INITIAL. These states are used by Diameter Stack agent for peer selection, failover handling, and to determine when messages should be routed to the workflow. The diagram below illustrates a failover scenario where a CCR (Credit Control Request) message is routed from a workflow. Open Handling of Outstanding Request at Peer Failover A CCR message is routed from a workflow to a Diameter Stack agent. The Diameter Stack agent routes the CCR message to Peer 1. The peer connection status of Peer 1 is OKAY. Peer 1 does not respond within the timeout period that is configured in the Diameter Stack agent and an Error Answer Message is routed back to the workflow. The workflow is configured to act on the Error Answer Message and resends the CCR message. Since the Diameter Stack agent does not receive an answer after the first CCR message, it sends a DWR (Diameter Watchdog Request) message to Peer 1. The watchdog timer interval TWINIT expires without a response from Peer. The Diameter Stack agent sends a second DWR message to Peer 1. The workflow makes a third attempt at sending the CCR message. In the meantime, TWINIT has expired twice and the connection state for Peer 1 has changed to SUSPECT. This triggers the Diameter Stack agent to resend the CCR message to a different peer. Diameter requests are only routed to peers with status REOPEN and SUSPECT as a last resort, i e when there are no peers with status INITIAL or OKAY. For this reason the Diameter agent now immediately routes the CCR message to another available peer (Peer 2 in this example). TWINIT has now expired three times and the peer connection status has changed to DOWN. This means that messages are no longer routed to this peer. Peer 2 responds with a Credit Control Answer (CCA) message to the Diameter Request agent, which then routes the message back to the workflow. For simplicity of the example above, TWINIT appears longer than the Diameter answer timeout. In a production configuration this is typically not the case. For information about how to configure the Diameter answer timeout and TWINIT, see Diameter Stack Agent . For information about how to configure Diameter peers, see Diameter Routing Profile .

---

# Document 587: wflist - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204646654/wflist
**Categories:** chunks_index.json

usage: wflist <pattern matching expression for workflow names> ... [ -invalid ] [ -valid ] [ -active ] [ -inactive ] [ -not-member-of-wfgroup ] [ -long ] [ -activationMode ] ] [ -loop [ N ] ] [ -wftype ] This command lists workflows. If you use the command without any options, all workflows will be listed. With this command, you compare a single pattern match expression, or several, with the full workflow name, <folder>.<workflowconfigurationname>.<workflowname>, of all the workflows. The command accepts wild cards, such as '*' and '?'. For further information see Textual Pattern Matches . The command accepts the following options: Option Description Option Description [-invalid] Lists all invalid workflows. [-valid] Lists all valid workflows. [-active] Lists all active workflows. [-inactive] Lists all inactive workflows. [-not-member-of-wfgroup ] Lists all the workflows that are not included in a workflow group. [-long] Lists the workflow state and information about the latest start (aborted or not started). If the workflow is running long reveals how long it has been running. long will also display the current throughput. [-long [ -activationMode]] Lists the workflow state and information about the latest start as well as the workflow's activation mode. If the workflow is enabled it will be shown as ENABLED. [-loop [ N ]] Sets a loop mode that runs the wflist command forever every N seconds (N is by default set to 10) To terminate loop use Ctrl-C. Note! When combining [-active] and [-long], the Execution Context and the execution time for the workflow will be listed. [-wftype] Lists the type of the workflows: Batch Task Realtime System Task Return Codes Listed below are the different return codes for the wflist command: Code Description Code Description 0 Will be returned if the command was successful. 1 Will be returned if the number of arguments is incorrect.

---

# Document 588: Workflow Bridge Real-time Forwarding Agent Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205035291/Workflow+Bridge+Real-time+Forwarding+Agent+Configuration
**Categories:** chunks_index.json

You open the Workflow Bridge collection agent configuration dialog from a workflow configuration. To open the Workflow Bridge processing agent configuration, click Build  New Configuration . Select Workflow from the Configurations dialog. When prompted to select a workflow type, select Realtime . Click Add agent and select Workflow bridge from the processing tab of the Agent Selection dialog. Open Workflow Bridge forwarding agent configuration dialog for a real-time workflow Setting Description Setting Description Profile This is the profile to use for communication between the workflows. For information about how to configure a Workflow Bridge profile, see Workflow Bridge Profile . All workflows in the same workflow configuration can use separate profiles. For this to work, the profile must be set to Default in the Workflow Table tab found in the Workflow Properties dialog. For further information on the Workflow Table tab, refer to Workflow Table . To select a profile, click on the Browse... button, select the profile to use, and then click OK . Stream ID Workflow Bridge collection and forwarding agents use Stream IDs to manage connections between multiple workflow instances. Instead of creating separate profiles for each pair of workflows, you can use a single profile and assign a Stream ID to ensure that the correct workflows are linked. This is particularly useful when scaling your system, as it allows new workflow instances to automatically find their corresponding counterparts. Example  Configuring a Stream ID in Workflow Bridge Collection and Forwarding Agents Scenario: You need to scale your system by adding multiple instances of connected workflows. Instead of manually configuring separate Workflow Bridge profiles for each instance, you can use Stream IDs to automatically pair workflows. For example, if three processing workflows (A, B, and C) need to send data to three corresponding collection workflows (X, Y, and Z), you can define stream IDs like "A-X", "B-Y", and "C-Z". This ensures each processing workflow sends data to the correct collection workflow while maintaining a simpler, more scalable configuration.

---

# Document 589: Tracing in Desktop - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204611111
**Categories:** chunks_index.json

When a Conditional Trace template has been created, you are ready to do traces in Desktop. To do a trace: Open the Conditional Trace view in Desktop, click Manage and then click on the Conditional Trace button. Open The Conditional Trace view Select which Conditional Trace template you want to use in the Template drop-down list. Enter the maximum number of traces you want to do per EC in the Max Traces Per EC field. Enter the time interval for which you want to run the trace in seconds in the Lifetime (s) field. If a parameter has been defined in the template and mapped to a matcher in the Conditional Trace template, you can enter a regular expression in the <parameter name> field to only get hits where the parameter matches the regular expression. Click on the Start button to initiate the trace.

---

# Document 590: Radius Server Agent Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205001635/Radius+Server+Agent+Configuration
**Categories:** chunks_index.json

You open the Radius Server agent configuration dialog from a workflow configuration. To open the Radius Server agent configuration, click Build  New Configuration. Select Workflow from the Configurations dialog. When prompted to Select workflow type , select Realtime. Click Add agent and select Radius Server from the Collection tab in the Agent Selection dialog. NAS Tab The list on the NAS tab can be dynamically updated. Open The Radius Server agent configuration dialog - NAS tab In the NAS tab, all NASes that the agent collects information from, are specified. Setting Description Setting Description Host Address The IP address or hostname that the NAS sending packets is located on. Secret Key Key used for authentication of a received packet. This key must be identical to the one defined in the NAS. You can define the NAS per workflow by setting the property Additional Hosts in the Workflow Table tab in Workflow Properties to Default or Per Workflow . When defining the servers, you need to follow the following json format: [{"host":"<host>", "secret":"<encrypted password>"}] This format also applies when using External References . Open The Radius Server Additional Hosts property with value - Workflows Miscellaneous Tab Open The Radius Server agent configuration dialog - Miscellaneous tab Setting Description Setting Description Port The port number on which the Radius Server agent will listen for packets from the NAS(es). Note! Since the NASes are configured to communicate with a specific host on this port, the workflow containing the Radius Server agent must be configured to execute on the EC associated with that host. Two Radius agents cannot be configured to listen to the same port, on the same host. PDU Lifetime (millisec) If you set a value larger than 0 (zero) in this field, the Duplicate Check setting is activated. The buffer saved for comparison is the packets collected during the set time frame. Skip MD5 Calculation Select this checkbox to exclude the check for MD5 signatures. This is needed when the Radius client does not send MD5 signatures along with the packets, since a check would then result in the packets being discarded by the Radius Server agent. Note! When Skip MD5 Calculation is selected, the authenticator field in all response messages will be 0 (zero). Duplicate Check You can check for duplicate packets based on: Radius Standard - the identifier within the packet (byte number 2). CRC32 - check sum for the complete packet. When a duplicate is detected, it is silently thrown away (no message is logged) and the Radius agent responds as if a normal packet was received. Error Handling Select an Error Route to ensure that all rejected packets are routed into the workflow using this route. This is optional.

---

# Document 591: Streaming Telemetry Agent - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204740866/Streaming+Telemetry+Agent
**Categories:** chunks_index.json

This section describes the Streaming Telemetry agent. This is a processing agent for real-time workflow configurations. Streaming telemetry is a push-based mechanism for collecting network performance data, for example from routers, that removes the inefficiencies associated with polling. Streaming Telemetry is used to retrieve router information (OSS data) through streaming. The agent communicates with the routers using the gRPC protocol over HTTP/2. The Streaming Telemetry agent accepts requests without the user or password set since a router may or may not require a username or password. If these fields are not present for JTI, the LoginCheck RPC is not called. This means that the router decides, so if, for example, the user and password are not set and the router requires simple authentication, subsequent subscriptions will fail. For gNMI, the user and password, if present, are inserted in the metadata of the Subscribe RPC. The Streaming Telemetry agent supports gNMI (gRPC Network Management Interface) and JTI (Juniper Telemetry Interface). The implementations of GNMI and JTI are based on the content of the proto files. The proto files used for the Streaming Telemetry agent can be downloaded by clicking the following links: gnmi.proto gnmi_ext.proto telemetry.proto Prerequisites The reader of this information should be familiar with: protobuf gRPC The section contains the following subsections: Streaming Telemetry Agent Configuration The Streaming Telemetry UDR Types Streaming Telemetry Events Streaming Telemetry Input/Output Data and MIM

---

# Document 592: Build View - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204997180
**Categories:** chunks_index.json



---
**End of Part 27** - Continue to next part for more content.
