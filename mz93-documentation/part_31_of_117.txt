# RATANON/MZ93-DOCUMENTATION - Part 31/112

---
**Dataset:** ratanon/mz93-documentation
**Part:** 31 of 112
**GitHub:** https://github.com/ratan0n/docs/tree/main/mz93-documentation
**Size:** ~67.9 KB
---

usage: wfexport <workflow configuration> <export file> [-csv|-tsv|-ssv] [workflow configuration password] This command creates a file, (CSV, TSV, or SSV), of the data that is stored in the Workflow Table. This file contains a header row that lists the names of the Workflow Table columns. Option/Parameter Description <workflow configuration> Specify the workflow configuration that you want to export. <export file> Specify the name of the export file [-csv|-tsv|-ssv] Specify one of the wfexport supported formats according to which the export file should be created: CSV (Comma Separated Value) - Default format SSV (Semicolon Separated Value) TSV (Tab Separated Value) Note! Text strings within each value are delimited by a quotation mark ("). In the export file, External References are enclosed in braces ({}) preceded by a dollar symbol ($). For example: ${mywf_abcd} . For further information see External Reference Profile . Similarly, Execution Settings in the export file, are enclosed in braces ({}), but are preceded by a pound symbol (#). For example: #{mywf_exsettings} . For further information see Execution Settings below. To prevent a workflow table column from being updated by the export file data when importing, delete that same column from the export file. [workflow configuration password] For an encrypted export file, provide a password. Example - General use of wfexport Create the file wf_disk_collection.csv under the tmp directory. $ wfexport Default.disk_collection /tmp/wf_disk_collection The wf_disk_collection.csv export file: "ID","Name","[Disk_1]Directory","[Disk_1]Filename" 1,"workflow_1","/tmp/in","in.file" 3,"workflow_3","/tmp/in3","in3.file" 100,"workflow_100","/tmp/in100","in100.file" 109,"workflow_110","/tmp/in101","in101.file" 110,"workflow_110","/tmp/in101","in101.file" 111,"workflow_112","/tmp/in112","${a}" 112,"workflow_113","/tmp/in113","a" Execution Settings An export file of a workflow configuration may include settings for an EC. Setting Description Valid Values Setting Description Valid Values type The configuration type. execsettings enabled Specifies whether or not the configuration is enabled true or false disttype The workflows load balancing method. sequential , wfcount , machineload, or roundrobin . For further information see Workflow Properties . ecgroups A vertical bar (|) delimited string of the configured Execution Context groups. The list is enclosed with brackets. Hint! Multiple ecgroups can be specified at once. [] = an empty ecgroups. Example - Export data of EC configurations With an EC configuration, the export file will include: #{type=execsettings#enabled=true #disttype=wfcount#ecgroups=[ec1|ec2]} With a disabled EC configuration, the export file will include: #{type=execsettings#enabled=false} Return Codes The following is a list of return codes for the wfexport command: Code Description Code Description 0 Will be returned if the command was successful. 1 Will be returned if the number of arguments is incorrect. 1 Will be returned If login credentials are incorrect. 1 Will be returned if configuration permission is denied. 3 Will be returned if the directory does not exist or has no write access. 5 Will be returned if the export file has an incorrect file suffix. 6 Will be returned if the configuration name is incorrect. 7 Will be returned if the configuration does not exist. 9 Will be returned if an encryption passphrase is needed. 10 Will be returned if the user does not have the read permission to access the workflow. 11 Will be returned if the configuration could not be loaded. 12 Will be returned if the export fails (refer to the logs for details).

---

# Document 664: Code Manager Event - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204638846/Code+Manager+Event
**Categories:** chunks_index.json

These messages are logged when software is changed, removed or added; when pico instances are added/removed; or when the code server reports an error. The following fields are included: cmAction - States the part of the system that is affected. cmActionType - States if code was changed, removed or added. Fields inherited from the Base event The following fields are inherited from the Base event, and described in more detail in Base Event : category contents - Code: <message> eventName origin receiveTimeStamp severity timeStamp

---

# Document 665: Parquet Encoder Agent Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204739737/Parquet+Encoder+Agent+Configuration
**Categories:** chunks_index.json

You open the Parquet Encoder agent configuration dialog from a workflow configuration. To open the Parquet Encoder agent configuration, go to Build  New Configuration . Select Workflow from the Configurations dialog. When prompted to Select workflow type, select Batch . Click Add agent and select Parquet Encoder from the Processing tab of the Agent Selection dialog. Open Parquet Encoder agent configuration dialog for a batch workflow The only configuration setting for a Parquet Encoder is the choice of a Parquet Profile. The profile specifies both a schema as well as encoding options. Setting Description Setting Description Parquet Profile This is the profile to use for encoding Parquet documents. For information about how to configure a Parquet profile , see Parquet Profile . To select a profile, click on the Browse... button, select the profile to use, and then click OK .

---

# Document 666: pcommit - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205657001/pcommit
**Categories:** chunks_index.json

usage: pcommit <package-file> ... This command is used to install a package in the system. The command should only be used by system administrators with authority to maintain the MediationZone software. For further information, see the Development Toolkit User's Guide . Return Codes Listed below are the different return codes for the pcommit command: Code Description Code Description 0 Will be returned if the argument count is incorrect, or if the command is successful. 3 Will be returned if the package you want to commit does not exist. 4 Will be returned if the user name and password is missing. 5 Will be returned if the commit failed. 6 Will be returned if any uncaught failures occur during commit.

---

# Document 667: 5G UDRs - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205685916
**Categories:** chunks_index.json

The 5G UDR types are designed to exchange data between the workflows and can be viewed in the UDR Internal Format Browser . NRFSpecificationUDR When an HTTP/2 Server agent has the custom specification for the 5G profile enabled, the agent expects to receive the NRFSpecificationUDR in order to perform the NF (Network Function) registration, heartbeat and de-registration. The following fields are included in NRFSpecificationUDR : Field Description Field Description registerCycleUDR This field is populated by the contents of RequestCycle UDR, and body of RequestCycle UDR should using NFProfile as a payload. heartbeatCycleUDR This field is populated by the contents of RequestCycle UDR, and body of RequestCycle UDR should using List of PatchItem as a payload. deregisterCycleUDR This field is populated by the contents of RequestCycle UDR. nfInstanceIdFieldName Field mapping for nfInstanceId in NFProfile. This is an optional field. If the field is left unpopulated, the value in nfInstanceId will be used. nfTypeFieldName Field mapping for nfType in NFProfile. This is an optional field. If the field is left unpopulated, the value in nfType will be used. heartBeatFieldName Field mapping for heartbeatTimer in NFProfile. This is an optional field. If the field is left unpopulated, the value in heartbeatTimer will be used. nfProfileChangesSupportIndFieldName Field mapping for nfProfileChangesSupportInd in NFProfile. This is an optional field. If the field is left unpopulated, the value in nfProfileChangesSupportInd will be used.

---

# Document 668: Database Forwarding Agent Transaction Behavior - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205032225/Database+Forwarding+Agent+Transaction+Behavior
**Categories:** chunks_index.json

The agent utilizes a Transaction ID, unique for each batch, in two ways. To make sure that inserted (distributed) rows are removed in case the batch is cancelled. This to avoid duplicated rows. To handle this, the agent inserts its batch Transaction ID in the assigned Transaction ID column . If the batch is cancelled, all rows matching the batch Transaction ID will be removed again. If a stored procedure is used to populate the table, the configured Cleanup SP must be able to do the same, or something similar, to avoid duplicates. For further information and an example of a cleanup stored procedure, see Cleanup Stored Procedure in Tables and Stored Procedures . To make sure that a potential Database collection agent does not collect rows from the target table, before the current batch is closed. To handle this, the agent populates a pending transaction table with the current Transaction ID, database and table name in the beginning of the batch and removes the entry in the end of the batch. For a detailed description of this behavior, see Inter-Workflow Communication, Using Database Agents . Emits This agent does not emit anything. Retrieves The agent retrieves commands from other agents and based on them generates a state change of the file currently processed. Command Description Begin Batch Retrieves a Transaction ID and inserts an entry in the pending transaction table. End Batch Deletes the pending Transaction ID row. Cancel Batch Removes the distributed rows with the current Transaction ID or calls the configured Cleanup SP. The pending Transaction ID row is deleted.

---

# Document 669: Event Notifications Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204638712/Event+Notifications+Configuration
**Categories:** chunks_index.json

A notifier is a selected target, receiving event data when one or several selected event types are generated in the system. In addition, filters may be applied for each selected event type. Notifiers are configured in the Event Notification Editor . To create a new Event Notification configuration, click the New Configuration button in the upper left part of the Desktop window, and then select Event Notification from the menu. Open An Event Notification configuration The configuration contains the standard configuration buttons as described in Common Configuration Buttons and two additional button: Button Description Button Description Open To Enable External References in an agent profile field. Refer to the section Enabling External References in an Agent Profile Field in External Reference Profile for further information. Note! If you update the properties file used by the External References file, and resave the External References profile, you will also have to resave the Event Notification configuration for the changes to take effect. Open To define an Event Category, to send any kind of information to a Column. Refer to Event Category for further information. The Event Notification configuration contains two different tabs: Notifier Setup - A Notifier is the target where event messages, configured in the Event Setup, are sent. For instance, to a database table, a log file or to the System Log. The overall appearance of the message string is also defined in this tab. Event Setup - In the Event Setup tab, events to catch are defined. If necessary, the message string defined in the Notifier Setup is also modified. This section contains the following subsections: Notifier Setup Tab Event Setup Tab Event Fields

---

# Document 670: systemimport - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204678067
**Categories:** chunks_index.json

usage: systemimport [ -s|-skipexisting ] [ -pp|-preservepermissions ] [ -nameconflict re|an|sk|ask ] [ -keyconflict re|an|sk|ask ] [ -namekeyconflict rn|rk|an|sk|ask ] [ -he|-holdexecution [ r|sr|sir|wr ] ] [ -nr|-norollback ] [ -no|-newowner] [ -select <xml-selection file> [ -dryrun ] [ -onerror < ABORT | ASK | IGNORE > ] ] [ -m|-message ] [ -u|-upgrade ] [ -eu|-enableusers ] <export file|directory> [password] This command imports a ZIP file or a directory. If an import entry is in conflict with an entry that already exists in the current system, the entry will not be imported. An example of such a conflict might be an identical entry name, but a different ID. A workflow group that is scheduled to start while an import activity is happening, will not start until the import is complete. [-s|-skipexisting] If you choose to set the skipexisting parameter, the imported data will not overwrite existing configurations that have the same key, name, type, and folder. This means that repeatedly importing a configuration, does not overwrite the data. [-pp|-preservepermissions] When user permissions are modified, set the preservepermissions parameter to prevent user permissions in the current system from being updated while importing a configuration. [-nameconflict re | an | sk | ask] This parameter enables you to identify an imported configuration with a name that is identical to the name of a configuration that already exists in your system. Using this parameter requires that you specify what you want to do with the imported configuration: re (REplace): Overwrite the current configuration with the imported one. an (Add New): Add the imported configuration to your system. To resolve the name conflict, the new configuration's name is extended with _1 at the end. Note! A name that already ends with _n is modified at the end to _n+1 . sk (SKip): Ignore the conflicting imported configuration. ask : Prompt when a conflict is detected. Note! If you do not set this parameter, the conflicting configuration is skipped and ignored. [-keyconflict re | an | sk | ask] This parameter enables you to identify an imported configuration with a key that is identical to the key of a configuration that already exists in your system. Using this parameter requires that you specify what you want to do with the imported configuration. For information about the keyconflict options, see [-nameconflict re | an | sk | ask]. Example - [-keyconflict re | an | sk | ask] The command mzsh mzadmin/dr systemimport -keyconflict ask import.zip is applied with the ask option and detects a key conflict. ... [Configuration/Event Notification] - Importing Default.extraKey2... Event Notification configuration with the same key but with a different type, folder or name already exist! Existing name is: Default.existingConfiguration Imported name is: Default.importedConfiguration What do you want to do? 1) Replace existing configuration 2) Import as a new configuration 3) Skip > 1 Use this alternative for all configurations of this type? 1) Yes 2) No > 2 Note! If you do not set this parameter, the conflicting configuration is skipped and ignored. [-namekeyconflict rn | rk | an | sk | ask] This parameter enables you to identify an imported configuration with a name as well as a key that are identical to a name and a key of two different configurations that already exist in your system. Using this parameter requires that you specify what you want to do with the imported configuration: rn (Replace Name conflict): Replace the configuration that name conflicts with the imported configuration. rk (Replace Key conflict): Replace the configuration that key conflicts with the imported configuration. an (Add New): Add the imported configuration to your system. sk (SKip): Ignore the conflicting imported configuration. ask : Prompt a message when a conflict is detected. Note! If you do not set this parameter, the conflicting configuration is skipped and ignored. [ -he|-holdexecution [ r | sr | sir | wr ] ] Example - Using the holdexecution parameter $ systemimport -s -he r export.zip $ systemimport -s -he sr export.zip $ systemimport -s -he sir export.zip $ systemimport -s -he wr export.zip Use the holdexecution parameter to prevent scheduled workflow groups from being started while importing configurations. If a workflow or a workflow group does not stop within 5 minutes (300 seconds) when applying systemimport with either one of the following holdexecution parameters: sr , sir , and wr , a timeout will occur. You can change the timeout value by setting the Platform property mz.import.suppress.timeout . When import is complete and a workflow group is still running, systemimport -holdexecution [ r | sr | sir | wr ] awaits the current running workflow member to come to a stop, and then restarts the whole group instead of continuing the execution of the member that follows. If you do not specify any of the r , sr , sir or wr options: A batch workflow or a workflow group will remain suppressed until all the workflows finish executing. Then, the workflow or the members of the workflow group, become idle. A real-time workflow group will return to the running state. systemimport -holdexecution generates events. To retrieve the events data, configure the Event Notification Editor to transfer it according to your preferences. For information about the Suppressed Event event type, see 4.3.7 Suppressed Event in the Desktop user's guide. holdexecution Parameters Select the action that should resolve held executions: r (restart): When the import activity is done, and a workflow group is partly executed, specifying this option will restart that workflow group. Workflow groups that are fully executed, will not be restarted. A workflow that is started manually, will be restarted if it has been stopped. sr (stop and restart): Stops the workflows or workflow groups that are still running after an import is complete, waits for them to come to a stop or finish processing a batch, and then restarts synchronously all the workflow groups and all the manually started workflows that had not executed completely within the timeout boundaries. Note! A workflow that becomes Unreachable after a system import has begun, will be restarted only when and if the contact with the Execution Context that it runs on, is regained while still importing. If a workflow is unreachable when system import is started, the import is aborted and the following error message is generated: Abort Import: At least one wf that is Unreachable . For further information about the Unreachable state, see 3.1.11 Workflow Monitor in the Desktop User's Guide . sir (stop immediately and restart): Stops the workflows or workflow groups that are still running after an import is complete, even in the middle of processing a batch, and synchronously restarts all the workflow groups and all the manually started workflows that had not executed completely within the timeout boundaries. Note! An Unreachable workflow is restarted once contact with the Execution Context that it runs on, is regained. For further information about the Unreachable state, see 3.1.11 Workflow Monitor in the Desktop User's Guide . wr (wait for completion and restart): After an import is complete, synchronously restarts all the workflow groups and all the manually started workflows that had not executed completely within the timeout boundaries. Note! Any workflow that runs past the timeout limit is restarted as soon as it completes execution. For further information about holding an execution, see the description of the Suppressed workflow group state in the Desktop User's Guide . [-nr|-norollback] When you use systemimport, a file that contains rollback information will be created. This file contains data about configuration changes during the system import, and is saved in the directory where you apply the command. You use the rollback file to undo a system import and return to the configuration that you had before the system import. Note! Use the importrollback command only to revert the systemimport command and not for the purpose of a system rollback. For further information see importrollback . To suppress the creation of the rollback file, provide either a nr or a norollback option. [-no|-newowner] Change ownership of the configuration on import. Must match an user already defined in the 6.1 Access Controller . [-select <xml-selection file> [ -dryrun ] [ -onError < ABORT | ASK | IGNORE >] The -select <xml-selection file> parameter enables you to: Provide systemimport with an XML file that specifies your selection of configurations and workflow tables. Use [ -dryrun ] to test data compatibility prior to actually importing Use [ -onError < ABORT | ASK | IGNORE > ] to manage an occurrence of an error XML Selection File This selection information that you find in the XML selection file corresponds to the selection information that you specify on the System Import tool view, in the Desktop user interface. The XML selection file consists of two main tags: <configurations> : contains your configuration import selections <workflows> : contains your workflow tables import selections <configurations> Select configurations from the <Export file|directory> that systemimport imports. Use the resolveDependencies attribute to either include (true), or ignore (false), dependent configurations. See the following example. Example - The resolveDependencies attribute <import> <configurations> <!-- Ignoring dependencies of the Default.x configuration--> <configuration name="Default.x" resolveDependencies="false"/> <!-- Including dependencies of the Default.y configuration--> <configuration name="Default.y" resolveDependencies="true"/> <!-- Ignoring dependencies of the Default.z configuration--> <!-- Note: Equal to selection of Default.x above --> <configuration name="Admin.C07E02_DEMO_BWF"/> <!-- Ignoring dependencies of configurations within the folder --> <configuration foldername="systemunits"/> <!-- Including dependencies of all the configurations in the folder --> <configuration foldername="billing" resolveDependencies="true"/> </configurations> </import> To import all the configurations that are included in a specific folder, include the following text in the XML file: <configuration foldername="myFolder"/> Note! If you specify configuration selections in the XML file that do not exist in the Export file, a warning is generated. <workflows> This XML tag enables you to use systemimport [-select <xml-selection file>] to import both workflow configurations and their CSV file in one action. Use this tag to associate workflow tables with CSV data files. Note! Set the keepOld attribute to true in order to prevent removal of workflow table data which has no match in the export file. Use false to overwrite the data. This parameter is only used during import, and has no effect during export. The onError attribute can either be set from the XML selection file, or from the systemimport in-line command. If set from both, the XML selection file attribute is the value that applies. For further information about the values that you can choose from, see onError. This parameter is only used during import, and has no effect during export. Set the encryptPassword attribute to the workflow configuration password if the workflow configuration is password protected. Example - The XML selection tags <import> <configurations> <configuration name="Common.DB_PROFILE"/> <configuration name="Common.APL_PROFILE" resolveDependencies="true"/> <configuration foldername="myFolder"/> </configurations> <workflows > <workflow name="Mobile.FTP_workflow" wfTable="/home/user1/FTP_workflows.csv"/> <workflow name="Mobile.SFTP2_workflow" wfTable="/home/user1/SFTP2_workflows.csv" resolveDependencies="true"/> <workflow name="Mobile.GGSN1_workflow" wfTable="/home/user1/GGSN1_workflows.csv" resolveDependencies="true" onError="ask"/> <workflow name="Mobile.GGSN3_workflow" wfTable="/home/user1/GGSN3_workflows.csv" resolveDependencies="true" onError="ignore"/> <workflow name="Mobile.GGSN4_workflow" wfTable="/home/user1/GGSN4_workflows.csv" resolveDependencies="true" onError="abort"/> <workflow name="Mobile.GGSN5_workflow" wfTable="/home/user1/GGSN5_workflows.csv" resolveDependencies="true" keepOld="false" encryptPassword="password" onError="ask"/> </workflows> </import> [-dryrun] Prior to importing, use systemimport with the dryrun switch to verify that the CSV data, such as number of columns or names, matches the contents of the workflow table. If a mismatch is detected a report will be generated. [-onError] If the onError attribute is not specified in the XML selection file, the value that you set it to in systemimport, is the value that applies. Otherwise, the attribute value applies. Set [-onError] to any of the following values: ask : to generate an interactive message ignore : to do nothing abort : to abort the command and stop a current configuration import [-m|-message] If you want to add a comment when making a systemimport, the -m or -message option can be used as in the following example: Example - message mzsh <username>/<password> systemimport -m "My Import" /home/Directory/<file to import>.zip "My Import" will be the commented. The comment will replace the default information saved when making a system import, and will both be included in the System Log message that is generated, as well as visible when selecting to view history in any of the configurations in the imported data. [-u|-upgrade] When exports have been made in a previous version of MediationZone, they may have to be upgraded. In this case you can use the -u or -upgrade option as in the following example: Example - upgrade $ mzsh <username>/<password> systemimport -u <file to import>.zip The configurations will then be upgraded. [ -eu|-enableusers ] If you want imported users to be active after you run the import, use the -eu or -enableusers option as shown in the following example: Example - enableusers $ mzsh <username>/<password> systemimport -eu <file to import>.zip By default users are imported as inactive and must be activated manually via the Access Controller. This option is only available when you run an import as a super user. If you use this option as another user, users will be skipped during the import. <export file|directory> Specify the path to the directory or ZIP file that contains the configurations you want to import. [password] To import encrypted configurations, provide a password. Return Codes Listed below are the different return codes for the systemimport command: Code Description Code Description 0 Will be returned if the command is successful. 1 Will be returned if the argument count is incorrect or argument(s) are invalid. 2 Will be returned if the command was unable to find an export (file|directory) at the supplied path. 3 Will be returned if the import could not be started due to locked import. 4 Will be returned if any errors were reported during the import. 5 Will be returned if the XML file did not contain any configurations or workflows to import. 8 Will be returned if the XML file did not contain any workflows to use in dry run. 10 Will be returned if the import results in invalid workflows due to compilation errors. 14 Will be returned if there are configurations not imported 20 Will be returned if the value for a supplied option or option is missing. 100 Will be returned if an error occurs while parsing the selection file 101 Will be returned if an error occurs while parsing a node in the selection XML file. 102 Will be returned if an error occurs while getting the attribute from a configuration tab, or if expected wfTable attribute in tag with the supplied name is missing. 103 Will be returned if the import was unable to parse the value for a booolean XML attribute. 104 Will be returned if an error occurs while parsing dependencies for a configuration. 300 Will be returned if an OutOfMemoryError occurs during import. Additional information from the "critical error log" will be included, this is further described in 2.12 Out of Memory Info in System Log in the System Administrator's Guide.

---

# Document 671: Multi Directory Collection Strategy - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204675798/Multi+Directory+Collection+Strategy
**Categories:** chunks_index.json

This section includes a description of the Multi Directory Collection Strategy that is applied with the Disk, FTP, SFTP, and SCP agents. The Multi Directory Collection Strategy enables you to configure a collection agent to collect data from a series of directories that are listed in a control file. The collection agent reads the control file and collects it from the specified directories. Configuration You configure the Multi Directory Collection Strategy from the first tab in the agent configuration view. Open The collection agent configuration dialog Setting Description Setting Description Collection Strategy From the drop-down list select Multi Directory. Control file Name Enter the path and the name of the control TXT file. Note! If the control file is missing, it is empty or if the file is not readable, the workflow aborts. Example - A Control File controlfile.txt: directory1 directory1/subdir1 directory1/subdir2 directory2 /home/user/directory3 ... Example - A Control File for VMS controlfile_vms.txt: DISK$USERS:[USERS.USER1.TESTDIR1] DISK$USERS:[USERS.USER1.TESTDIR2] DISK$USERS:[USERS.USER1.TESTDIR2.SUBDIR1] DISK$USERS:[USERS.USER1.TESTDIR3] DISK$USERS:[USERS.USER1.TESTDIR4] ... Filename The regular expression of the names of the source files on the local file system. Regular expressions according to Java syntax apply. For further information, see http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html . Example To match all filenames beginning with TTFILES , type: TTFILES.* . Note! If you leave Filename empty, or if you specify .* , the agent collects all the files. Abort on Missing Directory Select this check box to abort the workflow if a directory, that is specified on the control file list, is missing on the server. Otherwise, the workflow continues to execute (default). Enable Duplicate Filter Select this check box to prevent the collection of the same file more than once. Files are considered to be duplicates if the absolute filename is the same. Note! This check box is selected by default. The workflow holds an internal data structure with information about which files the collector has collected in previous executions. The data structure is purged by the collection strategy based on the contents of the collection directories. If files collected in the past are no longer found in the collection directory they are removed from the data structure. Note! The internal data structure is stored in the workflow state. Since workflow state is only updated when files are collected the purged internal data structure will be stored the next time a successful file collection is performed. It is possible to manually purge the internal duplicate data structure if needed. To do this, disable the duplicate filter and run the workflow. The next time a duplicate filter is enabled the internal data structure will be empty. Enable Debug Select this check box to enable the generation of error or debug messages. Note! If you choose to enable messaging, make sure to enable debugging on the Workflow Monitor, as well. For further information see Workflow Monitor . Since debugging has a negative impact on performance the debug option should never be enabled in a production environment. Route FileReferenceUDR Select this checkbox to route the File Reference UDR instead of raw data. Configuration You configure the Multi Directory Collection Strategy from the first tab in the agent configuration view. Open The collection agent configuration dialog Setting Description Setting Description Collection Strategy From the drop-down list select Multi Directory. Control file Name Enter the path and the name of the control TXT file. Note! If the control file is missing, it is empty or if the file is not readable, the workflow aborts. Example - A Control File controlfile.txt: directory1 directory1/subdir1 directory1/subdir2 directory2 /home/user/directory3 ... Example - A Control File for VMS controlfile_vms.txt: DISK$USERS:[USERS.USER1.TESTDIR1] DISK$USERS:[USERS.USER1.TESTDIR2] DISK$USERS:[USERS.USER1.TESTDIR2.SUBDIR1] DISK$USERS:[USERS.USER1.TESTDIR3] DISK$USERS:[USERS.USER1.TESTDIR4] ... Filename The regular expression of the names of the source files on the local file system. Regular expressions according to Java syntax apply. For further information, see http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html . Example To match all filenames beginning with TTFILES , type: TTFILES.* . Note! If you leave Filename empty, or if you specify .* , the agent collects all the files. Abort on Missing Directory Select this check box to abort the workflow if a directory, that is specified on the control file list, is missing on the server. Otherwise, the workflow continues to execute (default). Enable Duplicate Filter Select this check box to prevent the collection of the same file more than once. Files are considered to be duplicates if the absolute filename is the same. Note! This check box is selected by default. The workflow holds an internal data structure with information about which files the collector has collected in previous executions. The data structure is purged by the collection strategy based on the contents of the collection directories. If files collected in the past are no longer found in the collection directory they are removed from the data structure. Note! The internal data structure is stored in the workflow state. Since workflow state is only updated when files are collected the purged internal data structure will be stored the next time a successful file collection is performed. It is possible to manually purge the internal duplicate data structure if needed. To do this, disable the duplicate filter and run the workflow. The next time a duplicate filter is enabled the internal data structure will be empty. Enable Debug Select this check box to enable the generation of error or debug messages. Note! If you choose to enable messaging, make sure to enable debugging on the Workflow Monitor, as well. For further information see Workflow Monitor . Since debugging has a negative impact on performance the debug option should never be enabled in a production environment. Route FileReferenceUDR Select this checkbox to route the File Reference UDR instead of raw data.

---

# Document 672: Legacy Desktop Accessibility Options - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204644638/Legacy+Desktop+Accessibility+Options
**Categories:** chunks_index.json

The Legacy Desktop provides accessibility options, to make it more accommodating for all our users. The following accessibility options are available: Tooltips Keyboard navigation and shortcut keys Support for screen readers Tooltips Tooltips are added to certain selected objects to provide more context help. Tooltips appear when the focus indicator highlights the element or when you hover over an element. Open Tooltip when highlighting the Configuration button. Shortcut Keys The Legacy Desktop allows you to perform actions available in right-click menus or using shortcut keys. Open The right click drop-down menu in the Ultra or APL code with the shortcut keys listed to the right of the menu name Support for Screen Readers Screen readers such as NonVisual Desktop Access can read the text and tooltips of the focus indicator highlighted object or element.

---

# Document 673: Disk Collection Agent Events  - Batch - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205685140/Disk+Collection+Agent+Events+-+Batch
**Categories:** chunks_index.json

Agent Message Events An information message from the agent, stated according to the configuration done in the Event Notification Editor. For further information about the agent message event type please refer to Agent Event . Ready with file: filename - Reported along with the name of the source file that has been collected and inserted into the workflow. File cancelled: filename - Reported along with the name of the current file, each time a Cancel Batch message is received. This assumes the workflow is not aborted; refer to Disk Collection Agent Input/Output Data and MIM - Batch for further information. Debug Events There are no debug events for this agent.

---

# Document 674: disconnect - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205657058/disconnect
**Categories:** chunks_index.json

usage: disconnect [-q] [-verbose] <running server process> By using this command, it possible to let an EC and its workflows run in disconnected mode during Platform upgrade, in order to avoid downtime. Note! Since a batch workflow cannot run without contact with the Platform, this command should only be executed on ECs running real-time workflows. If an EC running a batch workflow is disconnected, the workflow will abort. After disconnect, the EC will continue executing real-time workflows without interference from the Platform and there will be no risk that new software is downloaded to the EC during the Platform upgrade. After the upgrade has been performed, each EC has to be restarted in order to re-connect to the Platform, refer to restart for more information. The command accepts the following options: Option Description [-q] Quiet mode. Use this option to eliminate the display of any report during execution. [-verbose] Verbose mode. This option will print extended error information. By running the disconnect command from the Platform without any options, all running ECs, on all connected machines, will be disconnected without the need to login to each machine and disconnect them one by one: MZ>> disconnect Hint! To get the latest status information for all local EC, execute the status command as described in status . Return Codes Listed below are the different return codes for the disconnect command: 1-3: Errors only effecting one or more EC. 10-11: Fatal error, no EC was disconnected. Code Description 0 Will be returned if the command was successful. 1 Will be returned if an EC process is not running. 2 Will be returned if an EC cannot be reached due to a communication problem. 3 Will be returned if an EC does not exist. 10 Will be returned if the Platform cannot be reached due to communication problems. 11 Will be returned in case configuration files in MZ_HOME/etc contain errors that prevent the command from running.

---

# Document 675: Mapping Assignments between Database Fields and UDR Fields - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205032171
**Categories:** chunks_index.json

Assignments The Database agents are designed to either collect data from a database column and assign it to a UDR field, or vice versa. In their configuration they share the Assignment tab, where these mappings are configured. Due to the resemblance this configuration is described here. Open Database collection agent configuration dialog - Assignment tab Item Description Item Description Refresh Updates the table with all the columns or parameters from the selected table or stored procedure (Database forwarding agent, only). Note! Potential changes in the database table will not be visible until Refresh for the database in the Source tab, has been selected. If rows already exist in the table, the refresh operation preserves the configuration for all rows with a corresponding column or parameter name. Thus, if a table has been extended with a new column, the old column configurations are left untouched and the new column appears when Refresh is selected. The value type on each new column that appears in the table is automatically set to UDR Field . Auto assignment: All rows with no value assigned and with a value type of UDR Field will be targeted for auto assignment in the end of the refresh process. If the selected UDR type contains a field whose name matches the column name, the field will be automatically assigned in the Value column. Matching is not case-sensitive and is done after stripping both the column and field names from any characters, except a-z and 0-9. Column Name Displays a list of all columns or stored procedure parameters (Database forwarding agent, only) for the selected table or stored procedure, except the Transaction ID column. Column Type Displays the data type for each column as declared in the database table. If the column does not accept NULL this is displayed as: (NOT NULL). Note! If using Oracle and assigning a value of type bigint , the column type VARCHAR should be used. Setting a full range of the bigint value type could otherwise lead to a wrong value being inserted, due to a limitation in the JDBC interface. Value Type Allows the user to select what type of value to be assigned to the column, or vice versa. For further information, see the section below, Value Types. Value The value to be assigned to the column, or vice versa. The technique of selecting a value depends on the selected Value Type . Note! It is important that the data type of the selected value corresponds to the data type of the column. Most incompatibilities will automatically be detected, however, there are situations where validation is not possible. Value Types The Database agents offer six different types of values that may be assigned to a column, or vice versa. Depending on the agent, not all value types are applicable and will therefore not be available in the list. Both Database Agents Both Database Agents Value Type Description UDR Field If selected, a UDR browser will be launched when the corresponding Value cell is selected. When a UDR field has been selected in the browser it will appear in the Value cell. Info! This field can also be found in the Function Editor on the Database Forwarding agent Note! To save the user from launching the UDR browser for every cell to be assigned, the browser window may be kept on display. When a UDR field is selected and Apply is selected or if a UDR field is double-clicked, the field will go into the Value cell of the selected row, provided that this row has a value type of UDR Field . The same rule applies when OK is selected in the browser, however the browser will be dismissed. It is possible to change target ( Value cell) by selecting the desired row in the Assignment tab in the configuration dialog, while still keeping the UDR browser window open. Whether data types of the selected UDR and the database column are compatible or not, is validated when the configuration dialog is confirmed. NULL If selected, no value may be entered. In Database collection agents, NULL must be selected for all columns whose values are not mapped into a UDR Field. In Database forwarding agents, NULL must be selected for columns populated with a NULL value or columns that, when inserted, will be populated by internal database triggers. Database Collection Agent Only Value Type Description To UDR It is supposed to be selected if a complete UDR has been stored in a binary column by a Database forwarding agent and that UDR will be recollected by the Database collection agent. The Database forwarding agent must have been populating the column from the special field Storable , available in all UDR types. If this value type is selected no other assignments are allowed. If other columns exist their value types must be set to NULL. An evaluation to ensure the column type is actually a RAW, LONG RAW or BLOB, is carried out. Database Forwarding Agent Only Value Type Description MIM Entry If selected, a MIM browser will be launched when the corresponding Value cell is clicked. When a MIM resource has been selected in the browser it will appear in the Value cell. The previous Note for the UDR Field applies to this browser as well. Whether data types of the selected UDR and the database column are compatible or not, is validated when the configuration dialog is confirmed. Info! This field can also be found in the Function Editor on the Database Forwarding agent and also on the Parameter Editor on the Database Collection agent. Constant If selected, a text entry field will be available in the Value cell where any constant to be assigned to the column may be entered. The agent automatically appends possible quotes needed in the SQL statement, based on the data type of the column. Info! This field can also be found in the Function Editor on the Database Forwarding agent and also on the Parameter Editor on the Database Collection agent. From UDR It is selected if a complete UDR is to be stored in a binary column to later be collected by a Database collection agent. The Database forwarding agent must populate the column from the special field Storable , available in all UDR types. This is only applicable for column types RAW, LONG RAW or BLOB. Function If selected, a text entry field will be available in the Value cell where any database related function to be called may be entered. If the function takes parameters, these must be marked as question marks. Selecting a cell containing question marks will display the Function Editor dialog where each question mark is represented by a row. Open Function Editor dialog The selection of parameter values follows the same procedures as for the assignment of column values however Constant , UDR Field and MIM Entry are the only available value types. Note! If constants are entered in the Function Editor they must be quoted correctly since the agent has no way of knowing what data types they must have.

---

# Document 676: Duplicate UDR Agent Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204672818/Duplicate+UDR+Agent+Configuration
**Categories:** chunks_index.json

To open the Duplicate UDR agent configuration, click Build  New Configuration . Select Workflow from the Configurations dialog. When prompted to Select workflow type , select Batch . Click Add agent and click the Processing tab. Select Dup UDR from the Agent Selection dialog. Double-click the agent icon or right-click the icon and select Edit agent , to display the Agent Configuration dialog. Dup UDR Tab Open Duplicate UDR Detection configuration dialogue - Dup UDR tab Setting Description Setting Description Profile Select the Duplicate UDR profile you want the agent to use in the drop-down list. All workflows in the same workflow configuration can use separate Duplicate UDR profiles. To do that, the profile must be set to Default in the Workflow Table tab found in the Workflow Properties dialogue. After that, each workflow in the Workflow Table can be appointed the correct profile. Duplicate Route Indicates on which route to send detected duplicates. The list is not populated with output routes until the routes have been created and the dialogue is reopened. Suppress Warnings in System Log Select this check box to suppress duplicate UDR messages from being logged in the System Log. Thread Buffer Tab For more information, refer to the Thread Buffer Tab in Workflow Template.

---

# Document 677: JMS Request Agent Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204673725/JMS+Request+Agent+Configuration
**Categories:** chunks_index.json

To open the JMS Request agent configuration dialog from a workflow configuration, you can do either one of the following: double-click the agent icon select the agent icon and click the Edit button The Agent Configuration contains configurations required to establish connections with the JMS server. Open JMS Request agent configuration Setting Description Setting Description Profile Enter the JMS profile that you want to use to establish the connection. Username Enter the name of the user that is about to start the connection with the JMS server. This field is optional Password Enter a password that is required to initiate the connection with the JMS server. This field is optional. Note! There may be instances where setting the username and password for the JNDI server will result in an error where the agent will not be able to access the server. When this happens, you will have to set the username and password in the properties list in the JMS Profile, using the following security context: For username, use: java.naming.security.principal For password, use: java.naming.security.credentials Timeout (s) Enter the time limit, in seconds, for the agent to wait for a reply.

---

# Document 678: Workflow Service Plugins - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204645281/Workflow+Service+Plugins
**Categories:** chunks_index.json

A workflow service executes in the background of a realtime workflow and shares the same life cycle as the workflow. The workflow service has access to the MIM tree and can thereby monitor workflow execution. A workflow service can not route any data into workflow. For general concepts, see Agent Plugins . A workflow service is defined by inserting a class that extends the DRWorkflowServiceInspectable class into the code server. The server will then instantiate the class and extract the needed information about the workflow service. The classes should be named as follows: Class Description <Workflow Service>Config The class holds the configuration data for the workflow service. It extends the class DRWorkflowServiceConfigData . <Workflow Service>Insp This is the workflow service definition class that contains references to the user interface and executable implementations of the workflow service, as well as other information. This class must extend DRWorkflowServiceInspectable . <Workflow Service>Exec This is the class responsible for the actual execution that implements the workflow service's runtime logic. The class should extend: DRRealtimeService . <Workflow Service>UI The workflow service user interface dialog, used to collect and display the template configuration data for the agent. It is defined in a class extending DRWorkflowServiceUI .

---

# Document 679: GenericElementUDR - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204643649/GenericElementUDR
**Categories:** chunks_index.json

The GenericElement UDR is used to create any HTML element. Click the following to see an example APL code to create an image on a page using GenericElement . Example APL code The following fields are included in the GenericElement UDR : Field Description Field Description attributes (map<string,string>) This field may contain extra attributes to be added. components (list<ComponentUDR>) This field contains a list of child components. cssClasses (list<string>) This field may contain a list of extra values added to the class attribute. This is typically used to style the component. Please read more on Bootstrap . id (string) This field may contain the id of the component tag (string) This field contains a tag name for a valid HTML tag. For example: Div, Img, Span .

---

# Document 680: Updating the Installation Properties for Platform - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204637789
**Categories:** chunks_index.json

Update the installation parameters in the file install.xml to suit the local installation. The following subsections contain listings of all the installation parameters within the install.xml file, including example and/or default values. This section includes the following subsections: Installer Properties for Platform Additional Platform Properties in install.xml Properties for Oracle Properties for PostgreSQL Properties for SAP HANA

---

# Document 681: UDR File Editor - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204646721/UDR+File+Editor
**Categories:** chunks_index.json

The UDR File Editor allows you to view and edit the content of UDR files. The UDR file may be of any format as long as it has an associated decoder. Since UDRs often contain a large number of fields, it is possible to create a UDR View to select specific fields to be displayed as columns in the UDR File Editor. See UDR Views for more information. Each UDR can also be opened in a separate dialog where all fields are available. Note! By default the UDR File Editor only supports input files up to size 3MB. If the file size exceeds this limit, the UDR File Editor only reads up to 3MB of the file and then stop, displaying only the read records. If you want to support decoding of files larger than 3 MB, you need to set the Desktop property mz.gui.udreditor.limit for the corresponding Desktop. See Desktop Properties . Setting the property to yes means the 3 MB limit applies. Setting the property to no bypasses the limitation mechanism, which may potentially cause out-of-memory errors in the Desktop. Several UDR File Editors can be used simultaneously, however, avoid editing the same UDR from several different editors, since there is no functionality to handle real-time co-authoring. To open the UDR File Editor , open the Manage screen and click the UDR File Editor button. Open UDR File Editor Setting Description Setting Description UDR View If you want to apply a configured UDR view, you can click the Browse... button to select and apply a defined UDR view. See UDR Views for more information. Orig Pos Shows the original position of the UDR. New indicates that the UDR did not exist prior to the last Save. Pos The current position of the UDR. The order applies upon saving. Type The UDR types Field Name All columns following the Type column list the field names of the UDR type according to the UDR view selection. If there is no field with the defined name, No such field is stated. UDR File Editor Buttons The Ultra File Editor contains the following buttons: Item Description Item Description Open Click this button to clear the UDR File Editor . Open Opens the Open UDR File dialog. Click Browse... to select the decoder you want to use for the data file, and then click Upload File... to browse the file system and select the file you want to view. Click OK to close the dialog and display the file in the UDR File Editor . Open Open Click to save your modified UDR file. Open Save the UDR File dialog Select the encoder you want to use by clicking the Browse button to the right of the Encoder field and selecting the decoder in the Select encoder dialog. Select the GZIP Compressed checkbox if you want to compress the file. Enter the name of the file in the File Name field and click Download to download your file. Open Click this button to open the Table Export dialog where you can export the data to be able to open it in any text editor. Open All UDRs are displayed as rows, where the fields are separated by any of the following: Comma Semicolon Tab Non-existing fields are marked [null] . The first line always holds the field names. Open Click this button to print either a selection of UDRs or all UDRs. Open Click to open a new dialog in which the selected UDRs can be edited simultaneously. For further information, see Editing a Bulk of UDRs . Open Click to open the UDR Views . Open Click this button to open the user documentation This chapter includes the following sections: Editing a UDR Editing a Bulk of UDRs

---

# Document 682: Azure Application Insight Event - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204605164/Azure+Application+Insight+Event
**Categories:** chunks_index.json

When you select the Azure Application Insight notification type, event notifications can be sent to Azure Application Insight. Open Event Notification - Notification Type Azure Application Insight Setting Description Authentication Method Select which authentication method you want to use; Instrumentation Key or Connection String . The field below the radio buttons will change name accordingly. Instrumentation Key The instrumentation key is generated by Azure when an Application Insight resource is created. It can be found in the Overview page of the Application Insight resource. Connection String The connection string is generated by Azure when an Application Insight resource is created. It can be found in the Overview page of the Application Insight resource. Example An example custom event in Application Insight having received an event notification from MediationZone. The event is triggered by the workflow stop APL function in an Analysis agent. Open For more information about how to configure event notifications, see Event Notifications Configuration .

---

# Document 683: Masking Methods - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205684756/Masking+Methods
**Categories:** chunks_index.json

In the Data Masking profile, you configure the masking method you want to use, which UDR types and fields you want to mask/unmask, and any masking method-specific settings. There are four different masking methods that you can use: Crypto, which is used for encrypting data with either AES-128 or AES-256. Can be used for both obscuring and unmasking data. Database Storage, which is used for storing masked and unmasked data in a database enabling the data to be unmasked at a later stage. Hash, which is used for obscuring data only. You will not be able to unmask data using this method. Hash/Database, which is a combination of the Database and Hash storage methods; generating the output data the same way as the Hash method, but also storing the data in a database to allow for unmasking the values. This section includes: Crypto Database Storage Hash Hash/Database

---

# Document 684: Execution Elasticity - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205881745/Execution+Elasticity
**Categories:** chunks_index.json

MediationZone can scale out both vertically and horizontally. Vertically by adding CPU and/or memory to the host, and horizontally by adding Execution Contexts (ECs) and/or Workflow instances to the execution cluster. A typical scale out scenario, is an online use case where the load is expected to grow over time. The solution is adding several workflow instances executing in parallel on additional ECs. This can be achieved automatically by linking Workflow Templates to EC Templates/Groups. Then, each EC member started, will automatically start up a Workflow Instance. In the example below, the ECs are all named "A-*", and they will start the next Workflow Instance of the Template 'Base'. It is good practice to set up surveillance of the throughput and performance of the deployment, then trigger startup of a new EC when a threshold has been reached. The reverse works as well; that is, you can scale down by removing EC:s using the same mechanism. A summary of the different Desktop dialogues used for enabling automatic scaling: Pico Manager ; defines the EC Group/Template: Workflow Template ; defines which EC Group/Template the workflows shall execute on. Execution Manager  Autostart tab ; this is where the status can be viewed. In the example below, the EC Group/Template is "ecbackend", and the WF Template is "realtime_realtime_loadbalance". Open You can link several Workflow Templates to the same EC Group/Template. This way, you can start several workflows on one EC automatically.

---

# Document 685: Execution Container Software Installation - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205029687/Execution+Container+Software+Installation
**Categories:** chunks_index.json

The final step in the Execution Container installation must be executed as the mzadmin UNIX user. The following command session sets up the directory structure and installs all the software. The release content directory is the working directory for the installation. To install the software: Enter the release content directory : $ cd ./<staging directory>/<release content directory> Pre-installation validations are performed to verify the environment and configuration, ensuring a seamless installation experience. To perform validation without starting the installation, run the following command: $ ./setup.sh install -validate-only Run the following command to initiate the installation process: $ ./setup.sh install If validation fails but you choose to proceed, you can run the following command: $ ./setup.sh install -skip-validate Caution! You can choose to skip validation, but be aware that this bypasses checks for potential issues in your environment and configuration. If there are undetected problems, the installation may fail or cause unexpected behavior. Proceed with caution and ensure you have backups before continuing. If the Platform was running during the installation, the Execution Container is registered in STR. You can register the container manually by using the command: $ mzsh topo register The installation of the Execution Container is now complete.

---

# Document 686: slowmethods - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204678031/slowmethods
**Categories:** chunks_index.json

usage: slowmethods [ -all ] [ -class regexp ] [ -threshold <byte code size> ] This command enables you to list too long methods including more than 8000 byte code instructions (or the size set by the -threshold <byte code size> option). When there are too many byte code instructions in a method, they tend to run very slowly because the JVM will not be able to perform a proper JIT compilation. This will result in lower runtime performance. Hint! Two methods including 7000 byte code instructions is a better alternative than one method with 14000 instructions. The following is an example of mzsh mzadmin/dr slowmethods output: Example. Scanned 20 classes The following methods have too many byte code instructions: 9393 Folder.Workflow.Agent.method: Default.myWorkflow.RequestAnalysis.consume 9393 is the method size in bytes. Default is the folder where the workflow is stored, myWorkflow is the name of the workflow, RequestAnalysis is the agent that includes the too long method, and consume is the method. Note! If the workflow configuration cannot be retrieved using an internal key, the class and method name will be returned instead, as in the following example: Example. 8930 com.mysql.jdbc.DatabaseMetaData.getTypeInfo 8930 is the method size in bytes, com.mysql.jdbc.DatabaseMetaData is the class name and getTypeInfo is the too long method. Option Description Option Description [-all] Use this option to search through all code in the cache, not only the APL code. [-class <regexp>] Use this option to add a regular expression to be matched when searching through the code. For example, mzsh mzadmin/dr slowmethods -class com.<product>.* will only search for classes and packages in com.<product> . [-threshold <byte code size>] Use this option to set a byte code threshold, to be able to list slow methods with a byte code size lower than "8000". Return Codes Listed below are the different return codes for the slowmethods command: Code Description Code Description 1 Will be returned if an argument is invalid.

---

# Document 687: Data Hub Example - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204676395/Data+Hub+Example
**Categories:** chunks_index.json

In this example you will configure and run a Data Hub workflow that reads usage records in CSV format and uploads the data to Impala. The partition column is created based on a date string in the input data. Follow these steps below to run the example on one machine that hosts both MediationZone, Cloudera Manager, and CDP. Install Cloudera Manager and CDP. For this example you may use the Cloudera Public Cloud or Private Cloud Trial Installation, which you may Download from https://www.cloudera.com/ Open the file browser in Hue and create the staging directory, /user/cloudera/uploads . Update the permissions on the directory to make it available to the UNIX user(s) that is used to start the ECs. Open the Impala query editor in Hue and create a database. CREATE DATABASE test; Create a table to be used with Data Hub. CREATE TABLE IF NOT EXISTS test.usage ( orderdate STRING, userid BIGINT, productid INT, description STRING, volume INT) PARTITIONED BY (partitiondate INT) STORED AS PARQUET TBLPROPERTIES ('transactional'='false'); Open the Desktop and create the following Ultra configuration: external Usage: terminated_by('n') { ascii orderDate: terminated_by(','); ascii userId: long(base10), terminated_by(','); ascii productId: int(base10), terminated_by(','); ascii description: terminated_by(','); ascii volume: int(base10), terminated_by('n'); }; internal UsageInt { string orderDate; int partitionDate; long userId; int productId; string description; int volume; }; in_map Usage_inmap: external(Usage), internal(UsageInt) { i:orderDate and e:orderDate; i:userId and e:userId; i:productId and e:productId; i:description and e:description; i:volume and e:volume; }; decoder Usage_decoder : in_map(Usage_inmap); Create a Data Hub profile with the following settings: In the Impala tab: Host : localhost Port : 21050 Authentication : None In the HDFS tab: HDFS URI: localhost Staging Path: /user/cloudera/uploads MZ Temp Path: <Any path in the platform server> Click the Refresh button in the profile and select the database test . Click the Tables Mapping tab and then select the internal UDR format defined above ( UsageInt ). Select usage from the Table drop-down list Click the Auto Map button. The cells in the UDR Field column will be set. Select YYYYMMDD from Date Hint in the partitionDate row. Download the CSV file INFILE01.csv . Create the following batch workflow configuration: Open Configure the Disk collection to read the downloaded input file. Configure the Decoder agent to use the decoder in the Ultra configuration above ( Usage_decoder ). Add the following APL code to the Analysis agent. consume { date d; strToDate(d, input.orderDate,"yyyyMMddHHmm"); input.partitionDate = dateGetYear(d)*10000 + dateGetMonth(d)*100 + dateGetDay(d); debug(input); udrRoute(input); } Configure the Data Hub agent to use the profile that you created in the previous steps. Run the workflow with debug enabled. When the batch is complete, you may use the Data Hub Query to query the data.

---

# Document 688: Setting External Reference Values in DB - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205031252/Setting+External+Reference+Values+in+DB
**Categories:** chunks_index.json

In the External Reference profile, you may specify Properties Database as the External Reference source type, then the value is set in the profile itself. Click the Add button or select a row and click on the Edit button to open the dialog to add or edit values. Note! The value will be saved to the database directly once you click on the Add or OK buttons on the External Reference Definition dialog. String Value Type When Value Type is set to String, the Value field shows a single field to enter the value. Open List Value Type When Value Type is set to List, click to add values to the list. Open Map Value Type When Value Type is set to Map, click to add Key and Value pairs . Open

---

# Document 689: LDAP Authentication - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205881453
**Categories:** chunks_index.json



---
**End of Part 31** - Continue to next part for more content.
