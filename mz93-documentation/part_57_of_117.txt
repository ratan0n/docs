# RATANON/MZ93-DOCUMENTATION - Part 57/112

---
**Dataset:** ratanon/mz93-documentation
**Part:** 57 of 112
**GitHub:** https://github.com/ratan0n/docs/tree/main/mz93-documentation
**Size:** ~69.2 KB
---

The HTTP/2 Client agent allows you to configure an HTTP client in a real-time workflow. The agent sends requests by converting the UDRs to HTTP 2 requests and then receives the responses which are then routed into the workflow. The agent can be used for both HTTP/1 and HTTP/2. To be able to use the HTTP/2 Client agent, this processing agent must be preceded by an Analysis agent in the workflow that you create. The APL code must include a RequestCycle object as shown in the example APL code below. In the APL code, you must ensure that req.secure is set to true and that req.httpVersion is set to http2 . consume { http.RequestCycle req = udrCreate(http.RequestCycle); req.host = "myserver"; req.port = "8181"; req.secure = true; req.httpVersion = "http2"; req.path = "/nf-instance"; req.method = "GET"; debug("sending request"+req); udrRoute(req); } Prerequisites The reader of this information should be familiar with: Hypertext Transfer Protocol version 2 (RFC 7540: https://tools.ietf.org/html/rfc7540 ) Hypertext Transfer Protocol version 1.1 (RFC 2616: http://www.ietf.org/rfc/rfc2616.txt ) The Transport Layer Security (TLS) Protocol version 1.3 (RFC 8446: https://tools.ietf.org/html/rfc8446 ) mTLS ( https://tools.ietf.org/html/rfc8446#section-4.4.2.4 ) This section contains the following subsections: HTTP/2 Client Agent Configuration HTTP/2 Client Agent Input/Output Data and MIM

---

# Document 1346: Formats and Commands for External Version Control - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204742554/Formats+and+Commands+for+External+Version+Control
**Categories:** chunks_index.json

This chapter describes the resulting formats of the vcexport command, as well as how the commands may be used. This chapter includes the following sections: Data That Can be Exported with vcexport/vcimport The Result of the Export The Commands Used

---

# Document 1347: HTTP/2 Client Agent Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204739302/HTTP+2+Client+Agent+Configuration
**Categories:** chunks_index.json

To open the HTTP/2 Client agent configuration dialog from a workflow configuration, you can do either one of the following: double-click the agent icon select the agent icon and click the Edit button The Agent Configuration consists of the following tabs: 1 Client Tab 2 OpenAPI Tab 3 Authentication Tab Client Tab Open The Client tab contains the following settings: Setting Description Setting Description Settings Use SSL Select this option to use the SSL. Security Profile Min Connections Per Destination Specify the minimum number of connections towards an endpoint (identified by host:port) that the agent will try to maintain. A value of 0 indicates "no minimum". This is not a hard limit as there could be more connections created during the spike in traffic. For more details see Algorithm for Minimum Connections . Min Connections Per Destination Check Interval (s) Specify how often you wish to check the established connections. A value of 0 indicates "no check will be performed". After each interval, the agent will try to create additional connections to achieve number set in the Min Connections Per Destination parameter. No connections will be shut down if the current number of connections is greater than the number set in Min Connections Per Destination . For more details, see Algorithm for Minimum Connections . Default connection concurrent streams The initial value of concurrent streams that the client would like to handle per connection. The default value is 1000. Note! This value may be overridden by any value sent by server. Max Response Content Length (MB) Specify the maximum length for response content. The default value is 8MB. Timeout Request Timeout (sec) Enter the timeout period in seconds for the request to the HTTP/2 client to wait for a response before timing out. Queue Settings Max Requests Queued Per Destination The size of the message queue in the Jetty server. The default value is 20000. Note! Use this property to manage the memory usage. It is recommended that the EC or ECD running the workflow have xmx that is at the minimum (message size X queue size), otherwise there is a risk for out of memory errors. Retry Interval For full Queues (ms) A millisecond value to indicate the time it will take for the request to try again when the queue is full. Max Retries For Full Queue When the Route Error UDR option is checked, this field will be enabled. This field will indicate how many times the request will attempt to retry before routing it to Error UDR. Route Error UDR If this option is selected, the request will attempt to be received by the agent until it reached the maximum amount of retries. Once the threshold is reached, the request will be stored in an Error UDR and sent as an output from the HTTP/2 client agent. If this option is not selected, the request will attempt the retries for an indefinite amount of time, until the workflow is terminated. Server Monitor Use HTTP2 Server Monitor Select this option to monitor the connection status of all servers that the agent has sent requests to. The monitoring is done by sending regular ping messages to the servers. If the servers are not responding, or there are other communication errors, they will be indicated as Unavailable. A list of the Available and Unavailable servers are available in two MIM values: Available Servers and Unreachable Servers . Ping Interval (s) Define the ping message interval for the Server Monitor. The time unit is seconds and 10 seconds is default. Cookies Add Cookies to Request Headers When this option is selected (default), the agent stores cookies from previous HTTP responses in a cookie store. There will be separate cookie storage maintained per agent for both HTTP/1 and HTTP/2 client instances. For each new request, the agent checks the cookie store and automatically adds any matching cookies to the request headers, provided they are not expired and match the requests destination path. Algorithm for Minimum Connections In case there is a need to run more than one connection towards an endpoint (identified by host:port) irrespective of current traffic, there is an option to configure that using Min Connections Per Destination and Min Connections Per Destination Check Interval(s) parameters. At the beginning, the agent will try to establish the number of connections set in Min Connections Per Destination and then later try to keep number of open connections for each endpoint. As some connections can be shut down due to any reason, the agent will try to check its status at regular intervals. These check intervals are configured in Min Connections Per Destination Check Interval(s) parameter. Note! The connections are used by the agent in Round Robin manner. The agent will never try to close a valid connection. OpenAPI Tab Open HTTP/2 Client Agent Configuration - OpenAPI tab The OpenAPI tab contains the following settings: Setting Description Setting Description Use OpenAPI Profile Select this option if you want the agent to use the OpenAPI profile(s). OpenAPI Profile Browse and select the profile to be used. This field is enabled when the Use OpenAPI Profile option is selected. Click Browse to search for the available OpenAPI profiles. Warning! There are no limits to the number of profiles users can select. However, by selecting a large number of OpenAPI profiles will have significant impact on the overall performance of the workflow. Enable Validation Select this option if you want to validate the OpenAPI profile. Warning! Turning this option ON will have a very significant performance impact on the overall performance of the flow. When validation is enabled, each payload will be validated against the Open API schema, an operation that can be very resource-intensive. We recommend to only enable this setting during development and testing and to disable it in a stable production environment. Note! Strict validation is applied against the OpenAPI specification due to the upgrade of third party libraries. For Example, if the response contains the body but the schema doesn't expect the response to contain body then it will causing validation failure. Refer to this link for further information https://bitbucket.org/atlassian/swagger-request-validator/issues/246/validator-does-not-check-a-response-body . Authentication Tab The Authentication tab contains settings for the following Authentication types: 1 Basic Authentication Type 2 OAuth 2.0 Authentication Type 3 Nnrf Access Token Authentication Type If None is selected, the authentication is not enabled. Basic Authentication Type Open HTTP/2 Client Agent Configuration - Basic authentication type Setting Description Setting Description Username Enter a username for an account on the remote server. The username must not include colon (:) characters. Password Enter the password associated with the username. OAuth 2.0 Authentication Type Open HTTP/2 Client Agent Configuration - OAuth 2.0 authentication type Setting Description Setting Description Grant Type Select the grant type: Client Credentials The agent fetches the access token from the Access Token URI during initialization, using client id and client secret for basic authentication. The credentials are base64 encoded and sent in the header of the request. The response contains an access token, which is then used in subsequent requests. Resource Owner Password Credentials The agent fetches the access token from the Access Token URI during initialization, using the following credentials for authentication: Client ID Client Secret Username Password The credentials are sent in the request body. The response contains an access token, which is then used in subsequent requests. Client Authentication Type Select the client authentication method: client_secret_basic - The credentials are encoded in base64 and sent in the request header. client_secret_post - The credentials are sent in the request body. Client ID Enter the unique client identifier issued by the authorization server. Client Secret Enter the client's secret. Username Enter the resource owner username, this can be the end-user granting access to a protected resource. This field is required when you have selected Resource Owner Password Credentials from the drop-down list Grant Type . Password Enter the password associated with the username. This field is required when you have selected Resource Owner Password Credentials from the drop-down list Grant Type . Access Token URI Enter the URI where the access token can be obtained. Base URL Field Some authentication servers may provide a base URL in the response body that the HTTP/2 client agent must use for subsequent requests. If applicable, specify the key name in the JSON formatted string where the base URL is located. The value extracted from the response will override the host field of the RequestCycle UDR configured in the APL. In the following example, the base URL is available in instance_url . Example - Base URL in response from authentication server {"access_token":"00D5E0000008lbR...", "instance_url":"https://cs84.example.com", "id":"https://example.com/id/00D5E0000008lbRUAQ/0055E000000HRCHQA4", "token_type":"Bearer","issued_at":"1490699031149", "signature":"tWccV/a3r0y/JoMRTUbpiviwmslJD2J29yTtSz7yDHE="} Token expiration override (sec) Enter a time in seconds when you would like to refresh the access token prior to the expiration. This allows the application to obtain a new access token without the user's interaction. Additional Parameters Some authentication servers may require additional parameters in the body of the token requests. To add a parameter, click the Add button and then enter the name of the parameter in the Key field and the value of the parameter in the Value field. Do not use escape characters in the value field, these will be added automatically by the HTTP2 Client agent. For instance, " Example Domain " will be sent as "https%3A%2F% 2example.com %2F". Note! If an agent is configured on the Authentication Tab to use OAuth 2.0, an additional step may be required if the token needs to be obtained via HTTPS protocol. The HTTP/2 Client internally uses the Java built-in HTTP Client to obtain a token. If a certificate is required to contact the authentication server, the proper certificate has to be put into the default certificates file for the respective JDK distribution used. Example for OpenJDK 64-Bit Server VM Zulu17.40+19-CA cd $JAVA_HOME/lib/security keytool -import -alias mycert -keystore cacerts -file oauth2Host.cert Nnrf Access Token Authentication Type Open HTTP/2 Client Agent Configuration - NNRF Access Token authentication type Setting Description Setting Description Authorization Server (NRF) Enter the full URL path for the authorization server. If you enter an https URL, you must select the checkbox Use SSL . Use SSL If you want to use encryption, select this checkbox. Security Profile If you prefer to use a secure connection, click Browse to select a security profile with certificate and configuration. Refer to Security Profile for more information. NF Instance ID Enter the NF instance ID of the server that you want to send requests from. Scope Enter a string for the service(s) that you want to use, separated by whitespaces. Optional Parameters NF Type The NF type available for selection is CHF (charging function). If you select this setting, you must also select the Target NF Type . This is included in an access token request for an NF Type but not for a specific NF/NF service instance. Target NF Instance ID Enter the NF instance ID of the server for which the access token is requested. This is included in an access token request for a specific NF service provider and shall contain NF Instance ID of the specific NF service provider. Target NF Type The NF type available for selection is CHF (charging function). If you select this setting, you must also select NF Type . This is included in an access token request for an NF Type but not for a specific NF/NF service instance. Requester FQDN Enter the Requester FQDN (Fully Qualified Domain Name). This is used by the NRF (Network Repository Function) to validate that the requester NF service consumer is allowed to access the target NF service provider. Target NF Set ID Enter the Target NF Set ID of the consumer profile. This is included in the access token request of the NF type. Target NF Service Set ID Enter the Target NF Service Set ID of the consumer profile. This is used by the NRF (Network Repository Function) to validate that the requester NF service consumer is allowed to access the target NF service instance. Hnrf Access Token URI Enter the Hnrf URI where the access token can be obtained. Source NF Instance ID Enter the Source NF Instance ID of the service provider. This contains the NF Instance ID of the source NF to collect data from the NF service provider. Requester PLMN Open HTTP/2 Client Agent Configuration - NNRF Access Token authentication type (Requester PLMN) PLMN ID MCC Enter the mobile country code (MCC) for the Requester PLMN (Public Land Mobile Network) ID If you enter values for the PLMN ID, you must enter values for the Target PLMN ID - MCC . MNC Enter the mobile network code (MNC) for the Requester PLMN (Public Land Mobile Network) ID. If you enter values for the PLMN ID, you must enter values for the Target PLMN ID - MNC . Customize Format Select this option to enter customized formats for the Requester PLMN ID. The supported format is JSON. For more information, refer to 3GPP TS 29.510 Technical Specification. Note! By selecting this option, the above MCC and MNC fields will be disabled. Target PLMN Open HTTP/2 Client Agent Configuration - NNRF Access Token authentication type (Target PLMN) Target PLMN ID MCC Enter the mobile country code (MCC) for the Target PLMN (Public Land Mobile Network) ID. This value is required if you have opted to enter the value for Requester PLMN ID - MCC . MNC Enter the mobile network code (MNC) for the Target PLMN (Public Land Mobile Network) ID. This value is required if you have opted to enter the value for Requester PLMN ID - MNC . Customize Format Select this option to enter customized formats for the Target PLMN ID. The supported format is JSON. For more information, refer to 3GPP TS 29.510 Technical Specification. Note! By selecting this option, the above MCC and MNC fields will be disabled. Target SNPN Open HTTP/2 Client Agent Configuration - NNRF Access Token authentication type (Target SNPN) MCC Enter the mobile country code (MCC) for the Target SNPN (Standalone Non-Public Network). MNC Enter the mobile network code (MNC) for the Target SNPN (Standalone Non-Public Network). NID Enter the network identifier (NID) for the Target SNPN (Standalone Non-Public Network). Customize Format Select this option to enter customized formats for the Target SNPN. The supported format is JSON. For more information, refer to 3GPP TS 29.510 Technical Specification. Note! By selecting this option, the above MCC , MNC and NID fields will be disabled. Requester S-NSSAI List Open HTTP/2 Client Agent Configuration - NNRF Access Token authentication type (Requester S-NSSAI List) S-NSSAI List Enter the Requester S-NSSAI(s) (Single Network Slice Selection Assistance Information) of the service provider. This is included during an access token request for an NF type and not for a specific NF / NF service instance. Customize Format Select this option to enter customized formats for the Requester S-NSSAI list. The supported format is JSON. For more information, refer to 3GPP TS 29.510 Technical Specification. Note! By selecting this option, the above S-NSSAI List field will be disabled. Target S-NSSAI List Open HTTP/2 Client Agent Configuration - NNRF Access Token authentication type (Target S-NSSAI List) Target S-NSSAI list Enter the Target S-NSSAI(s) (Single Network Slice Selection Assistance Information) of the service provider. This list may be included for NF type access token request but not for a specific NF/NF service instance. Customize Format Select this option to enter customized formats for the Target S-NSSAI list. The supported format is JSON. For more information, refer to 3GPP TS 29.510 Technical Specification. Note! By selecting this option, the above Target S-NSSAI List field will be disabled. Requester PLMN List Open HTTP/2 Client Agent Configuration - NNRF Access Token authentication type (Requester PLMN List) PLMN List Enter the Requester PLMN (Public Land Mobile Network) of the service producer. Customize Format Select this option to enter customized formats for the Requester PLMN list. The supported format is JSON. For more information, refer to 3GPP TS 29.510 Technical Specification. Note! By selecting this option, the above Requester PLMN List field will be disabled. Requester SNPN List Open HTTP/2 Client Agent Configuration - NNRF Access Token authentication type (Requester SNPN List) SNPN List Enter the Requester SNPN (Standalone Non-Public Network) of the service producer. Customize Format Select this option to enter customized formats for the Requester SNPN list. The supported format is JSON. For more information, refer to 3GPP TS 29.510 Technical Specification. Note! By selecting this option, the above SNPN List field will be disabled. Target NSI List Open HTTP/2 Client Agent Configuration - NNRF Access Token authentication type (Target NSI List) Target NSI list Enter the target NSI(s) (Network Slice Instances). This list may be included for NF type access token request but not for a specific NF/NF service instance. Customize Format Select this option to enter customized formats for the Target NSI list. The supported format is JSON. For more information, refer to 3GPP TS 29.510 Technical Specification. Note! By selecting this option, the above Target NSI field will be disabled. Note! If an agent is configured on the Authentication Tab to use the NNRF Access Token authentication type, an additional step may be required if the token needs to be obtained via HTTPS protocol. The HTTP/2 Client internally uses the Java built-in HTTP Client to access the NNRF server. If a certificate is required to contact the authentication server, the proper certificate has to be put into the default certificates file for the respective JDK distribution used. Example for OpenJDK 64-Bit Server VM cd $JAVA_HOME/lib/security keytool -import -alias mycert -keystore cacerts -file nnrfHost.cert HTTP/2 Client Proxy If HTTP traffic is required to be routed through a proxy please look at HTTP Proxy Support in order to configure the proxy.

---

# Document 1348: Real-Time Disk_Deprecated Forwarding Agent Input/Output Data and MIM - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204644729/Real-Time+Disk_Deprecated+Forwarding+Agent+Input+Output+Data+and+MIM
**Categories:** chunks_index.json

Input/Output Data

---

# Document 1349: Radius Server Agent Events - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204740191/Radius+Server+Agent+Events
**Categories:** chunks_index.json

Agent Message Events There are no message events for this agent. Debug Events Debug messages are dispatched in debug mode. During execution, the messages are displayed in the Workflow Monitor. You can configure Event Notifications that are triggered when a debug message is dispatched. For further information about the debug event type, see 4.3.23 Debug Event . The agent produces the following debug events: Access request with invalid passwd/secret from ipaddress Indicates an invalid password was entered or is missing for the connection. Accounting request with invalid signature from ipaddress Indicates the calculated sum, based on secret specified for the agent, is not equal to the secret in the incoming packet. Incoming invalid code xx from ipaddress Indicates the incoming request is not ACCESS_REQUEST or ACCOUNTING_REQUEST.

---

# Document 1350: Merge Files Agent - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205001019/Merge+Files+Agent
**Categories:** chunks_index.json

This section describes the Merge Files agent. This is a collection agent for batch workflow configuration. The Merge Files collection agent collects files from a local file system and inserts them into a workflow. Initially, the agent will scan the base directory for all sub-directories matching the Sub Directory regular expression. The agent will collect the files matching the files regular expression. In addition, the Sort Order may be used to sort the matched files on a per sub-directory basis. The files found will then be inserted into a CollectedFileUDR and routed into the workflow. When a file has been successfully processed, the agent offers the possibility of moving, renaming, removing or ignoring the original file. The agent can also be configured to keep files for a set number of days. When all files in the batch are successfully processed, the agent stops awaiting the next activation, scheduled, or manually initiated. When the Force Single UDR check box in the Merge Files tab is selected, the agent will try to read the complete file into one UDR. The agent will however only be able to handle files with a file size that is smaller than Integer.MAX_VALUE. While reading a file, if an exception such as OutOfMemoryError or ArrayIndexOutOfBounds occurs, the workflow aborts, and a message is logged indicating the name of the file that caused the exception. For information about the Integer.MAX_VALUE type see the Java documentation. This section contains the following subsections: Merge Files Collection Configuration Merge Files Collection Meta Information Model and Events Merge Files Collection CollectedFile UDR Merge Files Collection Transaction Behavior and Input/Output Data

---

# Document 1351: Aggregation Function Blocks - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204646198/Aggregation+Function+Blocks
**Categories:** chunks_index.json

Use the following functions blocks in the Aggregation agent for general processing: initialize in Batch and Real-Time deinitialize in Batch and Real-Time drain only in Batch beginBatch only in Batch endBatch only in Batch cancelBatch only in Batch commit only in Batch rollback only in Batch Note! The session variable is not available within the function blocks listed above. For more information about these function blocks, see Function Blocks . Use the following function blocks, in which the session variable is available, for Aggregation specific functions. consume in Batch and Real-Time command only in Real-time sessionInit in Batch and Real-Time timeout in Batch and Real-Time consume - Batch and Real-Time The consume block is called each time a UDR that matches a session, or causes a new session to be created, arrives. Thus, the consume block is not necessarily called for each arriving UDR. The UDR will be available through the input variable and the session through the session variable. command - Real-Time Only The command block is called for all flushed sessions. The flush action is initiated with an Agent Command from the Command Tab of the Aggregation agent in the Workflow Monitor or through the Command Line Tool mzsh. Within this block the instruction variable is available and contains a string, optionally forwarded by the user. For further information, see Flush Sessions and Variables . sessionInit - Batch and Real-Time The sessionInit block is called each time a new session is created. The UDR that caused the session to be created will be available through the input variable and the new session through the session variable. The sessionInit block is optional. It is, however, recommended that you use this block since it makes the code easier to follow. timeout - Batch and Real-Time The timeout block handles sessions that for some reason have been left hanging in the system. For instance, if the stop UDR was not received within a timeout interval. Between drain and endBatch for each batch passing the Aggregation agent (batch workflow) or as defined in the agent configuration (real-time workflow), the timeout block is called for all outdated sessions. The outdated session will be available through the session variable. Initially, make sure the code in the timeout block handles the session properly, then there are two alternatives on how to handle the session: If the session is not needed anymore, remove the session with sessionRemove . If relevant UDRs are still expected, set a new timeout with sessionTimeout . If none of them are used, outdated sessions that may never be used again will remain in the system forever and will always be active for comparison against incoming data, which will have a negative impact on performance. If there are old sessions with no timeout set, correct the timeout block and then open the Aggregation Session Inspector. If there is no use for the sessions, they may be deleted, otherwise set a new timeout for these sessions and they will be handled by the timeout block as soon as a new batch is processed by the Aggregation agent.

---

# Document 1352: SAP CTS+ Import - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/317948491
**Categories:** chunks_index.json

When triggering a system import using SAP TMS, the entire export content will be imported into the target system. How to create a CTS+ import Verify Import Compatibility : Ensure the export system's name is included in the target system's cts.source.systems system property. For more information, see Platform Properties . Ensure Valid External References: Verify that the target system has valid local External References for all system-specific variables. Trigger the Import via SAP TMS: Use the transaction STMS to initiate the import process from the TMS system. For detailed steps, refer to the SAP Help Portal - SAP Online Help . Verify the imported change : To check if a change originated from an export, open the configuration and click the History button to open the History dialog. If the artifact originated from a CTS+ export, the Comment column will display the following details: LOG : Imported from <export file> CTS+ Transport ID : <CTS+ ID> ORIGINAL COMMENT : <original comment> Open The History tab in the configuration UI showing the configuration source details Note! The import operation does not automatically remove any obsolete configurations from Usage Engine. You can remove these manually as required for clean-up purposes. Import Logs The import logs will be visible in the following places. Import status Logs Import status Logs Successful System Log. CTS+ log. Failed Platform log - when the failure happens before the actual import function, for example, wrong parameter, value, or syntax. System Log - when the import function fails.

---

# Document 1353: LDAP Functions - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204646295/LDAP+Functions
**Categories:** chunks_index.json

The LDAP functions allow you to connect to an LDAP, using anonymous or simple authentication, and modify and delete entries or perform searches based on names, filters and explicitly define what attributes to be returned. The LDAP functions use connection pooling for best performance. Note! Due to the nature of LDAP, the following functions are not transaction safe and should therefore be used mainly for realtime workflows. The following functions for LDAP described here are: 1 ldapCreate 2 ldapAdd 3 ldapCloseCtx 4 ldapDelete 5 ldapGetLastError 6 ldapModify 7 ldapSearch 8 ldapScopeSearch 9 ldapSetPooling 10 ldapSuppressErrors LDAP Related UDR Type The UDR type created by default in the LDAP agent can be viewed in the UDR Internal Format Browser. To open the browser open an APL Editor, in the editing area right-click and select UDR Assistance... ; the browser opens. Error Handling The default error handling for the functions ldapCreate , ldapSearch , and ldapScopeSearch is to handle all errors as exceptions, which means that the workflow will abort in the batch case and the request will typically be discarded in the real-time case. If this is not desired behavior, it is possible to set these LDAP functions to suppress all communication errors and instead return null in error situations. In this case, the error will be made available through the ldapGetLastError function. Network Timeout Property If there are network problems when communicating with the LDAP server the LDAP plugin commands use a network timeout of 5 minutes. This default timeout can be modified by setting the property mz.ldap.network.timeout to a timeout in milliseconds. Set the property in the cell.conf or the relevant Execution Context <pico> .conf , depending on where the workflow is executed. Idle Connection Timeout By default, a connection remains within a pool in an idle state for five minutes before it is closed. To set the amount of time in milliseconds, set the property com.sun.jndi.ldap.connect.pool.timeout in the cell.conf or the relevant Execution Context <pico> .conf , depending on where the workflow is executed . ldapCreate Creates a connection towards an LDAP server, using either anonymous or simple authentication. This function is usually invoked in the initialize block. any ldapCreate ( string host , int port , string name , string principal , //Optional string credentials ) //Optional Parameter Description Parameter Description host The host name of the LDAP server port The port number of the LDAP server name Name which identifies the context in which the search will be performed. The value can span multiple naming systems and must be fully qualified and identify entries from the root of the LDAP server. If specified as null this means that the search will be performed from the LDAP root. principal Optional argument that defines the user to connect as. If omitted, the function will connect to the LDAP server using anonymous authentication. This argument requires that the credentials argument is supplied. credentials Optional argument that defines the user password. Returns An identifier used when invoking the search function. If ldapSuppressErrors has been called, then this function returns null if an error is detected during communication with the LDAP server. ldapGetLastError should be used to get the error message in this case. Example - Using ldapCreate any ctx = ldapCreate("10.0.0.1", 389, "o=users"); ... any ctx = ldapCreate("10.0.0.1", 389, "o=users", "cn=Administrator, o=users", "secret"); ldapAdd The command is used to add an entry. string ldapAdd ( any identifier , string name , list<string> attributes ) Parameters: Parameter Description Parameter Description identifier The connection identifier returned from ldapCreate . name The name of the entry to add. This is matched relative to the context specified with the name argument in ldapCreate . If no object matches the name, an error will be thrown stating there is no such name. attributes The new attribute value. If a delete operation is requested, the matching value is deleted. Returns In the event of an error, a message from LDAP server will be returned otherwise null. ldapCloseCtx The command is used to close a context that has previously been returned by ldapCreate . int ldapCloseCtx ( object context ) Parameter Description Parameter Description context The context returned from ldapCreate . Returns If the function is successful, it will return 0. ldapDelete An APL command used to delete an entry. string ldapDelete ( any identifier , string name ) Parameter Description Parameter Description identifier The connection identifier returned from ldapCreate . name The name of the entry to be deleted. Returns In the event of an error, a message from LDAP server will be returned otherwise null. ldapGetLastError Retrieves the error message of the last error reported for an LDAP command. string ldapGetLastError() Parameter Description Parameter Description Returns The last error message that an LDAP function registered. This information is kept per thread and agent so it is only guaranteed to be present in the same APL code block as the function call causing the error. ldapModify An APL command used for modifying an entry by adding, replacing or deleting its attributes. string ldapModify ( any identifier , string name , string operation , list<string> attributeValue ) //Optional Parameter Description Parameter Description identifier The connection identifier returned from ldapCreate name The name of the entry to modify operation The operation can be either ADD , REMOVE or REPLACE . attributeValue The list of new attribute values. If a REMOVE operation is requested, the matching values are deleted. Returns In the event of an error, a message from LDAP server will be returned otherwise null. ldapSearch Performs a search in a LDAP server based on a number of arguments. list<ldapResult> ldapSearch ( any identifier , string name , string filter , //Optional list<string> retAttrs ) //Optional Parameter Description Parameter Description identifier The connection identifier returned from ldapCreate name The name of the object to be searched for. This is matched relative to the context specified with the name argument in ldapCreate . If no object matches the name, an error will be thrown stating there is no such name. filter Optional value, specifying the attributes of the requested LDAP objects. This value conforms to RFC 2254. The specified filter will match objects, relative to the name parameter. retAttrs Optional list of strings that defines what attributes to be returned Returns A list of ldapResult UDRs, where every entry contains a name, an attribute and a list of values. The name value is the name relative to the target context of the search. If the target context matches the search filter, then the returned name will be an empty string. The attribute is the attribute name and the values are all values for the given attribute. If ldapSuppressErrors has been called, then this function returns null if an error is detected during communication with the LDAP server. ldapGetLastError should be used to get the error message in this case. ldapScopeSearch Performs a search in a specified part of the LDAP server based on a number of arguments. list<ldapResult> ldapScopeSearch ( any identifier , string scope , string name , string filter , //Optional list<string> retAttrs ) //Optional Parameter Description Parameter Description identifier The connection identifier returned from ldapCreate scope The search scope, can be one of OBJECT_SCOPE , ONELEVEL_SCOPE or SUBTREE_SCOPE . For further information, see your LDAP manual. name The name of the object to be searched for. This is matched relative to the context specified with the name argument in ldapCreate . If no object matches the name, an error will be thrown stating there is no such name. filter Optional value, specifying the attributes of the requested LDAP objects. This value conforms to RFC 2254. The specified filter will match objects, relative to the name parameter. retAttrs Optional list of strings that defines what attributes to be returned Returns A list of ldapResult UDRs, where every entry contains a name, an attribute and a list of values. The name value is the name relative to the target context of the search. If the target context matches the search filter, then the returned name will be an empty string. The attribute is the attribute name and the values are all values for the given attribute. If ldapSuppressErrors has been called, then this function returns null if an error is detected during communication with the LDAP server. ldapGetLastError should be used to get the error message in this case. ldapSetPooling The command is used to enable/disable connection pooling. Pooling is enabled by default. void ldapSetPooling ( boolean value ) Parameter Description Parameter Description value The value should be set to either true or false . Returns The function returns nothing. ldapSuppressErrors An APL command used to change the error behavior of the other LDAP functions. This function only changes the error behavior of the functions ldapCreate , ldapSearch , and ldapScopeSearch . It does not suppress errors for configuration errors (such as the user using invalid input for the function calls). void ldapSuppressErrors ( boolean value ) Parameter Descriptionn Parameter Descriptionn value Whether or not errors should be suppressed. Returns Nothing Example Example - LDAP APL Plugins // Demonstration of LDAP APL plugin functions // The following code shows the following: // // 1) How to open a LDAP connection // 2) How to add/delete an object to/from LDAP // 3) How to change objects properties // 4) How to perform different type of searches void runDemoCode() { any ctx; string name = "DEMOUSER"; string distinguisedName = "cn="+name; string error; list<string> attributes; list<ldapResult> result; // ============================================== // Opens a connection to a LDAP Server // ============================================== ctx = ldapCreate("127.0.0.1", 389, "dc=nodomain", "cn=admin,dc=nodomain", "demo"); // ============================================== // Adding/Deleting/Modifying an LDAP Object // ============================================== // //Adds a new person object to the LDAP Server // attributes = listCreate(string); listAdd(attributes, "cn: "+name); listAdd(attributes, "objectClass: top"); listAdd(attributes, "objectClass: person"); listAdd(attributes, "sn: Test"); listAdd(attributes, "description: Test Record"); listAdd(attributes, "userPassword: {crypt}rkM1sTbxrERtE"); error = ldapAdd(ctx, distinguisedName, attributes); if( error != null ) { debug("Error creating user: "+error); } // //Changes description for the created person object // attributes = listCreate(string); listAdd(attributes, "description: A demo user"); error = ldapModify(ctx, distinguisedName, "REPLACE", attributes); if( error != null ) { debug("Error changing user description: "+error); } // //Removes user description from our person object // attributes = listCreate(string); listAdd(attributes, "description: A demo user"); error = ldapModify(ctx, distinguisedName, "REMOVE", attributes); if( error != null ) { debug("Error removing user description: "+error); } // //Adds user description to our person object // attributes = listCreate(string); listAdd(attributes, "description: a description line"); error = ldapModify(ctx, distinguisedName, "ADD", attributes); if( error != null ) { debug("Error adding user description: "+error); } // // Deletes our person object from the LDAP Server // error = ldapDelete(ctx, distinguisedName); if( error != null ) { debug("Error deleting user: "+error); } // ============================================== // Executing different searches against the LDAP // ============================================== // For demo purposes the LDAP tree should contain // two admin objects (a tree containing a backup // admin object). // Setup a filter for the search tests. // We are interested only in the attribute 'cn'. // list<string> attrFilter = listCreate(string); listAdd(attrFilter, "cn"); // //Executes a normal search, should return size=1 // result = ldapSearch(ctx, "dc=test", "cn=admin", attrFilter); debug("* Normal search"); debug("result size="+listSize(result)); printResultEntries(result); // //Scoped Search Types // //This search uses OBJECT scope, and should return size=1 // Explanation: // The search only searches for a specific object, and the // 'cn' attribute is returned for that object. // result = ldapScopeSearch(ctx, "OBJECT_SCOPE", "dc=test", "cn=admin", attrFilter); debug("* Object Scope"); debug("result size="+listSize(result)); printResultEntries(result); // //This search uses ONELEVEL scope, and should return size=1. // // Explanation: // The search executes a search on a unique level. Two objects // with the same name can not exists on the same level. // result = ldapScopeSearch(ctx, "ONELEVEL_SCOPE", "dc=test", "cn=admin", attrFilter); debug("* Onelevel Scope"); debug("result size="+listSize(result)); printResultEntries(result); // //This search uses SUBTREE scope, and should return size=2. // // Explanation: // The search execute a search on sublevels, and return a // match for every admin object found (and we had two). // result = ldapScopeSearch(ctx, "SUBTREE_SCOPE", "dc=test", "cn=admin", attrFilter); debug("* Subtree Scope"); debug("result size="+listSize(result)); printResultEntries(result); } // // Help method that prints out the result of a ldapSearch // void printResultEntries(list <ldapResult> result) { int resultIdx = 0; int resultCount = 0; int resultSize = listSize(result); while (resultCount < resultSize) { ldapResult entry = listGet(result, resultCount); debug("Name: " + entry.name); debug("Attribute: " + entry.attribute); int valueCount = 0; int valueSize = listSize(entry.values); while (valueCount < valueSize){ debug("Value: " + listGet(entry.values, valueCount)); valueCount = valueCount + 1; } resultCount = resultCount + 1; } }

---

# Document 1354: IBM MQ Meta Information Model and Events - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205685938/IBM+MQ+Meta+Information+Model+and+Events
**Categories:** chunks_index.json

Meta Information Model For information about the MIM and a list of the general MIM par ameters, see Administration and Management in Legacy Desktop . The agent does not publish nor access any MIM parameters. Agent Message Events There are no agent message events for this agent. Agent Debug Events Debug messages are dispatched in debug mode. During execution, the messages are displayed in the Workflow Monitor. You can configure Event Notifications that are triggered when a debug message is dispatched. For further information about the debug event type, see Debug Event . Depending on the selected Connection Mode, different debug events are sent. Common Debug Events Connecting to queue manager queueManagerName and queues: queue_1, queue_2 Reported before connecting. Connection to queue manager successful. Reported after a connection is made. Lost connection to the queue manager queueManagerName . Reported if the queue manager has not been opened by the IBM MQ Collection agent. Unable to connect to IBM WebSphere MQ Reported when a queue manager connection attempt fails. Debug Events for Queues Connected to queue queueName . Reported after a successful connection to a queue from the IBM MQ Collection agent. Unable to open queue queueName [ errorCode ] Reported when a queue cannot be opened. Debug Events for Topics Successfully subscribed to topic topicName . Reported after a successful connection to a topic subscription. Unable to subscribe to topic topicName . Reported when the MQ Collection Agent failed to subscribe to a topic. Unable to subscribe to any topic. Reported when the MQ Collection Agent failed to subscribe to all configured topics. Failed to close the connection to topic topicName . Reported when the MQ Collection Agent has failed to unsubscribe to a topic. Error while getting a message from topic topicName . [ errorCode ] Reported if an error occurred when fetching a topic message. Debug Events for Durable Subscriptions Successfully subscribed to subscription subscriptionName . Reported after a successful connection to a durable subscription. Unable to subscribe to subscription subscriptionName . Reported when the MQ Collection Agent failed to connect to a durable subscription. Unable to subscribe to any subscription. Reported when the MQ Collection Agent failed to connect to all configured durable subscriptions.

---

# Document 1355: systemexport - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204646568/systemexport
**Categories:** chunks_index.json

usage: systemexport [ -select <xml-selection file> ] [ -includesysdata ] [ -overwrite ] [ -directory ] <export file|directory> [password] This command exports configuration data to a file or directory in the client's local repository. This command's output log information is displayed during the command execution. Although no log file is generated, you can view log information in the shell and save it in a file. Command Description Command Description [-select] Specify the name of the Selection file that you want to use. For information about this parameter, see XML Selection File in systemimport . [-includesysdata] Use this option to include system data such as users, pico hosts, and other system data. [-overwrite] Use this option to specify that the export file or directory should be overwritten. [-directory] Use this option to specify that the export data is sent to a directory, instead of a file. <export file|directory> Specify the path of the directory or ZIP file that contains the configurations that you want to export. [ password ] To export encrypted configurations, provide a password. Return Codes Listed below are the different return codes for the systemexport command: Code Description Code Description 0 Will be returned if the command was successful. 1 Will be returned if the argument count is incorrect or if the export fails. 2 Will be returned if the output directory exists, or if write permission is missing, or if the directory cannot be created for any other reason. 3 Will be returned if the XML selection file cannot be read. 4 Will be returned if any errors were reported during export.

---

# Document 1356: Network Security - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205848669/Network+Security
**Categories:** chunks_index.json

This chapter includes the following sections: Communication Through Firewalls RCP Encryption HTTP Encryption

---

# Document 1357: Error Correction System (ECS) - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205881850/Error+Correction+System+ECS
**Categories:** chunks_index.json

MediationZone contains a storage repository called the Error Correction System (ECS), which is used for erroneous UDRs and batches. UDRs can be tagged with a configurable case and routed to an ECS Forwarding Agent for storage in ECS at any point in the mediation flow, as shown in the workflow below. Open Erroneous UDRs routed to ECS

---

# Document 1358: user - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204646608/user
**Categories:** chunks_index.json

usage: user enable <name> usage: user disable <name> This command is used for scripted management of users. For instance, at systemimport that imports all users as disabled, you need this command to enable the users again. Return Codes Listed below are the different return codes for the user command: Code Description Code Description 0 Will be returned if the command was successful. 1 Will be returned if the argument count is incorrect.

---

# Document 1359: Software Description 9.3 - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204678907
**Categories:** chunks_index.json

Search this document: Content Overview of MediationZone Open Architecture Workflow Configurations Agents in Workflows Ultra Format Definition Language (UFDL) Usage Data Record (UDR) MIM (MIM) Analysis Programming Language (APL) MediationZone User Interfaces Error Correction System (ECS) Data Hub Functions Connecting Workflows Aggregation, Consolidation and Correlation Duplicate Detection Archiving Auditing Alarm and Event Handling System Statistics in Desktop Reporting Operation and Maintenance Data Veracity for Correcting Data Appendix A - MediationZone Interfaces Appendix B - Third Party Software Requirements Appendix C - Terminology Appendix D - Compliance

---

# Document 1360: HDFS Forwarding Agent Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204641663/HDFS+Forwarding+Agent+Configuration
**Categories:** chunks_index.json

You open the HDFS forwarding agent configuration dialog from a workflow configuration. To open the HDFS processing agent configuration, click Build  New Configuration . Select Workflow from the C onfigura tions dialog. When prompted to Select workflow type, select Batch . Click Add agent and select HDFS from the Forwarding tab of the Agent Selection dialog. HDFS Open HDFS forwarding agent configuration dialog - HDFS tab Item Description Item Description Profile Select the File System profile you want the agent to use, see File System Profile for further information about this profile. Input Type The agent can act on two input types. Depending on which one the agent is configured to work with, the behavior will differ. The default input type is bytearray , that is the agent expects bytearrays. If nothing else is stated, the documentation refers to input of bytearray. If the input type is MultForwardingUDR , the behavior is different. For further information about the agent's behavior in MultiForwardingUDR input, see HDFS Forwarding Agent MultiForwardingUDR Input . File Information Settings Directory Enter the absolute path to the target directory on the remote file system, where the forwarded files will be stored. The files will be temporarily stored in the automatically created subdirectory DR_TMP_DIR , in the target directory. When an End Batch message is received, the files are moved from the subdirectory to the target directory. Create Directory Select this check box to create the directory, or the directory structure, of the path that you specify in Directory . Note The directories are created when the workflow is executed. Compression Select the compression type of the target files. Determines if the agent will compress the files or not. No Compression - the agent does not compress the files. Default setting. Gzip - the agent compresses the files using gzip. Note No extra extension will be appended to the target filenames, even if compression is selected. The configuration of the filenames is managed in the Filename Template tab only. After Treatment Settings Command If a Command is supplied, it will be executed on each successfully closed temporary file, using the parameter values declared in Arguments . Please refer to Commands in Desktop User's Guide for further information. Note At this point the temporary file is created and closed, however the final filename has not yet been created. The entered Command has to exist in the execution environment, either including an absolute path, or to be found in the PATH for the execution environment. Arguments This field is optional. Each entered parameter value has to be separated from the preceding value with a space. The temporary filename is inserted as the second last parameter, and the final filename is inserted as the last parameter, automatically. This means that if, for instance, no parameter is given in the field, the arguments will be as follows: $1=<temporary_filename> $2=<final_filename> If three parameters are given in the field Arguments, the arguments are set as: $1=<parameter_value_#1> $2=<parameter_value_#2> $3=<parameter_value_#3> $4=<temporary_filename> $5=<final_filename> Produce Empty Files If enabled, files will be produced although containing no data. Filename Template Tab The names of the created files are determined by the settings in the Filename Template tab. For a detailed description of the Filename Template tab, s ee Workflow Monitor .

---

# Document 1361: LDAP Agent Input/Output Data and MIM - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205000999/LDAP+Agent+Input+Output+Data+and+MIM
**Categories:** chunks_index.json

Input/Output Data The Input/Output data is the type of data that an agent expects to receive and delivers. The agent expects the following UDR types: LdapAbandonRequestUDR LdapAddRequestUDR LdapCompareRequestUDR LdapDeleteRequestUDR LdapExtendedRequestUDR LdapModifyDNRequestUDR LdapModifyRequestUDR LdapRequestUDR LdapSearchRequestUDR The agent delivers the following UDR types: LdapAbandonResultUDR LdapAddResultUDR LdapCompareResultUDR LdapDeleteResultUDR LdapErrorUDR LdapExtendedResultUDR LdapModifyDNResultUDR LdapModifyResultUDR LdapResultUDR LdapRequestIDUDR LdapSearchResultUDR LdapSearchResultEntryUDR See LDAP Agent UDRs for further information. MIM For information about the MIM and a list of the general MIM parameters, see Administration and Management in Legacy Desktop . Publishes The LDAP agent publishes the following parameters: MIM Description Abandon Operation Count This MIM contains the number of abandon operation requests received by the LDAP agent. Abandon Operation Errors This MIM contains the number of abandon operation error messages received by the LDAP agent. Abandon Operation Timeouts This MIM contains the number of abandon operation timeout messages received by the LDAP agent. Add Operation Count This MIM contains the number of add operation requests received by the LDAP agent. Add Operation Errors This MIM contains the number of add operation error messages received by the LDAP agent. Add Operation Timeouts This MIM contains the number of add operation timeout messages received by the LDAP agent. Avg Abandon Response Time Millis This MIM contains the average response time in milliseconds to abandon operation requests. Avg Add Response Time Millis This MIM contains the average response time in milliseconds to add operation requests. Avg Compare Response Time Millis This MIM contains the average response time in milliseconds to compare operation requests. Avg Delete Response Time Millis This MIM contains the average response time in milliseconds to delete operation requests. Avg Extended Request Response Time Millis This MIM contains the average response time in milliseconds to respond to extended requests. Avg Modify DN Response Time Millis This MIM contains the average response time in milliseconds to modify DN operation requests. Avg Modify Response Time Millis This MIM contains the average response time in milliseconds to modify operation requests. Avg Search Response Time Millis This MIM contains the average response time in milliseconds to search operation requests. Compare Operation Count This MIM contains the number of compare operation requests received by the LDAP agent. Compare Operation Errors This MIM contains the number of compare operation error messages received by the LDAP agent. Compare Operation Timeouts This MIM contains the number of compare operation timeout messages received by the LDAP agent. Delete Operation Count This MIM contains the number of delete operation requests received by the LDAP agent. Delete Operation Errors This MIM contains the number of delete operation error messages received by the LDAP agent. Delete Operation Timeouts This MIM contains the number of delete operation timeout messages received by the LDAP agent. Extended Request Operation Count This MIM contains the number of extended requests received by the LDAP agent. Extended Request Operation Errors This MIM contains the number of extended request error messages received by the LDAP agent. Extended Request Operation Timeouts This MIM contains the number of extended request timeout messages received by the LDAP agent. Max Abandon Response Time Millis This MIM contains the maximum response time in milliseconds to an abandon operation request. Max Add Response Time Millis This MIM contains the maximum response time in milliseconds to an add operation request. Max Compare Response Time Millis This MIM contains the maximum response time in milliseconds to a compare operation request. Max Delete Response Time Millis This MIM contains the maximum response time in milliseconds to a delete operation request. Max Extended Request Response Time Millis This MIM contains the maximum response time in milliseconds to respond to an extended request. Max Modify Response Time Millis This MIM contains the maximum response time in milliseconds to a modify operation request. Max Modify DN Response Time Millis This MIM contains the maximum response time in milliseconds to a modify DN operation request. Max Search Response Time Millis This MIM contains the maximum response time in milliseconds to a search operation request. Min Abandon Response Time Millis This MIM contains the minimum response time in milliseconds to an abandon operation request. Min Add Response Time Millis This MIM contains the minimum response time in milliseconds to an add operation request. Min Compare Response Time Millis This MIM contains the minimum response time in milliseconds to a compare operation request. Min Delete Response Time Millis This MIM contains the minimum response time in milliseconds to a delete operation request. Min Extended Request Response Time Millis This MIM contains the minimum response time in milliseconds to respond to an extended request. Min Modify DN Response Time Millis This MIM contains the minimum response time in milliseconds to a modify DN operation request. Min Modify Response Time Millis This MIM contains the minimum response time in milliseconds to a modify operation request. Min Search Response Time Millis This MIM contains the minimum response time in milliseconds to a search operation request. Modify DN Operation Count This MIM contains the number of modify DN operation requests received by the LDAP agent. Modify DN Operation Errors This MIM contains the number of modify DN operation error messages received by the LDAP agent. Modify DN Operation Timeouts This MIM contains the number of modify DN operation timeout messages received by the LDAP agent. Modify Operation Count This MIM contains the number of modify operation requests received by the LDAP agent. Modify Operation Errors This MIM contains the number of modify operation error messages received by the LDAP agent. Modify Operation Timeouts This MIM contains the number of modify operation timeout messages received by the LDAP agent. Search Operation Count This MIM contains the number of search operation requests received by the LDAP agent. Search Operation Errors This MIM contains the number of search operation error messages received by the LDAP agent. Search Operation Timeouts This MIM contains the number of search operation timeout messages received by the LDAP agent. Total Abandon Response Time Millis This MIM contains the total response time in milliseconds to all the abandon operation requests. Total Add Response Time Millis This MIM contains the total response time in milliseconds to all the add operation requests. Total Compare Response Time Millis This MIM contains the total response time in milliseconds to all the compare operation requests. Total Delete Response Time Millis This MIM contains the total response time in milliseconds to all the delete operation requests. Total Extended Request Response Time Millis This MIM contains the total response time in milliseconds to respond to all the extended requests. Total Modify DN Response Time Millis This MIM contains the total response time in milliseconds to all the modify DN operation requests. Total Modify Response Time Millis This MIM contains the total response time in milliseconds to all the modify operation requests. Total Operation Count This MIM contains the total number of operation requests received by the LDAP agent. Total Search Response Time Millis This MIM contains the total response time in milliseconds to all the search operation requests. Accesses The LDAP agent does not access any MIM parameters.

---

# Document 1362: SAP JCo Uploader Agent Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204642898/SAP+JCo+Uploader+Agent+Configuration
**Categories:** chunks_index.json

You open the SAP JCo Uploader agent configuration dialog from a workflow configuration. To open the SAP JCo Uploader collection agent configuration, click Build  New Configuration. Select Workflow from the Configurations dialog. When prompted to Select workflow type , select Batch. Click Add agent and select SAP JCo Uploader from the Forwarding tab of the Agent Selection dialog. Open The SAP JCo Uploader agent configuration Setting Description Setting Description Connection Details Username The username for the remote database to connect to for state handling Password The password for the remote database to connect to for state handling Host The IP address of the SAP System. Database Select the relevant database profile to connect to a remote database for state handling Enable Load Balancing Select this check box to enable load balancing for SAP JCo. System ID The 3 character code for the SAP System Message Server Host The hostname/IP of the SAP Message Server Message Server Port The port of the SAP Message Server Group Name The group name associated with the SAP System Advanced SAP System Number The SAP System number SAP Client Number The SAP Client number Table Parameter Name The name of the table in the SAP System to which the records are to be uploaded Two Phase Commit Select this check box if you want records to be committed in two phases. Session Timeout (minutes) This field determines the session timeout in minutes. This option is only available if you select the Two Phase Commit option. The default value is 10. Performance Commit Size The number of records to be inserted for each commit Enable Connection Pool Select this checkbox to use a connection pool to communicate with the SAP JCo Uploader. Max Idle Connections The maximum number of idle connections kept open by the destination. A value of 0 means there is no connection pooling. The default value is 2 . Max Active Connection The maximum number of active connections that can be created for a destination simultaneously. The default value is 10 . No of Threads The number of threads simultaneously uploading into the SAP System. The minimum value is 1. The default value is 2 . Max Queue Size This field limits the maximum number of records waiting to be processed in the queue. This prevents an out of memory error from occurring if the SAP System is too slow to consume the records. The default value is 6000 . Route Error Handling Enable Route Error Handling Select this checkbox to route the record UDR to an error route if it contains an invalid value. If this checkbox is not selected and the record UDR contains an invalid value the workflow will be aborted.

---

# Document 1363: Software Description 9.3 - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204678907/Software+Description+9.3
**Categories:** chunks_index.json

Search this document: Content Overview of MediationZone Open Architecture Workflow Configurations Agents in Workflows Ultra Format Definition Language (UFDL) Usage Data Record (UDR) MIM (MIM) Analysis Programming Language (APL) MediationZone User Interfaces Error Correction System (ECS) Data Hub Functions Connecting Workflows Aggregation, Consolidation and Correlation Duplicate Detection Archiving Auditing Alarm and Event Handling System Statistics in Desktop Reporting Operation and Maintenance Data Veracity for Correcting Data Appendix A - MediationZone Interfaces Appendix B - Third Party Software Requirements Appendix C - Terminology Appendix D - Compliance

---

# Document 1364: Setting up Prometheus and Grafana - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/283082771/Setting+up+Prometheus+and+Grafana
**Categories:** chunks_index.json

This section covers the setup of the Prometheus monitoring server for collecting and monitoring the metrics in your MediationZone. The setup of Grafana is also covered in this section. While Prometheus allows you to monitor data, it handles one metric at a time. Grafana complements this by visualizing data from your Prometheus server, enabling you to create dashboards that display multiple metrics simultaneously. Grafana also offers advanced analytical tools to help you derive deeper insights from your data. To configure which metrics that will be exposed for scraping, use the Prometheus Filter. For more information, see The Prometheus Filter . This section contains the following sub section: Setting up Prometheus Setting up Grafana

---

# Document 1365: KPI Management Agents - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204645661/KPI+Management+Agents
**Categories:** chunks_index.json

The KPI Cluster In and KPI Cluster Out agents are real-time processing agents that deliver KPIs based on the configured service model and the incoming KDR UDRs. The KPI Cluster In agent sends incoming KDR UDRs to a Spark application via a Kafka cluster. The actual KPI calculations are then performed in the Spark Application and the result is passed to a KPI Cluster Out agent, which decodes the bytearray payload from Kafka and delivers KPIAggregatedOutput UDRs. Open KPI Management workflows When the service model is configured to trigger immediate alarms you must configure two separate Kafka Collector agents, one for the kpi-output topic, and another for the kpi-alarm topic. Configuration Open KPI Cluster In configuration Open KPI Cluster Out configuration Setting Description Setting Description Kafka Profile Click Browse to select a predefined Kafka profile. The profile contains the service model configuration. KPI Profile Click Browse to select a predefined KPI profile. The profile contains the service model configuration. Input/Output Data The Input/Output data is the type of data an agent expects and delivers. The KPI Cluster In agent expects KDR UDRs and delivers KafkaUDRs . The KPI Cluster Out agent expects Kafka UDR types and delivers KPIAggregatedOutput UDRs. MIM For information about the MIM and a list of the general MIM parameters, see the MIM section in Administration and Management in Legacy Desktop Publishes MIM Parameter Description MIM Parameter Description Model Config This MIM parameter contains the name of the KPI Profile in the agent configuration. Model Config is of the string type and is defined as a global MIM context type. Model Version This MIM parameter contains the version of the KPI Profile in the agent configuration. Model Version is of the int type and is defined as a global MIM context type. Accesses This agent does not access any MIM parameters. Agent Message Events There are no message events for these agents. Logs pertaining to KPI Management processing are available in Spark. For further information, see 5.7.7 Logging . Debug Events There are no debug events for these agents.

---

# Document 1366: Databases - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204678737/Databases
**Categories:** chunks_index.json

The following database types are supported: Derby (embedded) Oracle Database 19c PostgreSQL 12/13/14/15/16 SAP HANA 2.0 (multiple-container database mode)

---

# Document 1367: MediationZone 9.3 Released! - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/blog/2024/09/24/331874639/MediationZone+9.3+Released
**Categories:** chunks_index.json



---
**End of Part 57** - Continue to next part for more content.
