# RATANON/MZ93-DOCUMENTATION - Part 86/112

---
**Dataset:** ratanon/mz93-documentation
**Part:** 86 of 112
**GitHub:** https://github.com/ratan0n/docs/tree/main/mz93-documentation
**Size:** ~69.9 KB
---

The Configuration Browser gives a view of all configurations. The user can easily filter what configurations to be shown, by selecting configurations of a specific type or owned by a specific user. By default, all configurations are displayed. The browser supports a set of operations that can be performed; cut, copy, paste, delete, rename, encrypt, decrypt, and validate. For each configuration, there is a Properties dialogue where you can set permissions and view history, references, and basic information. The browser supports drag-and-drop for moving and copying configurations between folders. Holding down the CTRL-key while dragging a configuration results in a copy operation. From the Configuration Browser you can also open the Configuration Tracer. In Configuration Tracer you see both active and historical configurations. To open the Configuration Browser, click the Tools button in the upper left part of the Desktop window, and then select Configuration Browser from the menu. Note! When using the default authentication method, configurations created by LDAP-authenticated users may not appear in the Configuration Browser. To make these configurations visible, change the owner in the Properties dialogue (opened from the right-click menu in the Configuration Navigator). The new owner must be listed in the Users tab in the Access Controller . Open The Configuration Browser Right-click Menu Right-click in the Configuration Browser to display the right-click menu. Open Configuration Browser Right-click Menu Right Click Menu Refresh Open Select this option to refresh the Folder Pane and the Configuration Browser Table. Expand All Open Select this option to expand all of the folders to display the folders, subfolders, and all the configurations that they contain. The only valid separators in a folder name are "_" or "-". If any other character is used as a separator, or if the Platform property mz.subfolder.enabled is set to false in platform.conf , this button is disabled. Collapse All Open Select this option to collapse subfolders and configurations so only the folders are visible. The only valid separators in a folder name are "_" or "-". If any other character is used as a separator, or if the Platform property mz.subfolder.enabled is set to false in platform.conf , this button is disabled. New Configuration... Open Opens the Configuration drop-down menu. New Folder... Open Select this option to create a new folder. Open Configuration(s)... Open Available when at least one configuration is selected in the browser. Select this option to open the selected configuration. Export Configuration(s) Available when at least one configuration is selected in the browser. Select this option to export the selected configurations. The System Exporter opens with the configurations pre-selected. Note! When exporting from the Configuration Browser, configuration dependencies are not automatically selected. To select configuration dependencies, select the Select Dependencies checkbox in the System Exporter. For further information see System Exporter . Cut Open Select this option to put one or more configurations on the clipboard so they can be moved to another location. Select the menu option Paste in the folder where the configurations should be stored. This option is not applicable if the configuration is locked. For further information see the section Locks in Administration and Management in Legacy Desktop . Copy Open Select this option to put one or more configurations on the clipboard so they can be copied to another location. Select the menu option Paste in the folder where the copied configurations should be stored. Paste Open Select this option to store configurations that have been cut or copied to the clipboard into a folder. Delete... Open Select this option to delete the selected configuration(s). If the configuration is referenced by another configuration, a warning message is displayed, informing you that you cannot remove the configuration. For further information see the section below, References Tab. Note! If you have enabled subfolders, you can only delete the last subfolder within a folder. Rename... Open Select this option to change the name of the selected configuration. Take special precaution when renaming a configuration. If, for example, an APL script is renamed, workflows that are using this script will become invalid. This is especially important to know when renaming folders containing many ultra format configurations or APL. Renaming a folder with ultra formats or APL configurations will make all referring configurations invalid. Note! If you have enabled subfolders, you can only delete the last subfolder within a folder. Encrypt... Select this option to encrypt the selected configurations. Decrypt... Select this option to decrypt the selected configurations. Validate... Open Select this option to validate the configuration. A validation message will be shown to the user Properties Open Select this option to launch the Properties dialog for the selected configuration. For further information, see the section below, Properties. Configuration Browser Table The Configuration Browser table displays all configurations for the selected folder. If you right-click a configuration, a pop-up menu is displayed. The columns in the Configuration Browser table are: Column Description Column Description Name Displays the name of the configuration. Perm Displays the permissions granted to the current user of the configuration. Permissions are shown as R (Read), W (Write), and X (eXecute). If the configuration is encrypted, an E is also added. For further information about permissions, see the section below, Permissions Tab. Owner Displays the username of the user that created the configuration. The owner can: Read, modify (write), and execute the configuration Modify the permissions of user groups to read, modify, and execute the configuration. Modified By Displays the username of the user that made the last modifications to the configuration. Modified Date Displays the date when the configuration was last modified. Filter Configurations Select this icon ( ) to open the Filter Configurations dialogue: Using the Folders tab you select which folders to see in the browser Using the Types tab you select the configurations that you want to see in the browser Using the Owners tab you select the owners whose configurations you want to see in the browser Historic Configurations The Historic option provides you with the option to select between the current list of configurations saved in the system and the Historic view, which lists configurations that have been deleted. The Historic view also provides a unique identification Key assigned by the system for every configuration. Open Historic configurations Options Refresh Select this option to refresh the information in the table. Historic Historic mode displays configurations that have been removed from the system. The user can select to restore such a configuration. Restore Applicable only in the Historic view mode. Click to restore the selected configuration. Once you click Restore and confirm its validity, the configuration is active and available for use. Table The table in the Historic configurations contains the following columns: Column Description Column Description Name Displays the name of the configuration. Ver Displays the configuration version. Key Displays the internal key used to identify the configuration. Modified By Displays the user name of the user that made the last modifications to the configuration. Modified Date Displays the date when the configuration was last modified. Comment Displays any comments regarding the configuration. Properties To open the Properties dialog, right-click on a configuration and select Show Properties . This dialog contains four different tabs: Basic , which contains basic information about the configuration. The Basic tab is displayed by default. Permission , where you set permissions for different users. References , where you can see which other configurations are referenced by the selected configuration, or that refer to the selected configuration. History which displays the revision history for the configuration. Basic Tab The Basic tab is the default tab in the Properties dialog and contains the following information: Open The Properties dialog box - Basic tab Item Description Item Description Name Displays the name of the configuration. Type Displays the type of configuration. Key Displays the internal key used to identify the configuration. Folder Displays the name of the folder in which the configuration is located. Version Displays the version number of the configuration. See the History folder for further information about the different versions. Permissions Displays the permissions granted to the current user of the configuration. Permissions are shown as R (Read), W (Write), and X (eXecute). If the configuration is encrypted, an E is also added. For further information about permissions, see the section below, Permissions Tab. Owner Displays the username of the user that created the configuration. The owner can: Read, modify (write), and execute the configuration Modify the permissions of user groups to read, modify, and execute the configuration. Modified by Displays the user name of the user that made the last modifications to the configuration. Modified Displays the date when the configuration was last modified. If you want to use the information somewhere else, you can highlight the information and press CTRL-C to copy the information to the clipboard. Permissions Tab The Permissions tab contains settings for what different user groups are allowed to do with the configuration: Open The Permissions tab As access permissions are assigned to user groups, and not individual users, it is important to make sure that the users are included in the correct user groups to allow access to different configurations. R W X E Permission Description R - - - Allowed only to view the configuration, given that the user is granted access to the application. - W - - Allowed to edit and delete the configuration. - - X - Allowed only to execute the configuration. R W - - Allowed to view, edit, and delete the configuration, given that the user is granted access to the application. - W X - Allowed to edit, delete, and execute the configuration. R - X - Allowed to view and execute the configuration, given that the user is granted access to the application. R W X - Full access. - - - E Encrypted. References Tab The References tab contains information about which other configurations that the current configuration refers to, and which other configurations that the current configuration is referenced by: Open The References tab The References tab contains two tabs; Used By , which displays all the configurations that use the current configuration, and Uses , which displays all the configurations that the current configuration uses. To edit, just double-click a configuration to open it in a tab. History Tab The History tab contains version information for the configuration: Open The History tab In the table, the following columns are included: Column Description Column Description Version Displays the version number. Modified Date Displays the date and time when the version was saved. Modified By Displays the username of the user that saved the version. Comment Displays any comments for the version. If you want to clear the configuration history, click the Clear Configuration History button. The version number is not affected by this.

---

# Document 2010: SAP CC Online Agent Input/Output Data and MIM - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204740371/SAP+CC+Online+Agent+Input+Output+Data+and+MIM
**Categories:** chunks_index.json

Input/Output Data The Input/Output data is the type of data an agent expects and delivers. The SAP CC Online agent emits and retrieves UDRs of the sapcc type. For further information, see SAP CC UDRs . MIM For information about the MIM and a list of the general MI M para meters, see Administration and Management in Legacy Desktop . Publishes MIM Parameter Description Failure (long) Number of failed requests PendingRequest (int) Number of pending requests towards the SAP System TotalRequest (long) Total number of overall requests Accesses The SAP CC Online agent does not access any MIM resources.

---

# Document 2011: SAP CTS+ Import - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/317948491/SAP+CTS+Import
**Categories:** chunks_index.json

When triggering a system import using SAP TMS, the entire export content will be imported into the target system. How to create a CTS+ import Verify Import Compatibility : Ensure the export system's name is included in the target system's cts.source.systems system property. For more information, see Platform Properties . Ensure Valid External References: Verify that the target system has valid local External References for all system-specific variables. Trigger the Import via SAP TMS: Use the transaction STMS to initiate the import process from the TMS system. For detailed steps, refer to the SAP Help Portal - SAP Online Help . Verify the imported change : To check if a change originated from an export, open the configuration and click the History button to open the History dialog. If the artifact originated from a CTS+ export, the Comment column will display the following details: LOG : Imported from <export file> CTS+ Transport ID : <CTS+ ID> ORIGINAL COMMENT : <original comment> Open The History tab in the configuration UI showing the configuration source details Note! The import operation does not automatically remove any obsolete configurations from Usage Engine. You can remove these manually as required for clean-up purposes. Import Logs The import logs will be visible in the following places. Import status Logs Import status Logs Successful System Log. CTS+ log. Failed Platform log - when the failure happens before the actual import function, for example, wrong parameter, value, or syntax. System Log - when the import function fails.

---

# Document 2012: APN UDRs - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/285638713/APN+UDRs
**Categories:** chunks_index.json

The APN UDR types include the following UDRs: APNUDR APNResult APNUDR When the APN agent receives an APNUDR , it sends the message to the Apple device referenced by the DeviceToken . Open APNUDR fields The following fields are included in the APNUDR UDR: Field Description Field Description Body (string) This field contains the content of the text message to be sent. CustomPayload (string) This field contains a custom message with all the tags to be included. When populated (not set to null), it will override the contents of the Body and Title fields. Example - CustomPayload {"acme2" : [ "bang", "whiz" ]} DeviceToken (string) This field contains the token for the device that will receive the message. Title (string) This field contains the title of the text message to be sent. Example - Generated Message from Body and Title Fields APL: consume { APNUDR aUDR = udrCreate(APNUDR); aUDR.Body ="This is an example."; aUDR.DeviceToken="7bd78578c2d702201cb291cdec4ad8e736c893b531deae602451e80617b53ae9"; aUDR.Title="Example Title"; udrRoute(aUDR); } Message: {"aps":{"alert":{"body":"This is an example.","title":"Example Title"}}} APNResult Once the APN agent has sent a text message in response to an APNUDR UDR, it returns an APNResult UDR. Open APNResult UDR Fields The following fields are included in the APNUDR UDR: Field Description Field Description Code (int) This field indicates the result of the push notification attempt, with the following result codes: 0 - OK 1 - Rejected 2 - Timed out 3 - Error Message (string) This field provides a description for each result code: 0 - Empty 1 - Message from Apple describing reason for rejection 2 - Timeout 3 - Content of any exception that has occurred Notification (APNUDR) This field contains the original APNUDR UDR received by the agent.

---

# Document 2013: Downgrade/Rollback - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/550731779/Downgrade+Rollback
**Categories:** chunks_index.json

You cannot downgrade MediationZone to an older version after having followed the Standard Upgrade Procedure , but you can perform a rollback to the previous version as described in Rollback for Standard Upgrades . However, if you have followed the Simplified Upgrade Procedure , you can perform a downgrade as described in Simplified Downgrade Procedure . This section contains the following subsections: Rollback for Standard Upgrades Simplified Downgrade Procedure

---

# Document 2014: mzcli - wfgroupenable - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/547980049/mzcli+-+wfgroupenable
**Categories:** chunks_index.json

Usage usage: wfgroupenable <pattern matching expression for workflow group names> ... This command enables one or more workflow groups. Options The command accepts the following options: Option Description Option Description [ -mode < a > ] Enable only workflow groups marked with a specified mode: a - Only Autostart groups are enabled. Return Codes Listed below are the different return codes for the wfgroupenable command: Code Description 0 Will be returned if the command was successful. 1 Will be returned if the argument count is incorrect. 2 Will be returned if the user is not found or not logged in. 3 Will be returned if no matching workflow group was found.

---

# Document 2015: Suspend Execution - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204638678/Suspend+Execution
**Categories:** chunks_index.json

This section includes information about the configuration option Suspend Execution. The Suspend Execution configuration enables you to apply a restriction that prevents specific workflows and/or workflow groups from running in specific periods of time. Note! Grouping workflows is possible in the Suspend Execution for the sole purpose of suspending them during a defined period of time. These groups are not workflow group configurations. Suspend Execution To open the Suspend Execution configuration, click Build  New Configuration , and then select Suspend Execution from the menu. Suspend Execution Buttons The toolbar changes depending on which configuration type that is currently open in the active tab. There is a set of standard buttons that are visible for all configurations and these buttons are described in the Common Configuration Buttons . There is one additional button for Suspend Execution. Button Description Button Description Open Enables you to include or exclude the following from the Available To Add list: Workflow Groups Workflows Batch and Task workflows Real-time workflows Suspend Execution Tabs Suspend Execution includes two tabs: Members Tab Scheduling Tab Members Tab In the Members tab you select workflows that you want to suspend temporarily, i.e. workflows that should not be executed during specific periods of time. Open The Suspend Execution configuration - Members tab Item Description Item Description Available to Add Upper pane: Displays a tree view of the workflows and workflow groups that are saved within their respective configurations that you can apply execution suspension for. Lower pane: Shows a list of workflows that are included in the workflow configuration that you select from in the upper pane. Note! A workflow group can be a member of another workflow group. Members A list of the current workflow group members. Button Description Button Description Open Click to add a member to the list. Scheduling Tab From the Scheduling tab you suspend and enable the activation of workflows that you select on the Members tab, if they are executed during the suspension interval. Open The Suspend Execution configuration - Scheduling tab The Scheduling tab contains the following table columns: Column Description Column Description Time When you click the Add Row button that is located at the bottom of the Scheduling tab, a new row appears in the Scheduling tab table. This row includes the current time stamp. You change the time stamp to a future date by first double-clicking the row and then clicking the button that appears in the selected row. Then, from the Time Chooser dialog, you select a time and a date. Note! As soon as a specified date has passed, according to the Desktop (client) clock, the text in the affected row becomes italicized. Enable Double-click the table cell to select it, and then check to enable the activation of the workflow at the specified time stamp. Disable Double-click the table cell to select it, and then check to suspend the workflow at the specified time stamp. To Suspend a Workflow On the Members tab, from the Available To Add list, select the workflow or the workflow group, that you want to suspend during a certain period of time. Click to select the row; the button appears. Click the button to move each selection into the Members list on the right-hand side of the tab. On the Scheduling tab, click the button; the current timestamp is added to the table. At this point, you can either suspend the workflow immediately by checking Disable , or you can edit the time and date to have the suspension start later. To do this, select the relevant row and click the ( Edit ) button; the Date Chooser dialog opens. Select the year, month, day, and input the hour and minutes. Click OK . The row is updated with a later time stamp. Check Enable to remove the execution suspension, or Disable to suspend a workflow at the specified time. Save the Suspend Execution configuration. The Platform should be running when both the suspend and the enable activation dates occur, for these actions to be effective.

---

# Document 2016: File Functions - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204743688/File+Functions
**Categories:** chunks_index.json

You use the file management APL functions to manage files. Note! These functions can only be used for the directories in your local file system. The following functions for Files described here are: 1 readFileBinary 2 fileDelete 3 fileMove 4 fileListFiles 5 fileListDirectories readFileBinary Reads a binary file and returns its contents in the MediationZone bytearray data format. bytearray readFileBinary (string path ) Parameter Description Parameter Description path The physical path and name of the file Returns The contents as a bytearray fileDelete The fileDelete command takes the absolute path of a file and deletes that file. If the delete is successful, null is returned. If there is an error, an error string is returned. string fileDelete (string fileName ) Parameter Description Parameter Description fileName The absolute path to the file to delete Returns Null if the deletion was successful, otherwise an error string fileMove The fileMove command takes the path to the file to be moved, and the path to the new destination. If the move is successful, null is returned. If there is an error, an error string is returned. string fileMove (string fileName , string newFileName ) Parameter Description Parameter Description fileName The absolute path to the file you want to move newFileName The absolute path to the new destination of the file (e.g "/home/files/20110505/movedFile.csv"). Returns Null if the file was moved successfully, otherwise an error string fileListFiles The fileListFiles command lists all files in a given directory. The command only returns actual files from the directory, it does not return any sub directories or files from sub directories. If there are no files in the given directory, an empty list is returned. If there is an error, null is returned. list<string> fileListFiles (string directory, regex filter (optional)) Parameter Description Parameter Description directory The absolute path to the directory for which you want to list files filter You can enter a regular expression to filter out which files you want to list. Returns A list (may be empty) of the files in the given directory, or null if there is an error Note! The files will not necessarily be listed in alphabetical, or any other specific order. fileListDirectories The fileListDirectories command lists all sub directories in a given directory. The command only returns sub directories in the given directory, it does not return files or sub directories to the sub directories. If there are no directories in the given directory, an empty list is returned. If there is an error, null is returned. list<string> fileListDirectories (string directory , regex filter (optional)) Parameter Description Parameter Description directory The absolute path to the directory for which you want to list sub directories filter You can enter a regular expression to filter out which directories you want to list. Returns A list (may be empty) of the directories in the given directory, or null if there is an error

---

# Document 2017: IPDR SP Template Profile - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204998672/IPDR+SP+Template+Profile
**Categories:** chunks_index.json

An IPDR SP Template profile is used to generate a DOCSIS 2.0 SAMIS, DOCSIS 3.0 SAMIS-TYPE-1 or DOCSIS 3.0 SAMIS-TYPE-2 template accessed by real-time workflows using the IPDR SP agent. The IPDR SP Template profile is loaded when you start a workflow that depends on it. Changes to the profile become effective when you restart the workflow. Configuration To create a new IPDR SP Template profile, click the New Configuration button from the Configuration dialog available from Build View , and then select Profile from the menu. IPDR SP Template profile The following settings are available in the IPDR SP Template profile: Setting Description Setting Description IPDR Service Definition Select the supported definitions from the dropdown to display the relevant template fields for the IPDR SP Template profile. The default selection is DOCSIS 3.0 CMTS-CM-REG-STATUS-TYPE. Template Fields Select the options from the drop down to indicate the fields that will be used in the selected IPDR Service Definition. Different fields will be present in the Template Fields for each of the Service Definition.

---

# Document 2018: FTP DX200 Agent - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205685530/FTP+DX200+Agent
**Categories:** chunks_index.json

This section describes the FTP DX200 collection agent. This agent is for batch workflow configurations. Prerequisites The reader of this information should be familiar with the: VDS device in a DX200 switch Standard FTP (RFC 959, http://www.ietf.org/rfc/rfc0959.txt ) SSH2 and SFTP ( http://tools.ietf.org/html/draft-ietf-secsh-filexfer-03 ) The FTP/DX200 collection agent collects data files from a DX200 network element, and inserts them into a workflow, by using the FTP or SFTP protocol. To do this, the agent: Reads the storage control file TTSCOFyy.IMG , that specifies what to collect. Registers every file that has been successfully collected in the transaction control file TTTCOFyy.IMG . Note! By default, the agent skips files if the sequential order has been lost, and files that have been overwritten (reaching FULL state before being set to OPEN state) are not collected. However, by adding the Execution Context properties mz.dx200.acceptsequentiallost and mz.dx200.acceptoverwritten to the <pico name> .conf file of the relevant EC, you can change this behavior. See the System Administration Guide for further information about these properties. The section contains the following subsections: FTP DX200 Agent Preparations FTP DX200 Agent Configuration FTP DX200 Agent Transaction Behavior FTP DX200 Agent Input/Output Data and MIM FTP DX200 Agent Events

---

# Document 2019: kpi - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204645468/kpi
**Categories:** chunks_index.json

The kpi objects describe how metrics are linked to dimensions and threshold levels. You may configure kpi objects to perform additional calculations based on metrics, e g ratios or sums of ratios. The following JSON schema describes the data format of the kpi object type: Loading The kpi object type has the following properties: Property Description node node must contain an array of strings that constitutes a path to a node in a tree object. The first value in the array must match the name of a tree object, and the subsequent values must match the name of the descendant nodes in the tree object. immediateAlarm When immediateAlarm is set to false , exceeded threshold levels will be indicated in a KPIOutput UDR at the end of a period. The UDR field outputType will be set to 0. This is the default behavior. When immediateAlarm is set to true , a KPIOutput UDR with outputType 1 will be generated at the time of detection. Exceeded threshold levels will also be indicated in the output that is generated at the end of the period. Immediate alarm data are sent by Spark to the Kafka topic kpi-alarm . windowSize The incoming data is sorted into time periods based on the timestamp value of the KDR UDRs. The KPIs are calculated and generated according to these periods. windowSize defines the length of the periods in the same time unit as the KDR timestamp. A flooring algorithm is applied to timestamps in order to select the start time of a period: period start = kdr.timestamp - (kdr.timestamp mod windowSize) Note! When the value of aggregated-output is false , kpi objects in your service model may have different window sizes. However, w hen the value of aggregated-output is true, all kpi objects in the model must have the same window size. threshold threshold may contain the name of a threshold object. expr expr must contain an arithmetic expression based on metric objects. You can use the expression to calculate e.g. ratios or sums of ratios. Example - Expressions "Plain" metric: "expr": "AvgLength" Ratio: "expr": "TotalAttempts/TotalSuccessful" Sum of Ratios: "expr": "(Type1Attempts/Type1Successful)+(Type2Attempts/Type2Successful)" In the case of division by zero, the value of the output of the expression will be positive infinity, negative infinity, or NaN (Not a Number) as defined in the JVM specification. Example - JSON Representation "kpi": { "Region.AL": { "node": [ "tree1", "Region" ], "windowSize": 60, "threshold": "Region.AL", "expr": "AvgLength" } }

---

# Document 2020: Control Flow - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204646120/Control+Flow
**Categories:** chunks_index.json

The following keywords are used for controlling the execution flow in the APL programming language. Keyword Description Example Keyword Description Example break Terminates the execution of the current loop. while(i++ < 10) { if( i == 5 ) { break; } } continue Terminates execution of the current iteration of the loop, and continues execution of the next iteration. while( i++ < 10) { if( i%2 == 0 //your code { else { continue; } } } for for loop (for-each loop): The for loop is used to iterate through all the elements of a list in a first-to-last order. This type of loop only consists of a variable declaration and a list type. The declared variable, which is only available in the scope of the for loop, is assigned an element in each iteration. for loop (advanced): Creates a loop that consists of three expressions. The first expression performs initialization of a variable that is used for counting iterations. A variable declared in this expression is only available in the scope of the for loop. The second expression contains a condition that must evaluate to true or false. The loop iterates until the condition evaluates to false. The third expression is evaluated at the end of each loop iteration, before the next evaluation of the condition. This is typically used to update or increment the counting variable in the condition. list<int> listOfInts = listCreate(int,1,2,3); for (int i: listOfInts) { //your code } list<string> listOfStrings = listCreate(string,"1","2","3"); for (string s: listOfStrings) { //your code } for( int i=0; i<10; i++ ) { //your code } if else Used to execute code with conditions. if (myVar == "ABC") {// do_this} else {// do_that} return Stops the execution of the current function block. if ( ANumber == null ) { return;} while Loops while condition is true. Note! If the APL code generates an infinity loop it can be stopped by, in the Workflow Monitor or Execution Manager, selecting the Stop button and Stop Immediate . This will however not work if the loop is running in the initialize or deinitialize blocks. while( i < 20 ) { // do_stuff} switch case Allows an expression to be tested for equality against a list of values or types, where each of these is a case. The cases are evaluated against the variable in order, from top to bottom. After a match, the remaining cases will not be evaluated. Testing values: The value for a case must be the same data type as in the switch expression. Testing types: The type for a case must be followed by a variable declaration as shown in the example column. A switch statement can have an optional default case, else , which must appear at the end of the switch . The default case can be used for performing a task when the variable does not match any of the other cases. //Testing values switch (str) { case "one" { debug("One"); } case "two" { debug("Two"); } else debug("other"); } //Testing types switch (input) { case (PulseUDR p){ debug(p.Sequence); } case (MyUDR m) { debug(m.aField); } } //Testing container types switch (value) { case (map<any, any> m) { debug("This is a map."); } case (list<any> l){ debug("This is a list."); } }

---

# Document 2021: Managing Picos in Desktop - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205657533
**Categories:** chunks_index.json

This section describes how to manage pico configurations in Pico Management screen in Desktop. To open the Pico Management screen, click on the Manage screen option in Desktop and then click on the Pico Management button. Open Pico Management You can perform the following operations on the Pico Management page: View, update, and create Picos Start, stop, and restart Picos This chapter includes the following sections: Starting, Stopping and Restarting Picos View, Update, Create, and Delete Picos

---

# Document 2022: File System Permissions - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204647119/File+System+Permissions
**Categories:** chunks_index.json

All workflows will be executed in Execution Contexts started by the mzadmin user. If a workflow contains agents that read or write data directly from the file system (such as the Disk Collection agent), it is important that all the directories have the correct file permissions. The same applies to, for instance, directories targeted by the Platform, such as archiving directories and error directories.

---

# Document 2023: Service Context Properties (Removed from User Doc for XE-15203) - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205848621
**Categories:** chunks_index.json

This section describes the different properties that you can use in the STR to configure SCs. Property Description Property Description mz.servicehost.port.range This property determines the port range for each SC. MediationZone will bind to ports in the provided ranges. The values must not overlap for SCs that running on the same host. mz.servicehost.natures This property contains one or more service specific identifiers that sets behaviors of the the SC. These behaviors, referred to as natures, are required by the services to function. mz.servicehost.address This property determines the IP address or hostname to expose when starting services. By default, the IP address is the same as that used to connect to the Platform. pico.type Default value: "" This property specifies the type of pico instance and should always be set to sc . If you set the property install.str.config-script to str-template/basic.sh in install.xml during the installation , the following SCs will be available in STR. SC Default Values Typical Use SC Default Values Typical Use sc1 mz.servicehost.port.range: 5501-5550 mz.servicehost.natures: default,c1 mz.servicehost.address: Kafka sc2 mz.servicehost.port.range: 5551-5600 mz.servicehost.natures: default,c2 mz.servicehost.address: Kafka sc3 mz.servicehost.port.range: 5601-5650 mz.servicehost.natures: default,c3 mz.servicehost.address: Kafka zk1 mz.servicehost.port.range: 5651-5700 mz.servicehost.natures: coordination,c4 mz.servicehost.address: ZooKeeper zk2 mz.servicehost.port.range: 5701-5750 mz.servicehost.natures: coordination,c5 mz.servicehost.address: ZooKeeper zk3 mz.servicehost.port.range: 5751-5800 mz.servicehost.natures: coordination,c6 mz.servicehost.address: ZooKeeper

---

# Document 2024: HDFS Forwarding Agent Transaction Behavior - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205033424/HDFS+Forwarding+Agent+Transaction+Behavior
**Categories:** chunks_index.json

The transaction behavior for the HDFS forwarding agent is presented here. For more information about general transaction behavior please refer to the section Transac tions in Workflow Monitor . The agent does not send out anything. Retrieves The agent retrieves commands from other agents and based on them generates a state change of the file currently processed. Command Description Begin Batch When a Begin Batch message is received, the temporary directory DR_TMP_DIR is first created in the target directory, if not already created. Then a target file is created and opened in the temporary directory. End Batch When an End Batch message is received, the target file in DR_TMP_DIR is first closed and then the Command , if specified in After Treatment , is executed. Finally, the file is moved from the temporary directory to the target directory. Cancel Batch If a Cancel Batch message is received, the target file is removed from the DR_TMP_DIR directory. Loading

---

# Document 2025: Properties for SAP HANA - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204996769
**Categories:** chunks_index.json

For a SAP HANA database, set the following properties in install.xml. SAP recommends that SAP HANA be set up with TLS/SSL encryption enabled. For one way TLS/SSL, you only need to configure the install.sap.ssl.encrypt , install.sap.ssl.truststore , install.sap.ssl.truststorepassword , and install.sap.ssl.hostnameincertificate properties. For mutual authentication, you have to configure all the TLS/SSL properties. For information on how to generate the certificate for SAP HANA, refer to: https://help.sap.com/viewer/0eec0d68141541d1b07893a39944924e/2.0.04/en-US/02f21560bbc1495483373d266f7e1fc7.html Property Description Property Description install.sap.host Default value: 127.0.0.1 This property specifies the IP address or hostname of the database instance. install.sap.db.name Default value: MZ This property specifies the name of the SAP HANA database. install.sap.port.hdbsql Default value: 39013 This property specifies the port that will be used for hdbsql client while provisioning the SAP HANA database. i nstall.sap.port.jdbc Default value: 39044 This property specifies the port that will be used during runtime for jdbc connections towards the SAP HANA database. install.sap.instance.number Default value: 90 This property specifies the SAP HANA instance number. install.sap.systemdb.name Default value: SYSTEMDB This property specifies the SAP HANA System Database name. install.sap.tb.space.tab Default value: row This property specifies the name of the tablespace to use to create the table in. install.sap.ssl.encrypt Default value: true This property enables SAP HANA TLS/SSL encryption. If set to true , you must configure install.sap.ssl.truststore, install.sap.ssl.truststorepassword, and install.sap.ssl.hostnameincertificate. install.sap.ssl.truststore Default value: "" This property specifies the location and filename of the java keystore format truststore file. This property needs to be configured for both one way or mutual authentication. install.sap.ssl.truststorepassword Default value: "" This property specifies the truststore password. If no password is configured, you can set "" (empty string) as the value. This property needs to be configured for both one way or mutual authentication. install.sap.ssl.hostnameincertificate Default value: * This property specifies the hostname in the truststore certificate. You can use "*" as the value if there is no hostname configured. This property needs to be configured for both one way or mutual authentication. install.sap.ssl.keystore Default value: "" This property specifies the location and filename of the keystore file. This property is only used when enabling mutual authentication. install.sap.ssl.keystoretype Default value: "" This property specifies the keystore type. It can be JKS or PKCS12. This property is only used when enabling mutual authentication. install.sap.ssl.keystorepassword Default value: "" This property specifies the password of the keystore. This property is only used when enabling mutual authentication. install.sap.ssl.sslcryptoprovider Default value: "" This property specifies the TLS/SSL provider for keystores such as OpenSSL. This property is only used when enabling mutual authentication.

---

# Document 2026: Users - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205783146/Users
**Categories:** chunks_index.json

The Access Controller is a user administration tool that is available in the Desktop. Different roles can be set up as access groups, with a defined set of write and execute permissions for the applications. Each user can belong to one or several access groups. For more information regarding the user administration, see /wiki/spaces/MD93/pages/204676229 . Every time a user or an access group has been updated, a user event is created containing information regarding the changes. This is logged in the System Log, but can also be handled by the Event Notification. For further information, see Event Notifications , and System Log . At installation, a default user called mzadmin and an access group called Administrator are created. The default user and any other user that belongs to the same access group will have full permissions in the system. You cannot delete the default user or access group. However, you can remove the permissions to use the Access Controller. When the install.security property is set to true in install.xml , a prompt to change the password for mzadmin will appear during the installation of the Platform container. If this property is set to false , the default password will be used. The Platform property mz.security.user.control.enabled will be set to same value as install.security . This property is used to enforce additional password rules. For further, see Enhanced User Security and Enhanced Security Password Rules in /wiki/spaces/MD93/pages/204676229 . If the password for mzadmin has been forgotten, it is possible to reset it with the Platform property mz.user.secret.unlock . For more information about how to reset the mzadmin password, see Resetting the mzadmin Password .

---

# Document 2027: DRAgent - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204676560/DRAgent
**Categories:** chunks_index.json

DRAgent is the base class for all agent types. The getEnv method returns the runtime environment that will be a DRRealtimeWorkflowEnv if the workflow is a realtime workflow or a DRBatchWorkflowEnv for batch workflows. The environment also exists as a protected variable called _env . The getIdentity method returns an identity for the agent, which contains the workflow name and the agent name. The identity also exists as a protected variable called _identity . The getRouter method returns the router object responsible for routing raw data or UDRs into the workflow. The router also exists as a protected variable called _router that is used if many router invocations are expected. The router is explained further in the following section. These methods can be overridden: consume Called when data is routed to the agent. This function is not applicable for batch Collection agents. The method is implemented for Processing and Forwarding agents as well as for realtime Collection agents with response capability. getMIMValue This method is called for agents that publishes at least one MIM value. The entry whose value is to be returned, is given as an argument, and the agent must return the value for the given entry. Depending on the workflow and entry type, this function can be called frequently. The agent must therefore consider defining its MIM entries as static final to be able to use direct reference comparison in this method. The result must match the types defined in the UDR Type system. deinitialize Called when the workflow has been stopped and no more calls to consume will be performed. The agent must free all resources in this method, such as file and database references. executeCommand Called when the operator wants to interact with the workflow. Only agents supporting the Dynamic Commands functionality need to implement this method. updateConfig Called when a new version of the workflow is deployed. Currently this is only supported for realtime workflows. This must be implemented if the Inspectable indicates support for updated configurations.

---

# Document 2028: Database Collection Agent Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204672349/Database+Collection+Agent+Configuration
**Categories:** chunks_index.json

You open the Database collection agent configuration dialog from a workflow configuration. To open the Database collection agent configuration, click Build  New Configuration . Select Workflow from the Configurations dialog. When prompted to select workflow type, select Batch . Click Add Agent and select Database from the Collection tab of the Agent Selection dialog. Source Tab Open Database collection agent configuration dialog - Source tab The Source tab contains configurations related to the placement and handling of the source database table and its data, as well as the UDR type to be created and populated by the agent. Setting Description Setting Description UDR Type Type of UDR to be created and populated. Database Profile name of the database that the agent will connect to and retrieve data from. The list is populated each time the configuration dialog is opened. For further information about database profile setup, see Database Profile . Refresh must be selected if changes have been made in the customer database. This will update the presented information in the Source tab. Note! The Database collection agent does not support Fast Connection Failover (FCF) used when using an Oracle RAC enabled database for the database agent. Use Default Database Schema Select this check box to use the default database schema for the chosen database and user. Note! This is not applicable for all database types. Use Default Database Schema is available for selection only when accessing Oracle databases. Use Prepared Call Enable this checkbox to allow the Database Collection agent to use prepareCall when using the agent to conduct the SQL operations. When left unchecked, the Database Collection agent will use preparedStatement for all its SQL operations. Table Name Name of the working table in the selected Database, in which the data to be collected resides. The list is populated each time a new Database is selected. For further information and an example of a working table, see Working Table in Tables and Stored Procedures . Note! For Oracle the default schema is omitted; the name of a table that belongs to the current database user appears without the schema or user prefix. Transaction ID Column Name of the column in the selected Table, which is utilized for the transaction ID. The list is populated each time a Table Name is selected. The column must be of the data type number on Oracle or BigInt on PostgreSQL, with at least twelve digits. Remove If enabled, this option will remove the collected data rows from the working table. If you select this option, you can also configure the Commit Window Size in the Advanced tab, which is 1000 by default. Mark as Collected If enabled, this option will assign the value -1 to the transaction ID Column for all the collected rows. The default commit window size is 1000. Run SP If enabled, this option executes a user defined stored procedure that is responsible for the handling, most often removal, of the collected data. Note! It is important that this procedure actually deletes the data or sets the Transaction ID to -1 , to avoid the data being recollected. For further information and an example of such a stored procedure, see After Collection Stored Procedure in Tables and Stored Procedures . Ignore Select to have the collected data remain in the table even after collection. Note that while the data state remains unchanged after collection, the transaction ID value is updated. By keeping the data in the table you can collect it repeatedly while designing and testing a workflow, for example. Assignment Tab Open Database collection agent configuration dialog - Assignment tab The Assignment tab contains the mapping of column values to UDR fields. The content and use of this tab is described in detail in Assignments in Mapping Assignments between Database Fields and UDR Fields If the Source tab is correctly configured and the Assignment tab is selected, the table will automatically be populated, as if Refresh was clicked. If assignments already exist in the Assignment tab, then Refresh must be manually clicked for the assignments to be updated with the configurations in the Source tab. Note! Potential changes in the database table will not be visible until the Refresh button for the database, in the Source tab, has been clicked. Only the value types UDR Field, To UDR and NULL, described in Value Types in Mapping Assignments between Database Fields and UDR Fields , are available for selection. Condition Tab Open Database collection agent configuration dialog - Condition tab In the Condition tab, query constraints may be added to limit the selection of data. The statement must follow the standard SQL WHERE -clause syntax, except for the initial where and the final semi-colon ( ; ) which are automatically appended to the entered condition statement. It is, for instance, possible to include an order by statement to get the rows sorted. The condition statement may contain dynamic parameters, represented by question marks that in run-time will be replaced by a value. If the text area contains question marks, Assign Parameters... must be selected, to be able to assign values to these parameters. The assignments are made in the Parameter Editor dialog. Open Database collection agent configuration dialog - Parameter Editor dialog In this dialog each parameter, represented as a question mark in the condition statement, appears as one row. The value types available are MIM Entry and Constant. Since constant values are also possible to be given directly in the condition statement, MIM Entry is most likely to be used here. Advanced Tab Open Database collection agent configuration dialog - Advanced tab. The Advanced tab contains a setting for performance tuning and allows viewing of the generated SQL statement, based on the configuration in the Source , Assignment and Condition tabs. Item Description Item Description Commit Window Size The number of UDRs (rows) to be removed between each database commit command. This value is used to tune the performance. If tables are small and contain no Binary Objects, the value may be set higher than the default. Default is 1000. The window size can be set to any value between 1-60000, where setting 1 means that commit is performed after 1 UDR, and setting 60000 means that commit is performed after 60000 UDRs. This setting is only applicable if the Remove option is selected in the Source tab. Generated SQL Statement In this area the SQL statement to be used to query the database is shown. It may be used for debug purposes or for pure interest. In order for the statement to appear, the Source and Assignment tabs have to be properly configured. If not, information about the first detected missing or erroneous setting is displayed.

---

# Document 2029: GCP PubSub Profile - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205652789/GCP+PubSub+Profile
**Categories:** chunks_index.json

The GCP PubSub Profile is used for setting up the Google PubSub Subscription and Topic for a Google Cloud Project. This profile requires the GCP Profile to establish a connection with the GCP Service. Currently, the profile can be used with the following agents: GCP PubSub Subscriber agent Menus The contents of the menus in the menu bar may change depending on which configuration type has been opened in the currently displayed tab. The GCP PubSub Profile uses the standard menu items and buttons that are visible for all configurations, and these are described in Build View . The Edit menu is specific for the GCP PubSub Profile configurations. Item Description Item Description External References Select this menu item to enable the use of External References in the GCP PubSub Profile configuration. This can be used to configure the following fields: Project Subscription Topic For further information, see Using External Reference in Agent Profile Fields and External Reference Profile . Configuration The following settings are available when you have selected Use Json File as the Input Option in the GCP Profile. Open GCP PubSub Profile Setting Description Setting Description GCP Profile Choose the GCP Profile that contains the Service Account key that will authenticate the GCP PubSub Subscriber agent. Project The GCP Project namespace contains the PubSub subscription and associated topics. Subscription The ID of the subscription. A subscription directs messages on a topic to subscribers. Messages can be pushed to subscribers immediately, or subscribers can pull messages as needed Topic The name of the PubSub topic that you want the Subscriber agent to retrieve messages from or pull from the Publisher agent. A topic forwards messages from publishers to subscribers.

---

# Document 2030: Appendix A - Oracle Home Settings - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204670130/Appendix+A+-+Oracle+Home+Settings
**Categories:** chunks_index.json

Below are examples of configurations in listener.ora and tnsnames.ora . Example - Oracle Listener Configuration File LISTENER = (DESCRIPTION_LIST = (DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP) (HOST = example_hostname) (PORT = 1521) ) ) ) ) SID_LIST_LISTENER = (SID_LIST = (SID_DESC = (GLOBAL_DBNAME = mz) (ORACLE_HOME = /opt/oracle/product/12.2.1.0) (SID_NAME = MZ) ) ) Example - tnsnames.ora Configuration MZ = (DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP) (HOST = example_hostname) (PORT = 1521) ) ) (CONNECT_DATA = (SERVICE_NAME = mz) ) )

---

# Document 2031: Using External Reference in Workflows - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204737773/Using+External+Reference+in+Workflows
**Categories:** chunks_index.json

This section describes how to enable the use of External Reference profiles in Workflow tables. External references can only be used in a workflow for agent properties that are configured inside the workflow table. Enabling the Display of Fields in the Workflow Table To create a new workflow configuration, click the New Configuration button in the upper left part of the Desktop window, and then select Workflow from the menu. From the new workflow dialog, select workflow type Batch or RealTime . From the button panel, click Properties to open the Workflow Properties dialog. On the Workflow Table tab, select the Per Workflow or Default check boxes for the fields that you want to display as columns in the workflow table. Select Enable External Reference , and click Browse to enter your External Reference profile. Click OK . You have now enabled access to external references for selected workflow table fields. Open The enable external reference option Assigning External Reference Value to a Workflow Table Field At the bottom of the workflow configuration, in the workflow table, click the Add workflow button. Select the desired input field and enter the value . Confirm the entry by clicking the OK button. Open Enabling external references in a workflow Disabling an External Reference Assigned Field At the bottom of the workflow configuration, in the Workflow Table, select the entry and click Edit. Deselect the Ext Ref field from the desired entry. Confirm your choice by clicking on the OK button.

---

# Document 2032: Workflow and Workflow Group Commands - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/547979887/Workflow+and+Workflow+Group+Commands
**Categories:** chunks_index.json

Apart from general mzcli commands, there are specific mzcli commands for Workflows and Workflow Groups. If a command starts with wf it relates to Workflows If a command starts with wfgroup it relates to Workflow Groups Workflow and Workflow Group commands accept wild cards, such as '*' and '?'. For further information about pattern match expressions see mzcli Textual Pattern Matches . Workflow Commands With Workflow commands you compare a single pattern match expression, or several, with the full workflow name, <folder name>.<workflow configuration name>.<workflow name> , of all the workflows. Workflow Group Commands With Workflow Group commands, you compare a single pattern match expression, or several, with the workflow group name, <folder name>.<workflow group name> , of all the workflows. The following Workflow and Workflow Group commands are suppored: mzcli - wfcommand mzcli - wfdisable mzcli - wfenable mzcli - wfgroupaddwf mzcli - wfgroupaddwfgroup mzcli - wfgroupdisable mzcli - wfgroupenable mzcli - wfgrouplist mzcli - wfgroupmodify mzcli - wfgroupremovewf mzcli - wfgroupremovewfgroup mzcli - wfgroupstart mzcli - wfgroupstop mzcli - wflist mzcli - wfstart mzcli - wfstop mzcli - wfdebug

---

# Document 2033: Python Writer's Guide - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205001433/Python+Writer+s+Guide
**Categories:** chunks_index.json

When writing Python code in the Python agents and the Python Module, the information in this section applies. This section includes the following subsections: Python Function Blocks Functions, Exceptions, Types, and Constants Importing Code Persistent Variables

---

# Document 2034: Workflow Packages Containing Web Services - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204997034
**Categories:** chunks_index.json

If you are upgrading from MediationZone 9.0. or later, and have workflow packages containing workflows with Web Services, you need to perform some additional steps before and after the upgrade of MediationZone to achieve a successful upgrade. If you do not perform these steps, the workflows using Web Services in workflow packages will abort after the upgrade. To ensure workflow packages containing workflows with Web Services function correctly after the upgrade, follow these steps: Before initiating the upgrade, generate new versions of the workflow packages containing workflows with Web Services. This needs to be done in an environment where MediationZone 9.1 is already installed. Upgrade MediationZone according to the regular instructions Upgrade . Once the upgrade is complete, import the new versions of the workflow packages that you generated in step 1 and switch to the new workflow package version. See Workflow Packages for more information about Workflow Packages. We recommend that you test the steps in a test environment before the production upgrade.

---

# Document 2035: Setting Environment Variables for Platform - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204736082/Setting+Environment+Variables+for+Platform
**Categories:** chunks_index.json

Add the following environment variables into a login script for the user mzadmin, ensuring the variables are always used. The example values will be used later on in the installation parameters file install.xml . Variable Description MZ_HOME Example value: /opt/mz This environment variable specifies where the MediationZone software is to be installed. Note! The directory must exist and be empty prior to the installation. JAVA_HOME Example value: /opt/jdk/jdk-17.0.2 This environment variable specifies where the JDK is installed. For example: /opt/jdk-<interim.update.patch> PATH The search path must contain the following directories: $JAVA_HOME/bin:$MZ_HOME/bin This environment variable specifies the search path. Example - Setting Environment Variables export MZ_HOME=/opt/mz export JAVA_HOME=/opt/jdk/jdk-17.0.2 export PATH=$JAVA_HOME/bin:$MZ_HOME/bin:$PATH Note! In order for MediationZone to function properly, the following Oracle file needs configuration: $ORACLE_HOME/network/admin/listener.ora See Appendix A - Oracle Home Settings for more information. Note! The installation script only supports using Oracle SID. It does not support using the Oracle service name.

---

# Document 2036: Python Processing Agent - Real-Time - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205653615/Python+Processing+Agent+-+Real-Time
**Categories:** chunks_index.json

The Python processing agent can process UDRs with Python in real-time by defining a consume block. It also uses an Interpreter profile that is used to configure the Python executable. Open Example of a workflow including the Python processing agent This section includes the following subsections: Python Processing Agent Configuration - Real-Time Function Blocks for the Python Processing Agent - Real-Time Python Processing Agent Input/Output Data and MIM - Real-Time Python Processing Agent Events -Real-Time

---

# Document 2037: Websocket Server Agent - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205654731/Websocket+Server+Agent
**Categories:** chunks_index.json

The Websocket Server agent enables a workflow to act as a server and receive connections and data. After a connection is established, the workflow can communicate with the client/server by receiving and sending binary data and/or text frames. The section contains the following subsections: Websocket Server Agent Configuration Websocket Server Agent Input/Output Data, MIM and Events

---

# Document 2038: Overview of MediationZone - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205848908/Overview+of+MediationZone
**Categories:** chunks_index.json

MediationZone empowers organizations to liberate the value hidden in their usage information via a unique approach to managing data that supports multiple mission-critical aspects of their business. The system is designed in such a way that customers benefit from fewer integration points and flexible data management. MediationZone bridges components residing in any type of network architecture, providing comprehensive functionality that ensures systems can communicate with each other as effectively as possible. Information is created based on raw data distributed across any number of network elements and systems. Data streams are optimized and enriched, translating into reduced cost for hardware, software licenses and maintenance while providing new opportunities to differentiate and personalize services. MediationZone is designed for online and offline processing on one platform. File-based collection and processing is configured with the same graphical workflow technology that is used to create bidirectional real-time communication streams. Design and change in the system is achieved through configuration rather than hard-coding. An intuitive and powerful drag-and-drop management user interface covers all aspects of workflow life-cycle management. Once configured, workflows are automatically deployed on designated servers that are part of an installation and executed in accordance with defined scheduling criteria. High availability capabilities ensure that workflows are executed at all times. MediationZone Optimizes Data Streams Processing functions include analysis, filtering, cloning, splitting, routing, normalization, correlation/aggregation, de-duplication, validation, enrichment, and more. The standard agents can be configured to support operator-specific business logic without the need for customization of the standard product. Integration with external systems for data exchange is achieved with plug-ins, which implement the protocols to be used when communicating with other systems. A large number of protocols are supported off-the-shelf, both for interfacing as well as for secure and consistent operation. Support for additional protocols is added continuously as part of roadmap development as well as on an on-demand basis. MediationZone configuration and control logic is centrally managed while execution can be distributed to any number of nodes in a network. Hardware independence and distributed design ensures scalability with any combination of high-end servers and commodity hardware.

---

# Document 2039: Using External Reference in Agent Profile Fields - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204998575/Using+External+Reference+in+Agent+Profile+Fields
**Categories:** chunks_index.json

This section describes how to enable the use of External Reference profiles in an agent profile configuration. Note! You can use External Reference profiles with the following agent profiles: 5G Aggregation Archiving Azure Couchbase Database Duplicate UDR Elasticsearch File System GCP GCP PubSub Inter Workflow Open API Redis Workflow Bridge For further information see the relevant agent user's guide. Open an agent's profile configuration. Select External References to open the External References dialog. Open The External References dialog Setting Description Setting Description Enable External Reference Select this check box to enable external referencing of the agent profile fields. Clear to disable external referencing of any agent profile field. Profile Click Browse and select the agent profile you want to apply. Enable Select this check box to select the agent profile fields that you want to enable with External Referencing. Field Name The names of the agent profile fields External Reference Key The value Select the Enable External Reference check box, and click Browse to select your External Reference profile. In the table, select the external reference keys to use by selecting Enable and the External Reference Key field. Click OK . You have now enabled external references for the selected profile field(s).

---

# Document 2040: Agent Message Events - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204607630/Agent+Message+Events
**Categories:** chunks_index.json

Ready with file: name Reported together with the name of the file that have been collected and inserted into the workflow. File cancelled: name Reported together with the name of the current file, each time a Cancel Batch message is received. This assumes the workflow is not aborted; See Transaction behavior, Cancel Batch. Command trace: trace A printout of the control channel trace. This is only valid if the FTP command trace in the Advanced tab is selected.

---

# Document 2041: Inter Workflow Real-Time Forwarding Agent Input/Output Data and MIM - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205033649/Inter+Workflow+Real-Time+Forwarding+Agent+Input+Output+Data+and+MIM
**Categories:** chunks_index.json

Input/Output Data The agent consumes bytearray types. MIM For information about the MIM and a list of the general MIM parameters, see the section Meta Information Model in Administration and Management in Legacy Desktop . Publishes MIM Parameter Description File start time This MIM parameter contains the start time of the interworkflow file, published in a Unix timestamp format (the total number of milliseconds since 1 Jan, 1970). File end time This MIM parameter contains the end time of the interworkflow file, published in a Unix timestamp format (the total number of milliseconds since 1 Jan, 1970). Accesses The agent accesses various resources from the workflow and all its agents to configure the mapping to the Named MIMs (that is, what MIMs to refer to the collection workflow).

---



---
**End of Part 86** - Continue to next part for more content.
