# RATANON/MZ93-DOCUMENTATION - Part 35/112

---
**Dataset:** ratanon/mz93-documentation
**Part:** 35 of 112
**GitHub:** https://github.com/ratan0n/docs/tree/main/mz93-documentation
**Size:** ~68.2 KB
---

There are three different types of workflows: batch, real-time and tasks. Each have a slightly different execution behavior, but their modeling and configuration structure is the same. Batch Workflow Batch workflows are used to collect process and distribute file-based data, also referred to as an offline model. These workflows can be configured for multi-threaded execution, enforcing a first-in-first-out processing order, and a strict transaction boundary based on each batch processed. Batch workflows are transaction safe as data processing can be rolled back and reprocessed if required. This since the file currently being collected and forwarded is saved as temporary files during processing. Only when the file is fully processed, all data is transaction saved. Should the workflow be interrupted, the temporary files are removed. When the workflow is restarted, it will restart from the beginning with the file it was previously processing. Open Batch workflow example. Real-Time Workflow Real-time workflows enable online processing of requests/answers with other systems. These workflows enable execution of large numbers of independent execution paths simultaneously using a multi-threading execution model. The order of the processing of records hence varies. Open Real-time workflow example Task Workflow Task workflows are used to execute common activities such as test, cleanup or maintenance tasks. A number of System Tasks are pre-configured in MediationZone and can be complemented with any user-defined activity. List of available Task Agents: Data Hub  Removes old partitions from a database. Data Veracity  Executes repair configurations to manage faulty UDRs extracted from workflows to a database. SQL Agent  Executes SQL statements on a database. Script  Executes a shell script with optional parameters. Unit Test Runner  Runs a unit test. Open Open Executing an SQL script using an SQL agent in a Task workflow

---

# Document 772: Inter-Workflow Communication, Using Database Agents - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204672322/Inter-Workflow+Communication+Using+Database+Agents
**Categories:** chunks_index.json

Data may propagate between workflows or MediationZone systems by combining a Database forwarding agent with a Database collection agent, where the exchange point is a mutual database table. Open When using the same table, the collection agent must make sure that it does not collect data that the forwarding agent is simultaneously feeding with data from its current batch. Note! Transfer of UDRs between workflows is ideally handled using the Inter Workflow agents. The Database agent approach is useful in case of wanting to change the content of the UDRs. Another use is when wanting to pass on MIM values and merge batches at the same time. In the Inter Workflow agent case, only the MIM values for the first (Header MIMs) and last batch (Trailer and Batch MIMs) are considered. Using the Database agents, MIM values may be mapped into database columns. Pending Transaction Table The MediationZone database, hosts a table where pending transactions are registered. A pending transaction is an ongoing population of a table by a Database forwarding agent. The pending transaction continues from a Begin Batch to an End Batch. The purpose of this table is for Database collection agents to avoid collecting pending data from the table that a Database forwarding agent is currently distributing to. The pending transaction table holds database names and table names. Thus, before a collection session starts, the collector evaluates if there are any pending Transaction IDs registered for the source database and table. If there are, rows matching the Transaction IDs will be excluded. In the following figure, the Database collection agent will exclude all rows with transaction ID 187. Open A Database forwarding agent may be configured to target a stored procedure, instead of a table directly. In such cases the user must specifically select the table that the stored procedure will populate ( SP Target Table ). The reason for that is that the pending transaction table must contain the table name, not the SP name, so that the selected table name in the Database collection agent can be matched. Exchanging Storable Data All UDRs have a special field named Storable . This field contains the complete UDR description and all its data. If UDRs, having many fields or a complex structure to be exchanged, it could be suitable to store the content of the Storable field in the database. In that way the table would only need one column. The database type of that column must be a RAW, LONG RAW or a BLOB. Note! The data capacity of the column types RAW, LONG RAW and BLOB differs. Consult the database documentation. For performance reasons it is advised to use the smallest type possible that fits the UDR content. When configuring the Database forwarding agent, the Storable field from the UDR is be assigned to the table column in a straight forward fashion. However, when collecting that type of data the column assignment must not be made to the Storable field. Instead To UDR is selected in the Value Type field. When the Database collection agent detects a mapping of type To UDR , the selected UDR type is not consulted for what UDR type to create. The information about the UDR type will be found in the data of the column itself. Thus, if the UDR stored in the column is of another type than selected in the Source tab, the type to be distributed by the Database collection agent is the type actually found.

---

# Document 773: Radius Client Agent Input/Output Data and MIM - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204740260/Radius+Client+Agent+Input+Output+Data+and+MIM
**Categories:** chunks_index.json

Input/Output Data

---

# Document 774: Disk Forwarding Agent Input/Output Data and MIM  - Batch - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205032682/Disk+Forwarding+Agent+Input+Output+Data+and+MIM+-+Batch
**Categories:** chunks_index.json

Input/Output Data The agent consumes bytearray or MultiForwardingUDR types. MIM For information about the MIM and a list of the general MIM parameters, see Administration and Management in Legacy Desktop . Publishes MIM Value Description MIM Value Description MultiForwardingUDR's FNTUDR This MIM parameter is only set when the agent expects input of MultiForwardingUDR type. The MIM value is a string representing the sub path from the output root directory on the target file system. The path is specified by the fntSpecification field of the last received MultiForwardingUDR . For further information on using input of MultiForwardingUDR type, refer to the section, MultiForwardingUDR Input, in Disk Forwarding Agent Configuration - Batch . This parameter is of the string type and is defined as a batch MIM context type. File Transfer Timestamp This MIM parameter contains a timestamp, indicating when the target file was created in the temporary directory. File Transfer Timestamp is of the date type and is defined as a trailer MIM context type. Target Filename This MIM parameter contains the name of the target filename, as defined in Filename Template . Target Filename is of the string type and is defined as a trailer MIM context type. Target Template Pathname This MIM parameter contains the name of the target pathname, directories and filename, as defined in Filename Template . Target Template Pathname is of the string type and is defined as a trailer MIM context type. Target Pathname This MIM parameter contains the path to the output directory, as defined in the Disk tab. Target Pathname is of the string type and is defined as a global MIM context type. Accesses The agent accesses MIM parameters in the Filename Template configuration to construct the target filename.

---

# Document 775: Error Codes - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204606841/Error+Codes
**Categories:** chunks_index.json

With the Error Codes option, errors can be specified in Data Veracity and associated with the erroneous UDRs or batch files. Error Codes could be used as an option when configuring the Data Veracity Collection Agent as it is used as an identifier for the workflow to collect certain Data Veracity record UDRs with the corresponding Error Codes. There are two predefined Error Codes within the system, AGGR_UNMATCHED_UDR and DUPLICATE_UDR , which are automatically set by the Aggregation and Duplicate UDR Detection agents when the corresponding error condition is detected. All other Error Codes are defined by the user. Open Data Veracity - Error Codes Error Code Sort Order Sorting by Name column is based on Javas default sorting behavior for Strings(for example, sorting of alphabetical characters in Java is case sensitive). To create an Error Code, click on the New button. This will display the Data Veracity Create Error Code dialog. This is where assignments of new Error Codes are made. Open Data Veracity Create Error Code dialog Item Description Item Description Error Code The Error Code that will be attached to UDRs or batches. Description A description of the error code. A user may send optional information to Data Veracity from an Analysis or an Aggregation agent, as long as an Error Code has been defined. To this Error Code, any information may be appended using APL. See the example below. Example An Error Case can be appended using APL code. udrAddError( input, "CALL ID ERROR", "The callId: " + input.callId + ", Calling number: " + input.anum ); In this example the "CALL ID ERROR" is defined in the Data Veracity Error Code dialog, found in the Error Code Web UI Note! To clear the errors for a UDR the udrClearErrors function should be used.

---

# Document 776: REST Server_Deprecated Agent Example - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204642638/REST+Server_Deprecated+Agent+Example
**Categories:** chunks_index.json

The file that is linked below includes two different examples of workflow configurations that use the REST Server_Deprecated agent: WFL_no_ssl is setup to receive REST requests from any clients without the need for any certificate verifications on either end. Debug events are generated to display the responses from the server. No authentication is used. WFL_1-way_ssl is setup to receive REST requests from clients and to respond to the client with the server certificate, by way of the server keystore. Debug events are generated to display the responses from the server. No authentication is used. WFL_1-way_ssl_OAuth2 is setup to receive REST requests from clients and to respond to the client with the server certificate, by way of the server keystore. Debug events are generated to display the responses from the server. OAuth 2.0 is used for authentication. WFL_2-way_ssl is setup to receive REST requests from clients and to respond to the client with the server certificate. The REST Server_Deprecated will also request for verification of the client certification using a truststore stored on the server itself. Debug events are generated to display the responses from the server. No authentication is used. WFL_2-way_ssl_OAuth2 is setup to receive REST requests from clients and to respond to the client with the server certificate. The REST Server_Deprecated will also request for verification of the client certification using a truststore stored on the server itself. Debug events are generated to display the responses from the server. OAuth 2.0 is used for authentication. Example workflows: REST_Server_example_export.zip Note! cURL commands, third party rest client applications (e.g. Postman) or even MediationZone's own REST Client_Deprecated agent can be utilized to send REST requests to the REST Server_Deprecated agent. Example cURL Example for GET no SSL curl "http://localhost:8089/abc" with SSL curl "https://localhost:8089/abc" --insecure Example for POST Including content body curl -d "example content body" "http://localhost:8089/abc" With Authorization header field Simple Basic curl -u myuser:mypw "https://localhost:8089/abc" --insecure OAuth 2.0 curl -H "Authorization: Bearer eyJraWQiOiJqZXR0eSIsImFsZyI6IlJTMjU2In0.eyJhdWQiOiJSaWVsbGUgQXBwIiwic2NvcGUiOiJzY29wZTIgc2NvcGUzIiwiaXNzIjoiZGlnaXRhbHJvdXRlIiwiZXhwIjoxNTEyNzA1NTQ3LCJpYXQiOjE1MTI3MDM3NDd9.ZRESO3VT4TvsiPdh5kFOwkNG7t3NjpN60_PJipcE5W-eceOf5PX_uphyjSO3yo9HAQVHt4cRlOaXvFDpeZvKjIyvVIrEGDtcXy3koPicevLwL9ivBTbC9q-LFof0ojqpbO5xypUVmCMYeRdLki7c1IbkDpVrWHj322JKFoL77wD6448pxyzZL6DVeByXIAiOCjalzoUEODwrJdEy0fQegqe-qMJWkDZp1FVPqe79XuLpK7dsUUhHOMryuHjBtC9KsvLENaN6F5VPoqG6htYPOADcDbGRC6OAgNEZfOFoRA2jk7QwnL9V58i_CkaktTz1rmFUjuK9CeeT-GAZKdIARw" "https://localhost:8089/abc" --insecure Multi curl -H "hello: how are ya" -H "hello: I am fine" -H "Authorization: Basic bWU6bXlwdw==, SomeOtherAuth blahbalhb, Bearer eyJraWQiOiJqZXR0eSIsImFsZyI6IlJTMjU2In0.eyJhdWQiOiJSaWVsbGUgQXBwIiwic2NvcGUiOiJzY29wZTIgc2NvcGUzIiwiaXNzIjoiZGlnaXRhbHJvdXRlIiwiZXhwIjoxNTEyNTQ5MTgwLCJpYXQiOjE1MTI1NDczODB9.WYuREVWAvotq5glWvUwY91nTs2i82vrSlS3Vsn8Io5NVN-UDbWrHscnw9GeXO6qn2OK6sWxKmp1ZbKgYSharsCgenE8tTkh0EnROygvq8Nf58pZw03weBgnKqC_ty9D4CKwko6jtMemTV3vCbI5vCjYXghB8UqsQEuTD91X6zDyXkOQm-rnuMDV0zCFvJSg81X76AF0HhiF5bN6AHvamshcqXAtuElWtq7QD_W-QCqW4eu--u-YgWRCuVeaP_E9bIV5A2vj2ouY6M7dj6As7l8pqwYdSF-6WF6NNKeAYHFQDlCeyXQ-UjMCsnIoNwNkQo-ZtNJpWmcgF19beOUU93A" "https://localhost:8089/abc/def?k1=v1&k1=v11&k2=v2" --insecure

---

# Document 777: Service Model Definition - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205655925/Service+Model+Definition
**Categories:** chunks_index.json

A service model contains definitions of objects that represent dimensions, metrics, KPIs, and alarm thresholds. The service model also describes these objects, e g the metrics and dimensions that are required to calculate a KPI. Open Service model objects and dependencies The metric and dimension objects are mapped to specific fields in the KDR input. The figures in the example below illustrate how the input data is mapped to a KDR and finally to dimensions and a metric. Example - Mapping objects to KDR input The UDR types below have a startTime field that can be used for triggering start and closing of period, i e timestamp field of the KDR is populated with this value. If this type of field does not exist, you can generate a timestamp from APL. The UDRs RecA and RecB have a different set of fields but it is possible to define dimensions and metrics for the set fields that are available in each type. For instance, a metric can be defined so that it is calculated based on valueX for type 1 and valueY for type 2. You may use any string value as a type identifier. In this example the recordType field is used to identify the type. Open Ultra configuration The KDRs are populated with the values from the collected UDRs. The keys in the value field of the KDR (hereafter also referred to as "fields") can be selected arbitrarily but have to be unique within the KDR. These fields will be referenced in the metric and dimension definitions of the service model. At this point it would have been possible to treat both UDR types, RecA and RecB , as a single type. In this case you would assign the same field names to both records. For instance, myvalue instead of valueX or valueY . The fields that will be used for metric calculations must be numerical types, e g int, long, float, double etc. Open APL configuration The service model has two dimensions, Region and Site . There are two references for each of the dimensions, one for the respective types. For type 1, the model references the field region to retrieve the instantiated name of Region . For type 2, it references the field named district . It is assumed here that these will serve an identical purpose even though the original UDRs have distinct formats. The service model has a simple structure under the tree object that indicates that Region is the parent dimension to Site . This tree has a single root node, tree1 , but you may add multiple root nodes. For instance, if a site may span multiple regions, you may want to add a second tree where the hierarchal order is reversed. The service model has one metric that calculates an average value. Similar to the dimension, there are references for each type in the expression (expr). The expression only contains one field name, which will return its actual value as a floating-point number (double). You may perform more complex calculations using functions, operators, and a combination of fields. For further information, see metric . Finally the the dimensions, metric, and the tree are combined to define two KPIs. When you apply this model in KPI Management, the output in each period will be the Average metric for the two dimensions, Region and Site . The length of the periods is specified by windowSize , which will have the same unit as the input value. For instance, if the value in the timestamp field of the KDR has the unit seconds, the period length will be 60 seconds. Open Service model Object Types Overview These are the main object types in the service model: Object Type Description Object Type Description dimension The dimension objects represent values that are extracted from KDR UDRs and are used for grouping in KPI calculations. For instance, if the input data contains a field that represents a geographic region, it can be mapped to an object instance named "Region". Example - JSON Representation "dimension": { "Region": { "kdr_record_type_a": "region_name" } } For further information about the dimension object type, see dimension . tree The tree objects contain nodes that describe the hierarchical structure of the dimensions. The name of a tree object constitutes the root node of a tree. The root node may have one or more child nodes, e g "Region". A child node in turn may have its own child nodes, e g "City" or "Site", and so on. Example - JSON Representation "tree": { "tree1": { "Region": { "Site": {} } } } For further information about the tree object type, see tree . metric The metric objects represent values that are extracted from KDR UDRs and aggregated according to the tree structure in the model. Expressions are applied on the various fields in the UDRs to calculate a value, e g a sum, average, or min/max value. Example - JSON Representation "metric": { "AvgDuration": { "fun": "avg", "expr": { "kdr_record_type_a": "field2-field1", "kdr_record_type_b": "field3" } } } For further information about the metric object type, see metric . threshold The threshold objects contain a set of level objects that define limits for the KPIs. When a limit is exceeded within a defined period, a threshold object and a level object are referenced in the KPIOutput UDRs. You can define the limit values for a threshold object in ascending or descending order. Example - JSON Representation "threshold": { "Region.AD": { "orderDescending": true, "levels": { "1": { "alarmDescription": "", "value": 200 }, "2": { "alarmDescription": "", "value": 100 } } } } For further information about the threshold object type, see threshold . kpi The kpi objects describe how metrics are linked to dimensions and threshold levels. You may configure kpi objects to perform additional calculations based on metrics, e g ratios or sums of ratios. Example - JSON Representation "kpi": { "Region.AD": { "node": [ "tree1", "Region" ], "windowSize": 60, "threshold": "Region.AD", "expr": "AvgDuration" } } For further information about the kpi object type, see kpi .

---

# Document 778: Database Forwarding Agent Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204640422/Database+Forwarding+Agent+Configuration
**Categories:** chunks_index.json

You open the Database forwarding agent configuration dialog from a workflow configuration. To open the Database forwarding agent configuration, click Build  New Configuration . Select Workflow from the Configurations dialog. When prompted to select workflow type, select Batch . Click Add Agent and select Database from the Forwarding tab of the Agent Selection dialog. Target Tab Open Database forwarding agent configuration dialog - Target tab The Target tab contains configurations related to the target database table and the UDR type that will populate it with data. Setting Description Setting Description UDR Type Type of UDR to populate the target database table. Database Profile defining the database that the agent is supposed to connect and forward data to. The list is populated each time the configuration dialog is opened. For further information about database profile setup, see Database Profile . Note! When you change the Database profile or update the content of the database. Click the Refresh button to update the information that is displayed in the Target tab. The Database forwarding agent does not support Fast Connection Failover (FCF) used when using an Oracle RAC enabled database for the database agent. Use Default Database Schema Select this check box to use the default database schema for the chosen database and user. Note! This is not applicable for all database types. Use Default Database Schema is available for selection only when accessing Oracle databases. Tables within the default schema will be listed without schema prefix. Access Type Determines if the insertion of data is to be performed directly into the target table, or via a stored procedure. Direct - Insertion of data is performed directly. Stored Procedure - Insertion of data is performed via a stored procedure. Table Name or SP Name Depending on the selected Access Type , the target database table name, or the stored procedure name, is selected. The list is populated each time a new Database or Access Type is selected. For further information and an example of a working table, see Working Table in Tables and Stored Procedures . For further information about the stored procedure, see Database Forwarding Target Stored Procedure in Tables and Stored Procedures . Note! For Oracle the default schema is omitted; the name of a table or SP that belongs to the current database user appears without the schema prefix. Transaction ID Column Name of the column in the selected table, or the parameter from the selected stored procedure, which is used for the Transaction ID Column . The list is populated each time a Table Name or SP Name is selected. The column must be of the data type number for Oracle and bigint for PostgreSQL, SAP HANA, MSSQL and Sybase, which can support at least 12 digits. Cleanup SP If the selected Access Type is Stored Procedure , the agent does not automatically clean up the target table, in case of a workflow abortion (Cancel Batch). If that is the case, the customer must supply a stored procedure that manages the cleanup. For further information and an example of a Cleanup Stored Procedure, see Cleanup Stored Procedure in Tables and Stored Procedures . SP Target Table Name of the target table for the stored procedure. This field is only enabled if the >Access Type is Stored Procedure . If this agent is chained with a Database collection agent in another workflow, both agents need to be aware of the mutual table. In the collection agent, a table to collect from is always selected. However, in the forwarding agent, it is possible to select the update of the table to be done via a stored procedure. If that is the case, the target table for the stored procedure must be selected here. For further information, see Pending Transaction Table in Inter-Workflow Communication, Using Database Agents . Note! The correct name of the SP Target Table must be selected, or else a Database collection agent will be able to collect pending data that is not supposed to be collected. This may cause data duplication. Run SP If enabled, this option causes a user defined stored procedure to be called when the forwarding process terminates. It will then receive the transaction ID for the forwarded rows as input. This option is used for transaction safety when the table is read from another system, to ensure no temporary rows are read. Rows are classified as temporary until End Batch is reached. In case of a crash before End Batch is reached, the workflow needs to be restarted for the temporary rows to be expunged. Caution! MediationZone specific database tables from the Platform database must never be utilized as targets for output. This may cause severe damage to the system in terms of data corruption that in turn may make the system unusable. Assignment Tab Open Database forwarding agent configuration dialog - Assignment tab The Assignment tab contains the assignment of values to each column or stored procedure parameter. The content and use of this tab is described further in Assignments in Mapping Assignments between Database Fields and UDR Fields . The Column Name column does not necessarily contain column names. If Stored Procedure is selected as the Access Type , this column will hold the names of all incoming parameters that the stored procedure expects. If the Target tab is correctly configured and the Assignment tab is selected, the table will automatically be populated, as if Refresh was clicked. If assignments already exist in the Assignment tab, then Refresh must be manually selected, for the assignments to be updated with the configurations in the Target tab. Note! Potential changes in the database table will not be visible until you click Refresh in the Target tab All Value Types , described in Value Types in Mapping Assignments between Database Fields and UDR Fields , except for To UDR, are available for selection. Note! When using Function as Value Type, question marks embedded in strings are not allowed. The system will interpret a question mark as a parameter. Advanced Tab Open Database forwarding agent configuration dialog - Advanced tab The Advanced tab contains a setting for performance tuning and viewing the generated SQL statement, based on the configuration in the Target and Assignment tabs. Setting Description Setting Description Commit Window Size The number of UDRs (rows) to be inserted or removed between each database commit command. This value may be used to tune the performance. If tables are small and contain no Binary Objects, the value may be set to a higher value than the default. Default is 1000. The window size can be set to any value between 1-60000, where setting 1 means that commit is performed after 1 UDR, and setting 60000 means that commit is performed after 60000 UDRs. Rows are inserted for each UDR that is fed to the agent. All UDRs are stored in memory between each database commit command, to enable rollback. Rows are removed at the next workflow startup in case of a crash recovery. General SQL Statement In this area, the SQL statement that will be used to populate the database, is shown. This field may not be edited, however, it is useful for debug purposes or for pure interest. In order for the statement to appear, the Target and Assignment tabs have to be properly configured, or else information about the first detected missing or erroneous setting is displayed.

---

# Document 779: Workflow - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204736609/Workflow
**Categories:** chunks_index.json

A workflow configuration enables you to create a workflow consisting of: A workflow template, the schema of the agents, and routes that you design on the canvas. A list of workflows that share the same settings and are included in the configuration. The workflow properties: Workflow table: The appearance of the table that displays the list of workflows and any configuration specific to each workflow. Error handling: Sets how errors are handled for the workflow. Audit settings: Map the audit data to an audit table in a database. Execution options: Set up ways to execute your workflows. Note! Every workflow configuration is a single entity, regardless of the number of workflows it contains. You create a new workflow configuration from the Build view of the Desktop User Interface. To open a workflow configuration, click Build  New Configuration . Select Workflow from the Configurations dialog. To open an existing workflow configuration, click Build and select the workflow configuration in the Configuration Browser, or right-click a workflow configuration and then select View Configuration . Info! If this is your first time working with a workflow, it is recommended that you start your reading here at Workflow Template . This section includes the following subsections: Workflow Types Multithreading Version Management Workflow Buttons Agent Selection Dialog Workflow Template Workflow Table Workflow Properties Workflow Validation Workflow Monitor Deactivation Issues

---

# Document 780: Backup Routines for the Data Repository - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205783404/Backup+Routines+for+the+Data+Repository
**Categories:** chunks_index.json

This section describes the backup routines for the Data Repository, how to backup and restore the system, as well as the daily and weekly maintenance tasks that you are recommended to perform. Backups for Couchbase For information on how to do backups of the Couchbase Cluster, see the official Couchbase documentation: https://docs.couchbase.com/home/index.html . Backup and Maintenance for Redis You can specify how you want to back up and maintain your Redis cluster via the Advanced Settings in your ElastiCache Dashboard. Open Dialog to configure backup and maintenence for ElastiCache Alternatively, you can do a manual backup by selecting the Backup button in the ElastiCache Dashboard. For further information, see https://aws.amazon.com/documentation/elasticache/ . Backup and Maintenance for MySQL Cluster If you do not have access to a web interface to create and restore backups, you can use a command line tool Making a Backup To start a backup using a command line tool: Start a command line tool and go to the scripts directory: $ cd mysqlcluster-91/cluster/scripts Run the script for starting the backup: $ ./start-backup.sh /<path to the directory where you want to save the backup files> Restoring Backups To restore a backup using a command line tool: Start a command line tool and go to the scripts directory: $ cd mysqlcluster-71/cluster/scripts Run the script for restoring a backup: $ ./restore-backup.sh --backupdir=/<path to the directory where the backup is stored, including the actual backup directory>

---

# Document 781: Advanced Access Settings - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205849351/Advanced+Access+Settings
**Categories:** chunks_index.json

The following advanced settings are always available in the Access Controller: Number Of Consecutive Erroneous Login Attempts - The maximum number of failed login attempts that are permitted Enable Logging For User Login - Failed login attempts are logged in the System Log. Reauthenticate Users After Inactivity  Users must reauthenticate after a period of inactivity in the Desktop or mzsh shell. Time of Inactivity Before Reauthentication (Minutes)  This is a configurable inactivity period. Enable Automatic Unlocking of Users  Automatically unlock accounts that have been disabled due to failed login attempts. Time Before Automatic Unlocking (Minutes)  This is the time that must pass before a locked account is automatically unlocked by the system. Authentication Method - User authentication is by default performed in MediationZone. As an alternative, you can connect MediationZone to an external LDAP directory for delegated authentication. This facilitates automation of administrative tasks such as creation of users and assigning access groups. Open Advanced settings and authentication method If the external authentication server returns an error or cannot be accessed, MediationZone will perform the authentication internally as a fallback method.

---

# Document 782: LDAP Agent Events - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204673900/LDAP+Agent+Events
**Categories:** chunks_index.json

Agent Message Events There are no agent message events for this agent. For further information about the agent message event type, see Agent Event . Debug Events There are no debug events for this agent. For information about the debug event type, see Debug Event .

---

# Document 783: SCP Agents Overview and Preparations - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205001892/SCP+Agents+Overview+and+Preparations
**Categories:** chunks_index.json

The SCP protocol is intended for use with SSH servers that do not support the SFTP protocol. SCP is applied by issuing remote shell commands over the SSH connection with server systems that understand standard shell commands such as the Unix command syntax. Prior to configuring an SCP agent, consider the following preparation notes: Server Identification Attributes Authentication Server Keys The section contains the following subsections: SCP Agents Attributes and Authentication SCP Agents Server Identification SCP Agents Server Keys

---

# Document 784: Approve Delete - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205652166/Approve+Delete
**Categories:** chunks_index.json

The Approve Delete allows users with write access to Data Veracity and Data Veracity Approve Delete applications to approve or reject the deletion of Data Veracity records with the PRE_DELETE state. For more information on User Privileges Management, please refer to User Privileges Management . Open Data Veracity - Approve Delete Viewing PRE_DELETE Data Veracity Records To view PRE_DELETE records, follow the steps below: You must first select a Data Veracity profile. Click the Filter button to open the Filter dialog. Click Browse to select the Data Veracity profile. The UDRs will be grouped according to their UDR types and Data Veracity Profiles while the batch files will be grouped according to the Data Veracity Profiles they are assigned to. Click on Review at the Actions column for a UDR or batch group that you wish to review. At the review page, all records marked for PRE_DELETE will be listed in the table. Example Query Results of PRE_DELETE UDRs Review Sort Order Sorting is done from the Data Veracity Database via SQL query statement and so the sorting behavior will depend on the behavior of the Data Veracity Database(for example, sorting of alphabetical characters in Oracle and SAP HANA is case sensitive, whereas in PostgreSQL it is case insensitive). You may select display fields you would like to view in the table. Meta data fields are selected by default. The table will be updated as fields are removed or added. Display Field selection dialog box View UDR is only applicable and visible when record type is UDR. Click on View UDR at the Actions column to inspect a UDR and view the field and values present in the UDR. Example - Viewing a UDR Approving PRE_DELETE Data Veracity Records When the Data Veracity records have been viewed, inspected and the decision is made to delete the records, you can then approve the deletion of the records. To approve the records for deletion, you can: click on Approve at the Actions column to approve a single record for deletion. select the records you will want to approve for deletion then click on Approve button in the result table menu bar. click on Approve button in the result table menu bar when all of the records are deselected if you wish to approve for deletion all the records in the result table. Click OK when prompted to confirm the approval. This will change the state on the selected records to DELETE_APPROVED. Example - Approving UDRs for Deletion Rejecting PRE_DELETE Data Veracity Records You can also reject the deletion of a Data Veracity record, especially if there are still any issues with the record. Rejecting the deletion of records will cause the state of the records to be changed back to NEW, ready to be reprocessed by the Data Veracity Collection Agent once more. To reject the records for deletion, you can: click on Reject at the Actions column to reject a single record for deletion. select the records you will want to reject for deletion then click on Reject button in the result table menu bar. click on Reject button in the result table menu bar when all of the records are deselected if you wish to reject for deletion all the records in the result table. Click OK when prompted to confirm the rejection. This will change the state on the selected UDRs to NEW, ready to be reprocessed by the Data Veracity Collection agent again. Example - Rejecting UDRs for Deletion Export Data Veracity Records Data Veracity allows you to export all Data Veracity records in the table into a zipped file. Click the Export button in the result table menu bar. In the Export search result dialog, enter the following: Filename - The export filename should contains alphanumeric- or dash (-) characters. Do not add a file extension or a path. Delimiter - You can enter a character or string that should represent the separator token, e.g. a comma or a semi-colon. Open Export search result dialog Select the check box Include Header to add the column names to first row in the file. Click the OK button. A dialog box containing a link to download the zipped file will be displayed. All the columns of the table that is specified in Display Field will be included in the file.

---

# Document 785: Web Service Provider Agent Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205035114/Web+Service+Provider+Agent+Configuration
**Categories:** chunks_index.json

To open the Web Service Provider agents' configuration, click Build  New Configuration . Select Workflow from the Configurations dialog. When prompted to Select workflow type , select Realtime . Click Add agent and select Web Service in the Collection tab, in the Agent Selection dialog. Double-click the agent icon or right-click the icon and select Edit agent , to display the Agent Configuration dialog. Open The Web Service provider agent configuration dialog Setting Description Setting Description Web Service Profile Click on the Browse button and select the appropriate user defined WS profile. Workflow Response Timeout (ms) Determines the number of milliseconds the Web Service Provider agent will wait for a response from the Workflow before timeout. If a timeout occurs in the provider agent, an error message will be logged in the System Log and no response message will be sent to the requesting client. Idle Timeout (ms) The maximum time that may elapse after some progress being made on the connection before timing out. If it is set to 0, the timeout will be set to 30 seconds. Enable WSDL Validation Select this check box to enable validation of WSDL. HTTP This tab is highlighted when the selected WS profile is configured with either HTTP or HTTPS as the transfer protocol. Setting Description Setting Description Extract Profile Settings Click on this button to automatically fill in the settings from the Service Port Definition in the profile. Address Settings HTTP Address Enter the complete URL address, including port, for the web service used to connect to the information requesting client. Authentication Enable Basic Access Authentication Select this check box to enable Basic Access Authentication. Username Enter the username that should be provided by the requesting client when using Basic Access Authentication. Password Enter the password that should be provided by the requesting client when using Basic Access Authentication. Raw XML Enable Route Raw XML Select this checkbox to enable route SOAP XML message functionality. The only security option supported for this functionality TLS. Route Raw XML to Select the dedicated route to redirect SOAP XML message. This option is available only when you select the Enable Route Raw XML checkbox. Note! When Basic Access Authentication is enabled, in order to perform a request, the client program will have to provide credentials such as username and password. Otherwise, a HTTP 401 status code will be returned.

---

# Document 786: Installation Overview - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204996719/Installation+Overview
**Categories:** chunks_index.json

The system installation consists of the following steps: Install a Platform Container. Install Execution Containers (optional). This step is required if you want to distribute the system across multiple hosts, or if you want to use separate Containers for your Platform and ECs. When running the regular Desktop in a web browser, nothing more is needed, but if you want to use the legacy Desktop, you need to do one additional step: Install and configure a Desktop Launcher, see Installing the Desktop Launcher . For information about how to configure the installed system for high availability, see High Availability .

---

# Document 787: Unit Test Framework - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205816514/Unit+Test+Framework
**Categories:** chunks_index.json

The Unit Test Framework enables test of workflows and APL Profiles. The tests are configured using Python programming language in the Unit Test Profile, and executed as Task Workflows. Test configuration can be exported and imported the same way as any other configuration. Examples of available test functions: Examine events, logs and produced files by a workflow. Test global APL functions. It is possible to create and populate UDRs and pass on as parameters. Produced test reports are in the format of Unit XML files. Open Unit Test Configuration UI, and resulting debug information in the Workflow Monitor UI.

---

# Document 788: GCP PubSub Subscriber Agent Input/Output Data and MIM - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205000390/GCP+PubSub+Subscriber+Agent+Input+Output+Data+and+MIM
**Categories:** chunks_index.json

Input/Output Data This section includes information about the data type that the agent expects and delivers. The agent produces bytearray types. MIM For information about the MIM and a list of the general MIM parameters, see MIM . Publishes The following MIM parameters are published at agent level: MIM Parameter Description messagesReceived This MIM parameter states that the messages have been received but still outstanding for delivery (pending acknowledgement). messagesAcknowledged This MIM parameter states that the messages have been acknowledged through the ACK. messagesNacked This MIM parameter states that the messages have been received but failed for delivery. The PubSub will attempt to redeliver such messages. Accesses The agent does not access any MIM resources.

---

# Document 789: GCP Agents - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205652761
**Categories:** chunks_index.json

This section describes the GCP agents and associated profiles and it contains the following subsections: GCP Profile GCP PubSub Profile GCP PubSub Agents GCP BigQuery Agent GCP Storage Agents

---

# Document 790: Map Functions - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204646156/Map+Functions
**Categories:** chunks_index.json

This section describes functions that enable use of hash maps. The following functions for Map described here are: 1 mapClear 2 mapContains 3 mapCreate 4 mapCreateSync 5 mapCreateOrdered 6 mapGet 7 mapKeys 8 mapRemove 9 mapSet 10 mapSize 11 mapValues mapClear Removes all entries in a map. void mapClear (map<any,any> myLittleMap ); Parameter Description Parameter Description myLittleMap The map to clear Returns Nothing mapContains Evaluates if a key is present in a map. boolean mapContains ( map<any,any> myMap , any myKey ); Parameter Description Parameter Description myMap Name of the map to evaluate myKey The requested key Returns true or false mapCreate Creates a new, empty map. map<any,any> mapCreate ( any myKeyType , any myValueType ); Parameter Description Parameter Description myKeyType Defines the data type of the keys in the map myValueType Defines the data type of the values, associated with the keys in the map Returns An empty map Example - Using mapCreate An example of a map definition, including assignment of the first key/value pair. map<string,int> myMap = mapCreate( string, int); mapSet( myMap, "Failed", 22 ); mapCreateSync Creates a new, empty synchronized map. This function may be useful for global maps in real time workflows, where the same map may be accessed from several threads at the same time. map<any,any> mapCreateSync ( any myKeyType , any myValueType ); Parameter Description Parameter Description myKeyType Defines the data type of the keys in the map myValueType Defines the data type of the values, associated with the keys in the map Returns An empty map Example - Using mapSet An example of a map definition, including assignment of the first key/value pair. map<int,string> mySyncMap = mapCreateSync( int, string); mapSet( mySyncMap, 55, "Successful" ); mapCreateOrdered Creates a new, empty ordered map. This function may be useful when the order of keys is of interest. map<any,any> mapCreateOrdered ( any myKeyType , any myValueType ); Parameter Description Parameter Description myKeyType Defines the data type of the keys in the map myValueType Defines the data type of the values, associated with the keys in the map Returns An empty map Example - Using mapCreate An example of a map definition, including assignment of the first key/value pair. map<string,int> myOrderedMap = mapCreateOrdered( string, int); mapSet( myOrderedMap, "Key1", 22 ); mapSet( myOrderedMap, "Key2", 45 ); mapGet Retrieves the value of a specified key in a map. valueType mapGet ( map<key,value> myMap , keyType key ); Parameter Description Parameter Description myMap The name of the map from which you want to retrieve a value key The name of the key holding the value to you want to retrieve Returns Returns the value associated with the key. The data type of the returned value is the same as the defined value type for the map. If there is no matching key mapGet will return null, false or 0 depending on type. Note - using mapGet If the map is map<int,string> . The return type of "mapGet" will be "string". mapKeys Returns a list of all keys present in a map. Note that the order of the elements in the list is not defined. list<any> mapKeys(map<any,any> myMap ); Parameter Description Parameter Description myMap The map to fetch all keys from Returns An unsorted list of keys according to: [keyA, keyB, keyX...] The data type of the list elements is the same data type as defined for the keys in the map. mapRemove Removes a key and its corresponding value. any mapRemove ( map<any, any> myMap , any myKey ); Parameter Description Parameter Description myMap The map to remove a key from myKey The name of the key to remove Returns The value corresponding to the removed key mapSet Sets or updates a key's associated value. void mapSet ( map<any, any> myMap , any myKey , any myKeyValue ); Parameter Description Parameter Description myMap The map to update myKey The name of the key to set/update myKeyValue The corresponding value to set/update Returns Nothing mapSize Returns the number of keys present in a map. int mapSize( map<any,any> myMap ); Parameter Description Parameter Description myMap The map to examine Returns The size of the map in terms of number of keys mapValues Returns a list of all values present in a map. Note that the order of the elements in the list is not defined. list<any>mapValues(map<any, any> myMap ); Parameter Description Parameter Description myMap The map to fetch all values from Returns A list of all values (unsorted): [valueA, valueB, valueX...]. The data type of the list elements is the same data type as defined for the values in the map.

---

# Document 791: OAuth Functions - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204743584/OAuth+Functions
**Categories:** chunks_index.json

This section describes functions that relates to OAuth operations. The following functions for OAuth described here are: 1 validateJwt 2 validateAndDecodeJwt validateJwt Validates an incoming OAuth JWT. string validateJwt( string openIdServer, string token, map <string, any> claimsToValidate, //Optional string algorithm //Optional) Parameters Parameter Description Parameter Description openIdServer This is the JSON Web Key Set (JWKS) endpoint of an OpenID Connect (OIDC) server. For example, https://<server_domain>/.well-known/jwks.json The JWKS endpoint returns the public key set in JSON format shown below, that can be used to validate the signature of the JWT (token) issued by the OIDC provider. JWKS Cache The cache is accessible only from the backend and cannot be updated by users. It is used to reduce the number of connections to the openIdServer and will be reset if the workflow is aborted. { "[openIdServer + kid #1]": { "use": "sig", "kty": "RSA", "kid": "e1583dde-e337-4bda-abf5-85a8fed1bafb", "alg": "RS256", "n": "** public key in here **", "e": "AQAB" }, "[openIdServer + kid #2]": { "use": "sig", "kty": "RSA", "kid": "e1583dde-e337-4bda-abf5-85a8fed1bafa", "alg": "RS256", "n": "** public key in here **", "e": "AQAB" } } The public key can be used to verify the integrity of a JWT, ensuring that it has not been tampered with. token This refers to the JWT (Json Web Token) that needs to be validated. claimsToValidate An optional map field to declare the claims as well as the corresponding value to validate against the token. algorithm An optional field to verify the signing algorithm used by the token. The possible values could be RSA256, RSA384, RSA512, ECDSA256, ECDSA384, ECDSA512. By default, the APL function uses RSA256. Returns An error message on validation failure. Null on validation success. Example Example of the validateJwt function with optional values for claims and algorithm populated. string token = "eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJhcHBpZGFjciI6IjIiLCJhdWQiOiJhZTQ3ZThmZC1iMmJlLTQ2MjYtYTdiNS0xOWQyODk2MWJhMWUiLCJjbGllbnRfaWQiOiIxMjM0LTEyMzQtMTIzNC0xMjM0In0.plstF-xhshrrLKi3Q8J1c5FUSoUImSoYLIs5aaQ-3mvjyVpCtoqnty-Tm5zNWCj_mIRo3aQvnq5IDLUF7VsBc9l-y6vlbcXHdAT3xs3R8x_Lw72tN_t_btyt9Haof7_1DgyxKoQMf7QiwsRX6S8XHk5sWKxJ96zxOLGJdO_HvEPfJKA2eFlK3Tvm715_Bfzp_gOMMyEY1PX5ZKvD9sGsb3kZLpv9Tk8uvaWvU9AFx59paDEAAEbEOo-M27zP9rR_qecSymuDMspHl7zWmBG9kbmrJY-pMScMaHRJiGzORMCs59Nd29Kn-_w0OPPmMV6RTdWbvrgTTU_EUB9JY44rlw"; map<string, any> claimsToValidate = mapCreate(string, any); mapSet(claimsToValidate, "appidacr", "2"); mapSet(claimsToValidate, "aud", "ae47e8fd-b2be-4626-a7b5-19d28961ba1e"); string error_message = JwtValidation.validateJwt("https://10.60.10.30/endpoint", token, claimsToValidate, "RSA512"); validateAndDecodeJwt Validates an incoming OAuth JWT with the error message and decoded payloads as return. JwtValidationResult validateAndDecodeJwt( string openIdServer, string token, map <string, any> claimsToValidate, //Optional string algorithm //Optional) Parameters Parameter Description Parameter Description openIdServer This is the JSON Web Key Set (JWKS) endpoint of an OpenID Connect (OIDC) server. For example, https://<server_domain>/.well-known/jwks.json The JWKS endpoint returns the public key set in JSON format shown below, that can be used to validate the signature of the JWT (token) issued by the OIDC provider. JWKS Cache The cache is accessible only from the backend and cannot be updated by users. It is used to reduce the number of connections to the openIdServer and will be reset if the workflow is aborted. { "[openIdServer + kid #1]": { "use": "sig", "kty": "RSA", "kid": "e1583dde-e337-4bda-abf5-85a8fed1bafb", "alg": "RS256", "n": "** public key in here **", "e": "AQAB" }, "[openIdServer + kid #2]": { "use": "sig", "kty": "RSA", "kid": "e1583dde-e337-4bda-abf5-85a8fed1bafa", "alg": "RS256", "n": "** public key in here **", "e": "AQAB" } } The public key can be used to verify the integrity of a JWT, ensuring that it has not been tampered with. token This refers to the JWT (Json Web Token) that needs to be validated. claimsToValidate An optional map field to declare the claims as well as the corresponding value to validate against the token. algorithm An optional field to verify the signing algorithm used by the token. The possible values could be RSA256, RSA384, RSA512, ECDSA256, ECDSA384, ECDSA512. By default, the APL function uses RSA256. Returns An JwtValidationResult UDR which consists of error message on validation failure and decoded payloads. The error message will be Null on validation success. Example Example of the validateAndDecodeJwt function with optional values for claims and algorithm populated. import ultra.JwtValidation; string token = "eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJhcHBpZGFjciI6IjIiLCJhdWQiOiJhZTQ3ZThmZC1iMmJlLTQ2MjYtYTdiNS0xOWQyODk2MWJhMWUiLCJjbGllbnRfaWQiOiIxMjM0LTEyMzQtMTIzNC0xMjM0In0.plstF-xhshrrLKi3Q8J1c5FUSoUImSoYLIs5aaQ-3mvjyVpCtoqnty-Tm5zNWCj_mIRo3aQvnq5IDLUF7VsBc9l-y6vlbcXHdAT3xs3R8x_Lw72tN_t_btyt9Haof7_1DgyxKoQMf7QiwsRX6S8XHk5sWKxJ96zxOLGJdO_HvEPfJKA2eFlK3Tvm715_Bfzp_gOMMyEY1PX5ZKvD9sGsb3kZLpv9Tk8uvaWvU9AFx59paDEAAEbEOo-M27zP9rR_qecSymuDMspHl7zWmBG9kbmrJY-pMScMaHRJiGzORMCs59Nd29Kn-_w0OPPmMV6RTdWbvrgTTU_EUB9JY44rlw"; map<string, any> claimsToValidate = mapCreate(string, any); mapSet(claimsToValidate, "appidacr", "2"); mapSet(claimsToValidate, "aud", "ae47e8fd-b2be-4626-a7b5-19d28961ba1e"); JwtValidationResult result = (JwtValidationResult) JwtValidation.validateAndDecodeJwt("https://10.60.10.30/endpoint", token, claimsToValidate, "RSA512"); // To get the decoded payloads map<string, any> claimsMap = result.claims; debug(mapGet(claimsMap, "client_id")); // To get the error message debug(result.errorMessage); This chapter includes the following section: JWT Validation Result UDR

---

# Document 792: Other User Interface Components - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204645142/Other+User+Interface+Components
**Categories:** chunks_index.json

The DTK contains some useful components that may be utilized in the user interface classes. These classes include: UDR selection MIM selection There are two components where UDR Types and UDR fields may be selected; DJUDRTypeSelector and DJUDRFieldSelector . They both operate in single or multiple selection mode. In single mode, only one UDR Type or UDR field may be selected, while in multiple mode several may be selected. An instance of the DJUDRBrowser is used to select the UDR Types or UDR fields. In single mode, the browser will by default contain a Clear button, which will clear the selected value. The selection components hold various get and set methods where UDR Types and fields may be set and obtained. Since the launched browser is specific for each selection component, it is advised to set a unique title by calling the method setUDRBrowserTitle and to use a combination of the agent name and the component name in the title. MIM Selection The DJMIMBrowser is a dialog where a MIM value may be selected. It has two corresponding selection components; DJMIMSelector and DJSingleMIMSelector , where one or multiple MIM values may be selected.

---

# Document 793: Restricted Fields - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205652257/Restricted+Fields
**Categories:** chunks_index.json

This is only applicable to UDR Data Veracity records. Restricted Fields allows users to prevent certain fields from being repaired from the desktop and task agent. Fields that have been restricted will not be available for selection when setting the repair rules. Only users with Write permissions for Data Veracity and Data Veracity Restricted Fields Application will be able to manage the restricted fields entries. For more information on User Privileges Management, please refer to User Privileges Management . In Restricted Fields, you can view, edit and delete the restricted field entries. Open Data Veracity - Restricted Fields Restricted Fields Sort Order Sorting by UDR column is based on Javas default sorting behavior for Strings(for example, sorting of alphabetical characters in Java is case sensitive). Adding new Restricted Fields To add one or more fields to be restricted, follow the steps below: Click the New button. This will prompt the New Restricted Fields dialog box. Open Data Veracity - Adding a new restricted field Select the relevant Data Veracity Profile and the UDR type. Click Save and the new entry will appear in the Restricted Fields table. Only one entry per UDR type can be created at any one time. Editing a Restricted Field Restricted field entries can be edited when there are new fields to be added into the restriction list. To edit a restricted field, follow the steps below: Select an entry and click the Edit button. This will prompt the Edit Restricted Fields dialog box. Open Example - Editing a restricted field Click Add to add more restricted fields or click Remove to remove the existing restricted field(s) from the entry. Click Save to update the selected entry. Deleting a Restricted Field entry Restricted Field entries can only be deleted from the Restricted Field function. Deleting a restricted field entry here will remove it completely from Data Veracity. To delete a restricted field, you can select one or many entries at once and then click on the Delete button. You will be prompted with a message to confirm the deletion of the selected restricted fields. Click OK to proceed with the deletion. Open Example - Deleting a restricted field

---

# Document 794: HTTP/2 Client Agent Input/Output Data and MIM - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204673533/HTTP+2+Client+Agent+Input+Output+Data+and+MIM
**Categories:** chunks_index.json

Input Data RequestCycle, see HTTP/2 UDRs . Output Data RequestCycle, see HTTP/2 UDRs . MIM For information about the MIM and a list of the general MIM parameters, see MIM . This agent does not publish or access any MIM parameters.

---

# Document 795: GCP Storage Agents - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204607769
**Categories:** chunks_index.json

The GCP Storage agents collect and forward batches of files from specified buckets in the Google Cloud Platform, and are available in batch workflow configurations. This section contains the following subsections: GCP Storage Collection Agent GCP Storage Forwarding Agent

---

# Document 796: Web Service Example - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204675364/Web+Service+Example
**Categories:** chunks_index.json

This example demonstrates a configuration of a simplified use of a Premium-SMS payment procedure, performed with the Web Service agents. The Web Service configuration consists of three main steps: Defining a WS profile Configuring a Web Service Provider workflow Configuring a Web Service Requester workflow The section contains the following subsections: Web Service Example - Defining the Web Service Profile Web Service Example - Creating a Web Service Provider Workflow Web Service Example - Creating a Web Service Request Workflow Web Service Example - Running the Workflows

---

# Document 797: SSL Configuration - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/301138028/SSL+Configuration
**Categories:** chunks_index.json

When you configure SSL for Kafka, there are a few considerations you need to make for batch workflows. Since the system saves the transactions in Kafka via the two automatically created topics txn_status and wf_txn , a batch workflow will always act as both producer and consumer even if the workflow contains only a collection Kafka agent or only a forwarding Kafka agent. This means that you need to configure SSL for both consumer and producer in the Kafka Profile used for all batch workflows. To set up SSL using Java Keystore: Configure a Security profile with Java Keystore: Open Security profile with Java Keystore configured If you want to have separate Security profiles for the Consumer and Producer, configure a second Security profile in the same way as described in step one, otherwise skip to the next step. Configure the Kafka profile with the relevant Security profile selected for the consumer and producer, and SSL properties configured in both the Advanced | Producer and Advanced | Consumer tabs, even if your workflow only contains a Collection or only a Forwarding Agent. Open Security profile selected for Consumer and Producer Open SSL properties set for Consumer Open SSL properties configured for Producer

---

# Document 798: PostgreSQL Database Creation - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204669918/PostgreSQL+Database+Creation
**Categories:** chunks_index.json

The creation of the database must be made by the postgres UNIX user, or another UNIX user with the same privileges, on the machine where PostgreSQL is installed. The postgres UNIX user is assumed in this installation. Configure the PostgreSQL database to allow a remote client connection to the database. The working directory is $PGDATA . Edit the pg_hba.conf file to match the settings in install.xml . See Appendix D - PostgreSQL HBA Settings for an example. When the files have been configured, the PostgreSQL database needs to be restarted. Create the PostgreSQL database instance. The working directory is postgres . $ source ./postgre_create_instance.sh If no error occurs, the database creation is complete and the rest of this section can be ignored. Hint! When the instance creation script is executed, a log file in the /tmp directory is created that can be used for troubleshooting. The mz.log file contains PostgreSQL responses from the database creation. If the script fails, cleanup the system before the next try: Start PSQL: $ psql Remove the Database and Users: postgres=# DROP DATABASE mz; postgres=# DROP USER mzowner; postgres=# DROP USER mzadmin; postgres=# q If there is a need to change any installation parameter defined in the file install.xml , the installation must be restarted from the generation step. For further information, see Extract Database Definition Files for PostgreSQL .

---

# Document 799: Workflow Table Tab - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204604819/Workflow+Table+Tab
**Categories:** chunks_index.json

This tab lets you select information to display in the workflow configuration table, and set specific table cells to different value modes such as Final , Default , or Per Workflow . The Workflow Table tab Item Description Item Description Field Selection Use this drop-down list to display the following in the Workflow Table: Fields of a certain agent Show All to show all the fields Show Final Select this checkbox to list in the table below only the fields that are set to Final . Show Unavailable Select this checkbox to list the fields that are write-protected. The unavailable fields are grayed-out and set to Final . Name The field names of the Workflow Table are listed in this column and include: Execution Settings Throughput MIM Debug Type Dynamic Fields All the agents and their fields in the workflow configuration Final Select this checkbox to block this variable from appearing on the workflow table, Adding Workflow dialog and Edit Workflow dialog. For more information regarding the workflow table, refer to Workflow Table . Note! This variable can still be modified, but only from its configuration. For example, if the variable belongs to an agent, open the agent configuration dialog to modify the variable. Default You can select this checkbox to set the field value to Default only if it is already set to a certain value in the configuration. You can modify a default value from the workflow table; the default value remains in the field and appears grayed-out, and the new value appears in black text on its left, within the same field. Per Workflow Select this checkbox to be able to set the value of the relevant field for each workflow on the workflow table, separately. Note! If you cannot set Per Workflow for profiles in the workflow table, refer to the user guide of the agent that the profile is assigned to for further information. Enable External Reference Enable this checkbox to enable the use of External Reference values from within the workflow table. For further information, see External Reference Profile . Profile Click Browse to specify the External Reference profile. For further information see the section To Create an External Reference Profile in External Reference Profile . To Edit the Execution Context Field: In the Workflow Table tab, select the checkbox for either Default or Per Workflow for the Execution Settings field. Click OK . In the Workflow Table, select the checkbox for the workflow you want edit. Click the Edit button on the table toolbar or right-click and select Edit to bring up the Edit Workflow dialog. Check the Enable checkbox if Execution Settings has not been enabled for the workflow properties. Otherwise, select the Distribution for that particular workflow as well as any EC Groups that you want to associate with this workflow. For a detailed description see Execution Settings in Execution Tab . Example of Edit Workflow dialog with Execution Settings set to Per Workflow in the workflow properties.

---

# Document 800: File System Profile - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/205031291
**Categories:** chunks_index.json

The File System Profile is used to configure settings for different file systems. It works with Amazon S3 Agents , GCP Storage Agents , HDFS Agents , as well as the System Importer and System Exporter . These configurations depend on the specific file system being used. You can find more details about each file system in the subsection links at the bottom of this page. Open New Configuration - File system profile. The default File System Type is Git. External References Button Open Buttons in the File System Profile configuration The External References button is specific to the File System profile configuration. Click this button to enable External References in the File System profile configuration. This can be used to configure the fields shown in the following table File system type Fields available for configuration File system type Fields available for configuration Amazon S3 file systems Access Key Secret Key Bucket Region Advanced Properties HDFS file systems Host Replication Port Advanced Properties GCP file systems Project Id Private Key Id Private Key Client Email Client Id Other Information Bucket For further information on configuring external reference profiles , see Using External Reference in Agent Profile Fields and https://infozone.atlassian.net/wiki/x/7AozD . Subsections This section includes the following subsections: File System Type - Git File System Type - Amazon S3 File System Type - GCP Storage File System Type - HDFS

---

# Document 801: Compressor Agent - MediationZone Documentation 9.3 - InfoZone

**Source:** ratanon/mz93-documentation
**URL:** https://infozone.atlassian.net/wiki/spaces/MD93/pages/204640307/Compressor+Agent
**Categories:** chunks_index.json



---
**End of Part 35** - Continue to next part for more content.
