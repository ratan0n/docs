[
  {
    "chunk_id": 1,
    "text": "Menu Search field   Sign In  +1 Get Certified For Teachers Spaces Plus Get Certified For Teachers Spaces Plus   HTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS DSA TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AI R GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE INTRO TO PROGRAMMING BASH RUST HTML Tutorial HTML HOME HTML Introduction HTML Editors HTML Basic HTML Elements HTML Attributes HTML Headings HTML Paragraphs HTML Styles HTML Formatting HTML Quotations HTML Comments HTML Colors Colors RGB HEX HSL HTML CSS HTML Links Links Link Colors Link Bookmarks HTML Images Images Image Map Background Images The Picture Element HTML Favicon HTML Page Title HTML Tables HTML Tables Table Borders Table Sizes Table Headers Padding & Spacing Colspan & Rowspan Table Styling Table Colgroup HTML Lists Lists Unordered Lists Ordered Lists Other Lists HTML Block & Inline HTML Div HTML Classes HTML Id HTML Iframes HTML JavaScript HTML File Paths HTML Head HTML Layout HTML Responsive HTML Computercode HTML Semantics HTML Style Guide HTML Entities HTML Symbols HTML Emojis HTML Charsets HTML URL Encode HTML vs. XHTML HTML Forms HTML Forms HTML Form Attributes HTML Form Elements HTML Input Types HTML Input Attributes Input Form Attributes HTML Graphics HTML Canvas HTML SVG HTML Media HTML Media HTML Video HTML Audio HTML Plug-ins HTML YouTube HTML APIs HTML Web APIs HTML Geolocation HTML Drag and Drop HTML Web Storage HTML Web Workers HTML SSE HTML Examples HTML Examples HTML Editor HTML Quiz HTML Exercises HTML Website HTML Syllabus HTML Study Plan HTML Interview Prep HTML Bootcamp HTML Certificate HTML Summary HTML Accessibility HTML References HTML Tag List HTML Attributes HTML Global Attributes HTML Browser Support HTML Events HTML Colors HTML Canvas HTML Audio/Video HTML Doctypes HTML Character Sets HTML URL Encode HTML Lang Codes HTTP Messages HTTP Methods PX to EM Converter Keyboard Shortcuts HTML Web Workers API  Previous Next  A web worker is an external JavaScript file that runs in the background, without affecting the performance of the page. What is a Web Worker? When executing scripts in an HTML page, the page becomes unresponsive until the script is finished. A web worker is an external JavaScript file that runs in the background, independently of other scripts, without affecting the performance of the page. You can continue to do whatever you want: clicking, selecting things, etc., while the web worker runs in the background. Web workers are useful for heavy code that can't be run on the main thread, without causing long tasks that make the page unresponsive. Browser Support The numbers in the table specify the first browser version that fully support the Web Workers API. API Web Workers 4.0 10.0 3.5 4.0 11.5 Web Workers API Example The example below creates a simple web worker that count numbers in the background: Example Count numbers: Start Worker Stop Worker Try it Yourself  Note: Normally web workers are not used for such simple scripts, but for more CPU intensive tasks! Check Web Worker API Support Before using web worker, we can quickly check browser support: Example Test browser support: <script> const x = document.getElementById(\"result\"); if(typeof(Worker) !== \"undefined\") { x.innerHTML = \"Your browser support Web Workers!\"; } else { x.innerHTML = \"Sorry, your browser does not support Web Workers.\"; } </script> Try it Yourself  Create a .js Web Worker File Now, let's create a web worker in an external JavaScript file. Here we create a script that counts. The script is stored in the \"demo_workers.js\" file: var i = 0; function timedCount() { i = i + 1; postMessage(i); setTimeout(\"timedCount()\",500); } timedCount(); Note: The important part of the code above is the postMessage() method - which is used to post messages back to the HTML page. Create a Web Worker Object Once we have created the .js web worker file, we can call it from an HTML page. The following lines checks if a worker (w) already exists, if not - it creates a new web worker object and points to the .js file: \"demo_workers.js\": if (typeof(w) == \"undefined\") { w = new Worker(\"demo_workers.js\"); } Then we can SEND and RETRIEVE messages from the web worker. Data is sent between web workers and the main thread via a system of messages - both sides send their messages using the postMessage() method, and respond to messages via the onmessage event handler. Add an onmessage event listener to the web worker object. w.onmessage = function(event){ document.getElementById(\"result\").innerHTML = event.data; }; When the web worker in the .js posts a message, the code within the event listener is executed. The data from the web worker is stored in event.data . Terminate a Web Worker When a web worker object is created, it will continue to listen for messages until it is terminated. To terminate a web worker object, and free browser/computer resources, use the terminate() method: w.terminate(); Reuse the Web Worker If you set the web worker variable to undefined, after it has been terminated, you can reuse the worker/code: w = undefined; Full Web Worker Example We have already seen the Web Worker code in the .js file. Below is the full code for the HTML page: Example <!DOCTYPE html> <html> <body> <p>Count numbers: <output id=\"result\"></output></p> <button onclick=\"startWorker()\">Start Worker</button> <button onclick=\"stopWorker()\">Stop Worker</button> <script> let w; function startWorker() { const x = document.getElementById(\"result\"); if (typeof(Worker) !== \"undefined\") { if (typeof(w) == \"undefined\") { w = new Worker(\"demo_workers.js\"); } w.onmessage = function(event) { x.innerHTML = event.data; }; } else { x.innerHTML = \"Sorry! No Web Worker support.\"; } } function stopWorker() { w.terminate(); w = undefined; } </script> </body> </html> Try it Yourself  Web Workers and the DOM Since web workers are in external .js files, they do not have access to the following JavaScript objects: The window object The document object The parent object  Previous Next   +1 Track your progress - it's free! Log in Sign Up COLOR PICKER PLUS SPACES GET CERTIFIED FOR TEACHERS FOR BUSINESS CONTACT US  Contact Sales If you want to use W3Schools services as an educational institution, team or enterprise, send us an e-mail: sales@w3schools.com Report Error If you want to report an error, or if you want to make a suggestion, send us an e-mail: help@w3schools.com Top Tutorials HTML Tutorial CSS Tutorial JavaScript Tutorial How To Tutorial SQL Tutorial Python Tutorial W3.CSS Tutorial Bootstrap Tutorial PHP Tutorial Java Tutorial C++ Tutorial jQuery Tutorial Top References HTML Reference CSS Reference JavaScript Reference SQL Reference Python Reference W3.CSS Reference Bootstrap Reference PHP Reference HTML Colors Java Reference Angular Reference jQuery Reference Top Examples HTML Examples CSS Examples JavaScript Examples How To Examples SQL Examples Python Examples W3.CSS Examples Bootstrap Examples PHP Examples Java Examples XML Examples jQuery Examples Get Certified HTML Certificate CSS Certificate JavaScript Certificate Front End Certificate SQL Certificate Python Certificate PHP Certificate jQuery Certificate Java Certificate C++ Certificate C# Certificate XML Certificate     FORUM ABOUT ACADEMY W3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning. Tutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness of all content. While using W3Schools, you agree to have read and accepted our terms of use , cookie and privacy policy . Copyright 1999-2025 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS .",
    "title": "HTML Web Workers API",
    "url": "https://www.w3schools.com/html/html5_webworkers.asp",
    "word_count": 1223,
    "char_count": 7791
  }
]